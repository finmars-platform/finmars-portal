[
  {
    "name": "To string",
    "description": "<p>Any value to string</p>",
    "func": "str(a)"
  },
  {
    "name": "Contains",
    "description": "<p>String a contains or not in string b</p>",
    "func": "contains(a, b)"
  },
  {
    "name": "To integer",
    "description": "<p>Convert string to integer</p>",
    "func": "int(a)"
  },
  {
    "name": "To float",
    "description": "<p>Convert string to number</p>",
    "func": "float(a)"
  },
  {
    "name": "Round",
    "description": "<p>Match round float</p>",
    "func": "round(number)"
  },
  {
    "name": "Trunc",
    "description": "<p>Match truncate float</p>",
    "func": "trunc(a)"
  },
  {
    "name": "Is close",
    "description": "<p>Compare to float numbers to equality</p>",
    "func": "isclose(a, b)"
  },
  {
    "name": "iff",
    "description": "<p>Return a if x is True else v2</p>",
    "func": "iff(expr, a, b)"
  },
  {
    "name": "Now",
    "description": "<p>Current date</p>",
    "func": "now()"
  },
  {
    "name": "Date",
    "description": "<p>Create date object</p>",
    "func": "date(year, month=1, day=1)"
  },
  {
    "name": "Days",
    "description": "<p>Create timedelta object for operations with dates <br/> now() - days(10)<br/> now() + days(10)</p>",
    "func": "days(a)"
  },
  {
    "name": "Weeks",
    "description": "<p>Create timedelta object for operations with dates <br/> now() - weeks(10)<br/> now() + weeks(10)</p>",
    "func": "weeks(a)"
  },
  {
    "name": "Months",
    "description": "<p>Create timedelta object for operations with dates <br/> now() - months(10)<br/> now() + months(10)</p>",
    "func": "months(a)"
  },
  {
    "name": "Timedelta",
    "description": "<p>General timedelta creation</p><p>years, months, weeks, days:<br/> Relative information, may be negative (argument is plural); adding or subtracting a relativedelta with relative information performs the corresponding aritmetic operation on the original datetime value with the information in the relativedelta.</p><p>leapdays:<br/> Will add given days to the date found, if year is a leap year, and the date found is post 28 of february.</p>",
    "func": "timedelta(years=0, months=0, days=0, leapdays=0, weeks=0)"
  },
  {
    "name": "Add days",
    "description": "<p>Same as date + days(x)</p>",
    "func": "add_days(date, days)"
  },
  {
    "name": "Add weeks",
    "description": "<p>Same as d + days(x * 7)</p>",
    "func": "add_weeks(date, days)"
  },
  {
    "name": "Add workdays",
    "description": "<p>Add 'x' work days to d</p>",
    "func": "add_workdays(date, workdays)"
  },
  {
    "name": "Format date",
    "description": "<p>format date (default format is '%Y-%m-%d')</p>",
    "func": "format_date(date, format='%Y-%m-%d')"
  },
  {
    "name": "Parse date",
    "description": "<p>parse date from string (default format is '%Y-%m-%d')</p>",
    "func": "parse_date(date_string, format='%Y-%m-%d')"
  },
  {
    "name": "Format number",
    "description": "<p>format float number<br/> <br/> decimal_sep:<br/> Decimal separator symbol (for example '.')<br/> decimal_pos:<br/> Number of decimal positions<br/> grouping:<br/> Number of digits in every group limited by thousand separator<br/> thousand_sep:<br/> Thousand separator symbol (for example ',')<br/> use_grouping:<br/> use thousand separator</p>",
    "func": "format_number(number, decimal_sep='.', decimal_pos=None, grouping=3, thousand_sep='', use_grouping=False)"
  },
  {
    "name": "Parse number",
    "description": "<p>same as float(a)</p>",
    "func": "parse_number(a)"
  },
  {
    "name": "Simple price",
    "description": "<p>calculate price on date using 2 point (date1, value1) and (date2, value2)</p>",
    "func": "simple_price(date, date1, value1, date2, value2)"
  }
]