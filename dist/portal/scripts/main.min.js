(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Created by szhitenev on 16.06.2016.
 *
 */
(function () {

    'use strict';

    var getCookie = function (name) {
        var cookieValue = null;
        if (document.cookie && document.cookie != '') {
            var cookies = document.cookie.split(';');
            for (var i = 0; i < cookies.length; i++) {
                var cookie = jQuery.trim(cookies[i]);
                // Does this cookie string begin with the name we want?
                if (cookie.substring(0, name.length + 1) == (name + '=')) {
                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                    break;
                }
            }
        }
        return cookieValue;
    };

    var setCookie = function (name, value, options) {
        options = options || {};

        var expires = options.expires;

        if (typeof expires == "number" && expires) {
            var d = new Date();
            d.setTime(d.getTime() + expires * 1000);
            expires = options.expires = d;
        }
        if (expires && expires.toUTCString) {
            options.expires = expires.toUTCString();
        }

        value = encodeURIComponent(value);

        var updatedCookie = name + "=" + value;

        for (var propName in options) {
            updatedCookie += "; " + propName;
            var propValue = options[propName];
            if (propValue !== true) {
                updatedCookie += "=" + propValue;
            }
        }

        document.cookie = updatedCookie;
    };

    var deleteCookie = function () {
        setCookie(name, "", {expires: -1})
    };

    module.exports = {
        getCookie: getCookie,
        setCookie: setCookie,
        deleteCookie: deleteCookie
    }

}());
},{}],2:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */

(function(){

    'use strict';

    var themeColors = {
        property: '65,199,132',
        collection: '79,195,247',
        event: '239,83,80',
        controller: '224,224,224',
        component: '179,157,219',
        service: '236,64,122'
    };

    var importanceResolve = function(color, importance){
        if(importance < 10) {
            return 'rgba(' + color +' ,.' + importance + ')';
        } else {
            return 'rgba(' + color +' , 1)';
        }
    };

    var property = function(name, value, importance, styles){
        var imp = importance || 10;
        var css = styles || 'color: ' + importanceResolve(themeColors.property, imp);
        console.log('%c{"property": "' + name +'", "value": "', css, value, '"}');
    };

    var collection = function(name, value, importance, styles){
        var imp = importance || 10;
        var css = styles || 'color: ' + importanceResolve(themeColors.collection, imp);
        console.log('%c{"collection": "' + name +'", "data":', css, value , '}');
    };

    var event = function(name, event, importance, styles){
        var imp = importance || 10;
        var css = styles || 'color: ' + importanceResolve(themeColors.event, imp);
        console.log('%c{"event": "' + name +'", "data": "' + event + '"}', css);
    };

    var controller = function(name, status, importance, styles) {
        var imp = importance || 10;
        var css = styles || 'color: ' + importanceResolve(themeColors.controller, imp);
        console.log('%c{"controller": "' + name +'", "status": "' + status + '"}', css);
    };

    var component = function(name, status, importance, styles) {
        var imp = importance || 10;
        var css = styles || 'color: ' + importanceResolve(themeColors.component, imp);
        console.log('%c{"component": "' + name +'", "status": "' + status + '"}', css);
    };

    var service = function(name, status, importance, styles) {
        var imp = importance || 10;
        var css = styles || 'color: ' + importanceResolve(themeColors.service, imp);
        console.log('%c{"service": "' + name +'", "status": "' + status + '"}', css);
    };

    module.exports = {
        property: property,
        collection: collection,
        event: event,
        controller: controller,
        component: component,
        service: service
    }


}());
},{}],3:[function(require,module,exports){
(function() {
	'use strict';

	var logService = require('../../../../../core/services/logService');
	var tagService = require('../../../../../portal/scripts/app/services/tagService');
	var threadService = require('../../services/threadService');

	var usersService = require('../../../../../portal/scripts/app/services/usersService');
	var usersGroupService = require('../../../../../portal/scripts/app/services/usersGroupService');
	
	module.exports = function ($scope, $mdDialog, threadId) {
		var vm = this;

		vm.tags = [];
		tagService.getListByContentType("thread", "tag").then(function (data) {
			vm.tags = data.results;
			$scope.$apply();
		});

		vm.thread = [];
		threadService.getByKey(threadId).then(function(data) {
			// vm.thread = data.results;
			vm.thread = data;
			vm.threadName = data.subject;
			vm.threadTags = data.tags[0];
			vm.loadPermissions();
			$scope.$apply();
		})

		vm.readyStatus = {permissions: false};
		vm.groups = [];
		vm.members = [];

		vm.loadPermissions = function () {

			var promises = [];

			promises.push(vm.getGroupList());
			promises.push(vm.getMemberList());

			Promise.all(promises).then(function (data) {

				// vm.readyStatus.permissions = true;
				// $scope.$apply();
			});

		};

		vm.getGroupList = function () {
			return usersGroupService.getList().then(function (data) {

				vm.groups = data.results;

				vm.groups.forEach(function (group) {

					if (vm.thread["group_object_permissions"]) {
						vm.thread["group_object_permissions"].forEach(function (permission) {

							if (permission.group == group.id) {
								if (!group.hasOwnProperty('objectPermissions')) {
									group.objectPermissions = {};
								}
								if (permission.permission === "manage_thread") {
									group.objectPermissions.manage = true;
								}
								if (permission.permission === "change_thread") {
									group.objectPermissions.change = true;
								}
							}
						})
					}

				});
			});

		};

		vm.getMemberList = function () {
			usersService.getMemberList().then(function (data) {

				vm.members = data.results;

				vm.members.forEach(function (member) {

					if (vm.thread["user_object_permissions"]) {
						vm.thread["user_object_permissions"].forEach(function (permission) {

							if (permission.member == member.id) {
								if (!member.hasOwnProperty('objectPermissions')) {
									member.objectPermissions = {};
								}
								if (permission.permission === "manage_thread") {
									member.objectPermissions.manage = true;
								}
								if (permission.permission === "change_thread") {
									member.objectPermissions.change = true;
								}
							}
						})
					}

				});

				vm.readyStatus.permissions = true;

				$scope.$apply();
			});
		};

		vm.cancel = function () {
			$mdDialog.cancel();
		};

		vm.agree = function () {

			console.log('tags to send', typeof vm.threadTags, [vm.threadTags]);

			vm.thread["group_object_permissions"] = [];
			vm.groups.map(function (group) {


				if (group.objectPermissions && group.objectPermissions.manage == true) {
					vm.thread["group_object_permissions"].push({
						"group": group.id,
						"permission": "manage_thread"
					})
				}

				if (group.objectPermissions && group.objectPermissions.change == true) {
					vm.thread["group_object_permissions"].push({
						"group": group.id,
						"permission": "change_thread"
					})
				}

			});

			vm.thread["user_object_permissions"] = [];
			vm.members.map(function (member) {


				if (member.objectPermissions && member.objectPermissions.manage == true) {
					vm.thread["user_object_permissions"].push({
						"member": member.id,
						"permission": "manage_thread"
					})
				}

				if (member.objectPermissions && member.objectPermissions.change == true) {
					vm.thread["user_object_permissions"].push({
						"member": member.id,
						"permission": "change_thread"
					})
				}

			});

			$mdDialog.hide({status: 'agree', data: {name: vm.threadName, tags: vm.threadTags, groups_permissions: vm.thread["group_object_permissions"], users_permissions: vm.thread["user_object_permissions"]}});
		};

		vm.getGroupList();
		vm.getMemberList();

	}
}());
},{"../../../../../core/services/logService":2,"../../../../../portal/scripts/app/services/tagService":390,"../../../../../portal/scripts/app/services/usersGroupService":398,"../../../../../portal/scripts/app/services/usersService":399,"../../services/threadService":22}],4:[function(require,module,exports){
(function() {
	'use strict';

	var logService = require('../../../../../core/services/logService');
	var threadGroupService = require('../../services/threadGroupService');
	var threadService = require('../../services/threadService');
	var tagService = require('../../../../../portal/scripts/app/services/tagService');

	var usersService = require('../../../../../portal/scripts/app/services/usersService');
	var usersGroupService = require('../../../../../portal/scripts/app/services/usersGroupService');

	module.exports = function ($scope, $mdDialog, threadsGroupId) {
		var vm = this;	

		console.log('threadsGroupId is', threadsGroupId);
		vm.tags = [];
		tagService.getListByContentType("thread-group", "tag").then(function (data) {
			vm.tags = data.results;
			console.log('forum group tags is', vm.tags, data);
			$scope.$apply();
		});

		vm.threadGroup = [];
		vm.loadThreadGroups = function () {
			return threadGroupService.getByKey(threadsGroupId).then(function(data) {
				vm.threadGroup = data;
				if (vm.threadGroup.name && vm.threadGroup.name.length) {
					vm.threadsGroupName = vm.threadGroup.name;
				}
				if (vm.threadGroup.tags && vm.threadGroup.tags.length) {
					vm.threadsGroupTags = vm.threadGroup.tags[0];
				}
			});
		}

		vm.loadThreadList = function () {
			return threadService.getList({threadGroup: threadsGroupId}).then(function(data) {
				vm.threadList = data.results;
				console.log('thread list is', vm.threadList);
				vm.loadPermissions();
			});
		}

		vm.loadAllThreads = function() {
			var promises = [];

			promises.push(vm.loadThreadGroups());
			promises.push(vm.loadThreadList());

			Promise.all(promises).then(function (data) {

				// vm.readyStatus.permissions = true;
				$scope.$apply();
			});
		}

		vm.readyStatus = {permissions: false};
		vm.groups = [];
		vm.members = [];

		vm.loadPermissions = function () {

			var promises = [];

			promises.push(vm.getGroupList());
			promises.push(vm.getMemberList());

			Promise.all(promises).then(function (data) {

				// vm.readyStatus.permissions = true;
				// $scope.$apply();
			});

		};

		vm.getGroupList = function () {
			return usersGroupService.getList().then(function (data) {

				//console.log('data MEMBERS', data);

				vm.groups = data.results;

				vm.groups.forEach(function (group) {

					if (vm.threadList["group_object_permissions"]) {
						vm.threadList["group_object_permissions"].forEach(function (permission) {

							if (permission.group == group.id) {
								if (!group.hasOwnProperty('objectPermissions')) {
									group.objectPermissions = {};
								}
								if (permission.permission === "manage_thread_list") {
									group.objectPermissions.manage = true;
								}
								if (permission.permission === "change_thread_list") {
									group.objectPermissions.change = true;
								}
							}
						})
					}

				});
			});

		};

		vm.getMemberList = function () {
			usersService.getMemberList().then(function (data) {

				//console.log('data MEMBERS', data);

				vm.members = data.results;

				vm.members.forEach(function (member) {

					if (vm.threadList["user_object_permissions"]) {
						vm.threadList["user_object_permissions"].forEach(function (permission) {

							if (permission.member == member.id) {
								if (!member.hasOwnProperty('objectPermissions')) {
									member.objectPermissions = {};
								}
								if (permission.permission === "manage_thread_list") {
									member.objectPermissions.manage = true;
								}
								if (permission.permission === "change_thread_list") {
									member.objectPermissions.change = true;
								}
							}
						})
					}

				});

				vm.readyStatus.permissions = true;

				$scope.$apply();
			});
		};

		vm.cancel = function () {
			$mdDialog.cancel();
		};

		vm.agree = function () {

			vm.threadList["group_object_permissions"] = [];
			
			vm.groups.map(function (group) {

				if (group.objectPermissions && group.objectPermissions.manage == true) {
					vm.threadList["group_object_permissions"].push({
						"group": group.id,
						"permission": "manage_thread_list"
					})
				}

				if (group.objectPermissions && group.objectPermissions.change == true) {
					vm.threadList["group_object_permissions"].push({
						"group": group.id,
						"permission": "change_thread_list"
					})
				}

			});

			vm.threadList["user_object_permissions"] = [];

			vm.members.map(function (member) {

				if (member.objectPermissions && member.objectPermissions.manage == true) {
					vm.threadList["user_object_permissions"].push({
						"member": member.id,
						"permission": "manage_thread_list"
					})
				}

				if (member.objectPermissions && member.objectPermissions.change == true) {
					vm.threadList["user_object_permissions"].push({
						"member": member.id,
						"permission": "change_thread_list"
					})
				}

			});

			$mdDialog.hide({status: 'agree', data: {tags: vm.threadsGroupTags, name: vm.threadsGroupName, groups_permissions: vm.threadList["group_object_permissions"], users_permissions: vm.threadList["user_object_permissions"]}});
		};

		vm.loadAllThreads();
	
	}
}());
},{"../../../../../core/services/logService":2,"../../../../../portal/scripts/app/services/tagService":390,"../../../../../portal/scripts/app/services/usersGroupService":398,"../../../../../portal/scripts/app/services/usersService":399,"../../services/threadGroupService":20,"../../services/threadService":22}],5:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function(){

    'use strict';

    module.exports = function($scope) {

    }

}());
},{}],6:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');
    var threadMessagesService = require('../services/threadMessagesService');
    var threadService = require('../services/threadService');

    module.exports = function ($scope, $stateParams, $mdDialog) {

        logService.controller('ForumThreadGroupListController', 'initialized');

        var vm = this;

        vm.readyStatus = {content: false};

        vm.threadId = $stateParams.threadId;
        vm.threadGroupId = $stateParams.groupId;
        vm.threadPageCurrent = 1;
        vm.itemPerPage = 20;

        threadService.getByKey(vm.threadId).then(function (data) {
            vm.thread = data;
            $scope.$apply();
        });

        vm.getList = function (params) {

            vm.readyStatus.content = false;

            console.log('vm.threadPageCurrent', vm.threadPageCurrent, $stateParams);

            if (params && params.position == 'last-page') {
                if (vm.threadMessagesTotal % vm.itemPerPage !== 0) {
                    vm.threadPageCurrent = Math.round(vm.threadMessagesTotal / vm.itemPerPage) + 1;
                } else {
                    vm.threadPageCurrent = Math.round(vm.threadMessagesTotal / vm.itemPerPage);
                }
            }

            if (vm.threadPageCurrent === 0) {
                vm.threadPageCurrent = 1;
            }
            var options = {page: vm.threadPageCurrent, thread: vm.threadId};

            console.log('OPTIONS', options);
            console.log('params', params);

            // threadMessagesService.getList(options).then(function (data) {
            // 	console.log('get message list full data', data);

            // 	vm.messages = data.results.map(function(item){
            // 		var messageText = JSON.parse(item.text);
            // 		if (typeof messageText === 'object') {
            // 			messageText.message =  messageText.message.replace(/(\r\n|\n|\r)/gm, "<br />");
            // 			item.text = messageText;
            // 		}
            // 		else {
            // 			item.text = item.text.replace(/(\r\n|\n|\r)/gm, "<br />");
            // 		}
            // 		console.log('message content is', some);
            // 		return item;
            // 	});
            // 	console.log(data.results);
            // 	vm.threadMessagesTotal = data.count;
            // 	vm.readyStatus.content = true;
            // 	$scope.$apply();

            // });

            threadMessagesService.getList(options).then(function (data) {

                vm.messages = data.results.map(function (item) {

                    if (item.text[0] == "{") {
                        item.text = JSON.parse(item.text);
                    }

                    return item;
                });
                console.log(data.results);
                vm.threadMessagesTotal = data.count;
                vm.readyStatus.content = true;
                $scope.$apply();

            });

        };

        vm.changePage = function (page) {
            console.log('PAGE', page);
            vm.threadPageCurrent = page;
            vm.getList();
        };

        vm.replyToMessage = function (event, item) {
            var options = {
                quote: {
                    item: item
                }
            };
            vm.write(event, options);
        };

        vm.write = function (ev, options) {
            var quote;
            if (options && options.hasOwnProperty('quote')) {
                quote = options.quote;
            }
            $mdDialog.show({
                controller: 'ForumWriteMessageDialogController as vm',
                templateUrl: 'views/forum-message-dialog-view.html',
                locals: {
                    options: {
                        quote: quote
                    }
                },
                parent: angular.element(document.body),
                targetEvent: ev
            }).then(function (res) {
                if (res.status === 'agree') {
                    threadMessagesService.create({
                        thread: vm.threadId,
                        text: JSON.stringify(res.data.message)
                    }).then(function () {
                        //console.log('Message created!');
                        vm.getList({position: 'last-page'});
                    })
                }
            });
        };

        vm.getList();

    }

}());
},{"../../../../core/services/logService":2,"../services/threadMessagesService":21,"../services/threadService":22}],7:[function(require,module,exports){
(function() {
	
	'use strict';

	var logService = require('../../../../core/services/logService');

	module.exports = function ($scope, $mdDialog) {

		logService.controller('threadGroupDialogController', 'initialized');

		var vm = this;

		vm.cancel = function () {
			$mdDialog.cancel();
		}

		vm.agree = function () {
			$mdDialog.hide({status: 'agree', data: {threadGroupTitle: vm.groupTitle}});
		}
	}

}());
},{"../../../../core/services/logService":2}],8:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function(){

	'use strict';

	var logService = require('../../../../core/services/logService');
	var threadGroupService = require('../services/threadGroupService');
	var threadService = require('../services/threadService');
	var tagService = require('../../../../portal/scripts/app/services/tagService');
	
	module.exports = function($scope, $mdDialog) {

		logService.controller('ForumThreadGroupListController', 'initialized');

		var vm = this;

		vm.readyStatus = {content: false};

		vm.getList = function(){
			threadGroupService.getList({page: 1}).then(function(data){
				console.log('threadGroup items', data.results);
				vm.threadGroups = data.results;
				vm.threadGroups.forEach(function (group) {
					group.filterTag = parseInt(group.tags[0]);
				});
				vm.readyStatus.content = true;
				console.log('thread groups tags', vm.threadGroups);
				$scope.$apply();
			});
		};

		vm.createThredsGroup = function (ev) {
			$mdDialog.show({
				controller: 'ForumThreadGroupDialogController as vm',
				templateUrl: 'views/forum-thread-group-dialog-view.html',
				targetEvent: ev
			}).then(function (res) {
				if (res.status === 'agree') {
					console.log(res, res.data);
					threadGroupService.create({name: res.data.threadGroupTitle}).then(function () {
						console.log('Threads group created');
						vm.getList();
					})
				}
			});
		};

		vm.editThreadsGroupsDialog = function (ev, threadsGroupId) {
			$mdDialog.show({
				controller: 'EditThreadsGroupsDialogController as vm',
				templateUrl: 'views/dialogs/edit-threads-groups-dialog-view.html',
				targetEvent: ev,
				locals: {
					threadsGroupId: threadsGroupId
				}
			}).then(function (data) {
				var threadsGroupTags = [];
				var parsedGroupTags = parseInt(data.data.tags);

				if (!isNaN(parsedGroupTags)) {
					if (typeof data.data.tags === 'string') {
						threadsGroupTags = [parsedGroupTags];
					}
					else {
						threadsGroupTags = [data.data.tags];
					}
				}
				var threadsGroupName = data.data.name;
				
				threadGroupService.update(threadsGroupId, {name: threadsGroupName, tags: threadsGroupTags}).then(function () {
					vm.getList();
				});

			});
		}

		vm.getTagList = function () {
			tagService.getListByContentType("thread-group", "tag").then(function (data) {
				vm.tags = data.results;
				$scope.$apply();
			});
		}

		vm.deleteThreadsGroup = function (id) {
			threadGroupService.deleteByKey(id).then(function () {
				vm.getList();
			});
		}

		vm.getTagList();
		vm.getList();

	}

}());
},{"../../../../core/services/logService":2,"../../../../portal/scripts/app/services/tagService":390,"../services/threadGroupService":20,"../services/threadService":22}],9:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function(){

	'use strict';

	var logService = require('../../../../core/services/logService');
	var threadService = require('../services/threadService');
	var threadGroupService = require('../services/threadGroupService');
	var tagService = require('../../../../portal/scripts/app/services/tagService');
	
	module.exports = function($scope, $stateParams, $mdDialog) {

		logService.controller('ForumThreadListController', 'initialized');

		var vm = this;

		vm.threadPageCurrent = 1;
		vm.itemPerPage = 20;

		vm.threadGroupId = $stateParams.groupId;
		console.log($stateParams, $scope);

		vm.threadGroupName = '';

		vm.readyStatus = {content: false};

		vm.getList = function(){
			var options = {page:vm.threadPageCurrent, threadGroup: vm.threadGroupId};
			threadService.getList(options).then(function(data){
				console.log(data, data.results);
				vm.threadMessagesTotal = data.count;
				vm.threads = data.results;
				vm.threads.forEach(function(thread) {
					thread.filterTag = thread.tags[0];
				});
				vm.readyStatus.content = true;
				$scope.$apply();

			});
		};
		tagService.getListByContentType("thread", "tag").then(function (data) {
			vm.tags = data.results;
			$scope.$apply();
		});
		vm.getThreadGroupName = function () {
			threadGroupService.getByKey(vm.threadGroupId).then(function (data) {
				vm.threadGroupName = data.name;
				$scope.$apply();
			});
		};
		vm.createThredsList = function (ev) {
			$mdDialog.show({
				controller: 'ForumThreadListDialogController as vm',
				templateUrl: 'views/forum-thread-list-dialog-view.html',
				targetEvent: ev
			}).then(function (res) {
				if (res.status === 'agree') {
					// console.log(res, res.data);
					threadService.create({subject: res.data.threadListTitle, thread_group: vm.threadGroupId}).then(function () {
						console.log('Thread list created');
						vm.getList();
					})
				}
			});
		};

		vm.editThreadDialog = function (ev, threadId) {
			$mdDialog.show({
				controller: 'EditThreadDialogController as vm',
				templateUrl: 'views/dialogs/edit-thread-dialog-view.html',
				targetEvent: ev,
				locals: {
					threadId: threadId
				}
			}).then(function (data) {

				var threadTags = [];
				var parsedThreadTags = parseInt(data.data.tags);

				if (!isNaN(parsedThreadTags)) {
					if (typeof data.data.tags === 'string') {
						threadTags = [parsedThreadTags];
					}
					else {
						threadTags = [data.data.tags];
					}
				}
				var threadName = data.data.name;
				// console.log('tags selected', threadTags, threadId);
				console.log('thread user permissions', data.data.users_permissions, 'thread groups permissions', data.data.groups_permissions);
				threadService.update(threadId, {subject: threadName, tags: threadTags, thread_group: vm.threadGroupId, group_object_permissions: data.data.groups_permissions, user_object_permissions: data.data.users_permissions}).then(function () {
					console.log("thread's tags updated");
					vm.getList();
				});
			});
		}

		vm.deleteThread = function (id) {
			threadService.deleteByKey(id).then(function () {
				vm.getList();
			});
		};

		vm.getList();
		vm.getThreadGroupName();

	}

}());
},{"../../../../core/services/logService":2,"../../../../portal/scripts/app/services/tagService":390,"../services/threadGroupService":20,"../services/threadService":22}],10:[function(require,module,exports){
(function() {
	
	'use strict';

	var logService = require('../../../../core/services/logService');

	module.exports = function ($scope, $mdDialog) {

		logService.controller('threadListDialogController', 'initialized');

		var vm = this;

		vm.cancel = function () {
			$mdDialog.cancel();
		}

		vm.agree = function () {
			$mdDialog.hide({status: 'agree', data: {threadListTitle: vm.listTitle}});
		}
	}

}());
},{"../../../../core/services/logService":2}],11:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');

    module.exports = function ($scope, $mdDialog, options) {

        logService.controller('WriteMessageDialogController', 'initialized');

        var vm = this;

        console.log('options---------------------', options);

        vm.isQuotation = false;

        vm.message = {
            quotation: {},
            text: ''
        };

        // var message = '';
        if (options && options.quote) {
            vm.isQuotation = true;
            vm.message.quotation = options.quote.item;


            // console.log('quotation info is ', vm.quotation);
            // var messageObj = {
            //     message: vm.message,
            //     quotation: vm.quotation
            // };
            // var message = JSON.stringify(messageObj);
        }
        // message = vm.message;

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree', data: {message: vm.message}});
        };


    };

}());
},{"../../../../core/services/logService":2}],12:[function(require,module,exports){
/**
 * Created by szhitenev on 31.03.2017.
 */
(function () {
    'use strict';

    module.exports = function () {
        return {
            restrict: 'E',
            scope: {
                item: '='
            },
            templateUrl: 'views/directives/bind-forum-quote-view.html',
            link: function (scope, elem, attr) {

            }
        }
    }
}());
},{}],13:[function(require,module,exports){
(function() {
	'use strict';

	module.exports = function () {
		return {
			restrict: 'E',
			scope: {
				tags: '='
			},
			templateUrl: 'views/directives/hide-by-tags-directive-view.html',
			link: function (scope, elem, attr) {
				scope.hideByTags = function () {
					var threads = $('md-card[data-tag-id]');
					var hiddenThreads = $('md-card[data-tag-id].ng-hide');
					// if there are hidden threads
					if (hiddenThreads.length > 0) {
						hiddenThreads.each(function () {
							var hiddenThread = $(this);
							hiddenThread.removeClass('ng-hide');
						});
					}

					threads.each(function () {
						var thread = $(this);
						var threadsTag = thread.data('tag-id');
						scope.tagsToHide.map(function(tag) {
							if (parseInt(threadsTag) === tag && !thread.hasClass('ng-hide')) {
								thread.addClass('ng-hide');
							}
						});
					}); 
				}
			}
		}
	}
}());
},{}],14:[function(require,module,exports){
/**
 * Created by sergey on 29.07.16.
 */
(function(){

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(baseUrl + 'chats/thread-group/?ordering=created&page=' + options.page,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'chats/thread-group/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (thread) {
        return window.fetch(baseUrl + 'chats/thread-group/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(thread)
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, thread) {
        return window.fetch(baseUrl + 'chats/thread-group/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(thread)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'chats/thread-group/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":18,"../services/configureRepositoryUrlService":19}],15:[function(require,module,exports){
/**
 * Created by sergey on 29.07.16.
 */
(function(){

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(baseUrl + 'chats/message/?ordering=created&thread=' + options.thread + '&page=' + options.page,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'chats/message/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (thread) {
        return window.fetch(baseUrl + 'chats/message/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(thread)
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, thread) {
        return window.fetch(baseUrl + 'chats/message/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(thread)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'chats/message/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":18,"../services/configureRepositoryUrlService":19}],16:[function(require,module,exports){
/**
 * Created by sergey on 29.07.16.
 */
(function(){

	'use strict';

	var cookieService = require('../../../../core/services/cookieService');
	var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
	var baseUrlService = require('../services/baseUrlService');

	var baseUrl = baseUrlService.resolve();

	var getList = function (options) {
		var fetchUrl = '';
		if (options.page && options.page.length) {
			fetchUrl = 'chats/thread/?ordering=created&page=' + options.page + '&thread_group=' + options.threadGroup;
		}
		else {
			fetchUrl = 'chats/thread/?ordering=created' + '&thread_group=' + options.threadGroup;
		}
		// return window.fetch(baseUrl + 'chats/thread/?ordering=created&page=' + options.page + '&thread_group=' + options.threadGroup,
		return window.fetch(baseUrl + fetchUrl,
			{
				method: 'GET',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				}
			}).then(function (data) {
			return data.json();
		})
	};

	var getByKey = function (id) {
		return window.fetch(baseUrl + 'chats/thread/' + id + '/',
			{
				method: 'GET',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				}
			}).then(function (data) {
			return data.json();
		})
	};

	var create = function (thread) {
		return window.fetch(baseUrl + 'chats/thread/',
			{
				method: 'POST',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				},
				body: JSON.stringify(thread)
			}).then(function (data) {
			return data.json();
		})
	};

	var update = function (id, thread) {
		return window.fetch(baseUrl + 'chats/thread/' + id + '/',
			{
				method: 'PUT',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				},
				body: JSON.stringify(thread)
			}).then(function (data) {
			return data.json();
		})
	};

	var deleteByKey = function (id) {
		return window.fetch(baseUrl + 'chats/thread/' + id + '/',
			{
				method: 'DELETE',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				}
			}).then(function (data) {
			return new Promise(function(resolve,reject) {
				resolve({status: 'deleted'});
			});
			//return data.json();
		})
	};

	module.exports = {
		getList: getList,
		getByKey: getByKey,
		create: create,
		update: update,
		deleteByKey: deleteByKey
	}

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":18,"../services/configureRepositoryUrlService":19}],17:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    module.exports = function ($stateProvider) {

        $stateProvider.state('app.forum', {
            url: '/forum',
            templateUrl: 'views/forum-shell-view.html',
            abstract: true,
            controller: 'ForumController as vm'

        }).state('app.forum.thread-groups', {
            url: '',
            templateUrl: 'views/forum-thread-groups-view.html',
            controller: 'ForumThreadGroupListController as vm'

        }).state('app.forum.threads-list', {
            url: '/:groupId',
            templateUrl: 'views/forum-threads-list-view.html',
            controller: 'ForumThreadListController as vm'

        }).state('app.forum.thread', {
            url: '/:groupId/thread/:threadId',
            templateUrl: 'views/forum-thread-view.html',
            controller: 'ForumThreadController as vm'

        })

    }


}());
},{}],18:[function(require,module,exports){
/**
 * Created by szhitenev on 07.12.2016.
 */
(function () {

    'use strict';

    var resolve = function () {

        var result = '';

        if(window.location.hostname == 'localhost') {
            result = 'http://' + window.location.host;
        }

        if(window.location.hostname == 'dev.finmars.com') {
            result = 'https://api.dev.finmars.com';
        }

        if(window.location.hostname == 'finmars.com') {
            result = 'https://api.finmars.com';
        }

        result = result + '/api/v1/';

        return result;
    };

    module.exports = {
        resolve: resolve
    }

}());
},{}],19:[function(require,module,exports){
/**
 * Created by szhitenev on 24.06.2016.
 */
(function () {

    'use strict';

    function entityPluralToSingular(key) {
        switch (key) {
            case 'instruments':
                return 'instrument';
            case 'accounts':
                return 'account';
                break;
            case 'portfolios':
                return 'portfolio';
                break;
            case 'responsibles':
                return 'responsible';
                break;
            case 'counterparties':
                return 'counterparty';
                break;
            case 'tags':
                return 'tag';
            default:
                return key;
                break;
        }
    }

    function configureUrl(url, options) {

        //console.log('OPTIOPNS', options);

        if (options) {

            url = url + '?page_size=' + options.pageSize;

            var keys = [];

            if (options.hasOwnProperty('filters')) {
                keys = Object.keys(options.filters);
                keys.forEach(function (keysItem) {
                    if (options.filters[keysItem]) {
                        var filterItems = options.filters[keysItem];
                        if (typeof filterItems === 'string') {
                            url = url + '&' + entityPluralToSingular(keysItem) + '=' + filterItems;
                        } else {
                            filterItems.map(function (filterItem, index) {
                                url = url + '&' + entityPluralToSingular(keysItem) + '=' + filterItem;
                            })
                        }
                    }
                })
            }

            if (options.hasOwnProperty('sort')) {
                if (options.sort.direction === 'ASC') {
                    url = url + '&ordering=' + options.sort.key
                } else {
                    url = url + '&ordering=-' + options.sort.key
                }
            }

            if (options.hasOwnProperty('page')) {
                url = url + '&page=' + options.page;
            }


            //console.log('URL------------------', url);
        }
        return url
    }

    module.exports = {
        configureUrl: configureUrl
    }

}());
},{}],20:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function(){

    'use strict';

    var threadGroupRepository = require('../repositories/threadGroupRepository');

    var getList = function(options){
        return threadGroupRepository.getList(options);
    };

    var getByKey = function(id){
        return threadGroupRepository.getByKey(id);
    };

    var create = function(thread){
        return threadGroupRepository.create(thread);
    };

    var update = function(id, thread){
        return threadGroupRepository.update(id, thread);
    };

    var deleteByKey = function(id){
        return threadGroupRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../repositories/threadGroupRepository":14}],21:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function(){

    'use strict';

    var threadMessagesRepository = require('../repositories/threadMessagesRepository');

    var getList = function(options){
        return threadMessagesRepository.getList(options);
    };

    var getByKey = function(id){
        return threadMessagesRepository.getByKey(id);
    };

    var create = function(thread){
        return threadMessagesRepository.create(thread);
    };

    var update = function(id, thread){
        return threadMessagesRepository.update(id, thread);
    };

    var deleteByKey = function(id){
        return threadMessagesRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../repositories/threadMessagesRepository":15}],22:[function(require,module,exports){
/**
 * Created by sergey on 30.07.16.
 */
(function(){

    'use strict';

    var threadRepository = require('../repositories/threadRepository');

    var getList = function(options){
        return threadRepository.getList(options);
    };

    var getByKey = function(id){
        return threadRepository.getByKey(id);
    };

    var create = function(thread){
        return threadRepository.create(thread);
    };

    var update = function(id, thread){
        return threadRepository.update(id, thread);
    };

    var deleteByKey = function(id){
        return threadRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../repositories/threadRepository":16}],23:[function(require,module,exports){
/**
 * Created by sergey on 29.07.16.
 */
'use strict';

(function () {

    var app = angular.module('forum', []);

    app.config(['$stateProvider', require('./app/router.js')]);

    app.run(function () {
        console.log('Forum initialized');
    });

    app.controller('ForumController', ['$scope', require('./app/controllers/forumController')]);
    app.controller('ForumThreadGroupListController', ['$scope', '$mdDialog', require('./app/controllers/forumThreadGroupListController')]);
    app.controller('ForumThreadListController', ['$scope', '$stateParams', '$mdDialog', require('./app/controllers/forumThreadListController')]);
    app.controller('ForumThreadController', ['$scope', '$stateParams', '$mdDialog', require('./app/controllers/forumThreadController')]);
    app.controller('ForumThreadGroupDialogController', ['$scope', '$mdDialog', require('./app/controllers/forumThreadGroupDialogController')])
    app.controller('ForumThreadListDialogController', ['$scope', '$mdDialog', require('./app/controllers/forumThreadListDialogController')]);
    app.controller('ForumWriteMessageDialogController', ['$scope', '$mdDialog', 'options', require('./app/controllers/forumWriteMessageDialogController')]);
    app.controller('EditThreadDialogController', ['$scope', '$mdDialog', 'threadId', require('./app/controllers/dialogs/editThreadDialogController')]);
    app.controller('EditThreadsGroupsDialogController', ['$scope', '$mdDialog', 'threadsGroupId', require('./app/controllers/dialogs/editThreadsGroupsDialogController')]);

    app.directive('hideByTags', [require('./app/directives/hideByTagsDirective')]);
    app.directive('bindForumQuote', [require('./app/directives/bindForumQuoteDirective')]);

    require('./templates.min.js');

    app.filter('forumFilterByTags', function () {
        return function (input, tags) {
            var filteredItems = []
            // loop through all items
            if (tags && tags.length) {
                input.map(function (inputItem) {
                    tags.map(function (tag) {
                        if (inputItem.tags[0] === tag) {
                            filteredItems.push(inputItem);
                        }
                    });
                });
            }
            else {
                input.map(function (item) {
                    filteredItems.push(item);
                });
            }
            return filteredItems;
        };
    });

}());
},{"./app/controllers/dialogs/editThreadDialogController":3,"./app/controllers/dialogs/editThreadsGroupsDialogController":4,"./app/controllers/forumController":5,"./app/controllers/forumThreadController":6,"./app/controllers/forumThreadGroupDialogController":7,"./app/controllers/forumThreadGroupListController":8,"./app/controllers/forumThreadListController":9,"./app/controllers/forumThreadListDialogController":10,"./app/controllers/forumWriteMessageDialogController":11,"./app/directives/bindForumQuoteDirective":12,"./app/directives/hideByTagsDirective":13,"./app/router.js":17,"./templates.min.js":24}],24:[function(require,module,exports){
!function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/forum-message-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="forum-send-message-dialog draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Write a message</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="column"><div data-ng-if="vm.isQuotation" style="margin-bottom: 24pxs"><bind-forum-quote item="vm.message.quotation"></bind-forum-quote></div><md-input-container flex="100" style="margin-bottom: 0"><label>Message</label><!-- <div data-ng-model="vm.message" contenteditable="true" cols="30" rows="10" data-ng-bind-html="vm.message | trustAsHtml" data-ng-change="vm.alertMessage()"></div> --><textarea data-ng-model="vm.message.text" contenteditable="true" cols="30" rows="10">\n\t\t\t\t</textarea></md-input-container></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Send</md-button></md-dialog-actions></md-dialog>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/forum-shell-view.html",'<div data-ui-view=""></div>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/forum-thread-group-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="thread-group-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Enter threads group title</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><md-input-container style="margin-bottom: 0"><label>Title</label><textarea data-ng-model="vm.groupTitle" cols="30" rows="10"></textarea></md-input-container></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Create</md-button></md-dialog-actions></md-dialog>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/forum-thread-groups-view.html",'<div><md-content class="forum-content-padding"><h2 class="forum-section-header list">Thread groups list</h2><div layout="row"><div layout="row" flex="50"><md-input-container class="margin-top-5"><label>Filter by tags</label><md-select aria-label="filter by tags" data-ng-model="vm.filterTags" multiple="true"><md-option data-ng-repeat="tag in vm.tags" ng-value="tag.id">{{tag.display_name}}</md-option></md-select></md-input-container><hide-by-tags tags="vm.tags"></hide-by-tags></div><div layout="row" layout-align="end center" flex="50"><md-button aria-label="create group" class="md-raised md-primary" data-ng-click="vm.createThredsGroup($event)">Create thread group</md-button></div></div><div data-ng-if="vm.readyStatus.content"><md-card class="group-forum-list-item" class="md-3-line" ng-repeat="item in vm.threadGroups | forumFilterByTags : vm.filterTags" data-tag-id="{{item.filterTag}}"><a href="" data-ui-sref="app.forum.threads-list({groupId: item.id})"><span data-ng-bind="item.name"></span></a><div class="forum-manage-buttons"><md-button aria-label="edit group" class="forum-manage-btn" data-ng-click="vm.editThreadsGroupsDialog(\'$event\', item.id)"><ng-md-icon icon="mode_edit" size="20"></ng-md-icon></md-button><md-button aria-label="delete group" class="forum-manage-btn" data-ng-click="vm.deleteThreadsGroup(item.id)"><ng-md-icon icon="clear" size="20"></ng-md-icon></md-button></div></md-card></div><div data-ng-if="!vm.readyStatus.content"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div><div layout="row" layout-align="end center"><md-button aria-label="create group" class="md-raised md-primary" data-ng-click="vm.createThredsGroup($event)">Create thread group</md-button></div></md-content></div>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/forum-thread-list-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="thread-list-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Enter threads list title</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><md-input-container style="margin-bottom: 0"><label>Title</label><textarea data-ng-model="vm.listTitle" cols="30" rows="10"></textarea></md-input-container></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Create</md-button></md-dialog-actions></md-dialog>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/forum-thread-view.html",'<div><md-content class="forum-content-padding"><h2 class="forum-section-header">Thread name: <span data-ng-bind="::vm.thread.subject"></span></h2><div layout="row"><div layout="row" flex="50" layout-align="start center"><md-button aria-label="back" ui-sref="app.forum.threads-list({groupId: vm.threadGroupId})" class="md-raised forum-back-btn" data-ng-click="vm.forumGoBackBtn()">Back</md-button><div paging page="vm.threadPageCurrent" page-size="vm.itemPerPage" total="vm.threadMessagesTotal" paging-action="vm.changePage(page)" class="global-pagination-div"></div></div><div layout="row" flex="50" layout-align="end center"><md-button aria-label="write" data-ng-click="vm.write($event)" class="md-raised md-primary">Write</md-button></div></div><div data-ng-if="vm.readyStatus.content"><!-- <md-list flex> --><!-- <md-list-item class="thread-forum-list-item" class="md-3-line" ng-repeat="item in vm.messages"\n            >\n                <h4 class="author-username" data-ng-bind="item.sender_object.username"></h4>\n                <p class="thread-message-text" data-ng-bind="item.text"></p>\n                <md-divider></md-divider>\n            </md-list-item> --><md-card class="thread-forum-list-item" data-ng-repeat="item in vm.messages"><div class="thread-message-content"><div layout="row" layout-align="start center" style="margin-bottom: 10px"><h4 class="author-username" data-ng-bind="item.sender_object.username"></h4><p class="thread-message-create-data" data-ng-bind="item.created | date:\'HH:mm dd/MM/yyyy\'"></p></div><div layout="column"><div data-ng-if="item.text.quotation" style="background: #f9f9f9; padding: 16px; margin-bottom: 24px"><bind-forum-quote item="item.text.quotation"></bind-forum-quote></div><div data-ng-if="item.text.quotation"><p class="thread-message-text" data-ng-bind-html="item.text.text | trustAsHtml"></p></div><div data-ng-if="!item.text.quotation"><p class="thread-message-text" data-ng-bind-html="item.text | trustAsHtml"></p></div></div><div layout="row" layout-align="end center"><md-button aria-label="reply" class="md-raised message-reply-btn" data-ng-click="vm.replyToMessage($event, item)">Reply</md-button></div></div><md-divider class="thread-message-divider"></md-divider></md-card><!-- </md-list> --><div layout="row"><div layout="row" flex="50" layout-align="start center"><md-button aria-label="back" ui-sref="app.forum.threads-list({groupId: vm.threadGroupId})" class="md-raised forum-back-btn" data-ng-click="vm.forumGoBackBtn()">Back</md-button><div paging page="vm.threadPageCurrent" page-size="vm.itemPerPage" total="vm.threadMessagesTotal" paging-action="vm.changePage(page)" class="global-pagination-div"></div></div><div layout="row" flex="50" layout-align="end center"><md-button aria-label="write" data-ng-click="vm.write($event)" class="md-raised md-primary">Write</md-button></div></div></div><div data-ng-if="!vm.readyStatus.content"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-content></div>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/forum-threads-list-view.html",'<div><md-content class="forum-content-padding"><h2>Thread group: <span data-ng-bind="vm.threadGroupName"></span></h2><h3 class="forum-section-header">Threads list</h3><div layout="row"><div layout="row" flex="50"><md-button aria-label="back" ui-sref="app.forum.thread-groups" class="md-raised forum-back-btn" data-ng-click="vm.forumGoBackBtn()">Back</md-button><md-input-container class="margin-top-5"><label>Filter by tags</label><md-select aria-label="" data-ng-model="vm.filterTags" multiple="true"><md-option data-ng-repeat="tag in vm.tags" ng-value="tag.id">{{tag.display_name}}</md-option></md-select></md-input-container><hide-by-tags tags="vm.tags"></hide-by-tags></div><div layout="row" layout-align="end center" flex="50"><md-button aria-lable="create thread" class="md-raised md-primary" data-ng-click="vm.createThredsList($event)">Create thread</md-button></div></div><div data-ng-if="vm.readyStatus.content"><md-card class="thread-forum-list-item" class="md-3-line" ng-repeat="item in vm.threads | forumFilterByTags : vm.filterTags" data-tag-id="{{item.filterTag}}"><a data-ui-sref="app.forum.thread({groupId: vm.threadGroupId, threadId: item.id})"><span data-ng-bind="item.subject"></span></a><md-divider></md-divider><div class="forum-manage-buttons"><md-button aria-label="edit thread" class="forum-manage-btn" data-ng-click="vm.editThreadDialog(\'$event\', item.id)"><ng-md-icon icon="mode_edit" size="20"></ng-md-icon></md-button><md-button aria-label="delete thread" class="forum-manage-btn" data-ng-click="vm.deleteThread(item.id)"><ng-md-icon icon="clear" size="20"></ng-md-icon></md-button></div></md-card></div><div data-ng-if="!vm.readyStatus.content"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div><div layout="row"><div layout="row" flex="50"><md-button aria-label="back" ui-sref="app.forum.thread-groups" class="md-raised forum-back-btn" data-ng-click="vm.forumGoBackBtn()">Back</md-button></div><div layout="row" layout-align="end center" flex="50"><md-button aria-label="create" class="md-raised md-primary" data-ng-click="vm.createThredsList($event)">Create thread</md-button></div></div></md-content></div>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/dialogs/edit-thread-dialog-view.html",'<md-dialog aria-label="edit thread" ng-cloak class="forum-dialog-padding forum-lg-dialog draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Edit thread</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><md-tabs md-dynamic-height><md-tab><md-tab-label><span class="colored-tab">General</span></md-tab-label><md-tab-body><md-content><div layout="row" class="forum-edit-general"><md-input-container flex="50"><label>Name</label><textarea data-ng-model="vm.threadName" cols="30" rows="10" data-ng-bind="vm.groupName"></textarea></md-input-container><md-input-container flex="50"><label>thread tags</label><md-select data-ng-model="vm.threadTags"><md-option value="">-</md-option><md-option data-ng-repeat="tag in vm.tags" data-ng-bind="tag.display_name" value="{{tag.id}}"></md-option></md-select></md-input-container></div></md-content></md-tab-body></md-tab><!-- <md-tab data-ng-if="vm.checkPermissions()"> --><md-tab data-ng-if="vm.groups && vm.members"><md-tab-label><span class="colored-tab">Permissions</span></md-tab-label><md-tab-body><md-content class="md-padding p-t-26"><md-content class="md-padding"><div data-ng-if="vm.readyStatus.permissions"><md-tabs md-dynamic-height md-border-bottom><md-tab label="User permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">User name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="member in vm.members" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ member["display_name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.manage" aria-label="member-manage" data-ng-change="vm.setMembersPermissions()"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.change" aria-label="member-change" data-ng-change="vm.setMembersPermissions()"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab><md-tab label="Group permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">Group name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="group in vm.groups" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ group["name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.manage" aria-label="group-manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.change" aria-label="group-change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.permissions"><div data-ng-if="!vm.members && !vm.groups"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div></md-content></md-content></md-tab-body></md-tab></md-tabs></md-dialog-content><md-dialog-actions layout="row"><md-button aria-label="cancel" class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button aria-label="save" class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Send</md-button></md-dialog-actions></md-dialog>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/dialogs/edit-threads-groups-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="forum-dialog-padding draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Edit group</h2><span flex></span></div></md-toolbar><md-dialog-content><div layout="column"><md-input-container><label>Name</label><textarea data-ng-model="vm.threadsGroupName" cols="30" rows="10"></textarea></md-input-container><md-input-container><label>Group tags</label><md-select data-ng-model="vm.threadsGroupTags"><md-option value="">-</md-option><md-option data-ng-repeat="tag in vm.tags" data-ng-bind="tag.display_name" value="{{tag.id}}"></md-option></md-select></md-input-container></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Send</md-button></md-dialog-actions></md-dialog>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/directives/bind-forum-quote-view.html",'<div class="forum-quote"><div layout="row" layout-align="start center" style="margin-bottom: 10px"><h4 class="author-username" data-ng-bind="item.sender_object.username"></h4><p class="thread-message-create-data" data-ng-bind="item.created | date:\'HH:mm dd/MM/yyyy\'"></p></div><div layout="row"><div data-ng-if="item.text.quotation"><bind-forum-quote item="item.text.quotation"></bind-forum-quote><p class="thread-message-text" data-ng-bind-html="item.text.text | trustAsHtml"></p></div><div data-ng-if="!item.text.quotation"><p class="thread-message-text" data-ng-bind-html="item.text | trustAsHtml"></p></div></div></div>')}])}(),function(a){try{a=angular.module("forum")}catch(t){a=angular.module("forum",[])}a.run(["$templateCache",function(a){a.put("views/directives/hide-by-tags-directive-view.html",'<md-input-container class="margin-top-5"><label>Hide by tags</label><md-select aria-label="hide" data-ng-model="tagsToHide" multiple="true" data-ng-change="hideByTags()"><md-option data-ng-repeat="tag in tags" ng-value="tag.id">{{tag.display_name}}</md-option></md-select></md-input-container>')}])}();
},{}],25:[function(require,module,exports){
/**
 * Created by szhitenev on 20.02.2017.
 */
(function () {

    'use strict';

    module.exports = {
        bindings: {
            "options": "="
        },
        template: '<div class="dashboard-entity-viewer-component"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="min-height"></div></div>',
        controllerAs: 'vm',
        controller: function () {

            var vm = this;

            console.log('this', this);

            vm.entityType = vm.options.entityType;
            vm.entityRaw = vm.options.entityRaw;
            vm.uiLayoutId = vm.options.uiLayoutId;

            vm.isReport = vm.options.isReport;

            vm.entityViewer = vm.options.entityViewer;

            vm.eventsList = vm.options.eventsList;
            vm.components = vm.options.components;

        }
    }

}());
},{}],26:[function(require,module,exports){
/**
 * Created by szhitenev on 20.02.2017.
 */
(function () {

        'use strict';

        var controller = function ($scope, $mdDialog) {

            console.log('this', this);

            var vm = this;

            //vm.range = {
            //    before: {
            //        date: '',
            //        format: '',
            //        name: ''
            //    },
            //    after: {
            //        date: '',
            //        format: '',
            //        name: ''
            //    }
            //};

            vm.dateFormats = [
                {id: 5, caption: "-", value: ""},
                {id: 1, caption: "dd.mm.yyyy", value: "%d.%m.%Y"},
                {id: 2, caption: "dd.mm.yy", value: "%d.%m.%y"},
                {id: 3, caption: "mmmm'yy", value: "%B'%y"},
                {id: 4, caption: "dd-mmm-yy", value: "%d-%b-%y"}
            ];

            //vm.frequencies = [
            //    {id: 1, caption: "Daily"},
            //    {id: 2, caption: "Weekly (+7d)"},
            //    {id: 3, caption: "Weekly (EoW)"},
            //    {id: 4, caption: "Bi-weekly (+14d)"},
            //    {id: 5, caption: "Bi-weekly (EoW)"},
            //    {id: 6, caption: "Monthly"},
            //    {id: 7, caption: "Monthly (EoM)"},
            //    {id: 8, caption: "Monthly (Last business day)"},
            //    {id: 9, caption: "Quarterly (Calendar)"},
            //    {id: 10, caption: "Quarterly (+3m)"},
            //    {id: 11, caption: "Yearly (+12m)"},
            //    {id: 12, caption: "Yearly (EoY)"}];

            vm.frequencies = [
                {id: 13, caption: "-", step: ""},
                {id: 1, caption: "Daily", step: "timedelta(days=1)"},
                {id: 2, caption: "Weekly (+7d)", step: "timedelta(weeks=1)"},
                //{id: 3, caption: "Weekly (EoW)"},
                {id: 4, caption: "Bi-weekly (+14d)", step: "timedelta(weeks=2)"},
                //{id: 5, caption: "Bi-weekly (EoW)"},
                {id: 6, caption: "Monthly", step: "timedelta(months=1)"},
                //{id: 7, caption: "Monthly (EoM)""},
                //{id: 8, caption: "Monthly (Last business day)"},
                //{id: 9, caption: "Quarterly (Calendar)"},
                {id: 10, caption: "Quarterly (+3m)", step: "timedelta(months=3)"},
                {id: 11, caption: "Yearly (+12m)", step: "timedelta(years=1)"}
                //{id: 12, caption: "Yearly (EoY)"}
            ];


            vm.addRange = function (item, $index) {

                vm.items.splice($index + 1, 0, {})

            };

            vm.removeRange = function ($index) {

                vm.items.splice($index, 1);

            };

            vm.openExpressionDialog = function ($event, item, options) {


                $mdDialog.show({
                    controller: 'ExpressionEditorDialogController as vm',
                    templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: $event,
                    preserveScope: true,
                    autoWrap: true,
                    skipHide: true,
                    locals: {
                        item: {expression: item[options.key]}
                    }
                }).then(function (res) {
                    if (res.status === 'agree') {
                        console.log("res", res.data);
                        item[options.key] = res.data.item.expression;
                    }
                    console.log('item', item);
                });
            };

        }


        module.exports = {
            bindings: {
                "items": "=",
                "range": '='
            },
            templateUrl: 'views/components/date-range-custom-field-control-component.html',
            controller: controller
        }

    }()
);
},{}],27:[function(require,module,exports){
/**
 * Created by szhitenev on 20.02.2017.
 */
(function () {

    'use strict';

    var controller = function () {

        console.log('this', this);

        var vm = this;

        vm.inputIsFocused = false;

        vm.syncActiveItem = function (item, $index) {

            vm.items[$index + 1].value_left = item.value_right;

        };

        vm.checkRange = function (item, $index) {
            if (parseFloat(item.value_left) > parseFloat(item.value_right)) {
                item.value_right = parseFloat(item.value_left) + 1;
                vm.items[$index + 1].value_left = item.value_right;
            }

            vm.inputIsFocused = false;
        };

        vm.addRange = function (item, $index) {

            vm.inputIsFocused = true;

            var newRange;

            vm.items.forEach(function (item) {
                item.is_active = false;
            });

            if (vm.items.length == 1) {

                newRange = {
                    value_left: '',
                    value_right: vm.items[$index].value_right,
                    group_name: 'Group ' + (vm.items.length + 1),
                    is_active: false
                };

                item.is_active = true;
                item.value_right = '';

                vm.items.splice($index + 1, 0, newRange)

            } else {

                if (vm.items.length - 1 == $index) {

                    newRange = {
                        value_left: '',
                        value_right: 'inf',
                        group_name: 'Group ' + (vm.items.length + 1),
                        is_active: false
                    };

                    vm.items.splice($index + 1, 0, newRange);

                    vm.items[$index].value_right = '';
                    vm.items[$index].is_active = true;

                } else {

                    newRange = {
                        value_left: vm.items[$index].value_right,
                        value_right: parseFloat(vm.items[$index + 1].value_left) + 1,
                        group_name: 'Group ' + (vm.items.length + 1),
                        is_active: true
                    };

                    vm.items[$index + 1].value_left = newRange.value_right + 1;

                    vm.items.splice($index + 1, 0, newRange)
                }
            }

            console.log('vm.items', vm.items);


        };

        vm.removeRange = function ($index) {

            vm.inputIsFocused = true;

            if (vm.items.length - 1 == $index) {

                vm.items.forEach(function (item) {
                    item.is_active = false;
                });

                if (vm.items.length == 3) {
                    vm.items[0].is_active = true;
                } else {
                    vm.items[$index - 1].is_active = true;
                }

                vm.items[$index - 1].value_right = 'inf';

                vm.items.splice($index, 1);
            } else {

                vm.items.forEach(function (item) {
                    item.is_active = false;
                });

                vm.items[$index - 1].is_active = true;

                vm.items.splice($index, 1);
            }


        }

    };

    module.exports = {
        bindings: {
            "items": "="
        },
        templateUrl: 'views/components/float-range-custom-field-control-component.html',
        controller: controller
    }

}());
},{}],28:[function(require,module,exports){
/**
 * Created by szhitenev on 22.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');

    var instrumentSchemeService = require('../services/import/instrumentSchemeService');
    var eventsService = require('../services/eventsService');

    module.exports = function ($scope, $mdDialog) {
        logService.controller('ActionsController', 'initialized');

        var vm = this;

        vm.importInstrument = function ($event) {
            $mdDialog.show({
                controller: 'ImportInstrumentDialogController as vm',
                templateUrl: 'views/dialogs/import-instrument-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);

                }
            });
        };

        vm.importTransaction = function ($event) {
            $mdDialog.show({
                controller: 'ImportTransactionDialogController as vm',
                templateUrl: 'views/dialogs/import-transaction-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);

                }
            });
        };

        vm.fillPriceHistory = function ($event) {
            $mdDialog.show({
                controller: 'FillPriceHistoryDialogController as vm',
                templateUrl: 'views/dialogs/fill-price-history-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);

                }
            });
        };

        vm.eventScheduleConfig = function ($event) {
            $mdDialog.show({
                controller: 'EventScheduleConfigDialogController as vm',
                templateUrl: 'views/dialogs/event-schedule-config-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);

                }
            });
        };

        vm.automatedUploads = function ($event) {
            $mdDialog.show({
                controller: 'AutomatedUploadsHistoryDialogController as vm',
                templateUrl: 'views/dialogs/automated-uploads-history-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);

                }
            });
        };

        vm.openMapping = function ($event, mapItem) {
            $mdDialog.show({
                controller: 'EntityTypeMappingDialogController as vm',
                templateUrl: 'views/dialogs/entity-type-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    mapItem: mapItem
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                }
            });
        };

        vm.addScheme = function ($event) {
            $mdDialog.show({
                controller: 'InstrumentMappingAddDialogController as vm',
                templateUrl: 'views/dialogs/instrument-mapping-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    instrumentSchemeService.create(res.data).then(function () {
                        vm.getList();
                    })
                }
            });
        };

        vm.addPriceDownloadScheme = function ($event) {
            $mdDialog.show({
                controller: 'PriceDownloadSchemeAddDialogController as vm',
                templateUrl: 'views/dialogs/price-download-scheme-dialog-view.html',
                targetEvent: $event
            })
        };

        vm.checkForEvents = function (target) {
            eventsService.getList().then(function (data) {
                vm.eventsList = data.results;
                $scope.$apply();
                data.results.map(function (event) {
                    if (event.is_need_reaction == true) {
                        var eventActions = event.event_schedule_object['actions']; // button in event dialog
                        vm.openEventWindow(target, event.id, eventActions);
                    }
                });
            });
        };

        vm.generateEvents = function ($event) {
            eventsService.generateEvents();
            $mdDialog.show({
                controller: 'InfoDialogController as vm',
                templateUrl: 'views/info-dialog-view.html',
                targetEvent: $event,
                locals: {
                    info: {
                        title: "Generating events",
                        description: "Your request is processing"
                    }
                },
                preserveScope: true,
                autoWrap: true,
                skipHid: true
            })
        };

        vm.openEventWindow = function ($event, eventId, eventActions) {
            $mdDialog.show({
                controller: 'EventDialogController as vm',
                templateUrl: 'views/dialogs/event-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                locals: {
                    data: {
                        eventId: eventId,
                        eventActions: eventActions
                    }
                }
            })
        };

    }

}());
},{"../../../../core/services/logService":2,"../services/eventsService":320,"../services/import/instrumentSchemeService":347}],29:[function(require,module,exports){
/**
 * Created by szhitenev on 30.06.2016.
 */
(function () {

        'use strict';

        var logService = require('../../../../core/services/logService');

        var attributeTypeService = require('../services/attributeTypeService');
        var entityResolverService = require('../services/entityResolverService');

        var uiService = require('../services/uiService');

        var gridHelperService = require('../services/gridHelperService');
        var metaService = require('../services/metaService');
        var layoutService = require('../services/layoutService');


        // codemonkey

        module.exports = function ($scope, $state, $mdDialog) {

            logService.controller('AdditionsEditorEntityEditController', 'initialized');

            //console.log('scope', $scope);

            var vm = this;

            vm.readyStatus = {content: false};
            vm.entityType = $scope.$parent.options.entityType;
            vm.entity = {attributes: []};
            vm.entityId = '';
            vm.evAction = 'update';

            vm.readyStatus.entityId = false;

            $scope.$parent.$watch('options.editorEntityId', function (newItemId) {
                vm.readyStatus.entityId = false;
                setTimeout(function () {
                    vm.entityId = newItemId;
                    if (vm.entityId !== undefined) {
                        vm.evAction = 'update';
                        vm.readyStatus.entityId = true;
                    }
                    $scope.$apply();
                }, 100)

            });

            vm.cancel = function () {
                var entityId = vm.entityId;
                vm.entityId = undefined;
                vm.readyStatus.entityId = false;
                setTimeout(function () {
                    vm.entityId = entityId;
                    vm.readyStatus.entityId = true;
                    $scope.$apply();
                }, 100)
            };

            vm.editLayout = function () {
                $state.go('app.data-constructor', {entityType: vm.entityType});
            };

            vm.manageAttrs = function (ev) {
                $state.go('app.attributesManager', {entityType: vm.entityType});
            };

            vm.copy = function () {
                vm.copyCallback().then(function () {
                    vm.evAction = 'create';
                    $scope.$apply();
                }); // look at entityEditorController
            };

            vm.save = function () {

                if (vm.evAction == 'create') {
                    vm.saveCallback().then(function (options) {

                        entityResolverService.create(options.entityType, options.entity).then(function () {
                            vm.evAction = 'update';
                            $scope.$apply();
                        });

                    })
                } else {
                    vm.saveCallback().then(function (options) {

                        entityResolverService.update(options.entityType, options.entityId, options.entity).then(function () {
                            $scope.$apply();
                        });
                    })

                }

            }
        }

    }()
);
},{"../../../../core/services/logService":2,"../services/attributeTypeService":304,"../services/entityResolverService":316,"../services/gridHelperService":322,"../services/layoutService":368,"../services/metaService":375,"../services/uiService":397}],30:[function(require,module,exports){
/**
 * Created by szhitenev on 14.06.2016.
 */
(function () {

    'use strict';
    var logService = require('../../../../core/services/logService');

    var attributeTypeService = require('../services/attributeTypeService');

    var metaService = require('../services/metaService');

    module.exports = function ($scope, $state, $stateParams, $mdDialog) {

        logService.controller('AttributesManagerController', 'initialized');

        var vm = this;

        vm.showHidden = false;

        var choices = metaService.getDynamicAttrsValueTypesCaptions();
        vm.attrs = [];

        vm.entityType = $stateParams.entityType;

        var getList = function () {
            attributeTypeService.getList(vm.entityType).then(function (data) {
                vm.attrs = data.results;
                $scope.$apply();
            });
        };

        getList();

        vm.addAttribute = function (ev) {
            $mdDialog.show({
                controller: 'AttributesManagerAddDialogController as vm',
                templateUrl: 'views/attribute-manager-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                locals: {
                    data: {
                        entityType: vm.entityType
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log(res.data.attribute['value_type']);
                    console.log("res", res.data);
                    attributeTypeService.create(vm.entityType, res.data.attribute).then(getList);
                }
            });
        };

        vm.bindType = function (item) {
            var i;
            for (i = 0; i < choices.length; i = i + 1) {
                if (item["value_type"] === choices[i].value) {
                    return choices[i]["caption_name"];
                }
            }
        };

        function setName(item) {
            item.name = item.text;
            if (item.id.indexOf('j') !== -1) {
                delete item['li_attr'];
                delete item['state'];
                delete item['icon'];
                delete item['a_attr'];
                delete item['data'];
                delete item['text'];
                delete item['type'];
                delete item.id;
            }
            item.children = item.children.map(setName);
            return item
        }

        vm.editTreeAttr = function (item, ev) {
            $mdDialog.show({
                controller: 'ClassificationEditorDialogController as vm',
                templateUrl: 'views/classification-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                locals: {
                    data: {
                        classifier: item,
                        entityType: vm.entityType
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);

                    res.data.classifier.classifiers = res.data.classifier.children.map(setName);

                    attributeTypeService.update(vm.entityType, res.data.classifier.id, res.data.classifier).then(getList);
                }
            });
        };

        vm.editAttr = function (item, ev) {
            $mdDialog.show({
                controller: 'AttributesManagerEditDialogController as vm',
                templateUrl: 'views/attribute-manager-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                locals: {
                    data: {
                        attributeId: item.id,
                        entityType: vm.entityType
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    attributeTypeService.update(vm.entityType, res.data.attribute.id, res.data.attribute).then(getList);
                }
            });
        };

        vm.toggleHidden = function () {
            vm.showHidden = !vm.showHidden;
        };

        vm.checkIsHidden = function(attribute){
            if(vm.showHidden == false && attribute.is_hidden == true) {
                return false;
            }
            return true;
        };

        vm.deleteAttr = function (item, ev) {

            var description = 'Are you sure to delete attribute ' + item.name + ' ?';

            $mdDialog.show({
                controller: 'WarningDialogController as vm',
                templateUrl: 'views/warning-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    warning: {
                        title: 'Warning',
                        description: description
                    }
                }
            }).then(function (res) {
                console.log('res', res);
                if (res.status === 'agree') {
                    attributeTypeService.deleteByKey(vm.entityType, item.id).then(function (data) {
                        if (data.status === 'conflict') {
                            $mdDialog.show({
                                controller: 'InfoDialogController as vm',
                                templateUrl: 'views/info-dialog-view.html',
                                parent: angular.element(document.body),
                                targetEvent: ev,
                                clickOutsideToClose: true,
                                locals: {
                                    info: {
                                        title: 'Notification',
                                        description: "You can not delete attributed that already in use"
                                    }
                                }
                            })
                        } else {
                            getList();
                        }
                    });

                }

            });
        };

    }

}());
},{"../../../../core/services/logService":2,"../services/attributeTypeService":304,"../services/metaService":375}],31:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');
    var uiService = require('../services/uiService');
    var metaContentTypesService = require('../services/metaContentTypesService');

    module.exports = function ($scope, $mdDialog) {
        logService.controller('DashboardController', 'initialized');

        var vm = this;

        vm.readyStatus = {uiLayouts: false, entityListLayout: false};
        vm.entityType = 'dashboard';

        vm.oldListView = null;
        vm.listView = null;

        vm.getUiLayouts = function () {

            uiService.getListLayout('all').then(function (data) {

                vm.uiLayouts = data.results.map(function (item) {
                    if (item.content_type !== 'ui.dashboard') {
                        return item;
                    }
                }).filter(function (item) {
                    return !!item
                });

                vm.readyStatus.uiLayouts = true;

                vm.getView();

            });
        };

        vm.getUiLayouts();

        vm.resolveEntity = function (item) {
            return metaContentTypesService.findEntityByContentType(item.content_type, 'ui').split('-').join(' ').capitalizeFirstLetter();
        };

        vm.closeWidget = function (widget) {
            widget._d_configured = false;
            widget.uiLayoutId = null;
            widget.entityType = null;
            widget._d_layout = null;
            widget.isReport = false;
        };

        vm.changeWidget = function (widget) {
            widget.entityType = metaContentTypesService.findEntityByContentType(widget._d_layout.content_type, 'ui');
            widget.uiLayoutId = widget._d_layout.id;
            widget._d_configured = true;

            if (widget.entityType.indexOf('-report') !== -1) {
                widget.isReport = true;
            } else {
                widget.isReport = false;
            }


            console.log('widget', widget);

        };



        vm.getView = function () {

            vm.readyStatus.entityListLayout = false;

            uiService.getActiveListLayout(vm.entityType).then(function (data) {

                if (data.results.length) {

                    vm.listView = data.results[0];

                    vm.oldListView = JSON.parse(JSON.stringify(vm.listView));

                    vm.widget1 = vm.listView.data.widget1;
                    vm.widget2 = vm.listView.data.widget2;
                    vm.widget3 = vm.listView.data.widget3;
                    vm.widget4 = vm.listView.data.widget4;


                    vm.uiLayouts.forEach(function (uiLayout) {

                        if(uiLayout.id == vm.widget1.uiLayoutId) {
                            vm.widget1._d_layout = uiLayout;
                        }

                        if(uiLayout.id == vm.widget2.uiLayoutId) {
                            vm.widget2._d_layout = uiLayout;
                        }

                        if(uiLayout.id == vm.widget3.uiLayoutId) {
                            vm.widget3._d_layout = uiLayout;
                        }

                        if(uiLayout.id == vm.widget4.uiLayoutId) {
                            vm.widget4._d_layout = uiLayout;
                        }

                    })


                } else {

                    // defaults

                    vm.widget1 = {
                        entityType: 'balance-report',
                        entityRaw: [],
                        isReport: true,
                        entityViewer: {extraFeatures: []},
                        _d_configured: true,
                        components: {
                            sidebar: false,
                            groupingArea: false,
                            columnAreaHeader: false,
                            splitPanel: false,
                            addEntityBtn: false,
                            fieldManagerBtn: false,
                            layoutManager: false,
                            autoReportRequest: true
                        }
                    };

                    vm.widget2 = {
                        entityType: 'instrument',
                        entityRaw: [],
                        isReport: false,
                        entityViewer: {extraFeatures: []},
                        _d_configured: true,
                        components: {
                            sidebar: false,
                            groupingArea: false,
                            columnAreaHeader: false,
                            splitPanel: false,
                            addEntityBtn: false,
                            fieldManagerBtn: false,
                            layoutManager: false,
                            autoReportRequest: true
                        }
                    };

                    vm.widget3 = {
                        entityType: 'portfolio',
                        entityRaw: [],
                        isReport: false,
                        entityViewer: {extraFeatures: []},
                        _d_configured: true,
                        components: {
                            sidebar: false,
                            groupingArea: false,
                            columnAreaHeader: false,
                            splitPanel: false,
                            addEntityBtn: false,
                            fieldManagerBtn: false,
                            layoutManager: false,
                            autoReportRequest: true
                        }
                    };

                    vm.widget4 = {
                        entityType: 'account',
                        entityRaw: [],
                        isReport: false,
                        entityViewer: {extraFeatures: []},
                        _d_configured: true,
                        components: {
                            sidebar: false,
                            groupingArea: false,
                            columnAreaHeader: false,
                            splitPanel: false,
                            addEntityBtn: false,
                            fieldManagerBtn: false,
                            layoutManager: false,
                            autoReportRequest: true
                        }
                    };
                }

                vm.readyStatus.entityListLayout = true;

                vm.bindLayoutManager();

                $scope.$apply();
            })
        };


        vm.bindLayoutManager = function () {

            $('.save-layout-as-btn').bind('click', function (e) {

                $mdDialog.show({
                    controller: 'UiLayoutSaveAsDialogController as vm',
                    templateUrl: 'views/dialogs/ui/ui-layout-save-as-view.html',
                    parent: angular.element(document.body),
                    targetEvent: e,
                    locals: {
                        options: {}
                    },
                    clickOutsideToClose: false
                }).then(function (res) {

                    if (!vm.listView) {
                        vm.listView = {data: {}};
                    }

                    vm.listView.data.widget1 = vm.widget1;
                    vm.listView.data.widget2 = vm.widget2;
                    vm.listView.data.widget3 = vm.widget3;
                    vm.listView.data.widget4 = vm.widget4;

                    if (res.status == 'agree') {

                        if (vm.oldListView) {
                            vm.oldListView.is_default = false;

                            uiService.updateListLayout(vm.oldListView.id, vm.oldListView).then(function () {
                                //console.log('saved');
                            }).then(function () {

                                vm.listView.name = res.data.name;
                                vm.listView.is_default = true;

                                uiService.createListLayout(vm.entityType, vm.listView).then(function () {
                                    //console.log('saved');
                                    vm.getView();
                                });

                            })

                        } else {

                            vm.listView.name = res.data.name;
                            vm.listView.is_default = true;

                            uiService.createListLayout(vm.entityType, vm.listView).then(function () {
                                //console.log('saved');
                                vm.getView();
                            });
                        }
                    }

                });

            });

            $('.save-layout-btn').bind('click', function (e) {

                if (!vm.listView) {
                    vm.listView = {name: 'Default', data: {}};
                }

                vm.listView.data.widget1 = vm.widget1;
                vm.listView.data.widget2 = vm.widget2;
                vm.listView.data.widget3 = vm.widget3;
                vm.listView.data.widget4 = vm.widget4;

                if (vm.listView.hasOwnProperty('id')) {
                    uiService.updateListLayout(vm.listView.id, vm.listView).then(function () {
                        //console.log('saved');
                    });
                } else {
                    uiService.createListLayout(vm.entityType, vm.listView).then(function () {
                        //console.log('saved');
                    });
                }
                $mdDialog.show({
                    controller: 'SaveLayoutDialogController as vm',
                    templateUrl: 'views/save-layout-dialog-view.html',
                    targetEvent: e,
                    clickOutsideToClose: true
                }).then(function () {
                    vm.getView();
                });


            });

        };

        $scope.$on("$destroy", function (event) {

            $('.save-layout-btn').unbind('click');
            $('.save-layout-as-btn').unbind('click');

            logService.controller('DashboardController', 'destroyed');

        });
    }

}());
},{"../../../../core/services/logService":2,"../services/metaContentTypesService":370,"../services/uiService":397}],32:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var accountService = require('../../services/accountService');

    module.exports = function($scope){

        console.log('{"controller": "DataAccountController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'account';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        accountService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            console.log('vm.entityRaw', vm.entityRaw);
            $scope.$apply();
        });

        vm.getList = function(options){
            return accountService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/accountService":301}],33:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function () {

    'use strict';

    var accountTypeService = require('../../services/accountTypeService');

    module.exports = function ($scope) {

        console.log('{"controller": "DataAccountTypeController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'account-type';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        accountTypeService.getList().then(function (data) {
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return accountTypeService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/accountTypeService":302}],34:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var complexTransactionService = require('../../services/transaction/complexTransactionService');

    module.exports = function($scope){

        console.log('{"controller": "DataComplexTransactionController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'complex-transaction';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        complexTransactionService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return complexTransactionService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/transaction/complexTransactionService":394}],35:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var counterpartyService = require('../../services/counterpartyService');

    module.exports = function($scope){

        console.log('{"controller": "DataCounterpartytController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'counterparty';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        counterpartyService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return counterpartyService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/counterpartyService":311}],36:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var counterpartyGroupService = require('../../services/counterpartyGroupService');

    module.exports = function($scope){

        console.log('{"controller": "DataCounterpartyGroupController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'counterparty-group';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        counterpartyGroupService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return counterpartyGroupService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/counterpartyGroupService":310}],37:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function () {

    'use strict';

    var currencyService = require('../../services/currencyService');

    module.exports = function ($scope) {

        console.log('{"controller": "DataCurrencyController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'currency';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        currencyService.getList().then(function (data) {
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return currencyService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/currencyService":313}],38:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var currencyHistoryService = require('../../services/currencyHistoryService');

    module.exports = function($scope){

        console.log('{"controller": "DataCurrencyHistoryController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'currency-history';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        currencyHistoryService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return currencyHistoryService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/currencyHistoryService":312}],39:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function () {

    'use strict';

    var instrumentService = require('../../services/instrumentService');

    module.exports = function ($scope) {

        console.log('{"controller": "DataInstrumentController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'instrument';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        //vm.entityViewer.extraFeatures.push({
        //    id: 1,
        //    caption: 'Open timetable editor',
        //    icon: 'schedule',
        //    templateUrl: 'views/',
        //    isOpened: false
        //});

        instrumentService.getList().then(function (data) {
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return instrumentService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/instrumentService":361}],40:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function () {

    'use strict';

    var instrumentTypeService = require('../../services/instrumentTypeService');

    module.exports = function ($scope) {

        console.log('{"controller": "DataInstrumentTypeController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'instrument-type';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        instrumentTypeService.getList().then(function (data) {
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return instrumentTypeService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/instrumentTypeService":362}],41:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function () {

    'use strict';

    var portfolioService = require('../../services/portfolioService');

    module.exports = function ($scope, $stateParams) {

        console.log('{"controller": "DataPortfolioController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'portfolio';
        vm.uiLayoutId = $stateParams.listLayout;
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        portfolioService.getList().then(function (data) {
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return portfolioService.getList(options).then(function (data) {
                return data;
            })
        }
    }

}());
},{"../../services/portfolioService":377}],42:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var priceHistoryService = require('../../services/priceHistoryService');

    module.exports = function($scope){

        console.log('{"controller": "DataPriceHistoryController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'price-history';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        priceHistoryService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return priceHistoryService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/priceHistoryService":378}],43:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function () {

    'use strict';

    var pricingPolicyService = require('../../services/pricingPolicyService');

    module.exports = function ($scope) {

        console.log('{"controller": "DataPricingPolicyController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'pricing-policy';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        pricingPolicyService.getList().then(function (data) {
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return pricingPolicyService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/pricingPolicyService":379}],44:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var responsibleService = require('../../services/responsibleService');

    module.exports = function($scope){

        console.log('{"controller": "DataResponsibleController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'responsible';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        responsibleService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return responsibleService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/responsibleService":385}],45:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var responsibleGroupService = require('../../services/responsibleGroupService');

    module.exports = function($scope){

        console.log('{"controller": "DataResponsibleGroupController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'responsible-group';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        responsibleGroupService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return responsibleGroupService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/responsibleGroupService":384}],46:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var strategyService = require('../../services/strategyService');

    module.exports = function ($scope, $stateParams) {

        logService.controller('DataStrategyController', 'initialized');

        console.log('$stateParams', $stateParams);

        var vm = this;

        vm.readyStatus = {content: false};

        vm.strategyNumber = $stateParams.strategyNumber;

        vm.entityType = 'strategy-' + vm.strategyNumber;
        vm.entityRaw = [];

        vm.entityViewer = {extraFeatures: []};

        strategyService.getList(vm.strategyNumber).then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return strategyService.getList(vm.strategyNumber, options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../../../../core/services/logService":2,"../../services/strategyService":388}],47:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var strategyGroupService = require('../../services/strategyGroupService');

    module.exports = function ($scope, $stateParams) {

        logService.controller('DataStrategyGroupController', 'initialized');

        console.log('$stateParams', $stateParams);

        var vm = this;

        vm.readyStatus = {content: false};

        vm.strategyNumber = $stateParams.strategyNumber;

        vm.entityType = 'strategy-' + vm.strategyNumber + '-group';
        vm.entityRaw = [];

        vm.entityViewer = {extraFeatures: []};

        strategyGroupService.getList(vm.strategyNumber).then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            console.log('vm.entityRaw', vm.entityRaw);
            $scope.$apply();
        });

        vm.getList = function(options){
            return strategyGroupService.getList(vm.strategyNumber, options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../../../../core/services/logService":2,"../../services/strategyGroupService":387}],48:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var strategySubgroupService = require('../../services/strategySubgroupService');

    module.exports = function ($scope, $stateParams) {

        logService.controller('DataStrategySubGroupController', 'initialized');

        console.log('$stateParams', $stateParams);

        var vm = this;

        vm.readyStatus = {content: false};

        vm.strategyNumber = $stateParams.strategyNumber;

        vm.entityType = 'strategy-' + vm.strategyNumber + '-subgroup';
        vm.entityRaw = [];

        vm.entityViewer = {extraFeatures: []};

        strategySubgroupService.getList(vm.strategyNumber).then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            console.log('vm.entityRaw', vm.entityRaw);
            $scope.$apply();
        });

        vm.getList = function(options){
            return strategySubgroupService.getList(vm.strategyNumber, options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../../../../core/services/logService":2,"../../services/strategySubgroupService":389}],49:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var tagService = require('../../services/tagService');

    module.exports = function($scope){

        console.log('{"controller": "DataTagController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'tag';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        tagService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            console.log('vm.entityRaw', vm.entityRaw);
            $scope.$apply();
        });

        vm.getList = function(options){
            return tagService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/tagService":390}],50:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var transactionService = require('../../services/transactionService');

    module.exports = function($scope){

        console.log('{"controller": "DataTransactionController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'transaction';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        transactionService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return transactionService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/transactionService":392}],51:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var transactionTypeService = require('../../services/transactionTypeService');

    module.exports = function($scope){

        console.log('{"controller": "DataTransactionController", status: "initialized"}');

        var vm = this;

        vm.readyStatus = {content: false};

        vm.entityType = 'transaction-type';
        vm.entityRaw = [];

        vm.entityViewer = {extraFeatures: []};

        transactionTypeService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return transactionTypeService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/transactionTypeService":393}],52:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var transactionTypeGroupService = require('../../services/transaction/transactionTypeGroupService');

    module.exports = function($scope){

        console.log('{"controller": "DataTransactionTypeGroupController", status: "initialized"}');

        var vm = this;

        vm.readyStatus = {content: false};

        vm.entityType = 'transaction-type-group';
        vm.entityRaw = [];

        vm.entityViewer = {extraFeatures: []};

        transactionTypeGroupService.getList().then(function(data){
            vm.entityRaw = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function(options){
            return transactionTypeGroupService.getList(options).then(function(data){
                return data;
            })
        }

    }

}());
},{"../../services/transaction/transactionTypeGroupService":396}],53:[function(require,module,exports){
/**
 * Created by szhitenev on 20.02.2017.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');

    module.exports = function ($scope) {

        logService.controller('DateCustomFieldConstructorController', 'initialized');

        var vm = this;

        vm.rangeItems = $scope.$parent.vm.rangeItems;
        vm.dateRange = $scope.$parent.vm.dateRange;

        $scope.$parent.vm.rangeType = 40;

        if (!vm.rangeItems.length) {
            vm.rangeItems.push({});
        }

    }

}());
},{"../../../../core/services/logService":2}],54:[function(require,module,exports){
(function() {

	'use strict';

	var logService = require('../../../../../core/services/logService');

	module.exports = function ($scope, $mdDialog) {
		var vm = this;

		logService.controller('EventScheduleConfigDialogController', 'initialized');

		vm.cancel = function () {
			$mdDialog.cancel();
		}
	}
}());
},{"../../../../../core/services/logService":2}],55:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var usersService = require('../../services/usersService');
    var usersGroupService = require('../../services/usersGroupService');

    var metaService = require('../../services/metaService');

    var attributeTypeService = require('../../services/attributeTypeService');
    module.exports = function ($scope, $mdDialog, data) {

        logService.controller('AttributesAddDialogManagerController', 'initialized');

        var vm = this;
        vm.attribute = {name: '', 'value_type': ''};
        vm.readyStatus = {attribute: true, permissions: false};

        // vm.entityType = data.entityType;
        
        vm.editRestriction = false;

        console.log('vm.attribute', vm.attribute);





        vm.valueTypes = [];
        // vm.valueTypes = metaService.getValueTypes().filter(function (item) {
        //     return item.value !== 30 && item.value !== 'decoration';
        // });

        // vm.valueTypes = vm.valueTypes.map(function (item) {

        //     switch (item['display_name']){
        //         case 'Number':
        //             item['caption_name'] = 'Integer';
        //             break;
        //         case 'Float':
        //             item['caption_name'] = 'Number with decimals';
        //             break;
        //         case 'Field':
        //             item['caption_name'] = 'Classification';
        //             break;
        //         default:
        //             item['caption_name'] = item['display_name'];
        //             break;
        //     }

        //     return item;
        // });
        vm.loadPermissions = function () {

            var promises = [];

            promises.push(vm.getMemberList());
            promises.push(vm.getGroupList());

            Promise.all(promises).then(function (data) {

                vm.readyStatus.permissions = true;
                $scope.$apply();
            });

        };

        vm.getGroupList = function () {
            return usersGroupService.getList().then(function (data) {

                //console.log('data MEMBERS', data);

                vm.groups = data.results;

                vm.groups.forEach(function (group) {

                    if (vm.attribute["group_object_permissions"]) {
                        vm.attribute["group_object_permissions"].forEach(function (permission) {

                            if (permission.group == group.id) {
                                if (!group.hasOwnProperty('objectPermissions')) {
                                    group.objectPermissions = {};
                                }
                                if (permission.permission === "manage_" + "generic" + 'attributetype') {
                                    group.objectPermissions.manage = true;
                                }
                                if (permission.permission === "change_" + "generic" + 'attributetype') {
                                    group.objectPermissions.change = true;
                                }
                            }
                        })
                    }

                });
            });

        };

        vm.getMemberList = function () {
            return usersService.getMemberList().then(function (data) {

                //console.log('data MEMBERS', data);

                vm.members = data.results;

                vm.members.forEach(function (member) {

                    if (vm.attribute["user_object_permissions"]) {
                        vm.attribute["user_object_permissions"].forEach(function (permission) {

                            if (permission.member == member.id) {
                                if (!member.hasOwnProperty('objectPermissions')) {
                                    member.objectPermissions = {};
                                }
                                if (permission.permission === "manage_" + "generic" + 'attributetype') {
                                    member.objectPermissions.manage = true;
                                }
                                if (permission.permission === "change_" + "generic" + 'attributetype') {
                                    member.objectPermissions.change = true;
                                }
                            }
                        })
                    }

                });
            });
        };

        vm.checkPermissions = function () {

            if (vm.attributeId) {

                var haveAccess = false;

                if (vm.attribute.granted_permissions.indexOf("manage_" + "generic" + 'attributetype') !== -1) {
                    haveAccess = true;
                }

                return haveAccess;
            } else {
                return true;
            }
        };

        vm.loadPermissions();

        vm.valueTypes = metaService.getDynamicAttrsValueTypesCaptions();
        console.log("Value type is ", vm.valueTypes);

        vm.agree = function () {

            vm.attribute["user_object_permissions"] = [];

            vm.members.forEach(function (member) {

                if (member.objectPermissions && member.objectPermissions.manage == true) {
                    vm.attribute["user_object_permissions"].push({
                        "member": member.id,
                        "permission": "manage_" + "generic" + 'attributetype'
                    })
                }

                if (member.objectPermissions && member.objectPermissions.change == true) {
                    vm.attribute["user_object_permissions"].push({
                        "member": member.id,
                        "permission": "change_" + "generic" + 'attributetype'
                    })
                }

            });

            vm.attribute["group_object_permissions"] = [];

            vm.groups.forEach(function (group) {

                if (group.objectPermissions && group.objectPermissions.manage == true) {
                    vm.attribute["group_object_permissions"].push({
                        "group": group.id,
                        "permission": "manage_" + "generic" + 'attributetype'
                    })
                }

                if (group.objectPermissions && group.objectPermissions.change == true) {
                    vm.attribute["group_object_permissions"].push({
                        "group": group.id,
                        "permission": "change_" + "generic" + 'attributetype'
                    })
                }

            });

            console.log('vm.attr', vm.attribute);
            if (vm.attribute["value_type"] == 'float') {
                vm.attribute["value_type"] = 20;
            }

            $mdDialog.hide({status: 'agree', data: {attribute: vm.attribute}});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/metaService":375,"../../services/usersGroupService":398,"../../services/usersService":399}],56:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var usersService = require('../../services/usersService');
    var usersGroupService = require('../../services/usersGroupService');

    var metaService = require('../../services/metaService');

    var attributeTypeService = require('../../services/attributeTypeService');

    module.exports = function ($scope, $mdDialog, data) {

        logService.controller('AttributesAddDialogManagerController', 'initialized');

        var vm = this;

        vm.readyStatus = {attribute: false, permissions: false};

         vm.entityType = data.entityType;
        vm.attributeId = data.attributeId;

        //attributeTypeService.getByKey("generic", vm.attributeId).then(function (data) {
        attributeTypeService.getByKey(vm.entityType, vm.attributeId).then(function (data) {
            vm.attribute = data;
            vm.readyStatus.attribute = true;
            vm.loadPermissions();
            $scope.$apply();
        });

        vm.loadPermissions = function () {

            var promises = [];

            promises.push(vm.getMemberList());
            promises.push(vm.getGroupList());

            Promise.all(promises).then(function (data) {

                vm.readyStatus.permissions = true;
                $scope.$apply();
            });

        };

        vm.getGroupList = function () {
            return usersGroupService.getList().then(function (data) {

                //console.log('data MEMBERS', data);

                vm.groups = data.results;

                vm.groups.forEach(function (group) {

                    if (vm.attribute["group_object_permissions"]) {
                        vm.attribute["group_object_permissions"].forEach(function (permission) {

                            if (permission.group == group.id) {
                                if (!group.hasOwnProperty('objectPermissions')) {
                                    group.objectPermissions = {};
                                }
                                if (permission.permission === "manage_" + "generic" + 'attributetype') {
                                    group.objectPermissions.manage = true;
                                }
                                if (permission.permission === "change_" + "generic" + 'attributetype') {
                                    group.objectPermissions.change = true;
                                }
                            }
                        })
                    }

                });
            });

        };

        vm.getMemberList = function () {
            return usersService.getMemberList().then(function (data) {

                //console.log('data MEMBERS', data);

                vm.members = data.results;

                vm.members.forEach(function (member) {

                    if (vm.attribute["user_object_permissions"]) {
                        vm.attribute["user_object_permissions"].forEach(function (permission) {

                            if (permission.member == member.id) {
                                if (!member.hasOwnProperty('objectPermissions')) {
                                    member.objectPermissions = {};
                                }
                                if (permission.permission === "manage_" + "generic" + 'attributetype') {
                                    member.objectPermissions.manage = true;
                                }
                                if (permission.permission === "change_" + "generic" + 'attributetype') {
                                    member.objectPermissions.change = true;
                                }
                            }
                        })
                    }

                });
            });
        };

        vm.checkPermissions = function () {

            if (vm.attributeId) {

                var haveAccess = false;

                if (vm.attribute.granted_permissions.indexOf("manage_" + "generic" + 'attributetype') !== -1) {
                    haveAccess = true;
                }

                return haveAccess;
            } else {
                return true;
            }
        };

        vm.editRestriction = true;

        console.log('vm.attribute', vm.attribute);

        vm.valueTypes = metaService.getDynamicAttrsValueTypesCaptions();

        vm.agree = function () {
            console.log('vm.attr', vm.attribute);

            vm.attribute["user_object_permissions"] = [];

            vm.members.forEach(function (member) {

                if (member.objectPermissions && member.objectPermissions.manage == true) {
                    vm.attribute["user_object_permissions"].push({
                        "member": member.id,
                        "permission": "manage_" + "generic" + 'attributetype'
                    })
                }

                if (member.objectPermissions && member.objectPermissions.change == true) {
                    vm.attribute["user_object_permissions"].push({
                        "member": member.id,
                        "permission": "change_" + "generic" + 'attributetype'
                    })
                }

            });

            vm.attribute["group_object_permissions"] = [];

            vm.groups.forEach(function (group) {

                if (group.objectPermissions && group.objectPermissions.manage == true) {
                    vm.attribute["group_object_permissions"].push({
                        "group": group.id,
                        "permission": "manage_" + "generic" + 'attributetype'
                    })
                }

                if (group.objectPermissions && group.objectPermissions.change == true) {
                    vm.attribute["group_object_permissions"].push({
                        "group": group.id,
                        "permission": "change_" + "generic" + 'attributetype'
                    })
                }

            });


            $mdDialog.hide({status: 'agree', data: {attribute: vm.attribute}});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/metaService":375,"../../services/usersGroupService":398,"../../services/usersService":399}],57:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var dataProvidersService = require('../../services/import/dataProvidersService');
    var scheduleService = require('../../services/import/scheduleService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var instrumentSchemeService = require('../../services/import/instrumentSchemeService');
    var instrumentService = require('../../services/instrumentService');

    var importInstrumentService = require('../../services/import/importInstrumentService');
    var pricingAutomatedScheduleService = require('../../services/import/pricingAutomatedScheduleService');


    module.exports = function ($scope, $mdDialog, $mdpTimePicker) {

        logService.controller('AutomatedUploadsHistoryDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {schedule: false};

        vm.days = [];
        vm.schedule = {};

        vm.cron = {
            periodicity: 1
        };
        vm.cron.time = new Date();

        vm.setDay = function (day) {
            if (!vm.cron.day) {
                vm.cron.day = [];
            }
            vm.cron.day.push(day);
        };

        vm.resetCronExpr = function () {
            vm.cron.day = [];
            vm.cron.month = [];
        };

        vm.getRange = function (num) {
            var res = [];
            var i;
            for (i = 0; i < num; i = i + 1) {
                res.push(i);
            }
            return res;
        };

        pricingAutomatedScheduleService.getSchedule().then(function (data) {
            vm.schedule = data;
            vm.readyStatus.schedule = true;

            var values = vm.schedule.cron_expr.split(' ');

            vm.cron.time = new Date();
            vm.cron.time.setMinutes(values[0]);
            vm.cron.time.setHours(values[1]);

            console.log('value', values);


            if (values[3] == '*' && values[2] == '*') {
                vm.cron.periodicity = 2;
                vm.cron.day = values[4].split(',');
                vm.cron.day.forEach(function (day) {
                    vm.days[day - 1] = {status: true};
                })

            }
            if (values[4] == '*') {
                vm.cron.periodicity = 3;
                vm.cron.day = values[2].split(',');
                if (values[3].length > 1) {
                    vm.cron.month = values[3].split(',');
                } else {
                    vm.cron.month = [values[3]];
                }
            }

            if (values[4] == '*' && values[3] == '*' && values[2] == '*') {
                vm.cron.periodicity = 1
            }

            console.log('vm.periodicity', vm.periodicity);

            $scope.$apply();
        });

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function ($event) {

            var minutes = moment(new Date(vm.cron.time)).format('mm');
            var hours = moment(new Date(vm.cron.time)).format('hh');

            vm.schedule.is_enabled = true;

            //console.log('cron.time', vm.cron.time);
            //console.log('minutes', minutes);
            //console.log('hours', hours);

            if (vm.cron.periodicity == 1) {
                console.log(parseInt(minutes) + ' ' + parseInt(hours) + ' * * *');
                vm.schedule.cron_expr = parseInt(minutes) + ' ' + parseInt(hours) + ' * * *';
            }
            if (vm.cron.periodicity == 2) {
                //console.log(minutes + ' ' + parseInt(hours) + ' * * ' + vm.cron.day);
                vm.schedule.cron_expr = parseInt(minutes) + ' ' + parseInt(hours) + ' * * ' + vm.cron.day;
            }
            if (vm.cron.periodicity == 3) {
                //console.log(minutes + ' ' + parseInt(hours) + ' * ' + vm.cron.month + ' ' + vm.cron.day);
                vm.schedule.cron_expr = parseInt(minutes) + ' ' + parseInt(hours) + ' ' + vm.cron.day + ' ' + vm.cron.month + ' *'
            }

            pricingAutomatedScheduleService.updateSchedule(vm.schedule).then(function (data) {
                console.log('here?');

                if (data.status == 400 || data.status == 500) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                } else {
                    $mdDialog.hide({status: 'agree', data: 'success'});
                    $scope.$apply();
                }
            })
        };

    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/import/dataProvidersService":339,"../../services/import/importInstrumentService":340,"../../services/import/instrumentSchemeService":347,"../../services/import/pricingAutomatedScheduleService":353,"../../services/import/scheduleService":355,"../../services/instrumentService":361,"../../services/metaService":375}],58:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    // var usersService = require('../../services/usersService');
    // var usersGroupService = require('../../services/usersGroupService');

    // var metaService = require('../../services/metaService');

    var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');
    module.exports = function ($scope, $mdDialog, data) {

        logService.controller('BalanceReportCustomAttrController', 'initialized');

        var vm = this;
        vm.attribute = {};
        vm.attributeId;
        vm.readyStatus = {attribute: false, permissions: false};

        vm.editRestriction = data.editRestriction;
        if (vm.editRestriction) {
            vm.attributeId = data.attributeId;
            console.log('balance attribute id', vm.attributeId);
            balanceReportCustomAttrService.getByKey(vm.attributeId).then(function (data) {
                console.log('balance edit attr data', data);
                vm.attribute = data;
                vm.readyStatus.attribute = true;
                $scope.$apply();
            });
        }
        else {
            vm.attribute = {name: '', expr: ''};
            vm.readyStatus.attribute = true;
            console.log('balance report create custom attr');
        }

        vm.setupConfig = function ($event) {
            $mdDialog.show({
                controller: 'CustomFieldsConfigDialogController as vm',
                templateUrl: 'views/dialogs/custom-fields-config-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                locals: {
                    data: {
                        customField: vm.attribute
                    }
                },
                preserveScope: true,
                autoWrap: true,
                skipHide: true
            }).then(function (res) {

                console.log('res', res);

                if (res.status === 'agree') {

                    vm.attribute.expr = res.data.expression;
                    vm.attribute.layout = res.data.layout;

                }
            });
        };

        // vm.valueTypes = [];

        // vm.loadPermissions = function () {

        //     var promises = [];

        //     promises.push(vm.getMemberList());
        //     promises.push(vm.getGroupList());

        //     Promise.all(promises).then(function (data) {

        //         vm.readyStatus.permissions = true;
        //         $scope.$apply();
        //     });

        // };

        // vm.getGroupList = function () {
        //     return usersGroupService.getList().then(function (data) {

        //         //console.log('data MEMBERS', data);

        //         vm.groups = data.results;

        //         vm.groups.forEach(function (group) {

        //             if (vm.attribute["group_object_permissions"]) {
        //                 vm.attribute["group_object_permissions"].forEach(function (permission) {

        //                     if (permission.group == group.id) {
        //                         if (!group.hasOwnProperty('objectPermissions')) {
        //                             group.objectPermissions = {};
        //                         }
        //                         if (permission.permission === "manage_" + vm.entityType + 'attributetype') {
        //                             group.objectPermissions.manage = true;
        //                         }
        //                         if (permission.permission === "change_" + vm.entityType + 'attributetype') {
        //                             group.objectPermissions.change = true;
        //                         }
        //                     }
        //                 })
        //             }

        //         });
        //     });

        // };

        // vm.getMemberList = function () {
        //     return usersService.getMemberList().then(function (data) {

        //         //console.log('data MEMBERS', data);

        //         vm.members = data.results;

        //         vm.members.forEach(function (member) {

        //             if (vm.attribute["user_object_permissions"]) {
        //                 vm.attribute["user_object_permissions"].forEach(function (permission) {

        //                     if (permission.member == member.id) {
        //                         if (!member.hasOwnProperty('objectPermissions')) {
        //                             member.objectPermissions = {};
        //                         }
        //                         if (permission.permission === "manage_" + vm.entityType + 'attributetype') {
        //                             member.objectPermissions.manage = true;
        //                         }
        //                         if (permission.permission === "change_" + vm.entityType + 'attributetype') {
        //                             member.objectPermissions.change = true;
        //                         }
        //                     }
        //                 })
        //             }

        //         });
        //     });
        // };

        // vm.checkPermissions = function () {

        //     if (vm.attributeId) {

        //         var haveAccess = false;

        //         if (vm.attribute.granted_permissions.indexOf("manage_" + vm.entityType + 'attributetype') !== -1) {
        //             haveAccess = true;
        //         }

        //         return haveAccess;
        //     } else {
        //         return true;
        //     }
        // };

        // vm.loadPermissions();

        // vm.valueTypes = metaService.getDynamicAttrsValueTypesCaptions();
        // console.log("Value type is ", vm.valueTypes);

        vm.agree = function () {
            $mdDialog.hide({status: 'agree', data: {attribute: vm.attribute}});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/reports/balanceReportCustomAttrService":383}],59:[function(require,module,exports){
/**
 * Created by szhitenev on 06.02.2017.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var uiService = require('../../services/uiService');
    var metaContentTypesService = require('../../services/metaContentTypesService');

    module.exports = function ($scope, $mdDialog) {

        var vm = this;

        function contentTypeToState(contentType) {

            var result = '';

            metaContentTypesService.getListForUi().forEach(function (item) {

                if (item.key == contentType) {

                    if (contentType.indexOf('reports') == 0) {
                        result = 'app.reports.' + item.entity;
                    } else {
                        result = 'app.data.' + item.entity;
                    }
                }

            });

            return result;
        }

        logService.controller('BookmarksLayoutSelectDialogController', 'initialized');

        vm.readyStatus = {content: false};

        uiService.getListLayout('all').then(function (data) {
            vm.items = data.results;

            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.selectedLayoutId = null;

        vm.selectLayout = function (item) {
            vm.selectedLayoutId = item.id;
            vm.selectedContentType = item.content_type;
        };

        vm.agree = function () {
            $mdDialog.hide({
                status: 'agree',
                data: {listLayoutId: vm.selectedLayoutId, state: contentTypeToState(vm.selectedContentType)}
            });
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/metaContentTypesService":370,"../../services/uiService":397}],60:[function(require,module,exports){
/**
 * Created by szhitenev on 06.02.2017.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var bookmarkService = require('../../services/bookmarkService');

    module.exports = function ($scope, $mdDialog) {

        var vm = this;

        logService.controller('BookmarksWizardDialogController', 'initialized');

        vm.deletedNodes = [];


        bookmarkService.getList().then(function (data) {

            function setText(item) {
                item.text = item.name;
                item.type = 'default';
                if (item.children.length) {
                    item.type = 'folder';
                }
                item.children = item.children.map(setText);
                return item
            }

            var items = data.results.map(setText);

            $('#jstree_demo').jstree({
                "core": {
                    "animation": 0,
                    "check_callback": true,
                    "themes": {"stripes": true},
                    'data': [
                        {
                            'text': 'Bookmark panel',
                            'state': {'opened': true, 'selected': true},
                            'children': items
                        }
                    ]
                },
                "types": {
                    "#": {
                        "valid_children": ["Bookmark panel"]
                    },
                    "Bookmark panel": {
                        "icon": "portal/content/img/ic_folder_black_1x.png",
                        "valid_children": ["default"]
                    },
                    "default": {
                        "icon": "portal/content/img/ic_label_outline_black_1x.png",
                        "valid_children": ["default", "folder"]
                    },
                    "folder": {
                        "icon": "portal/content/img/ic_folder_black_1x.png",
                        "valid_children": ["default", "folder"]
                    }
                },
                "plugins": [
                    "contextmenu", "dnd", "search",
                    "state", "types", "wholerow"
                ]
            });
            $scope.$apply();
        });


        vm.createNode = function ($event) {
            var ref = $('#jstree_demo').jstree(true),
                sel = ref.get_selected();

            $mdDialog.show({
                controller: 'BookmarksLayoutSelectDialogController as vm',
                templateUrl: 'views/dialogs/bookmarks-layout-select-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {}
            }).then(function (res) {
                if (res.status === 'agree') {
                    ref.set_type(sel, 'folder');
                    sel = sel[0];

                    sel = ref.create_node(sel, {
                        "type": "default",
                    });

                    $('#jstree_demo').jstree(true).get_node(sel).a_attr.state = res.data.state;
                    $('#jstree_demo').jstree(true).get_node(sel).a_attr.list_layout = res.data.listLayoutId;


                    //"list_layout": res.data.listLayoutId,
                    //    "state": res.data.state

                    if (sel) {
                        ref.edit(sel);
                    }
                }
            });


        };


        vm.renameNode = function () {
            var ref = $('#jstree_demo').jstree(true),
                sel = ref.get_selected();
            if (!sel.length) {
                return false;
            }
            sel = sel[0];
            ref.edit(sel);
        };

        vm.deleteNode = function () {
            var ref = $('#jstree_demo').jstree(true),
                sel = ref.get_selected();
            if (!sel.length) {
                return false;
            }

            vm.deletedNodes.push(sel);

            ref.delete_node(sel);
        };

        vm.agree = function () {

            var ref = $('#jstree_demo').jstree(true);
            var data = ref.get_json('#');
            console.log('ref', data);


            var promisesDel = [];

            vm.deletedNodes.forEach(function (itemId) {

                promisesDel.push(bookmarkService.deleteByKey(itemId))

            });

            Promise.all(promisesDel).then(function () {

                var promises = [];

                data[0].children.forEach(function (item) {

                    item.name = item.text;

                    if (!item.hasOwnProperty('children')) {
                        item.children = [];
                    }

                    item.children.forEach(function (subItem) {
                        subItem.name = subItem.text;
                    });

                    if (isNaN(parseInt(item.id, 10))) {
                        item.list_layout = item.a_attr.list_layout;
                        item.data.state = item.a_attr.state;
                        delete item.id;

                        item.children.forEach(function(subItem){

                            console.log('subItem CREATE', subItem);

                            if (isNaN(parseInt(subItem.id, 10))) {
                                subItem.list_layout = subItem.a_attr.list_layout;
                                subItem.data.state = subItem.a_attr.state;
                                delete subItem.id;
                            }
                        });

                        promises.push(bookmarkService.create(item));

                    } else {

                        item.children.forEach(function(subItem){

                            if (isNaN(parseInt(subItem.id, 10))) {

                                subItem.list_layout = subItem.a_attr.list_layout;
                                subItem.data.state = subItem.a_attr.state;
                                delete subItem.id;
                            }

                        });

                        promises.push(bookmarkService.update(item.id, item));
                    }
                });

                Promise.all(promises).then(function () {
                    $mdDialog.hide({status: 'agree', data: {}});
                });
            })

        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/bookmarkService":308}],61:[function(require,module,exports){
/**
 * Created by szhitenev on 19.07.2016.
 */
(function () {

    'use strict';

    var attributeTypeService = require('../../services/attributeTypeService');

    var logService = require('../../../../../core/services/logService');

    module.exports = function ($scope, $mdDialog, data) {

        var vm = this;

        logService.controller('ClassificationEditorDialogController', 'initialized');

        vm.classifier = data.classifier;

        attributeTypeService.getByKey(data.entityType, data.classifier.id).then(function (data) {

            function setText(item) {
                item.text = item.name;
                item.type = 'default';
                if (item.children.length) {
                    item.type = 'folder';
                }
                item.children = item.children.map(setText);
                return item
            }

            var tree = data.classifiers.map(setText);

            $('#jstree_demo').jstree({
                "core": {
                    "animation": 0,
                    "check_callback": true,
                    "themes": {"stripes": true},
                    'data': [
                        {
                            'text': 'Root',
                            'state': {'opened': true, 'selected': true},
                            'children': tree
                        }
                    ]
                },
                "types": {
                    "#": {
                        "valid_children": ["root"]
                    },
                    "root": {
                        "icon": "portal/content/img/ic_folder_black_1x.png",
                        "valid_children": ["default"]
                    },
                    "default": {
                        "icon": "portal/content/img/ic_label_outline_black_1x.png",
                        "valid_children": ["default", "folder"]
                    },
                    "folder": {
                        "icon": "portal/content/img/ic_folder_black_1x.png",
                        "valid_children": ["default", "folder"]
                    }
                },
                "plugins": [
                    "contextmenu", "dnd", "search",
                    "state", "types", "wholerow"
                ]
            });
            $scope.$apply();
        });

        vm.createNode = function () {
            var ref = $('#jstree_demo').jstree(true),
                sel = ref.get_selected();
            ref.set_type(sel, 'folder');
            sel = sel[0];
            sel = ref.create_node(sel, {"type": "default"});
            if (sel) {
                ref.edit(sel);
            }
        };
        vm.renameNode = function () {
            var ref = $('#jstree_demo').jstree(true),
                sel = ref.get_selected();
            if (!sel.length) {
                return false;
            }
            sel = sel[0];
            ref.edit(sel);
        };

        vm.deleteNode = function () {
            var ref = $('#jstree_demo').jstree(true),
                sel = ref.get_selected();
            if (!sel.length) {
                return false;
            }
            ref.delete_node(sel);
        };

        vm.agree = function () {
            console.log('vm.attr', vm.classifier);
            var ref = $('#jstree_demo').jstree(true);
            var data = ref.get_json('#');
            console.log('ref', data);
            console.log('classifier', vm.classifier);

            vm.classifier.children = data[0].children;
            $mdDialog.hide({status: 'agree', data: {classifier: vm.classifier}});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };
    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304}],62:[function(require,module,exports){
/**
 * Created by szhitenev on 28.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var attributeTypeService = require('../../services/attributeTypeService');

    module.exports = function ($scope, $mdDialog, data) {

        var vm = this;

        vm.entityType = data.entityType;
        vm.classifierId = data.classifier.id;
        vm.classifierValue = data.classifierId;


        vm.getTree = function () {

            $('#js-tree-select-wrapper').remove();

            attributeTypeService.getByKey(vm.entityType, vm.classifierId).then(function (data) {

                console.log('DATA', data);

                $('.js-tree-holder-dialog-select').append('<div id="js-tree-select-wrapper" class="js-tree-select" style="width: 100%; overflow: hidden"></div>');

                function setText(item) {
                    item.text = item.name;
                    item.type = 'default';
                    if (item.children.length) {
                        item.type = 'folder';
                    }
                    item.children = item.children.map(setText);
                    return item
                }

                vm.tree = data.classifiers;

                var tree = data.classifiers.map(setText);

                $('#js-tree-select-wrapper').jstree({
                    "core": {
                        "animation": 0,
                        "check_callback": true,
                        "themes": {"stripes": true, "dots": true},
                        'data': [
                            {
                                'text': 'Root',
                                'state': {'opened': true, 'selected': true},
                                'children': tree
                            }
                        ]
                    },
                    "dnd": {
                        "is_draggable": function (node) {
                            return false
                        }
                    },
                    "types": {
                        "#": {
                            "valid_children": ["root"]
                        },
                        "root": {
                            "icon": "portal/content/img/ic_folder_black_1x.png",
                            "valid_children": ["default"]
                        },
                        "default": {
                            "icon": "portal/content/img/ic_label_outline_black_1x.png",
                            "valid_children": ["default", "folder"]
                        },
                        "folder": {
                            "icon": "portal/content/img/ic_folder_black_1x.png",
                            "valid_children": ["default", "folder"]
                        }
                    },
                    "plugins": [
                        "contextmenu", "dnd", "search",
                        "state", "types", "wholerow"
                    ]
                });
                $('#js-tree-select-wrapper').jstree(true).show_dots();
                $scope.$apply(function () {
                    setTimeout(function () {
                        $('#js-tree-select-wrapper').jstree("deselect_all");
                    }, 300); // idk, wtf is this
                    setTimeout(function () {
                        console.log('vm.classifierId', vm.classifierValue);
                        $('#js-tree-select-wrapper').jstree("select_node", "#" + vm.classifierValue);
                    }, 301); // idk, wtf is this
                });

            });
        };

        vm.getTree();

        function setName(item) {
            item.name = item.text;
            if (item.id.indexOf('j') !== -1) {
                delete item['li_attr'];
                delete item['state'];
                delete item['icon'];
                delete item['a_attr'];
                delete item['data'];
                delete item['text'];
                delete item['type'];
                delete item.id;
            }
            item.children = item.children.map(setName);
            return item
        }

        vm.edit = function (ev) {
            $mdDialog.show({
                controller: 'ClassificationEditorDialogController as vm',
                templateUrl: 'views/classification-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    data: {
                        classifier: data.classifier,
                        entityType: vm.entityType
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);

                    res.data.classifier.classifiers = res.data.classifier.children.map(setName);
                    $('#js-tree-select-wrapper').jstree(true).destroy();
                    attributeTypeService.update(vm.entityType, res.data.classifier.id, res.data.classifier).then(function () {
                        vm.getTree();
                    });
                }
            });
        };

        vm.agree = function () {
            var item = $('#js-tree-select-wrapper').jstree(true).get_selected();
            console.log('ite---------------m', item);
            $mdDialog.hide({status: 'agree', data: {item: item[0]}});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };


    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304}],63:[function(require,module,exports){
(function() {

	'use strict';

	var logService = require('../../../../../core/services/logService');

	module.exports = function ($scope, $mdDialog) {
		var vm = this;


		vm.agree = function () {
			$mdDialog.hide({status: 'agree', data: {name: vm.groupName, members: []}});
		}

		vm.cancel = function () {
			$mdDialog.cancel();
		}
	}
}());
},{"../../../../../core/services/logService":2}],64:[function(require,module,exports){
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var membersAndGroupsService = require('../../services/membersAndGroupsService');

    module.exports = function ($scope, $mdDialog) {
        var vm = this;

        vm.agree = function ($event) {

            membersAndGroupsService.create('members', {username: vm.memberName}).then(function (data) {

                if (data.status == 400) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                } else {
                    $mdDialog.hide({status: 'agree', data: {}});
                }
            });

        };

        vm.cancel = function () {
            $mdDialog.cancel();
        }
    }
}());
},{"../../../../../core/services/logService":2,"../../services/membersAndGroupsService":369}],65:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var metaService = require('../../services/metaService');

    var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');
    module.exports = function ($scope, $mdDialog, data) {

        logService.controller('CustomFieldConfigDialogController', 'initialized');

        var vm = this;

        vm.customField = data.customField;

        vm.rangeItems = [];
        vm.dateRange = {};

        vm.rangeType = null;

        if (vm.customField.hasOwnProperty('layout') && vm.customField.layout !== null) {
            vm.exprType = vm.customField.layout.exprType;
            vm.exprField = vm.customField.layout.exprField;
            vm.rangeItems = vm.customField.layout.rangeItems;
            vm.dateRange = vm.customField.layout.dateRange;
        }

        vm.resetRanges = function () {
            vm.rangeItems = [];
        };

        //vm.reportFields = metaService.getEntityAttrs('balance-report').map(function (item) {
        //    if (item.value_type == 'float' || item.value_type == 40) {
        //        return item;
        //    }
        //}).filter(function (item) {
        //    return !!item;
        //});

        vm.agree = function () {

            console.log('vm', vm);


            var expression = '';

            if (vm.rangeType == 20) {
                expression = 'simple_group(' + vm.exprField + ', [';

                vm.rangeItems.forEach(function (item, $index) {

                    var value_left = item.value_left;
                    var value_right = item.value_right;

                    var colon = ',';

                    if (vm.rangeItems.length - 1 == $index) {
                        colon = '';
                    }

                    if (value_left == 'inf') {
                        value_left = '"inf"';
                    }
                    if (value_left == '-inf') {
                        value_left = '"-inf"';
                    }

                    if (value_right == 'inf') {
                        value_right = '"inf"';
                    }
                    if (value_right == '-inf') {
                        value_right = '"-inf"';
                    }

                    expression = expression + '[' + value_left + ', ' + value_right + ', "' + item.group_name + '"]' + colon;
                });

                expression = expression + '], default="lorem")';
            }

            if (vm.rangeType == 40) {

                expression = 'date_group(' + vm.exprField + ', [';

                //var dateRangeBeforeDate = '';
                //var dateRangeBeforeFormat = '';
                //var dateRangeBeforeName = '';
                //
                //if (vm.dateRange.before) {
                //    dateRangeBeforeDate = vm.dateRange.before.date;
                //
                //    if (vm.dateRange.before.format) {
                //        //dateRangeBeforeFormat = vm.dateRange.before.format.caption;
                //        dateRangeBeforeFormat = vm.dateRange.before.format;
                //    }
                //    dateRangeBeforeName = vm.dateRange.before.name;
                //}

                //expression = expression + '["","' + dateRangeBeforeDate + '", "", ["", "", "", "", "' + dateRangeBeforeFormat + '", "' + dateRangeBeforeName + '"]],';

                vm.rangeItems.forEach(function (item) {

                    var begin = item.begin || '';
                    var end = item.end || '';
                    var step = '';

                    if (item.step) {
                        //step = item.step.step;
                        step = item.step;
                    }

                    var str1 = item.str1 || '';
                    var begin_date_fmt = '';

                    if (item.begin_date_fmt) {
                        //begin_date_fmt = item.begin_date_fmt.caption;
                        begin_date_fmt = item.begin_date_fmt;
                    }

                    var str3 = item.str3 || '';
                    var str4 = item.str4 || '';
                    var end_date_fmt = '';

                    if (item.end_date_fmt) {
                        //end_date_fmt = item.end_date_fmt.caption;
                        end_date_fmt = item.end_date_fmt;
                    }

                    var str6 = item.str6 || '';

                    var colon = ',';

                    expression = expression + '['
                        + begin + ', '
                        + end + ', '
                        + step + ', ["'
                        + str1 + '", "'
                        + begin_date_fmt + '", "'
                        + str3 + '", "'
                        + str4 + '", "'
                        + end_date_fmt + '", "'
                        + str6 + '"]]' + colon;
                });

                //var dateRangeAfterDate = '';
                //var dateRangeAfterFormat = '';
                //var dateRangeAfterName = '';
                //
                //if (vm.dateRange.after) {
                //    dateRangeAfterDate = vm.dateRange.after.date;
                //
                //    if (vm.dateRange.after.format) {
                //        //dateRangeAfterFormat = vm.dateRange.after.format.caption;
                //        dateRangeAfterFormat = vm.dateRange.after.format;
                //    }
                //    dateRangeAfterName = vm.dateRange.after.name;
                //}

                //expression = expression + '["","' + dateRangeAfterDate + '", "", ["", "", "", "", "' + dateRangeAfterFormat + '", "' + dateRangeAfterName + '"]]';

                expression = expression + '], default="")';

            }

            $mdDialog.hide({
                status: 'agree', data: {
                    expression: expression, layout: {
                        rangeItems: vm.rangeItems,
                        dateRange: vm.dateRange,
                        exprField: vm.exprField,
                        exprType: vm.exprType
                    }
                }
            });
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/metaService":375,"../../services/reports/balanceReportCustomAttrService":383}],66:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var entityTypeMappingResolveService = require('../../services/entityTypeMappingResolveService');
    var entityResolverService = require('../../services/entityResolverService');
    var instrumentAttributeTypeService = require('../../services/instrument/instrumentAttributeTypeService');

    module.exports = function ($scope, $mdDialog, mapItem) {

        logService.controller('EntityTypeMappingDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {content: false};
        vm.entityItems = [];
        vm.mapItem = mapItem;
        vm.mapEntityType = mapItem.complexExpressionEntity;

        console.log('mapEntityType', vm.mapEntityType);

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.bindEntityName = function (item) {

            if (item.hasOwnProperty('scheme_name')) {
                return item.scheme_name;
            }

            return item.name;

        };

        vm.setSort = function (propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.addMapping = function (item, index) {

            item.mapping.splice(index, 0, {value: ''});

        };

        vm.removeMapping = function (item, mappingItem, index) {

            if (mappingItem.hasOwnProperty('id')) {
                mappingItem.isDeleted = true;
            } else {
                item.mapping.splice(index, 1);
            }

        };

        vm.fancyEntity = function () {
            return vm.mapEntityType.replace('_', ' ');
        };

        var classifier_value_type = 30;

        function addChilds(classifier, item) {

            console.log('item', item);

            vm.entityItems.push({
                value_type: classifier.value_type,
                classifier: classifier.id,
                name: item.name,
                id: item.id,
                level: item.level
            });

            if (item.children && item.children.length > 0) {
                item.children.forEach(function (childItem) {
                    addChilds(classifier, childItem);
                })
            }
        }

        if (vm.mapEntityType == 'classifier') {
            instrumentAttributeTypeService.getByKey(vm.mapItem.attribute_type).then(function (data) {

                console.log('classifier data', data);

                [data].forEach(function (classifier) {

                    console.log('classifier', classifier);

                    classifier.classifiers.forEach(function (item) {

                        addChilds(classifier, item);

                    })
                });

                entityTypeMappingResolveService.getList(vm.mapEntityType).then(function (data) {
                    if (data.hasOwnProperty('results')) {
                        vm.items = data.results;
                    } else {
                        vm.items = data

                    }
                    var i, e;
                    for (e = 0; e < vm.entityItems.length; e = e + 1) {
                        for (i = 0; i < vm.items.length; i = i + 1) {
                            //if (vm.items[i][vm.mapEntityType] == vm.entityItems[e].id) {
                            if (vm.items[i].content_object == vm.entityItems[e].id) {
                                vm.entityItems[e].mapping = vm.items[i]
                            }
                        }
                    }

                    console.log('!!!!!!!!!!!!!!!', vm.entityItems);

                    vm.readyStatus.content = true;
                    $scope.$apply();
                });
            })
        } else {

            //console.log('vm.mapEntityType', vm.mapEntityType);
            vm.entityMapDashed = vm.mapEntityType.split('_').join('-');
            //console.log('vm.entityMapDashed', vm.entityMapDashed);

            entityResolverService.getList(vm.entityMapDashed).then(function (data) {
                if (data.hasOwnProperty('results')) {
                    vm.entityItems = data.results;
                } else {
                    vm.entityItems = data;
                }
                entityTypeMappingResolveService.getList(vm.mapEntityType).then(function (data) {
                    if (data.hasOwnProperty('results')) {
                        vm.items = data.results;
                    } else {
                        vm.items = data
                    }
                    var i, e;
                    for (e = 0; e < vm.entityItems.length; e = e + 1) {
                        for (i = 0; i < vm.items.length; i = i + 1) {
                            //if (vm.items[i][vm.mapEntityType] == vm.entityItems[e].id) {
                            if (vm.items[i].content_object == vm.entityItems[e].id) {

                                if (!vm.entityItems[e].hasOwnProperty('mapping')) {
                                    vm.entityItems[e].mapping = [];
                                }

                                vm.entityItems[e].mapping.push(vm.items[i])
                            }
                        }
                    }

                    vm.entityItems.forEach(function (entityItem) {
                        if (!entityItem.hasOwnProperty('mapping')) {
                            entityItem.mapping = [{value: ''}];
                        }
                    });

                    console.log('!!!!!!!!!!!!!!!', vm.items);
                    console.log('!!!!!!!!!!!!!!!', vm.entityItems);

                    vm.readyStatus.content = true;
                    $scope.$apply();
                });
            });
        }


        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {

            var i = 0;

            function updateRow() {
                console.log('i', i);
                console.log(vm.entityItems[i]);
                if (i < vm.entityItems.length) {
                    if (!vm.entityItems[i].hasOwnProperty('mapping')) {
                        i = i + 1;
                        updateRow();
                        return false;
                    }

                    if (vm.entityItems[i].mapping.length) {

                        vm.entityItems[i].mapping.forEach(function (mapItem) {

                            if (!mapItem.hasOwnProperty('id')) {
                                mapItem.provider = 1; //TODO FIND PROVIDER ID?
                                if (vm.mapEntityType == 'classifier') {

                                    mapItem['attribute_type'] = vm.entityItems[i].classifier;

                                    if (vm.entityItems[i].value_type == 30) {
                                        mapItem.classifier = vm.entityItems[i].id
                                    }

                                } else {
                                    //vm.entityItems[i].mapping[vm.mapEntityType] = vm.entityItems[i].id;
                                    mapItem.content_object = vm.entityItems[i].id;
                                }

                                return entityTypeMappingResolveService.create(vm.mapEntityType, mapItem).then(function () {
                                    i = i + 1;
                                    updateRow();
                                    return false;
                                })
                            }
                            if (mapItem.isDeleted == true) {
                                return entityTypeMappingResolveService.deleteByKey(vm.mapEntityType, mapItem.id).then(function () {
                                    i = i + 1;
                                    updateRow();
                                    return false;
                                })
                            }
                            return entityTypeMappingResolveService.update(vm.mapEntityType, mapItem.id, mapItem).then(function () {
                                i = i + 1;
                                updateRow();
                                return false;
                            })
                        })
                    }
                }
            }

            updateRow();

            $mdDialog.hide({status: 'agree'});
        };
    }

}());
},{"../../../../../core/services/logService":2,"../../services/entityResolverService":316,"../../services/entityTypeMappingResolveService":317,"../../services/instrument/instrumentAttributeTypeService":363}],67:[function(require,module,exports){
(function () {
    'use strict';

    var logService = require('../../../../../core/services/logService');
    var eventsService = require('../../services/eventsService');

    module.exports = function ($scope, $mdDialog, data) {
        console.log('id for event buttons', data);

        var vm = this;

        vm.entityType = 'complex-transaction';
        vm.isEventBook = true;

        vm.actionsBtns = data.eventActions;
        console.log('event button is', vm.actionsBtns);
        var eventId = data.eventId;


        vm.eventAction = function ($event, actionId) {
            var actionUrl = {
                eventId: eventId,
                actionId: actionId
            };
            eventsService.getEventAction(actionUrl).then(function (data) {
                var currentDate = moment(new Date()).format('YYYY-MM-DD');
                data.values['date'] = currentDate;

                vm.eventBook = data;

                $mdDialog.show({
                    controller: 'EntityViewerAddDialogController as vm',
                    templateUrl: 'views/entity-viewer/entity-viewer-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: $event,
                    //clickOutsideToClose: true,
                    preserveScope: true,
                    autoWrap: true,
                    skipHide: true,
                    locals: {
                        parentScope: $scope
                    }
                }).then(function (res) {

                    if (res.status == 'agree') {
                        eventsService.putEventAction(actionUrl, res.data.eventBook).then(function () {
                            console.log('event action done');
                            vm.cancel();
                        });
                    }

                });


            });
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.ignore = function () {

            eventsService.ignoreEventAction(eventId).then(function () {
                console.log('event action done');
                vm.cancel();
            });
        };

    }
}());
},{"../../../../../core/services/logService":2,"../../services/eventsService":320}],68:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaNotificationClassService = require('../../services/metaNotificationClassService');
    var instrumentEventScheduleConfigService = require('../../services/instrument/instrumentEventScheduleConfigService');


    module.exports = function ($scope, $mdDialog) {

        logService.controller('EventScheduleConfigDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {notificationClass: false, config: false};

        instrumentEventScheduleConfigService.getList().then(function (data) {
            vm.config = data.results[0];
            vm.readyStatus.config = true;
            $scope.$apply();
        });

        metaNotificationClassService.getList().then(function (data) {
            vm.notificationClasses = data;
            vm.readyStatus.notificationClass = true;
            $scope.$apply();
        });

        vm.checkReadyStatus = function () {
            if (vm.readyStatus.notificationClass == true && vm.readyStatus.config == true) {
                return true;
            }
            return false;
        };

        vm.agree = function ($event) {
            instrumentEventScheduleConfigService.update(vm.config.id, vm.config).then(function (data) {
                console.log('DATA', data);
                if (data.status == 200 || data.status == 201) {
                    $mdDialog.hide({res: 'agree'});
                }
                if (data.status == 400) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }
            })
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };


    };

}());
},{"../../../../../core/services/logService":2,"../../services/instrument/instrumentEventScheduleConfigService":365,"../../services/metaNotificationClassService":372}],69:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var helpService = require('../../services/helpService');

    module.exports = function ($scope, $mdDialog, item) {

        logService.controller('ExpressionEditorDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {expression: false};

        vm.item = item;

        helpService.getFunctionsHelp().then(function (data) {
            vm.expressions = data;

            vm.readyStatus.expression = true;

            vm.selectedHelpItem = vm.expressions[0];
            $scope.$apply();
        });

        vm.selectHelpItem = function (item) {
            vm.expressions.forEach(function (expr) {
                expr.isSelected = false;
            });

            item.isSelected = true;

            vm.selectedHelpItem = item;
        };

        vm.appendFunction = function (item) {

            console.log(this);
            var val = $('#editorExpressionInput')[0].value;
            var cursorPosition = val.slice(0, ($('#editorExpressionInput')[0].selectionStart + '')).length;

            if (cursorPosition == 0) {
                vm.item.expression = vm.item.expression + item.func;
            } else {
                vm.item.expression = vm.item.expression.slice(0, cursorPosition) + item.func + vm.item.expression.slice(cursorPosition);

            }
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree', data: {item: vm.item}});
        };

        vm.openHelp = function ($event) {
            $mdDialog.show({
                controller: 'HelpDialogController as vm',
                templateUrl: 'views/dialogs/help-dialog-view.html',
                targetEvent: $event,
                locals: {
                    data: {}
                },
                preserveScope: true,
                autoWrap: true,
                skipHide: true
            })
        }
    }

}());
},{"../../../../../core/services/logService":2,"../../services/helpService":332}],70:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var dataProvidersService = require('../../services/import/dataProvidersService');
    var scheduleService = require('../../services/import/scheduleService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var instrumentSchemeService = require('../../services/import/instrumentSchemeService');
    var instrumentService = require('../../services/instrumentService');

    var importInstrumentService = require('../../services/import/importInstrumentService');
    var importPricingService = require('../../services/import/importPricingService');

    var instrumentRecalculateAccruedPriceService = require('../../services/instrument/instrumentRecalculateAccruedPriceService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('FillPriceHistoryDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {mapping: false, processing: false, recalculationProcessing: false, recalculationDone: false};

        var d = new Date();
        d = new Date(d.setDate(d.getDate() - 1));

        vm.price = {
            date_from: d,
            date_to: d,
            date_both: d,
            balance_date: d,
            override_existed: false
        };
        vm.priceSettings = {isRange: false};

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.automatedUploads = function ($event) {
            $mdDialog.show({
                controller: 'AutomatedUploadsHistoryDialogController as vm',
                templateUrl: 'views/dialogs/automated-uploads-history-dialog-view.html',
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);

                }
            });
        };

        vm.uploadPrice = function ($event) {
            vm.readyStatus.processing = true;

            if (!vm.price.date_both) {
                vm.price.date_both = vm.price.date_from;
            }

            if (vm.priceSettings.isRange) {
                vm.price.date_from = moment(new Date(vm.price.date_from)).format('YYYY-MM-DD');
                vm.price.date_to = moment(new Date(vm.price.date_to)).format('YYYY-MM-DD');
                vm.price.balance_date = moment(new Date(vm.price.balance_date)).format('YYYY-MM-DD');
            } else {
                vm.price.date_from = moment(new Date(vm.price.date_both)).format('YYYY-MM-DD');
                vm.price.date_to = moment(new Date(vm.price.date_both)).format('YYYY-MM-DD');
                vm.price.balance_date = moment(new Date(vm.price.balance_date)).format('YYYY-MM-DD');
            }

            importPricingService.create(vm.price).then(function (data) {
                vm.price = data;
                if (vm.price.task_object.status == 'P' || vm.price.task_object.status == 'S' || vm.price.task_object.status == 'W') {
                    setTimeout(function () {
                        vm.uploadPrice()
                    }, 5000)
                } else {
                    if (vm.price.instrument_price_missed.length || vm.price.currency_price_missed.length) {
                        $mdDialog.show({
                            controller: 'FillPriceManuallyInstrumentDialogController as vm',
                            templateUrl: 'views/dialogs/fill-price-manually-instrument-dialog-view.html',
                            targetEvent: $event,
                            locals: {
                                data: {
                                    instruments: vm.price.instrument_price_missed,
                                    currencies: vm.price.currency_price_missed
                                }
                            },
                            preserveScope: true,
                            autoWrap: true,
                            skipHide: true
                        });
                    } else {
                        $mdDialog.show({
                            controller: 'SuccessDialogController as vm',
                            templateUrl: 'views/dialogs/success-dialog-view.html',
                            targetEvent: $event,
                            locals: {
                                success: {
                                    title: 'Success',
                                    description: 'Prices download success'
                                }
                            },
                            preserveScope: true,
                            autoWrap: true,
                            skipHide: true
                        });
                    }
                    vm.readyStatus.processing = false;

                }
                $scope.$apply();
            })
        };

        vm.startRecalculation = function () {

            vm.readyStatus.recalculationProcessing = true;
            vm.readyStatus.recalculationDone = false;
            vm.readyStatus.recalculationError = false;
            var dateFrom;

            var dateTo;
            try {
                dateFrom = moment(new Date(vm.recalculate.date_from)).format('YYYY-MM-DD');
                dateTo = moment(new Date(vm.recalculate.date_to)).format('YYYY-MM-DD');
                instrumentRecalculateAccruedPriceService.recalculate(dateFrom, dateTo).then(function () {

                    vm.readyStatus.recalculationDone = true;
                    vm.readyStatus.recalculationProcessing = false;
                    $scope.$apply();
                })
            } catch (err) {
                vm.readyStatus.recalculationProcessing = false;
                vm.readyStatus.recalculationError = true;
            }

        }

    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/import/dataProvidersService":339,"../../services/import/importInstrumentService":340,"../../services/import/importPricingService":342,"../../services/import/instrumentSchemeService":347,"../../services/import/scheduleService":355,"../../services/instrument/instrumentRecalculateAccruedPriceService":367,"../../services/instrumentService":361,"../../services/metaService":375}],71:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var pricingPolicyService = require('../../services/pricingPolicyService');
    var instrumentService = require('../../services/instrumentService');
    var currencyService = require('../../services/currencyService');
    var priceHistoryService = require('../../services/priceHistoryService');
    var currencyHistoryService = require('../../services/currencyHistoryService');

    module.exports = function ($scope, $mdDialog, data) {

        logService.controller('FillPriceManuallyInstrumentDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {instruments: false, policies: false, currencies: false};

        vm.newItem = {pricing_policy: '', expr: '', notes: ''};

        vm.instrumentsPrices = data.instruments;
        vm.currenciesPrices = data.currencies;

        pricingPolicyService.getList().then(function (data) {
            vm.policies = data.results;
            vm.readyStatus.policies = true;
            $scope.$apply();
        });

        instrumentService.getList().then(function (data) {
            vm.instruments = data.results;
            vm.readyStatus.instruments = true;
            $scope.$apply();
        });

        currencyService.getList().then(function (data) {
            vm.currencies = data.results;
            vm.readyStatus.currencies = true;
            $scope.$apply();
        });

        vm.checkReadyStatus = function () {
            if (vm.readyStatus.instruments == true && vm.readyStatus.policies == true && vm.readyStatus.currencies == true) {
                return true;
            }
            return false;
        };

        vm.bindPricingPolicy = function (priceHistory) {
            var name = '';
            vm.policies.forEach(function (item) {
                if (priceHistory.pricing_policy == item.id) {
                    priceHistory.policy_name = item.name;
                    name = item.name
                }
            });
            return name;
        };
        vm.bindInstrument = function (priceHistory) {
            var name = '';
            vm.instruments.forEach(function (item) {
                if (priceHistory.instrument == item.id) {
                    priceHistory.instrument_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.bindCurrency = function (priceHistory) {
            var name = '';
            vm.currencies.forEach(function (item) {
                if (priceHistory.currency == item.id) {
                    priceHistory.currency_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function (propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.agree = function () {

            var promises = [];

            vm.instrumentsPrices.forEach(function (item) {
                if (item.id == null) {
                    promises.push(priceHistoryService.create(item))
                } else {
                    promises.push(priceHistoryService.update(item.id, item));
                }
            });

            vm.currenciesPrices.forEach(function (item) {
                if (item.id == null) {
                    promises.push(currencyHistoryService.create(item))
                } else {
                    promises.push(currencyHistoryService.update(item.id, item))
                }
            });

            Promise.all(promises).then(function () {
                $mdDialog.hide({status: 'agree'});
            });

        };


    }

}());
},{"../../../../../core/services/logService":2,"../../services/currencyHistoryService":312,"../../services/currencyService":313,"../../services/instrumentService":361,"../../services/priceHistoryService":378,"../../services/pricingPolicyService":379}],72:[function(require,module,exports){
/**
 * Created by szhitenev on 15.11.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var pricingPolicyService = require('../../services/pricingPolicyService');
    var currencyService = require('../../services/currencyService');

    var portfolioService = require('../../services/portfolioService');
    var accountService = require('../../services/accountService');
    var strategyService = require('../../services/strategyService');
    var transactionClassService = require('../../services/transaction/transactionClassService');


    module.exports = function ($scope, $mdDialog, reportOptions) {

        var vm = this;


        console.log('reportOptions', reportOptions);

        vm.reportOptions = JSON.parse(JSON.stringify(reportOptions));

        vm.readyStatus = {
            pricingPolicy: false,
            currency: false,
            portfolio: false,
            account: false,
            strategy1: false,
            strategy2: false,
            strategy3: false,
            transactionClass: false
        };

        vm.getPricingPolicies = function () {

            vm.readyStatus.pricingPolicy = false;

            pricingPolicyService.getList().then(function (data) {

                vm.pricingPolicies = data.results;
                vm.readyStatus.pricingPolicy = true;

                $scope.$apply();

            });
        };

        vm.onSearchChange = function ($event) {
            $event.stopPropagation();
        };

        vm.getCurrencies = function () {

            vm.readyStatus.currency = false;

            currencyService.getList().then(function (data) {

                vm.currencies = data.results;
                vm.readyStatus.currency = true;

                $scope.$apply();

            });
        };

        vm.getPortfolios = function () {

            vm.readyStatus.portfolio = false;

            portfolioService.getList().then(function (data) {

                vm.portfolios = data.results;
                vm.readyStatus.portfolio = true;

                $scope.$apply();

            });
        };

        vm.getAccounts = function () {

            vm.readyStatus.account = false;

            accountService.getList().then(function (data) {

                vm.accounts = data.results;
                vm.readyStatus.account = true;

                $scope.$apply();

            });
        };

        vm.getStrategies1 = function () {

            vm.readyStatus.strategy1 = false;

            strategyService.getList(1).then(function (data) {

                vm.strategies1 = data.results;
                vm.readyStatus.strategy1 = true;

                $scope.$apply();

            });
        };

        vm.getStrategies2 = function () {

            vm.readyStatus.strategy2 = false;

            strategyService.getList(2).then(function (data) {

                vm.strategies2 = data.results;
                vm.readyStatus.strategy2 = true;

                $scope.$apply();

            });
        };

        vm.getStrategies3 = function () {

            vm.readyStatus.strategy3 = false;

            strategyService.getList(3).then(function (data) {

                vm.strategies3 = data.results;
                vm.readyStatus.strategy3 = true;

                $scope.$apply();

            });
        };

        vm.getTransactionClasses = function () {

            vm.readyStatus.transactionClass = false;

            transactionClassService.getList().then(function (data) {

                vm.transactionClasses = data;
                vm.readyStatus.transactionClass = true;

                $scope.$apply();
            })
        };


        vm.checkReadyStatus = function () {

            var ready = true;

            var keys = Object.keys(vm.readyStatus);

            for (var i = 0; i < keys.length; i = i + 1) {

                //console.log(keys[i], vm.readyStatus[keys[i]]);

                if (vm.readyStatus[keys[i]] == false) {
                    ready = false;
                }

            }

            return ready;
        };

        vm.getPricingPolicies();
        vm.getCurrencies();
        vm.getPortfolios();
        vm.getAccounts();
        vm.getTransactionClasses();
        vm.getStrategies1();
        vm.getStrategies2();
        vm.getStrategies3();


        vm.saveSettings = function () {
            $mdDialog.hide({status: 'agree', data: vm.reportOptions});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/accountService":301,"../../services/currencyService":313,"../../services/portfolioService":377,"../../services/pricingPolicyService":379,"../../services/strategyService":388,"../../services/transaction/transactionClassService":395}],73:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function ($scope, $mdDialog, data) {

        logService.controller('HelpDialogController', 'initialized');

        var vm = this;

        vm.data = data;

        vm.baseUrl = 'https://finmars.com/portal/help/';

        vm.helpPage = vm.baseUrl + 'index.html';

        if (vm.data.helpPageUrl) {
            vm.helpPage = vm.baseUrl + vm.data.helpPageUrl;
        }

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree'});
        };
    }

}());
},{"../../../../../core/services/logService":2}],74:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var dataProvidersService = require('../../services/import/dataProvidersService');
    var scheduleService = require('../../services/import/scheduleService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var instrumentSchemeService = require('../../services/import/instrumentSchemeService');
    var instrumentService = require('../../services/instrumentService');
    var currencyService = require('../../services/currencyService');

    var instrumentTypeService = require('../../services/instrumentTypeService');
    var instrumentDailyPricingModelService = require('../../services/instrument/instrumentDailyPricingModelService');
    var importPriceDownloadSchemeService = require('../../services/import/importPriceDownloadSchemeService');

    var importInstrumentService = require('../../services/import/importInstrumentService');
    var instrumentPaymentSizeDetailService = require('../../services/instrument/instrumentPaymentSizeDetailService');
    var instrumentAttributeTypeService = require('../../services/instrument/instrumentAttributeTypeService');


    module.exports = function ($scope, $mdDialog) {

        logService.controller('InstrumentMappingDialogController', 'initialized');

        console.log('mdDialog is ', $mdDialog);

        var vm = this;

        vm.readyStatus = {
            mapping: false,
            processing: false,
            dailyModel: false,
            priceDownloadScheme: false,
            instrumentType: false,
            currency: false
        };
        vm.dataIsImported = false;

        vm.config = {
            instrument_code: "USP16394AG62 Corp",
            mode: 1,

        };

        vm.loadIsAvailable = function () {
            if (vm.readyStatus.processing == false && vm.providerId != null && vm.config.instrument_download_scheme != null && vm.config.instrument_code != null) {
                return true;
            }
            return false;
        };

        vm.dailyModels = [];
        vm.priceDownloadSchemes = [];
        vm.instrumentTypes = [];
        vm.currencies = [];

        vm.dynAttributes = {};

        vm.providerId = 1; //TODO HARD REFACTOR CODE BLOOMBERG PROVIDER

        instrumentSchemeService.getList(vm.providerId).then(function (data) {
            vm.instrumentSchemes = data.results;
            vm.readyStatus.mapping = true;
            $scope.$apply();
        });

        instrumentDailyPricingModelService.getList().then(function (data) {
            vm.dailyModels = data;
            vm.readyStatus.dailyModel = true;
            $scope.$apply();
        });

        importPriceDownloadSchemeService.getList().then(function (data) {
            vm.priceDownloadSchemes = data.results;
            vm.readyStatus.priceDownloadScheme = true;
            $scope.$apply();
        });

        instrumentPaymentSizeDetailService.getList().then(function (data) {
            vm.paymentSizeDefaults = data;
            $scope.$apply();
        });

        instrumentTypeService.getList().then(function (data) {
            vm.instrumentTypes = data.results;
            vm.readyStatus.instrumentType = true;
            $scope.$apply();
        });

        currencyService.getList().then(function (data) {
            vm.currencies = data.results;
            vm.readyStatus.currency = true;
            $scope.$apply();
        });

        vm.appendString = function (string) {
            var code = vm.config.instrument_code.split(' ')[0];
            vm.config.instrument_code = code + ' ' + string;
        };

        vm.resolveAttributeNode = function (item) {
            var result = '';
            if (item.hasOwnProperty('classifier_object') && item.classifier_object !== null) {
                return item.classifier_object.name;
            }
            vm.dynAttributes['id_' + item.attribute_type].classifiers.forEach(function (classifier) {
                if (classifier.id == item.classifier) {
                    result = classifier.name;
                }
            });
            return result;
        };

        vm.findError = function (item, type, state) {

            var message = '';
            var haveError = false;

            if (type == 'entityAttr') {
                if (vm.config.errors.hasOwnProperty(item)) {
                    message = vm.config.errors[item].join(' ');
                    haveError = true;
                }
            }

            if (type == 'dynAttr') {
                //console.log('item', item);
                if (vm.config.errors.hasOwnProperty('attribute_type_' + item.attribute_type)) {
                    message = vm.config.errors['attribute_type_' + item.attribute_type].join(' ');
                    haveError = true;
                }
            }

            if (state == 'message') {
                return message
            } else {
                return haveError;
            }
        };

        vm.load = function ($event) {
            vm.readyStatus.processing = true;
            //vm.config.task = 81;
            importInstrumentService.startImport(vm.config).then(function (data) {
                console.log('data', data);
                if (data.status != 500) {
                    vm.config = data.response;
                    if (vm.config.task_object.status == 'D' && vm.config.instrument !== null) {
                        vm.readyStatus.processing = false;
                        vm.dataIsImported = true;

                        vm.mappedFields = [];

                        var keysDict = [];

                        if (Object.keys(vm.config["task_result_overrides"]).length > 0) {
                            keysDict = vm.config["task_result_overrides"];
                        } else {
                            keysDict = vm.config["task_result"]
                        }

                        var keys = Object.keys(keysDict);
                        var i;
                        for (i = 0; i < keys.length; i = i + 1) {
                            vm.mappedFields.push({
                                key: keys[i],
                                value: keysDict[keys[i]]
                            })
                        }

                        var promises = [];

                        vm.config.instrument.attributes.forEach(function (attribute) {
                            if (attribute.attribute_type_object.value_type == 30) {
                                promises.push(instrumentAttributeTypeService.getByKey(attribute.attribute_type));
                            }
                        });

                        console.log('vm.instrument', vm.instrument);

                        Promise.all(promises).then(function (data) {

                            data.forEach(function (item) {
                                vm.dynAttributes['id_' + item.id] = item;
                            });

                            $scope.$apply();
                        })


                    } else {
                        setTimeout(function () {
                            vm.load();
                        }, 1000)

                    }
                }
                if (data.status == 500) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: "An error occurred. Please try again later"
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }


            })
        };

        vm.recalculate = function () {
            vm.mappedFields.forEach(function (item) {
                vm.config.task_result_overrides[item.key] = item.value;
            });
            vm.load();
        };

        vm.openEditMapping = function ($event) {
            $mdDialog.show({
                controller: 'InstrumentMappingEditDialogController as vm',
                templateUrl: 'views/dialogs/instrument-mapping-dialog-view.html',
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    schemeId: vm.config.instrument_download_scheme
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    instrumentSchemeService.update(vm.config.instrument_download_scheme, res.data).then(function () {
                        //vm.getList();
                        $scope.$apply();
                    })
                }
            });
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function ($event) {
            instrumentService.create(vm.config.instrument).then(function (data) {
                console.log('DATA', data);
                if (data.status == 200 || data.status == 201) {
                    $mdDialog.show({
                        controller: 'SuccessDialogController as vm',
                        templateUrl: 'views/dialogs/success-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            success: {
                                title: "",
                                description: "You have you have successfully add instrument " + vm.config.instrument.user_code + " (user code)."
                            }
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    }).then(function () {
                        $mdDialog.hide({res: 'agree'});
                    });

                }
                if (data.status == 400 || data.status == 500) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }
            });

        };

    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/currencyService":313,"../../services/import/dataProvidersService":339,"../../services/import/importInstrumentService":340,"../../services/import/importPriceDownloadSchemeService":341,"../../services/import/instrumentSchemeService":347,"../../services/import/scheduleService":355,"../../services/instrument/instrumentAttributeTypeService":363,"../../services/instrument/instrumentDailyPricingModelService":364,"../../services/instrument/instrumentPaymentSizeDetailService":366,"../../services/instrumentService":361,"../../services/instrumentTypeService":362,"../../services/metaService":375}],75:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var dataProvidersService = require('../../services/import/dataProvidersService');
    var scheduleService = require('../../services/import/scheduleService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var transactionSchemeService = require('../../services/import/transactionSchemeService');
    var instrumentService = require('../../services/instrumentService');
    var currencyService = require('../../services/currencyService');

    var instrumentTypeService = require('../../services/instrumentTypeService');
    var instrumentDailyPricingModelService = require('../../services/instrument/instrumentDailyPricingModelService');
    var importPriceDownloadSchemeService = require('../../services/import/importPriceDownloadSchemeService');

    var importTransactionService = require('../../services/import/importTransactionService');
    var instrumentPaymentSizeDetailService = require('../../services/instrument/instrumentPaymentSizeDetailService');
    var instrumentAttributeTypeService = require('../../services/instrument/instrumentAttributeTypeService');


    module.exports = function ($scope, $mdDialog) {

        logService.controller('TransactionMappingDialogController', 'initialized');

        console.log('mdDialog is ', $mdDialog);

        var vm = this;

        vm.readyStatus = {
            mapping: false,
            processing: false,
            dailyModel: false,
            priceDownloadScheme: false,
            instrumentType: false,
            currency: false
        };
        vm.dataIsImported = false;

        vm.config = {
            mode: 1,

        };

        vm.loadIsAvailable = function () {
            if (vm.readyStatus.processing == false && vm.config.scheme != null) {
                return true;
            }
            return false;
        };

        vm.dailyModels = [];
        vm.priceDownloadSchemes = [];
        vm.instrumentTypes = [];
        vm.currencies = [];

        vm.dynAttributes = {};

        transactionSchemeService.getList().then(function (data) {
            vm.transactionSchemes = data.results;
            vm.readyStatus.mapping = true;
            $scope.$apply();
        });

        instrumentDailyPricingModelService.getList().then(function (data) {
            vm.dailyModels = data;
            vm.readyStatus.dailyModel = true;
            $scope.$apply();
        });

        importPriceDownloadSchemeService.getList().then(function (data) {
            vm.priceDownloadSchemes = data.results;
            vm.readyStatus.priceDownloadScheme = true;
            $scope.$apply();
        });

        instrumentPaymentSizeDetailService.getList().then(function (data) {
            vm.paymentSizeDefaults = data;
            $scope.$apply();
        });

        instrumentTypeService.getList().then(function (data) {
            vm.instrumentTypes = data.results;
            vm.readyStatus.instrumentType = true;
            $scope.$apply();
        });

        currencyService.getList().then(function (data) {
            vm.currencies = data.results;
            vm.readyStatus.currency = true;
            $scope.$apply();
        });

        vm.appendString = function (string) {
            var code = vm.config.instrument_code.split(' ')[0];
            vm.config.instrument_code = code + ' ' + string;
        };

        vm.resolveAttributeNode = function (item) {
            var result = '';
            if (item.hasOwnProperty('classifier_object') && item.classifier_object !== null) {
                return item.classifier_object.name;
            }
            vm.dynAttributes['id_' + item.attribute_type].classifiers.forEach(function (classifier) {
                if (classifier.id == item.classifier) {
                    result = classifier.name;
                }
            });
            return result;
        };

        vm.findError = function (item, type, state) {

            var message = '';
            var haveError = false;

            if (type == 'entityAttr') {
                if (vm.config.errors.hasOwnProperty(item)) {
                    message = vm.config.errors[item].join(' ');
                    haveError = true;
                }
            }

            if (type == 'dynAttr') {
                //console.log('item', item);
                if (vm.config.errors.hasOwnProperty('attribute_type_' + item.attribute_type)) {
                    message = vm.config.errors['attribute_type_' + item.attribute_type].join(' ');
                    haveError = true;
                }
            }

            if (state == 'message') {
                return message
            } else {
                return haveError;
            }
        };

        vm.load = function ($event) {
            vm.readyStatus.processing = true;
            //vm.config.task = 81;

            var formData = new FormData();

            if (vm.config.task_id) {
                formData.append('task_id', vm.config.task_id);
            } else {

                formData.append('file', vm.config.file);
                formData.append('scheme', vm.config.scheme);
                formData.append('error_handling', vm.config.error_handling);
            }

            importTransactionService.startImport(formData).then(function (data) {
                console.log('data', data);
                if (data.status != 500) {
                    vm.config = data.response;
                    if (vm.config.task_status == 'SUCCESS') {


                        if (vm.config.error_rows.length == 0) {
                            vm.finishedSuccess = true;
                        } else {
                            $mdDialog.show({
                                controller: 'ImportTransactionErrorsDialogController as vm',
                                templateUrl: 'views/dialogs/import-transaction-errors-dialog-view.html',
                                targetEvent: $event,
                                locals: {
                                    data: vm.config
                                },
                                preserveScope: true,
                                autoWrap: true,
                                skipHide: true
                            })
                        }

                        vm.readyStatus.processing = false;
                        vm.dataIsImported = true;

                        vm.mappedFields = [];

                        var keysDict = [];

                        if (Object.keys(vm.config["task_result_overrides"]).length > 0) {
                            keysDict = vm.config["task_result_overrides"];
                        } else {
                            keysDict = vm.config["task_result"]
                        }

                        var keys = Object.keys(keysDict);
                        var i;
                        for (i = 0; i < keys.length; i = i + 1) {
                            vm.mappedFields.push({
                                key: keys[i],
                                value: keysDict[keys[i]]
                            })
                        }

                        var promises = [];

                        vm.config.instrument.attributes.forEach(function (attribute) {
                            if (attribute.attribute_type_object.value_type == 30) {
                                promises.push(instrumentAttributeTypeService.getByKey(attribute.attribute_type));
                            }
                        });

                        console.log('vm.instrument', vm.instrument);

                        Promise.all(promises).then(function (data) {

                            data.forEach(function (item) {
                                vm.dynAttributes['id_' + item.id] = item;
                            });

                            $scope.$apply();
                        })


                    } else {
                        setTimeout(function () {
                            vm.load();
                        }, 1000)

                    }
                }
                if (data.status == 500) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: "An error occurred. Please try again later"
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }


            })
        };

        vm.recalculate = function () {
            vm.mappedFields.forEach(function (item) {
                vm.config.task_result_overrides[item.key] = item.value;
            });
            vm.load();
        };

        vm.openEditMapping = function ($event) {
            $mdDialog.show({
                controller: 'TransactionMappingEditDialogController as vm',
                templateUrl: 'views/dialogs/transaction-mapping-dialog-view.html',
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    schemeId: vm.config.scheme
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    transactionSchemeService.update(vm.config.scheme, res.data).then(function () {
                        //vm.getList();
                        $scope.$apply();
                    })
                }
            });
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function ($event) {
            instrumentService.create(vm.config.instrument).then(function (data) {
                console.log('DATA', data);
                if (data.status == 200 || data.status == 201) {
                    $mdDialog.show({
                        controller: 'SuccessDialogController as vm',
                        templateUrl: 'views/dialogs/success-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            success: {
                                title: "",
                                description: "You have you have successfully add instrument " + vm.config.instrument.user_code + " (user code)."
                            }
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    }).then(function () {
                        $mdDialog.hide({res: 'agree'});
                    });

                }
                if (data.status == 400 || data.status == 500) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }
            });

        };

    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/currencyService":313,"../../services/import/dataProvidersService":339,"../../services/import/importPriceDownloadSchemeService":341,"../../services/import/importTransactionService":343,"../../services/import/scheduleService":355,"../../services/import/transactionSchemeService":359,"../../services/instrument/instrumentAttributeTypeService":363,"../../services/instrument/instrumentDailyPricingModelService":364,"../../services/instrument/instrumentPaymentSizeDetailService":366,"../../services/instrumentService":361,"../../services/instrumentTypeService":362,"../../services/metaService":375}],76:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function(){

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function($scope, $mdDialog, data){

        logService.controller('importTransactionErrorsDialogController', 'initialized');

        var vm = this;

        vm.data = data;

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree'});
        };
    }

}());
},{"../../../../../core/services/logService":2}],77:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function(){

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function($scope, $mdDialog, info){

        logService.controller('WarningDialogController', 'initialized');

        var vm = this;

        vm.info = info;

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree'});
        };
    }

}());
},{"../../../../../core/services/logService":2}],78:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');


    var metaService = require('../../services/metaService');
    var transactionTypeService = require('../../services/transactionTypeService');

    module.exports = function ($scope, $mdDialog, eventActions) {

        logService.controller('InstrumentEventActionDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {transactionTypes: false};

        console.log('eventActions', eventActions);

        vm.eventActions = eventActions.$viewValue || [];

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function (propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };


        vm.checkReadyStatus = function () {
            if (vm.readyStatus.transactionTypes == true) {
                return true
            }
            return false;
        };

        transactionTypeService.getList().then(function (data) {
            console.log('data', data);
            vm.transactionTypes = data.results;
            vm.readyStatus.transactionTypes = true;
            //console.log('test?', vm.readyStatus.transactionTypes);
            $scope.$apply();
        });

        vm.newItem = {
            "transaction_type": '',
            "text": '',
            "is_sent_to_pending": null,
            "is_book_automatic": null,
            "button_position": ''

        };

        vm.bindTransactionType = function (row) {
            var name;
            vm.transactionTypes.forEach(function (item) {
                if (row.transaction_type == item.id) {
                    row.transaction_type_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.editItem = function (item) {
            item.editStatus = true;
        };

        vm.saveItem = function (item) {
            item.editStatus = false;
        };

        vm.deleteItem = function (item, index) {
            vm.eventActions.splice(index, 1);
        };

        vm.addRow = function () {
            vm.eventActions.push({
                "transaction_type": vm.newItem.transaction_type,
                "text": vm.newItem.text,
                "is_sent_to_pending": vm.newItem.is_sent_to_pending,
                "is_book_automatic": vm.newItem.is_book_automatic,
                "button_position": vm.newItem.button_position
            });

            vm.newItem = {
                "transaction_type": '',
                "text": '',
                "is_sent_to_pending": null,
                "is_book_automatic": null,
                "button_position": ''
            };
        };

        console.log('eventActions', eventActions);

        vm.agree = function () {
            //console.log('vm.attr', vm.attribute);
            eventActions.$viewValue = vm.eventActions;
            $mdDialog.hide({status: 'agree'});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/metaService":375,"../../services/transactionTypeService":393}],79:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var dataProvidersService = require('../../services/import/dataProvidersService');
    var scheduleService = require('../../services/import/scheduleService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var instrumentSchemeService = require('../../services/import/instrumentSchemeService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('InstrumentMappingDialogController', 'initialized');

        var vm = this;

        vm.dataProviders = [];

        vm.readyStatus = {dataProviders: false, scheme: true};

        dataProvidersService.getList().then(function (data) {
            vm.dataProviders = data;
            vm.readyStatus.dataProviders = true;
            $scope.$apply();
        });

        vm.hidedEntityAttrs = ['factor_schedule_method',
            'accrual_calculation_schedule_method',
            'provider',
            'url',
            'scheme_name',
            'id',
            'attributes',
            'inputs'];

        vm.baseAttrs = metaService.getBaseAttrs();
        vm.entityAttrs = metaService.getEntityAttrs("instrument-scheme").map(function (item) {
            if (item.key == 'factor_schedule_method' || item.key == 'accrual_calculation_schedule_method') {
                return null;
            }
            return item;
        }).filter(function (item) {
            return !!item
        });
        vm.attrs = [];
        attributeTypeService.getList('instrument').then(function (data) {
            vm.attrs = data.results;
            $scope.$apply();
        });

        vm.scheme = {};

        var createEmptyScheme = function () {
            vm.scheme.attributes = [];
            var b;
            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                vm.scheme[vm.baseAttrs[b].key] = ''
            }
            var i;
            for (i = 0; i < vm.entityAttrs.length; i = i + 1) {
                vm.scheme[vm.entityAttrs[i].key] = ''
            }
        };

        createEmptyScheme();

        vm.mapFields = [
            {
                key: 'name',
                caption: 'Name',
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_code',
                caption: 'User code',
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'instrument_type',
                caption: 'Instrument type',
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: 'instrument_type'
            },
            {
                key: 'short_name',
                caption: 'Short name',
                required: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'public_name',
                caption: 'Public name',
                required: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'maturity_date',
                caption: 'Maturity',
                required: true,
                expression: '',
                complexExpressionEntity: false
            }
        ];

        vm.mappedFieldsDefaults = [
            {
                key: 'daily_pricing_model',
                caption: 'Daily pricing model',
                required: false,
                hasBackground: true,
                value_type: "field",
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'price_download_scheme',
                caption: 'Price download scheme',
                required: false,
                hasBackground: true,
                value_type: "field",
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'pricing_currency',
                caption: 'Pricing currency',
                value_type: "field",
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: 'currency'
            },
            {
                key: 'price_multiplier',
                caption: 'Price multiplier',
                value_type: 10,
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'reference_for_pricing',
                caption: 'Reference for pricing',
                required: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'default_price',
                caption: 'Default price',
                value_type: 10,
                required: false,
                expression: '',
                complexExpressionEntity: false
            }
        ];

        vm.mappedFieldsSecond = [
            {
                key: 'accrued_currency',
                caption: 'Accrued currency',
                //value_type: 10,
                value_type: "field",
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: 'currency'
            },
            {
                key: 'accrued_multiplier',
                caption: 'Accrued multiplier',
                value_type: 10,
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'default_accrued',
                caption: 'Default accrued',
                value_type: 10,
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'payment_size_detail',
                caption: 'Payment size detail',
                value_type: "field",
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_text_1',
                caption: 'User text 1',
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_text_2',
                caption: 'User text 2',
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_text_3',
                caption: 'User text 3',
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'notes',
                caption: 'Notes',
                required: false,
                expression: '',
                complexExpressionEntity: false
            }
        ];
        vm.mappedDynamic = [];

        vm.providerFields = [
            {
                name: '',
                field: ''
            }
        ];

        vm.addProviderField = function () {
            vm.providerFields.push({
                name: '',
                field: ''
            })
        };

        vm.addMapField = function () {
            vm.mappedDynamic.push({
                expression: '',
                required: false,
                complexExpressionEntity: false
            })
        };

        vm.removeProviderField = function (item, $index) {
            console.log('$index', $index);

            vm.providerFields.splice($index, 1);

            //$scope.$apply();
            console.log('vm.providerFields', vm.providerFields);
        };

        vm.removeMappingField = function (item, $index) {
            vm.mappedDynamic.splice($index, 1);
        };

        vm.beatufier = function (key) {
            if (key !== undefined) {
                var str = key.split('_').join(' ');
                return str;
            }
            return key
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function ($event) {

            vm.scheme['scheme_name'] = vm.schemeName;
            vm.scheme['provider'] = vm.schemeProvider;
            vm.scheme['factor_schedule_method'] = vm.factorScheduleMethod;
            vm.scheme['accrual_calculation_schedule_method'] = vm.accrualCalculation;

            vm.scheme.attributes = [];


            function syncMapFields() {
                var i;
                for (i = 0; i < vm.mapFields.length; i = i + 1) {
                    if (vm.mapFields[i].hasOwnProperty('attribute_type')) {
                        vm.scheme.attributes.push({
                            attribute_type: vm.mapFields[i]['attribute_type'],
                            value: vm.mapFields[i].expression
                        })
                    } else {
                        vm.scheme[vm.mapFields[i].key] = vm.mapFields[i].expression;
                    }
                }
            }

            function syncMappedFieldsDefaults() {
                var i;
                for (i = 0; i < vm.mappedFieldsDefaults.length; i = i + 1) {
                    if (vm.mappedFieldsDefaults[i].hasOwnProperty('attribute_type')) {
                        vm.scheme.attributes.push({
                            attribute_type: vm.mappedFieldsDefaults[i]['attribute_type'],
                            value: vm.mappedFieldsDefaults[i].expression
                        })
                    } else {
                        vm.scheme[vm.mappedFieldsDefaults[i].key] = vm.mappedFieldsDefaults[i].expression;
                    }
                }
            }

            function syncMappedFieldsSecond() {
                var i;
                for (i = 0; i < vm.mappedFieldsSecond.length; i = i + 1) {
                    if (vm.mappedFieldsSecond[i].hasOwnProperty('attribute_type')) {
                        vm.scheme.attributes.push({
                            attribute_type: vm.mappedFieldsSecond[i]['attribute_type'],
                            value: vm.mappedFieldsSecond[i].expression
                        })
                    } else {
                        vm.scheme[vm.mappedFieldsSecond[i].key] = vm.mappedFieldsSecond[i].expression;
                    }
                }
            }

            function syncMappedDynamic() {
                var a, x, b, i, e;

                for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                    if (vm.baseAttrs[b].key == 'notes') {
                        if (vm.scheme.notes != null || vm.scheme.notes != '') {
                            vm.mappedDynamic.push({
                                key: 'notes',
                                caption: 'Notes',
                                required: false,
                                value: vm.baseAttrs[b],
                                complexExpressionEntity: false,
                                expression: vm.scheme.notes
                            })
                        }
                    }
                }

                var keys = Object.keys(vm.scheme);

                var usedEntityAttrs = ['user_code', 'instrument_type', 'reference_for_pricing', 'daily_pricing_model',
                    'price_download_scheme', 'default_price', 'default_accrued', 'payment_size_detail', 'public_name'];

                for (i = 0; i < keys.length; i = i + 1) {
                    if (vm.hidedEntityAttrs.indexOf(keys[i]) === -1) {

                        if (usedEntityAttrs.indexOf(keys[i]) === -1) {

                            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                                if (vm.entityAttrs[e].key == keys[i]) {
                                    if (vm.scheme[keys[i]] != "" && vm.scheme[keys[i]] != null && vm.scheme[keys[i]] != undefined) {
                                        var complexExpressionEntity = false;
                                        if (keys[i] == 'accrued_currency' || keys[i] == 'pricing_currency') {
                                            complexExpressionEntity = 'currency';
                                        }
                                        vm.mappedDynamic.push({
                                            key: keys[i],
                                            required: false,
                                            value: vm.entityAttrs[e],
                                            complexExpressionEntity: complexExpressionEntity,
                                            expression: vm.scheme[keys[i]]
                                        })
                                    }
                                }
                            }
                        }


                    }
                }

                for (a = 0; a < vm.scheme.attributes.length; a = a + 1) {
                    console.log('vm.scheme.attributes[a]', vm.scheme.attributes[a]);
                    console.log('vm.attrs', vm.attrs);

                    for (x = 0; x < vm.attrs.length; x = x + 1) {
                        if (vm.attrs[x].id == vm.scheme.attributes[a].attribute_type) {

                            var hasComplexExpression = false;

                            if (vm.attrs[x].value_type == 30) {
                                hasComplexExpression = true;
                            }

                            vm.mappedDynamic.push({
                                id: vm.scheme.attributes[a]['id'],
                                complexExpressionEntity: hasComplexExpression,
                                expression: vm.scheme.attributes[a].value,
                                attribute_name: vm.scheme.attributes[a]['name'],
                                attribute_type: vm.scheme.attributes[a]['attribute_type'],
                                value: vm.attrs[x],
                                attr: vm.scheme.attributes[a]
                            });
                        }
                    }
                }
            }

            syncMapFields();
            syncMappedFieldsDefaults();
            syncMappedFieldsSecond();
            syncMappedDynamic();


            vm.scheme.inputs = vm.providerFields;
            vm.scheme.inputs.forEach(function (item) {
                item.field = item.name;
            });

            instrumentSchemeService.create(vm.scheme).then(function (data) {
                console.log('DATA', data);
                if (data.status == 200 || data.status == 201) {
                    $mdDialog.hide({status: 'agree'});
                }
                if (data.status == 400) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }
            });

        };

        vm.openMapping = function ($event, item) {

            console.log('ITEEM', item);

            $mdDialog.show({
                controller: 'EntityTypeMappingDialogController as vm',
                templateUrl: 'views/dialogs/entity-type-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    mapItem: item
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                }
            });
        };

        vm.openExpressionDialog = function ($event, item) {
            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: item
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    item.expression = res.data.item.expression;
                    $scope.$apply();
                }
            });
        };

        vm.resolveFieldType = function (field) {

            console.log('field', field);

            if (field.value.hasOwnProperty('key')) {
                field.key = field.value.key;

                if (field.key == 'accrued_currency' || field.key == 'pricing_currency') {
                    field.complexExpressionEntity = 'currency';
                }
            }

            if (field.value.hasOwnProperty('value_type') && field.value.hasOwnProperty('id')) {
                field.attribute_type = field.value.id;
                if (field.value.value_type == 30) {
                    field.complexExpressionEntity = 'classifier';
                }
            }

        };

        vm.getModelKey = function (item) {
            if (item.hasOwnProperty('key')) {
                return 'key'
            }
            return 'attribute_type'
        };

        vm.getSchedules = function () {

            scheduleService.getAccrualScheduleDownloadMethodList().then(function (data) {
                vm.accrualSchedule = data;
                vm.readyStatus.accrualSchedule = true;
                $scope.$apply();
            });

            scheduleService.getFactorScheduleDownloadMethodList().then(function (data) {
                vm.factorSchedule = data;
                vm.readyStatus.factorSchedule = true;
                $scope.$apply();
            });

        };

        vm.checkSchedules = function () {
            if (vm.readyStatus.accrualSchedule && vm.readyStatus.factorSchedule) {
                return true;
            }
            return false;
        };

        vm.getSchedules();

        vm.checkAttrs = function () {

            var b, e, a;
            var x, y, z, x1, y1, z1, x2, y2, z2, x3, y3, z3;
            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                vm.baseAttrs[b].disabled = false;
                for (x = 0; x < vm.mapFields.length; x = x + 1) {
                    if (vm.mapFields[x].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
                for (x1 = 0; x1 < vm.mappedFieldsDefaults.length; x1 = x1 + 1) {
                    if (vm.mappedFieldsDefaults[x1].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
                for (x2 = 0; x2 < vm.mappedFieldsSecond.length; x2 = x2 + 1) {
                    if (vm.mappedFieldsSecond[x2].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
                for (x3 = 0; x3 < vm.mappedDynamic.length; x3 = x3 + 1) {
                    if (vm.mappedDynamic[x3].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
            }

            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                vm.entityAttrs[e].disabled = false;
                for (y = 0; y < vm.mapFields.length; y = y + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mapFields[y].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
                for (y1 = 0; y1 < vm.mappedFieldsDefaults.length; y1 = y1 + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mappedFieldsDefaults[y1].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
                for (y2 = 0; y2 < vm.mappedFieldsSecond.length; y2 = y2 + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mappedFieldsSecond[y2].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
                for (y3 = 0; y3 < vm.mappedDynamic.length; y3 = y3 + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mappedDynamic[y3].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
            }

            for (a = 0; a < vm.attrs.length; a = a + 1) {
                vm.attrs[a].disabled = false;
                for (z = 0; z < vm.mapFields.length; z = z + 1) {
                    if (vm.mapFields[z].hasOwnProperty('attribute_type')) {
                        if (vm.mapFields[z].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
                for (z1 = 0; z1 < vm.mappedFieldsDefaults.length; z1 = z1 + 1) {
                    if (vm.mappedFieldsDefaults[z1].hasOwnProperty('attribute_type')) {
                        if (vm.mappedFieldsDefaults[z1].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
                for (z2 = 0; z2 < vm.mappedFieldsSecond.length; z2 = z2 + 1) {
                    if (vm.mappedFieldsSecond[z2].hasOwnProperty('attribute_type')) {
                        if (vm.mappedFieldsSecond[z2].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
                for (z3 = 0; z3 < vm.mappedDynamic.length; z3 = z3 + 1) {
                    if (vm.mappedDynamic[z3].hasOwnProperty('attribute_type')) {
                        if (vm.mappedDynamic[z3].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
            }

        }
    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/import/dataProvidersService":339,"../../services/import/instrumentSchemeService":347,"../../services/import/scheduleService":355,"../../services/metaService":375}],80:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var dataProvidersService = require('../../services/import/dataProvidersService');
    var instrumentSchemeService = require('../../services/import/instrumentSchemeService');
    var scheduleService = require('../../services/import/scheduleService');
    var attributeTypeService = require('../../services/attributeTypeService');

    module.exports = function ($scope, $mdDialog, schemeId) {

        logService.controller('InstrumentMappingEditDialogController', 'initialized');

        var vm = this;
        vm.scheme = {};
        vm.readyStatus = {dataProviders: false, scheme: false};

        instrumentSchemeService.getByKey(schemeId).then(function (data) {
            vm.scheme = data;
            vm.getAttrs();
            $scope.$apply();
        });

        vm.hidedEntityAttrs = [
            'factor_schedule_method',
            'accrual_calculation_schedule_method',
            'provider',
            'url',
            'scheme_name',
            'id',
            'attributes',
            'inputs'];

        vm.baseAttrs = metaService.getBaseAttrs();
        vm.entityAttrs = metaService.getEntityAttrs("instrument-scheme").map(function (item) {
            if (item.key == 'factor_schedule_method' || item.key == 'accrual_calculation_schedule_method') {
                return null;
            }
            return item;
        }).filter(function (item) {
            return !!item
        });
        console.log('vm.entityAttrs', vm.entityAttrs);
        vm.attrs = [];


        vm.getAttrs = function () {
            attributeTypeService.getList('instrument').then(function (data) {
                vm.attrs = data.results;

                fillArraysWithScheme();

                $scope.$apply();
            });
        };

        vm.dataProviders = [];

        dataProvidersService.getList().then(function (data) {
            vm.dataProviders = data;
            vm.readyStatus.dataProviders = true;
            $scope.$apply();
        });

        vm.mapFields = [
            {
                key: 'name',
                caption: 'Name',
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_code',
                caption: 'User code',
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'instrument_type',
                caption: 'Instrument type',
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: 'instrument_type'
            },
            {
                key: 'short_name',
                caption: 'Short name',
                required: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'public_name',
                caption: 'Public name',
                required: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'maturity_date',
                caption: 'Maturity',
                required: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'daily_pricing_model',
                caption: 'Daily pricing model',
                required: false,
                hasBackground: true,
                value_type: "field",
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'price_download_scheme',
                caption: 'Price download scheme',
                required: false,
                hasBackground: true,
                value_type: "field",
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'pricing_currency',
                caption: 'Pricing currency',
                value_type: "field",
                required: true,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: 'currency'
            },
            {
                key: 'price_multiplier',
                caption: 'Price multiplier',
                value_type: 10,
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'reference_for_pricing',
                caption: 'Reference for pricing',
                required: true,
                value_type: 10,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'default_price',
                caption: 'Default price',
                value_type: 10,
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'accrued_currency',
                caption: 'Accrued currency',
                //value_type: 10,
                value_type: "field",
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: 'currency'
            },
            {
                key: 'accrued_multiplier',
                caption: 'Accrued multiplier',
                value_type: 10,
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'default_accrued',
                caption: 'Default accrued',
                value_type: 10,
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'payment_size_detail',
                caption: 'Payment size detail',
                value_type: "field",
                required: false,
                hasBackground: true,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_text_1',
                caption: 'User text 1',
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_text_2',
                caption: 'User text 2',
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'user_text_3',
                caption: 'User text 3',
                required: false,
                expression: '',
                complexExpressionEntity: false
            },
            {
                key: 'notes',
                caption: 'Notes',
                required: false,
                expression: '',
                complexExpressionEntity: false
            }
        ];

        vm.mappedFieldsDefaults = [


        ];

        vm.mappedFieldsSecond = [

        ];

        vm.mappedDynamic = [];

        vm.providerFields = [
            {
                name: '',
                field: ''
            }
        ];

        var fillArraysWithScheme = function () {

            vm.schemeName = vm.scheme['scheme_name'];
            vm.schemeProvider = vm.scheme['provider'];
            vm.factorScheduleMethod = vm.scheme['factor_schedule_method'];
            vm.accrualCalculation = vm.scheme['accrual_calculation_schedule_method'];

            var findKeyCaption = function (key) {
                var i;
                for (i = 0; i < vm.entityAttrs.length; i = i + 1) {
                    if (vm.entityAttrs[i].key == key) {
                        return vm.entityAttrs[i].caption;
                    }
                }
            };

            var checkRequired = function (key) {
                var requiredFields = ['name',
                    'user_code',
                    'instrument_type',
                    'reference_for_pricing',
                    'short_name',
                    'public_name'];
                if (requiredFields.indexOf(key) !== -1) {
                    return true
                }
                return false;
            };

            var findEntityWithComplexExpression = function (key) {

                if (key == 'accrued_currency') {
                    return 'currency';
                }
                if (key == 'pricing_currency') {
                    return 'currency';
                }

                if (key == 'instrument_type') {
                    return 'instrument_type';
                }

                return false;

            };

            function syncMapFields() {
                var keys = Object.keys(vm.scheme);
                var i;
                var m;
                //vm.mapFields = [];
                for (i = 0; i < keys.length; i = i + 1) {
                    if (vm.hidedEntityAttrs.indexOf(keys[i]) === -1) {

                        var caption = findKeyCaption(keys[i]);
                        var required = checkRequired(keys[i]);
                        var complexExpressionEntity = findEntityWithComplexExpression(keys[i]);

                        for (m = 0; m < vm.mapFields.length; m = m + 1) {
                            if (vm.mapFields[m].key == keys[i]) {
                                vm.mapFields[m].caption = caption;
                                vm.mapFields[m].required = required;
                                vm.mapFields[m].complexExpressionEntity = complexExpressionEntity;
                                vm.mapFields[m].expression = vm.scheme[keys[i]];
                            }

                        }

                    }
                }
            }

            function syncMappedFieldsDefaults() {
                var keys = Object.keys(vm.scheme);
                var i;
                var m;
                //vm.mapFields = [];
                for (i = 0; i < keys.length; i = i + 1) {

                    if (vm.hidedEntityAttrs.indexOf(keys[i]) === -1) {

                        var caption = findKeyCaption(keys[i]);
                        var required = checkRequired(keys[i]);
                        var complexExpressionEntity = findEntityWithComplexExpression(keys[i]);

                        for (m = 0; m < vm.mappedFieldsDefaults.length; m = m + 1) {
                            if (vm.mappedFieldsDefaults[m].key == keys[i]) {
                                vm.mappedFieldsDefaults[m].caption = caption;
                                vm.mappedFieldsDefaults[m].required = required;
                                vm.mappedFieldsDefaults[m].complexExpressionEntity = complexExpressionEntity;
                                vm.mappedFieldsDefaults[m].expression = vm.scheme[keys[i]];
                            }

                        }

                    }
                }
            }

            function syncMappedFieldsSecond() {
                var keys = Object.keys(vm.scheme);
                var i;
                var m;
                //vm.mapFields = [];
                for (i = 0; i < keys.length; i = i + 1) {

                    if (vm.hidedEntityAttrs.indexOf(keys[i]) === -1) {

                        var caption = findKeyCaption(keys[i]);
                        var required = checkRequired(keys[i]);
                        var complexExpressionEntity = findEntityWithComplexExpression(keys[i]);

                        for (m = 0; m < vm.mappedFieldsSecond.length; m = m + 1) {
                            if (vm.mappedFieldsSecond[m].key == keys[i]) {
                                vm.mappedFieldsSecond[m].caption = caption;
                                vm.mappedFieldsSecond[m].required = required;
                                vm.mappedFieldsSecond[m].complexExpressionEntity = complexExpressionEntity;
                                vm.mappedFieldsSecond[m].expression = vm.scheme[keys[i]];
                            }

                        }

                    }
                }
            }

            function syncMappedDynamic() {
                var a, x, b, i, e;
                //
                //for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                //    if (vm.baseAttrs[b].key == 'notes') {
                //        if (vm.scheme.notes != null || vm.scheme.notes != '') {
                //            vm.mappedDynamic.push({
                //                key: 'notes',
                //                caption: 'Notes',
                //                required: false,
                //                value: vm.baseAttrs[b],
                //                complexExpressionEntity: false,
                //                expression: vm.scheme.notes
                //            })
                //        }
                //    }
                //}

                var keys = Object.keys(vm.scheme);

                var usedEntityAttrs = ['user_code', 'instrument_type', 'reference_for_pricing', 'daily_pricing_model',
                    'price_download_scheme', 'default_price', 'default_accrued', 'payment_size_detail', 'public_name'];

                //for (i = 0; i < keys.length; i = i + 1) {
                //    if (vm.hidedEntityAttrs.indexOf(keys[i]) === -1) {
                //
                //        if (usedEntityAttrs.indexOf(keys[i]) === -1) {
                //
                //            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                //                if (vm.entityAttrs[e].key == keys[i]) {
                //                    if (vm.scheme[keys[i]] != "" && vm.scheme[keys[i]] != null && vm.scheme[keys[i]] != undefined) {
                //                        var complexExpressionEntity = false;
                //                        if (keys[i] == 'accrued_currency' || keys[i] == 'pricing_currency') {
                //                            complexExpressionEntity = 'currency';
                //                        }
                //                        vm.mappedDynamic.push({
                //                            key: keys[i],
                //                            required: false,
                //                            value: vm.entityAttrs[e],
                //                            complexExpressionEntity: complexExpressionEntity,
                //                            expression: vm.scheme[keys[i]]
                //                        })
                //                    }
                //                }
                //            }
                //        }
                //
                //
                //    }
                //}

                for (a = 0; a < vm.scheme.attributes.length; a = a + 1) {
                    console.log('vm.scheme.attributes[a]', vm.scheme.attributes[a]);
                    console.log('vm.attrs', vm.attrs);

                    for (x = 0; x < vm.attrs.length; x = x + 1) {
                        if (vm.attrs[x].id == vm.scheme.attributes[a].attribute_type) {

                            var hasComplexExpression = false;

                            if (vm.attrs[x].value_type == 30) {
                                hasComplexExpression = 'classifier';
                            }

                            vm.mappedDynamic.push({
                                id: vm.scheme.attributes[a]['id'],
                                complexExpressionEntity: hasComplexExpression,
                                expression: vm.scheme.attributes[a].value,
                                attribute_name: vm.scheme.attributes[a]['name'],
                                attribute_type: vm.scheme.attributes[a]['attribute_type'],
                                value: vm.attrs[x],
                                attr: vm.scheme.attributes[a]
                            });
                        }
                    }
                }
            }


            syncMapFields();
            syncMappedFieldsDefaults();
            syncMappedFieldsSecond();
            syncMappedDynamic();

            vm.providerFields = vm.scheme.inputs;
            vm.readyStatus.scheme = true;
        };

        vm.resolveFieldType = function (field) {

            console.log('field', field);

            if (field.value.hasOwnProperty('key')) {
                field.key = field.value.key;

                if (field.key == 'accrued_currency' || field.key == 'pricing_currency') {
                    field.complexExpressionEntity = 'currency';
                }
            }

            if (field.value.hasOwnProperty('value_type') && field.value.hasOwnProperty('id')) {
                field.attribute_type = field.value.id;
                if (field.value.value_type == 30) {
                    field.complexExpressionEntity = 'classifier';
                }
            }

        };

        vm.getModelKey = function (item) {

            //console.log('key', item);

            if (item.hasOwnProperty('key')) {
                return 'key'
            }

            return 'attribute_type'
        };

        vm.addProviderField = function () {
            vm.providerFields.push({
                name: '',
                field: ''
            })
        };

        vm.beatufier = function (key) {
            //console.log('KEY', key);
            if (key !== undefined) {
                var str = key.split('_').join(' ');
                return str;
            }
            return key
        };

        vm.addMapField = function () {
            vm.mappedDynamic.push({
                expression: '',
                required: false,
                complexExpressionEntity: false
            })
        };

        vm.removeProviderField = function (item, $index) {
            vm.providerFields.splice($index, 1);
        };

        vm.removeMappingField = function (item, $index) {
            vm.mappedDynamic.splice($index, 1);
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function ($event) {
            vm.schemeUpdated = {};
            vm.schemeUpdated['scheme_name'] = vm.schemeName;
            vm.schemeUpdated['provider'] = vm.schemeProvider;
            vm.schemeUpdated['factor_schedule_method'] = vm.factorScheduleMethod;
            vm.schemeUpdated['accrual_calculation_schedule_method'] = vm.accrualCalculation;

            vm.schemeUpdated.attributes = [];

            console.log('mapFields', vm.mapFields);
            console.log('mappedFieldsDefaults', vm.mappedFieldsDefaults);
            console.log('mappedFieldsSecond', vm.mappedFieldsSecond);
            console.log('mappedDynamic', vm.mappedDynamic);

            var i, x, y, z;
            for (i = 0; i < vm.mapFields.length; i = i + 1) {
                if (vm.mapFields[i].hasOwnProperty('attribute_type')) {
                    vm.schemeUpdated.attributes.push({
                        id: vm.mapFields[i].id,
                        attribute_type: vm.mapFields[i]['attribute_type'],
                        value: vm.mapFields[i].expression
                    })
                } else {
                    vm.schemeUpdated[vm.mapFields[i].key] = vm.mapFields[i].expression;
                }
            }

            for (x = 0; x < vm.mappedFieldsDefaults.length; x = x + 1) {
                if (vm.mappedFieldsDefaults[x].hasOwnProperty('attribute_type')) {
                    vm.schemeUpdated.attributes.push({
                        id: vm.mappedFieldsDefaults[x].id,
                        attribute_type: vm.mappedFieldsDefaults[x]['attribute_type'],
                        value: vm.mappedFieldsDefaults[x].expression
                    })
                } else {
                    vm.schemeUpdated[vm.mappedFieldsDefaults[x].key] = vm.mappedFieldsDefaults[x].expression;
                }
            }

            for (y = 0; y < vm.mappedFieldsSecond.length; y = y + 1) {
                if (vm.mappedFieldsSecond[y].hasOwnProperty('attribute_type')) {
                    vm.schemeUpdated.attributes.push({
                        id: vm.mappedFieldsSecond[y].id,
                        attribute_type: vm.mappedFieldsSecond[y]['attribute_type'],
                        value: vm.mappedFieldsSecond[y].expression
                    })
                } else {
                    vm.schemeUpdated[vm.mappedFieldsSecond[y].key] = vm.mappedFieldsSecond[y].expression;
                }
            }

            for (z = 0; z < vm.mappedDynamic.length; z = z + 1) {
                if (vm.mappedDynamic[z].hasOwnProperty('attribute_type')) {
                    vm.schemeUpdated.attributes.push({
                        id: vm.mappedDynamic[z].id,
                        attribute_type: vm.mappedDynamic[z]['attribute_type'],
                        value: vm.mappedDynamic[z].expression
                    })
                } else {
                    vm.schemeUpdated[vm.mappedDynamic[z].key] = vm.mappedDynamic[z].expression;
                }
            }

            vm.schemeUpdated.inputs = vm.providerFields;
            vm.schemeUpdated.inputs.forEach(function (item) {
                item.field = item.name;
            });

            instrumentSchemeService.update(vm.scheme.id, vm.schemeUpdated).then(function (data) {
                console.log('DATA', data);
                if (data.status == 200 || data.status == 201) {
                    $mdDialog.hide({res: 'agree'});
                }
                if (data.status == 400) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }
            });
        };

        vm.openMapping = function ($event, item) {
            $mdDialog.show({
                controller: 'EntityTypeMappingDialogController as vm',
                templateUrl: 'views/dialogs/entity-type-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    mapItem: item
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                }
            });
        };

        vm.openExpressionDialog = function ($event, item) {
            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: item
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    if (res.data) {
                        item.expression = res.data.item.expression;
                    }
                    $scope.$apply();
                }
            });
        };

        vm.getSchedules = function () {

            scheduleService.getAccrualScheduleDownloadMethodList().then(function (data) {
                vm.accrualSchedule = data;
                vm.readyStatus.accrualSchedule = true;
                $scope.$apply();
            });

            scheduleService.getFactorScheduleDownloadMethodList().then(function (data) {
                vm.factorSchedule = data;
                vm.readyStatus.factorSchedule = true;
                $scope.$apply();
            });

        };

        vm.checkSchedules = function () {
            if (vm.readyStatus.accrualSchedule && vm.readyStatus.factorSchedule) {
                return true;
            }
            return false;
        };

        vm.getSchedules();

        vm.checkAttrs = function () {

            console.log('chack attrs?');

            var b, e, a;
            var x, y, z, x1, y1, z1, x2, y2, z2, x3, y3, z3;
            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                vm.baseAttrs[b].disabled = false;
                for (x = 0; x < vm.mapFields.length; x = x + 1) {
                    if (vm.mapFields[x].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
                for (x1 = 0; x1 < vm.mappedFieldsDefaults.length; x1 = x1 + 1) {
                    if (vm.mappedFieldsDefaults[x1].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
                for (x2 = 0; x2 < vm.mappedFieldsSecond.length; x2 = x2 + 1) {
                    if (vm.mappedFieldsSecond[x2].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
                for (x3 = 0; x3 < vm.mappedDynamic.length; x3 = x3 + 1) {
                    if (vm.mappedDynamic[x3].key == vm.baseAttrs[b].key) {
                        vm.baseAttrs[b].disabled = true;
                    }
                }
            }

            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                vm.entityAttrs[e].disabled = false;
                for (y = 0; y < vm.mapFields.length; y = y + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mapFields[y].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
                for (y1 = 0; y1 < vm.mappedFieldsDefaults.length; y1 = y1 + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mappedFieldsDefaults[y1].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
                for (y2 = 0; y2 < vm.mappedFieldsSecond.length; y2 = y2 + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mappedFieldsSecond[y2].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
                for (y3 = 0; y3 < vm.mappedDynamic.length; y3 = y3 + 1) {
                    if (vm.hidedEntityAttrs.indexOf(vm.entityAttrs[e].key) === -1) {
                        if (vm.mappedDynamic[y3].key == vm.entityAttrs[e].key) {
                            vm.entityAttrs[e].disabled = true;
                        }
                    }
                }
            }

            for (a = 0; a < vm.attrs.length; a = a + 1) {
                vm.attrs[a].disabled = false;
                for (z = 0; z < vm.mapFields.length; z = z + 1) {
                    if (vm.mapFields[z].hasOwnProperty('attribute_type')) {
                        if (vm.mapFields[z].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
                for (z1 = 0; z1 < vm.mappedFieldsDefaults.length; z1 = z1 + 1) {
                    if (vm.mappedFieldsDefaults[z1].hasOwnProperty('attribute_type')) {
                        if (vm.mappedFieldsDefaults[z1].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
                for (z2 = 0; z2 < vm.mappedFieldsSecond.length; z2 = z2 + 1) {
                    if (vm.mappedFieldsSecond[z2].hasOwnProperty('attribute_type')) {
                        if (vm.mappedFieldsSecond[z2].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
                for (z3 = 0; z3 < vm.mappedDynamic.length; z3 = z3 + 1) {
                    if (vm.mappedDynamic[z3].hasOwnProperty('attribute_type')) {
                        if (vm.mappedDynamic[z3].attribute_type == vm.attrs[a].id) {
                            vm.attrs[a].disabled = true;
                        }
                    }
                }
            }

        }
    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/import/dataProvidersService":339,"../../services/import/instrumentSchemeService":347,"../../services/import/scheduleService":355,"../../services/metaService":375}],81:[function(require,module,exports){
/**
 * Created by szhitenev on 28.06.2016.
 */
(function () {

    'use strict';

    var instrumentService = require('../../services/instrumentService');

    module.exports = function ($scope, $mdDialog) {

        var vm = this;

        vm.search = {
            'user_code': '',
            'name': '',
            'short_name': '',
            'user_text_1': '',
            'user_text_2': '',
            'user_text_3': ''
        };

        vm.instruments = [];
        vm.selectedItem = {};


        vm.agree = function () {
            $mdDialog.hide({status: 'agree', data: {item: vm.selectedItem}});
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.selectRow = function (item) {
            vm.instruments.forEach(function (item) {
                item.active = false;
            });
            vm.selectedItem = item;
            item.active = true;
        };

        vm.selectAndSave = function (item) {
            $mdDialog.hide({status: 'agree', data: {item: item}});
        };

        instrumentService.getList({filters: vm.search}).then(function (data) {
            vm.instruments = data.results;
            $scope.$apply();
        });

        vm.updateTable = function () {
            instrumentService.getList({filters: vm.search}).then(function (data) {
                vm.instruments = data.results;
                $scope.$apply();
            })
        }

    };

}());
},{"../../services/instrumentService":361}],82:[function(require,module,exports){
(function(){

	'use strict';

	var logService = require('../../../../../core/services/logService');
	var membersAndGroupsService = require('../../services/membersAndGroupsService');
	
	module.exports = function($scope, $mdDialog, groupId) {

		var vm = this;

		vm.membersList = [];
		vm.assignedMembersList = [];
		vm.groups = [];

		membersAndGroupsService.getList('members').then(function (data) {
			vm.membersList = data.results;

			membersAndGroupsService.getMemberOrGroupByKey('groups', groupId).then(function (data) {
				vm.groups = data;
				console.log('groups is', data);
				var assignedMembersIds = vm.groups.members;
				// separate assinged members from available
				if (assignedMembersIds && assignedMembersIds.length > 0) {
					assignedMembersIds.map(function(assignedId) {
						// allMembersList.map(function(member, memberIndex) {
						vm.membersList.map(function(member, memberIndex) {
							var memberId = member['id'];
							if (memberId === assignedId) {
								vm.membersList.splice(memberIndex, 1);
								vm.assignedMembersList.push(member);
							}
						});
					});
				}
				$scope.$apply();
			});

		});

		vm.cancel = function () {
			$mdDialog.cancel();
		};

		vm.agree = function () {
			var assignedMembersIds = [];
			if (vm.assignedMembersList && vm.assignedMembersList.length > 0) {
				vm.assignedMembersList.map(function(group) {
					assignedMembersIds.push(group['id']);
				});
			}
			$mdDialog.hide({status: 'agree', data: {members: assignedMembersIds, name: vm.groups.name}});
		};
	}

}());
},{"../../../../../core/services/logService":2,"../../services/membersAndGroupsService":369}],83:[function(require,module,exports){
(function(){

	'use strict';

	var logService = require('../../../../../core/services/logService');
	var membersAndGroupsService = require('../../services/membersAndGroupsService');
	
	module.exports = function($scope, $mdDialog, memberId) {

		var vm = this;

		vm.groupsList = [];
		vm.assignedGroupsList = [];
		vm.members = [];

		membersAndGroupsService.getList('groups').then(function (data) {
			vm.groupsList = data.results;

			membersAndGroupsService.getMemberOrGroupByKey('members', memberId).then(function (data) {
				vm.members = data;
				var assignedGroupsIds = vm.members.groups;
				// separate assigned groups from available
				if (assignedGroupsIds && assignedGroupsIds.length > 0) {
					assignedGroupsIds.map(function(assignedId) {
						vm.groupsList.map(function(group, groupIndex) {
							var groupId = group['id'];
							if (groupId === assignedId) {
								vm.groupsList.splice(groupIndex, 1);
								vm.assignedGroupsList.push(group);
							}
						});
					});
				}
				$scope.$apply();
			});

		});

		vm.cancel = function () {
			$mdDialog.cancel();
		};

		vm.agree = function () {
			var assignedGroupsIds = [];
			if (vm.assignedGroupsList && vm.assignedGroupsList.length > 0) {
				vm.assignedGroupsList.map(function(group) {
					assignedGroupsIds.push(group['id']);
				});
			}
			$mdDialog.hide({status: 'agree', data: {isAdmin: vm.memberIsAdmin, groups: assignedGroupsIds, join_date: vm.members.join_date}});
		};
	}

}());
},{"../../../../../core/services/logService":2,"../../services/membersAndGroupsService":369}],84:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var importPriceDownloadSchemeService = require('../../services/import/importPriceDownloadSchemeService');
    var dataProvidersService = require('../../services/import/dataProvidersService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('PriceDownloadSchemeAddDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {scheme: true, providers: false};

        vm.dataProviders = [];

        dataProvidersService.getList().then(function (data) {
            vm.dataProviders = data;
            vm.readyStatus.providers = true;
            vm.getList();
            $scope.$apply();
        });

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function (propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.editItem = function (item) {
            item.editStatus = true;
        };

        vm.saveItem = function (item) {
            importPriceDownloadSchemeService.update(item.id, item).then(function () {
                item.editStatus = false;
                vm.getList();
            });

        };

        vm.deleteItem = function (item, index) {
            importPriceDownloadSchemeService.deleteByKey(item.id);
            setTimeout(function () {
                vm.getList();
            }, 100)
        };

        vm.items = [];

        vm.getList = function () {

            importPriceDownloadSchemeService.getList().then(function (data) {
                vm.items = data.results;

                vm.items.forEach(function (item) {

                    vm.dataProviders.forEach(function (provider) {
                        if (item.provider == provider.id) {
                            item.provider_name = provider.name
                        }
                    })
                });

                $scope.$apply();
            });
        };

        vm.addRow = function () {

            importPriceDownloadSchemeService.create(vm.newItem).then(function () {
                vm.newItem = {
                    "scheme_name": null,
                    "provider": null,
                    "bid0": '',
                    "bid1": '',
                    "bid2": '',
                    "bid_multiplier": '',
                    "ask0": "",
                    "ask1": "",
                    "ask2": "",
                    "ask_multiplier": "",
                    "last": "",
                    "last_multiplier": "",
                    "mid": "",
                    "mid_multiplier": "",
                    "bid_history": "",
                    "ask_history": "",
                    "last_history": "",
                    "mid_history": "",
                    "bid_history_multiplier": "",
                    "mid_history_multiplier": "",
                    "last_history_multiplier": "",
                    "ask_history_multiplier": "",
                    "currency_fxrate": "",
                    "currency_fxrate_multiplier": ""
                };

                vm.getList();
            });


        };

        vm.agree = function () {

        };

    };

}());
},{"../../../../../core/services/logService":2,"../../services/import/dataProvidersService":339,"../../services/import/importPriceDownloadSchemeService":341,"../../services/metaService":375}],85:[function(require,module,exports){
(function () {

    'use strict';

    module.exports = function ($scope, $mdDialog) {

    	var vm = this;

        vm.cancel = function () {
            $mdDialog.cancel();
        };

    }

}());
},{}],86:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function(){

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function($scope, $mdDialog, success){

        logService.controller('SuccessDialogController', 'initialized');

        var vm = this;

        vm.success = success;

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree'});
        };
    }

}());
},{"../../../../../core/services/logService":2}],87:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var scheduleService = require('../../services/import/scheduleService');
    var transactionSchemeService = require('../../services/import/transactionSchemeService');
    var transactionTypeService = require('../../services/transactionTypeService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('InstrumentMappingDialogController', 'initialized');

        var vm = this;

        vm.dataProviders = [];

        vm.readyStatus = {dataProviders: false, scheme: true, transactionTypes: false};

        transactionTypeService.getList().then(function (data) {
            vm.transactionTypes = data.results;
            vm.readyStatus.transactionTypes = true;
            $scope.$apply();
        });

        vm.openInputs = function (item, $event) {
            $mdDialog.show({
                controller: 'TransactionMappingInputMappingDialogController as vm',
                templateUrl: 'views/dialogs/transaction-mapping-input-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    data: {
                        item: item
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);

                    item = res.data.item;
                }
            });
        };

        vm.checkReadyStatus = function () {
            return vm.readyStatus.scheme && vm.readyStatus.transactionTypes;
        };

        vm.scheme = {};

        var createEmptyScheme = function () {
            vm.scheme.inputs = [];
            vm.scheme.rules = [];
            vm.scheme.rule_expr = 'a + b';
            vm.scheme.scheme_name = '';
        };

        createEmptyScheme();

        vm.openInputs = function (item, $event) {
            $mdDialog.show({
                controller: 'TransactionMappingInputMappingDialogController as vm',
                templateUrl: 'views/dialogs/transaction-mapping-input-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    data: {
                        item: item
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    item.fields = res.data.item.fields;
                }
            });
        };

        vm.mapFields = [
            {
                value: '',
                transaction_type: null,
                fields: []
            }
        ];

        vm.providerFields = [
            {
                name: '',
                column: ''
            }
        ];

        vm.addProviderField = function () {
            vm.providerFields.push({
                name: '',
                column: vm.providerFields.length
            })
        };

        vm.addMapField = function () {
            vm.mapFields.push({
                value: '',
                transaction_type: null,
                fields: []
            })
        };

        vm.removeProviderField = function (item, $index) {
            console.log('$index', $index);

            vm.providerFields.splice($index, 1);

            //$scope.$apply();
            console.log('vm.providerFields', vm.providerFields);
        };

        vm.removeMappingField = function (item, $index) {
            vm.mapFields.splice($index, 1);
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function ($event) {

            vm.scheme.inputs = vm.providerFields;
            vm.scheme.rules = vm.mapFields;

            transactionSchemeService.create(vm.scheme).then(function (data) {
                console.log('DATA', data);
                if (data.status == 200 || data.status == 201) {
                    $mdDialog.hide({status: 'agree'});
                }
                if (data.status == 400) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }
            });

        };

        vm.openMapping = function ($event, item) {

            console.log('ITEEM', item);

            $mdDialog.show({
                controller: 'EntityTypeMappingDialogController as vm',
                templateUrl: 'views/dialogs/entity-type-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    mapItem: item
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                }
            });
        };

        vm.openExpressionDialog = function ($event, item) {
            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: {
                        expression: item.value
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    if (res.data) {
                        item.value = res.data.item.expression;
                    }
                    $scope.$apply();
                }
            });
        };
    };

}());
},{"../../../../../core/services/logService":2,"../../services/import/scheduleService":355,"../../services/import/transactionSchemeService":359,"../../services/metaService":375,"../../services/transactionTypeService":393}],88:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');
    var transactionSchemeService = require('../../services/import/transactionSchemeService');
    var scheduleService = require('../../services/import/scheduleService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var transactionTypeService = require('../../services/transactionTypeService');

    module.exports = function ($scope, $mdDialog, schemeId) {

        logService.controller('InstrumentMappingEditDialogController', 'initialized');

        var vm = this;
        vm.scheme = {};
        vm.readyStatus = {scheme: false, transactionTypes: false};

        vm.mapFields = [
            {
                value: '',
                transaction_type: null,
                fields: []
            }
        ];

        vm.providerFields = [
            {
                name: '',
                column: ''
            }
        ];


        transactionSchemeService.getByKey(schemeId).then(function (data) {
            vm.scheme = data;

            if (vm.scheme.inputs.length) {

                vm.providerFields = [];

                vm.scheme.inputs.forEach(function (input) {
                    vm.providerFields.push(input);
                })

            }

            if (vm.scheme.rules.length) {
                vm.mapFields = [];

                vm.scheme.rules.forEach(function (rule) {
                    vm.mapFields.push(rule);
                })
            }

            vm.readyStatus.scheme = true;
            $scope.$apply();
        });

        transactionTypeService.getList().then(function (data) {
            vm.transactionTypes = data.results;
            vm.readyStatus.transactionTypes = true;
            $scope.$apply();
        });

        vm.openInputs = function (item, $event) {
            $mdDialog.show({
                controller: 'TransactionMappingInputMappingDialogController as vm',
                templateUrl: 'views/dialogs/transaction-mapping-input-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    data: {
                        item: item
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    item.fields = res.data.item.fields;
                }
            });
        };

        vm.checkReadyStatus = function () {
            return vm.readyStatus.scheme && vm.readyStatus.transactionTypes;
        };


        vm.addProviderField = function () {
            vm.providerFields.push({
                name: '',
                column: vm.providerFields.length
            })
        };

        vm.addMapField = function () {
            vm.mapFields.push({
                value: '',
                transaction_type: null,
                fields: []
            })
        };

        vm.removeProviderField = function (item, $index) {
            vm.providerFields.splice($index, 1);
        };

        vm.removeMappingField = function (item, $index) {
            vm.mapFields.splice($index, 1);
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function ($event) {

            vm.scheme.inputs = vm.providerFields;
            vm.scheme.rules = vm.mapFields;

            transactionSchemeService.update(vm.scheme.id, vm.scheme).then(function (data) {
                console.log('DATA', data);
                if (data.status == 200 || data.status == 201) {
                    $mdDialog.hide({res: 'agree'});
                }
                if (data.status == 400) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                }
            });
        };

        vm.openMapping = function ($event, item) {
            $mdDialog.show({
                controller: 'EntityTypeMappingDialogController as vm',
                templateUrl: 'views/dialogs/entity-type-mapping-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    mapItem: item
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                }
            });
        };

        vm.openExpressionDialog = function ($event, item) {
            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: {
                        expression: item.value
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    if (res.data) {
                        item.value = res.data.item.expression;
                    }
                    $scope.$apply();
                }
            });
        };

    };

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/import/scheduleService":355,"../../services/import/transactionSchemeService":359,"../../services/metaService":375,"../../services/transactionTypeService":393}],89:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var transactionTypeService = require('../../services/transactionTypeService');
    var metaContentTypesService = require('../../services/metaContentTypesService');

    module.exports = function ($scope, $mdDialog, data) {

        logService.controller('TransactionMappingInputMappingDialogController', 'initialized');

        var vm = this;

        vm.readyStatus = {transactionType: false};

        vm.data = data;
        vm.item = JSON.parse(JSON.stringify(vm.data.item));

        transactionTypeService.getByKey(vm.item.transaction_type).then(function (data) {
            vm.transactionType = data;


            vm.item.fields.forEach(function (field) {

                vm.transactionType.inputs.forEach(function (input) {

                    if (input.id == field.transaction_type_input) {

                        if (!input.hasOwnProperty('mapping')) {
                            input.mapping = {expression: ''};
                        }

                        input.mapping.expression = field.value_expr;

                    }

                })

            });


            vm.readyStatus.transactionType = true;
            $scope.$apply();
        });

        vm.bindType = function (item) {
            switch (item.value_type) {
                case 100:
                    return 'Relation';
                    break;
                case 10:
                    return 'String';
                case 20:
                    return 'Number';
                case 30:
                    return 'Classifier';
                case 40:
                    return 'Date';
                default:
                    return 'N/A'
            }
        };

        vm.openExpressionDialog = function ($event, item) {

            if (!item.hasOwnProperty('mapping')) {
                item.mapping = {expression: ''};
            }

            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: {
                        expression: item.mapping.expression
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    if (res.data) {
                        item.value = res.data.item.expression;
                    }
                    $scope.$apply();
                }
            });
        };

        vm.openMapping = function (item, $event) {

            if (item.value_type == 100) {

                $mdDialog.show({
                    controller: 'EntityTypeMappingDialogController as vm',
                    templateUrl: 'views/dialogs/entity-type-mapping-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: $event,
                    preserveScope: true,
                    autoWrap: true,
                    skipHide: true,
                    locals: {
                        mapItem: {complexExpressionEntity: metaContentTypesService.findEntityByContentType(item.content_type, 'ui')}
                    }
                }).then(function (res) {
                    if (res.status === 'agree') {
                        console.log("res", res.data);
                    }
                });
            } else {

                $mdDialog.show({
                    controller: 'ExpressionEditorDialogController as vm',
                    templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: $event,
                    preserveScope: true,
                    autoWrap: true,
                    skipHide: true,
                    locals: {
                        item: {expression: item.mapping.expression}
                    }
                }).then(function (res) {
                    if (res.status === 'agree') {
                        console.log("res", res.data);
                        item.mapping.expression = res.data.item.expression;
                    }
                    console.log('item', item);
                });
            }
        };

        vm.checkReadyStatus = function () {
            return vm.readyStatus.transactionType
        };

        console.log('data', data);

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {

            vm.transactionType.inputs.forEach(function (input) {

                var exist = false;

                vm.item.fields.forEach(function (field) {

                    if (field.transaction_type_input_object) {
                        if (input.id == field.transaction_type_input) {

                            exist = true;

                            if (input.hasOwnProperty('mapping')) {
                                field.value_expr = input.mapping.expression;
                            }
                        }
                    }

                });

                if (!exist) {
                    if (input.hasOwnProperty('mapping')) {
                        if (input.mapping.expression != '') {
                            vm.item.fields.push({
                                transaction_type_input: input.id,
                                value_expr: input.mapping.expression
                            })
                        }
                    }
                }

            });

            $mdDialog.hide(
                {
                    status: 'agree',
                    data: {
                        item: vm.item
                    }
                }
            );
        };
    }

}());
},{"../../../../../core/services/logService":2,"../../services/metaContentTypesService":370,"../../services/transactionTypeService":393}],90:[function(require,module,exports){
/**
 * Created by sergey on 04.11.16.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    var uiService = require('../../../services/uiService');
    var metaContentTypesService = require('../../../services/metaContentTypesService');

    module.exports = function ($scope, $mdDialog, options) {

        logService.controller('UiLayoutListDialogController', 'initalized');

        var vm = this;

        vm.readyStatus = {items: false};

        //var contentType = metaContentTypesService.getContentTypeUIByEntity(options.entityType);

        //console.log('contentType', contentType);

        vm.getList = function () {

            uiService.getListLayout(options.entityType).then(function (data) {
                vm.items = data.results;
                vm.readyStatus.items = true;
                $scope.$apply();
            });

        };

        vm.getList();

        vm.deleteItem = function (ev, item) {

            $mdDialog.show({
                controller: 'WarningDialogController as vm',
                templateUrl: 'views/warning-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                clickOutsideToClose: true,
                locals: {
                    warning: {
                        title: 'Warning',
                        description: 'Are you sure to delete layout?'
                    }
                },
                preserveScope: true,
                autoWrap: true,
                skipHide: true
            }).then(function (res) {
                if (res.status === 'agree') {
                    uiService.deleteListLayoutByKey(item.id).then(function (data) {
                        vm.getList();
                    });
                }
            })
        };

        vm.selectLayout = function (item) {
            vm.items.forEach(function (item) {
                item.is_default = false;
            });

            item.is_default = true;
        };


        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {

            var promises = [];

            vm.items.forEach(function (item) {

                promises.push(uiService.updateListLayout(item.id, item));

            });

            Promise.all(promises).then(function () {

                $mdDialog.hide({status: 'agree'});

            });
        };

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/metaContentTypesService":370,"../../../services/uiService":397}],91:[function(require,module,exports){
/**
 * Created by sergey on 04.11.16.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    module.exports = function ($scope, $mdDialog, options) {

        logService.controller('UiLayoutSaveAsDialogController', 'initialized');

        var vm = this;

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree', data: {name: vm.layoutName}});
        };

    }

}());
},{"../../../../../../core/services/logService":2}],92:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function ($scope, $mdDialog, validationData) {

        logService.controller('ValidationDialogController', 'initialized');

        var vm = this;

        vm.validationData = validationData;

        vm.errorKeys = [];

        function removeUnderscores(key) {

            var result = '';

            result = key.split('_').join(' ');

            return result.charAt(0).toUpperCase() + result.slice(1);

        }

        var i;
        var keys = Object.keys(vm.validationData);

        for (i = 0; i < keys.length; i = i + 1) {
            vm.errorKeys.push({caption: removeUnderscores(keys[i]), value: vm.validationData[keys[i]]});
        }

        vm.bindValue = function (item) {

            //console.log('ITEM', item);

            if (Array.isArray(item.value)) {

                var result = '';

                item.value.forEach(function (itemError, index) {

                    var keys = Object.keys(itemError);

                    if (keys.length > 0) {
                        if (itemError.hasOwnProperty('name')) {
                            result = result + ("<br/>&nbsp;&nbsp;" + (index + 1) + " " + itemError.name[0]);

                        } else {
                            result = result + JSON.stringify(itemError);
                        }

                    }
                });

                return result;
            }

            return JSON.stringify(item.value);

        };


        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree'});
        };
    }

}());
},{"../../../../../core/services/logService":2}],93:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function(){

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function($scope, $mdDialog, warning){

        logService.controller('WarningDialogController', 'initialized');

        var vm = this;

        vm.warning = warning;

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.agree = function () {
            $mdDialog.hide({status: 'agree'});
        };
    }

}());
},{"../../../../../core/services/logService":2}],94:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');
    var attributeTypeService = require('../services/attributeTypeService');

    var uiService = require('../services/uiService');

    var portfolioService = require('../services/portfolioService');
    var entityResolverService = require('../services/entityResolverService');
    var metaService = require('../services/metaService');

    var gridHelperService = require('../services/gridHelperService');
    var routeResolver = require('../services/routeResolverService');

    module.exports = function ($scope, $stateParams, $state, $mdDialog) {

        logService.controller('EntityDataConstructorController', 'initialized');

        var vm = this;
        vm.boxColumns = [1, 2, 3, 4, 5, 6];
        vm.readyStatus = {constructor: false};
        vm.uiIsDefault = false;

        vm.attrs = [];
        vm.baseAttrs = [];
        vm.entityAttrs = [];
        vm.userInputs = [];

        console.log($stateParams);

        vm.entityType = $stateParams.entityType;
        vm.isntanceId = $stateParams.instanceId;

        // weirdo stuff
        // we took edit layout by instance id instead of entity content_type
        // but it can be taken from different entity
        // e.g. transaction -> transaction-type.book_transaction_layout

        if (vm.isntanceId) {
            uiService.getEditLayoutByInstanceId(vm.entityType, vm.isntanceId).then(function (data) {
                //console.log(data['json_data']);
                if (data) {
                    vm.ui = data;
                } else {
                    vm.uiIsDefault = true;
                    vm.ui = uiService.getDefaultEditLayout()[0];
                }
                vm.tabs = vm.ui.data || [];
                vm.tabs.forEach(function (tab) {
                    tab.layout.fields.forEach(function (field) {
                        field.editMode = false;
                    })
                });
                addRowForTab();
                //logService.collection('vm tabs', vm.tabs);
                $scope.$apply();
            });
        } else {
            uiService.getEditLayout(vm.entityType).then(function (data) {
                //console.log(data['json_data']);
                if (data.results.length) {
                    vm.ui = data.results[0];
                } else {
                    vm.uiIsDefault = true;
                    vm.ui = uiService.getDefaultEditLayout()[0];
                }
                vm.tabs = vm.ui.data;
                vm.tabs.forEach(function (tab) {
                    tab.layout.fields.forEach(function (field) {
                        field.editMode = false;
                    })
                });
                addRowForTab();
                //logService.collection('vm tabs', vm.tabs);
                $scope.$apply();
            });
        }

        if (vm.isntanceId) {
            if (vm.entityType === 'complex-transaction') {
                entityResolverService.getByKey('transaction-type', vm.isntanceId).then(function (data) {
                    var inputs = data.inputs;
                    inputs.forEach(function (input) {
                        var input_value_type = input.value_type;
                        if (input.value_type == 100) {
                            input_value_type = 'field'
                        }

                        var contentType = undefined;
                        var uniqueKey = input.name.split(' ').join('_').toLowerCase();

                        if (input.content_type && input.content_type !== undefined) {
                            contentType = input.content_type.split('.')[1];
                            uniqueKey = input.name.split(' ').join('_').toLowerCase() + '_' + input.content_type;
                        } else {
                            contentType = input.name.split(' ').join('_').toLowerCase();
                        }

                        vm.userInputs.push({
                            unique_key: uniqueKey,
                            key: contentType,
                            name: input.name,
                            verbose_name: input.verbose_name,
                            content_type: input.content_type,
                            value_type: input_value_type
                        })
                    });
                    $scope.$apply();
                });
            }
        }

        vm.cancel = function () {
            $state.go('app.data.' + vm.entityType);
        };

        attributeTypeService.getList(vm.entityType).then(function (data) {
            logService.collection('data', data);
            vm.attrs = data.results;

            logService.collection('vm attrs', vm.attrs);

            if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(vm.entityType) === -1) {
                vm.baseAttrs = metaService.getBaseAttrs();
            }
            logService.collection('vm.baseAttrs', vm.baseAttrs);
            vm.entityAttrs = metaService.getEntityAttrs(vm.entityType);
            logService.collection('vm.entityAttrs', vm.entityAttrs);
            vm.readyStatus.constructor = true;
            $scope.$apply();
        });

        vm.checkColspan = function (tab, row, column) {

            //console.log('VM TAB', tab);

            var i, c;

            var rowMap = [];
            var startColumn;
            var colspans;

            for (i = 0; i < tab.layout.fields.length; i = i + 1) {
                if (tab.layout.fields[i].row == row) {
                    startColumn = tab.layout.fields[i].column;
                    colspans = parseInt(tab.layout.fields[i].colspan, 10);
                    for (c = 0; c < colspans; c = c + 1) {
                        if (!rowMap[startColumn]) {
                            rowMap[startColumn] = [];
                        }
                        rowMap[startColumn].push(parseInt(startColumn, 10) + parseInt(c, 10));
                    }
                }
            }

            var x, z;
            var keys = Object.keys(rowMap);

            for (x = 0; x < keys.length; x = x + 1) {
                if (keys[x] === column) {
                    return true;
                } else {
                    for (z = 1; z < rowMap[keys[x]].length; z = z + 1) {
                        if (column == rowMap[keys[x]][z]) {
                            //console.log('rowMap[keys[x]][z]', rowMap[keys[x]][z]);
                            return false;
                        }
                    }
                }
            }

            return true;

        };

        vm.range = gridHelperService.range;

        function addRowForTab() {
            var i;
            for (i = 0; i < vm.tabs.length; i = i + 1) {
                addRow(vm.tabs[i]);
            }
        }

        function addRow(tab) {
            var c;
            tab.layout.rows = tab.layout.rows + 1;
            for (c = 0; c < tab.layout.columns; c = c + 1) {
                tab.layout.fields.push({
                    row: tab.layout.rows,
                    column: c + 1,
                    colspan: 1,
                    type: 'empty'
                })
            }
        }

        function removeLastRow(tab) {
            var f;
            for (f = 0; f < tab.layout.fields.length; f = f + 1) {
                if (tab.layout.fields[f].row === tab.layout.rows) {
                    tab.layout.fields.splice(f, 1);
                    f = f - 1;
                }
            }

            tab.layout.rows = tab.layout.rows - 1;
        }

        vm.setLayoutColumns = function (tab, columns, ev) {

            if (columns < tab.layout.columns) {
                var losedColumns = [];
                var i;
                for (i = columns; i < tab.layout.columns; i = i + 1) {
                    losedColumns.push(i + 1);
                }
                var description;
                if (losedColumns.length > 1) {
                    description = 'If you switch to less number of columns you lose data of ' + losedColumns.join(', ') + ' columns'
                } else {
                    description = 'If you switch to less number of columns you lose data of ' + losedColumns.join(', ') + ' column'
                }
                $mdDialog.show({
                    controller: 'WarningDialogController as vm',
                    templateUrl: 'views/warning-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    clickOutsideToClose: true,
                    locals: {
                        warning: {
                            title: 'Warning',
                            description: description
                        }
                    }
                }).then(function (res) {
                    if (res.status === 'agree') {
                        var i, r, c;
                        for (i = 0; i < tab.layout.fields.length; i = i + 1) {
                            for (r = 0; r < tab.layout.rows; r = r + 1) {
                                for (c = columns; c < tab.layout.columns; c = c + 1) {
                                    if (tab.layout.fields[i].row == r + 1 && tab.layout.fields[i].column == c + 1) {
                                        tab.layout.fields.splice(i, 1);
                                    }
                                }
                            }
                        }

                        tab.layout.columns = columns;
                    }
                });
            } else {

                var r, c;

                for (r = 1; r <= tab.layout.rows; r = r + 1) {
                    for (c = tab.layout.columns + 1; c <= columns; c = c + 1) {
                        tab.layout.fields.push({
                            row: r,
                            column: c,
                            colspan: 1,
                            type: 'empty'
                        })
                    }
                }
                tab.layout.columns = columns;
            }

        };

        vm.saveLayout = function () {
            var i;
            for (i = 0; i < vm.tabs.length; i = i + 1) {
                removeLastRow(vm.tabs[i]);
            }
            vm.ui.data = vm.tabs;
            if (vm.uiIsDefault) {
                if (vm.isntanceId) {
                    uiService.updateEditLayoutByInstanceId(vm.entityType, vm.isntanceId, vm.ui).then(function (data) {
                        console.log('layout saved');
                        var route;
                        if (vm.entityType === 'complex-transaction') {
                            route = routeResolver.findExistingState('app.data.', 'transaction-type');
                        } else {
                            route = routeResolver.findExistingState('app.data.', vm.entityType);
                        }
                        $state.go(route.state, route.options);
                        $scope.$apply();
                    });
                } else {
                    uiService.createEditLayout(vm.entityType, vm.ui).then(function () {
                        console.log('layout saved');

                        var route = routeResolver.findExistingState('app.data.', vm.entityType);
                        $state.go(route.state, route.options);
                        $scope.$apply();
                    });
                }
            } else {
                if (vm.isntanceId) {
                    uiService.updateEditLayoutByInstanceId(vm.entityType, vm.isntanceId, vm.ui).then(function (data) {
                        console.log('layout saved');

                        var route;
                        if (vm.entityType === 'complex-transaction') {
                            route = routeResolver.findExistingState('app.data.', 'transaction-type');
                        } else {
                            route = routeResolver.findExistingState('app.data.', vm.entityType);
                        }
                        $state.go(route.state, route.options);
                        $scope.$apply();
                    });
                } else {
                    uiService.updateEditLayout(vm.ui.id, vm.ui).then(function () {
                        console.log('layout saved');

                        var route = routeResolver.findExistingState('app.data.', vm.entityType);
                        $state.go(route.state, route.options);
                        $scope.$apply();
                    });
                }
            }
        };

        vm.bindFlex = function (tab, row, column) {
            var totalColspans = 0;
            var i;
            var field;
            for (i = 0; i < tab.layout.fields.length; i = i + 1) {
                if (tab.layout.fields[i].row === row) {
                    if (tab.layout.fields[i].column === column) {
                        field = tab.layout.fields[i];
                    }

                    totalColspans = totalColspans + parseInt(tab.layout.fields[i].colspan, 10);
                }
            }
            var flexUnit = 100 / tab.layout.columns;
            if (field) {
                return Math.floor(field.colspan * flexUnit);
            }
            return Math.floor(flexUnit);
        };

        vm.deleteTab = function (tab) {
            var i;
            for (i = 0; i < vm.tabs.length; i = i + 1) {
                if (tab.name === vm.tabs[i].name) {
                    vm.tabs.splice(i, 1);
                    break;
                }
            }
        };

        vm.addTab = function () {
            if (!vm.tabs.length) {
                vm.tabs = [];
            }
            vm.tabs.push({
                name: '',
                editState: true,
                layout: {
                    rows: 0,
                    columns: 1,
                    fields: []
                }
            });
            addRow(vm.tabs[vm.tabs.length - 1]);
        };

        vm.toggleEditTab = function (tab, action, $index) {
            if (!tab.editState) {
                tab.editState = false;
            }
            if (!tab.captionName) {
                tab.captionName = tab.name;
            }
            if (action === 'back') {
                console.log('??');
                if (!tab.captionName && tab.name === '') {
                    vm.tabs.splice($index, 1);
                } else {
                    tab.captionName = tab.name;
                }
            }
            tab.editState = !tab.editState;
        };

        vm.saveEditedTab = function (tab) {
            console.log(tab);
            if (tab.captionName !== '') {
                tab.name = tab.captionName;
                tab.editState = !tab.editState;
            }
        };

        vm.MABtnVisibility = function (entityType) {
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        }

    }

}());
},{"../../../../core/services/logService":2,"../services/attributeTypeService":304,"../services/entityResolverService":316,"../services/gridHelperService":322,"../services/metaService":375,"../services/portfolioService":377,"../services/routeResolverService":386,"../services/uiService":397}],95:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';
    var logService = require('../../../../core/services/logService');

    var attributeTypeService = require('../services/attributeTypeService');
    var entityResolverService = require('../services/entityResolverService');
    var entityViewerHelperService = require('../services/entityViewerHelperService');

    var usersService = require('../services/usersService');
    var usersGroupService = require('../services/usersGroupService');

    var uiService = require('../services/uiService');

    var gridHelperService = require('../services/gridHelperService');
    var metaService = require('../services/metaService');
    var layoutService = require('../services/layoutService');

    var metaPermissionsService = require('../services/metaPermissionsService');

    module.exports = function ($scope, $state) {

        logService.controller('EntityEditorController', 'initialized');

        var vm = this;
        vm.readyStatus = {content: false, permissions: false, entity: false, me: false};
        //console.log('$scope', $scope);
        vm.entityType = $scope.$parent.vm.entityType;
        vm.entityTabs = metaService.getEntityTabs(vm.entityType);
        vm.evAction = $scope.$parent.vm.evAction;
        vm.entityId = $scope.$parent.vm.entityId;
        vm.entity = {$_isValid: true};

        vm.editLayoutEntityInstanceId = null; // could be setted from special rules controller
        vm.editLayoutByEntityInsance = false;
        vm.entitySpecialRules = false;
        vm.specialRulesReady = true;

        if (['complex-transaction'].indexOf(vm.entityType) !== -1) {
            vm.editLayoutByEntityInsance = true;
            vm.entitySpecialRules = true;
            vm.complexTransactionOptions = {};
        }

        logService.property('entityType', vm.entityType);
        logService.property('entityId', vm.entityId);


        vm.calculateComplexTransactionInputs = function (item) {
            console.log('test', item);

            var values = {};

            vm.userInputs.forEach(function (item) {
                values[item.name] = vm.entity[item.name]
            });

            var book = {
                transaction_type: vm.entity.transaction_type,
                recalculate_inputs: [item.name],
                process_mode: 'recalculate',
                values: values
            };

            var handler = function (data) {

                //TODO REFACTOR DRY VIOLATION

                vm.complexTransactionOptions.transactionType = data.response.transaction_type;
                vm.editLayoutEntityInstanceId = data.response.transaction_type;
                vm.transactionTypeId = data.response.transaction_type;
                vm.entity = data.response.complex_transaction;

                var inputsWithCalculations = data.response.transaction_type_object.inputs;


                vm.specialRulesReady = true;
                vm.readyStatus.entity = true;
                vm.readyStatus.permissions = true;

                var keys = Object.keys(data.response.values);

                keys.forEach(function (item) {
                    vm.entity[item] = data.response.values[item];
                });

                data.response.complex_transaction.attributes.forEach(function (item) {
                    if (item.attribute_type_object.value_type == 10) {
                        vm.entity[item.attribute_type_object.name] = item.value_string;
                    }
                    if (item.attribute_type_object.value_type == 20) {
                        vm.entity[item.attribute_type_object.name] = item.value_float;
                    }
                    if (item.attribute_type_object.value_type == 30) {
                        vm.entity[item.attribute_type_object.name] = item.classifier;
                    }
                    if (item.attribute_type_object.value_type == 40) {
                        vm.entity[item.attribute_type_object.name] = item.value_date;
                    }
                });

                vm.tabs = data.response.book_transaction_layout.data;
                vm.userInputs = [];
                vm.tabs.forEach(function (tab) {
                    tab.layout.fields.forEach(function (field) {
                        if (field.attribute_class == 'userInput') {
                            vm.userInputs.push(field.attribute);
                        }
                    });
                });

                inputsWithCalculations.forEach(function (inputWithCalc) {

                    vm.userInputs.forEach(function (userInput) {
                        if (userInput.name == inputWithCalc.name) {
                            if (inputWithCalc.can_recalculate == true) {
                                userInput.buttons = [
                                    {
                                        icon: 'functions',
                                        tooltip: 'Recalculate',
                                        caption: '',
                                        classes: 'md-raised',
                                        action: vm.calculateComplexTransactionInputs
                                    }
                                ]
                            }
                        }
                    })

                });

                $scope.$apply();

            };

            if (vm.entityId) {

                book.id = vm.entityId;

                entityResolverService.update('complex-transaction', book.id, book).then(handler);
            } else {

                entityResolverService.create('complex-transaction', book).then(handler);
            }
        };

        vm.getEditListByInstanceId = function () {

            console.log('$scope.$parent.vm', $scope.$parent.vm);

            if (vm.entityType == 'complex-transaction') {

                if (vm.evAction == 'update') {
                    entityResolverService.getByKey('complex-transaction', vm.editLayoutEntityInstanceId).then(function (data) {


                        vm.complexTransactionOptions.transactionType = data.response.transaction_type;
                        vm.editLayoutEntityInstanceId = data.response.transaction_type;
                        vm.transactionTypeId = data.response.transaction_type;
                        vm.entity = data.response.complex_transaction;

                        var inputsWithCalculations = data.response.transaction_type_object.inputs;


                        vm.specialRulesReady = true;
                        vm.readyStatus.entity = true;
                        vm.readyStatus.permissions = true;

                        var keys = Object.keys(data.response.values);

                        keys.forEach(function (item) {
                            vm.entity[item] = data.response.values[item];
                        });

                        data.response.complex_transaction.attributes.forEach(function (item) {
                            if (item.attribute_type_object.value_type == 10) {
                                vm.entity[item.attribute_type_object.name] = item.value_string;
                            }
                            if (item.attribute_type_object.value_type == 20) {
                                vm.entity[item.attribute_type_object.name] = item.value_float;
                            }
                            if (item.attribute_type_object.value_type == 30) {
                                vm.entity[item.attribute_type_object.name] = item.classifier;
                            }
                            if (item.attribute_type_object.value_type == 40) {
                                vm.entity[item.attribute_type_object.name] = item.value_date;
                            }
                        });

                        vm.tabs = data.response.book_transaction_layout.data;
                        vm.userInputs = [];
                        vm.tabs.forEach(function (tab) {
                            tab.layout.fields.forEach(function (field) {
                                if (field.attribute_class == 'userInput') {
                                    vm.userInputs.push(field.attribute);
                                }
                            });
                        });

                        inputsWithCalculations.forEach(function (inputWithCalc) {

                            vm.userInputs.forEach(function (userInput) {
                                if (userInput.name == inputWithCalc.name) {
                                    if (inputWithCalc.can_recalculate == true) {
                                        userInput.buttons = [
                                            {
                                                icon: 'functions',
                                                tooltip: 'Recalculate',
                                                caption: '',
                                                classes: 'md-raised',
                                                action: vm.calculateComplexTransactionInputs
                                            }
                                        ]
                                    }
                                }
                            })

                        });

                        //console.log('vm.complexTransactionOptions', vm.complexTransactionOptions);
                        console.log('vm.entity', vm.entity);
                        console.log('vm.vm.userInputs', vm.userInputs);


                        $scope.$parent.vm.editLayout = function () {
                            $state.go('app.data-constructor', {
                                entityType: vm.entityType,
                                instanceId: vm.editLayoutEntityInstanceId
                            });
                        };

                        $scope.$apply();
                    });
                } else {
                    entityResolverService.getByKey('transaction-type-book', vm.editLayoutEntityInstanceId).then(function (data) {


                        vm.complexTransactionOptions.transactionType = data.transaction_type;
                        vm.editLayoutEntityInstanceId = data.transaction_type;
                        vm.entity = data.complex_transaction;
                        vm.entity.transaction_type = data.transaction_type;

                        var inputsWithCalculations = data.transaction_type_object.inputs;


                        vm.specialRulesReady = true;
                        vm.readyStatus.entity = true;
                        vm.readyStatus.permissions = true;

                        var keys = Object.keys(data.values);

                        keys.forEach(function (item) {
                            vm.entity[item] = data.values[item];
                        });

                        vm.tabs = data.book_transaction_layout.data;
                        vm.userInputs = [];
                        vm.tabs.forEach(function (tab) {
                            tab.layout.fields.forEach(function (field) {
                                if (field.attribute_class == 'userInput') {
                                    vm.userInputs.push(field.attribute);
                                }
                            });
                        });


                        inputsWithCalculations.forEach(function (inputWithCalc) {

                            vm.userInputs.forEach(function (userInput) {
                                if (userInput.name == inputWithCalc.name) {
                                    if (inputWithCalc.can_recalculate == true) {
                                        userInput.buttons = [
                                            {
                                                icon: 'functions',
                                                tooltip: 'Recalculate',
                                                caption: '',
                                                classes: 'md-raised',
                                                action: vm.calculateComplexTransactionInputs
                                            }
                                        ]
                                    }
                                }
                            })

                        });

                        console.log('vm.userInputs', vm.userInputs);


                        //console.log('vm.complexTransactionOptions', vm.complexTransactionOptions);
                        //console.log('vm.entity', vm.entity);


                        $scope.$parent.vm.editLayout = function () {
                            $state.go('app.data-constructor', {
                                entityType: vm.entityType,
                                instanceId: vm.editLayoutEntityInstanceId
                            });
                        };

                        $scope.$apply();
                    });
                }

            } else {


                //console.log('vm.editLayoutEntityInstanceId', vm.editLayoutEntityInstanceId);

                uiService.getEditLayoutByInstanceId(vm.entityType, vm.editLayoutEntityInstanceId).then(function (data) {

                    if (data) {
                        vm.tabs = data.data;
                        vm.userInputs = [];
                        vm.tabs.forEach(function (tab) {
                            tab.layout.fields.forEach(function (field) {
                                if (field.attribute_class == 'userInput') {
                                    vm.userInputs.push(field.attribute);
                                }
                            });
                        })
                    } else {
                        vm.tabs = uiService.getDefaultEditLayout(vm.entityType)[0].data;
                    }

                    $scope.$apply();
                });

                $scope.$parent.vm.editLayout = function () {
                    $state.go('app.data-constructor', {
                        entityType: vm.entityType,
                        instanceId: vm.editLayoutEntityInstanceId
                    });
                };
            }

        };

        if (vm.entityType !== 'transaction-type') {

            //console.log('1231321321 editLayoutEntityInstanceId?', vm.editLayoutEntityInstanceId);
            //console.log('1231321321 editLayoutByEntityInsance?', vm.editLayoutByEntityInsance);

            if (vm.editLayoutByEntityInsance == true) {
                if (vm.editLayoutEntityInstanceId) {
                    vm.getEditListByInstanceId();
                }
            } else {
                uiService.getEditLayout(vm.entityType).then(function (data) {
                    if (data.results.length) {
                        vm.tabs = data.results[0].data;
                    } else {
                        vm.tabs = uiService.getDefaultEditLayout(vm.entityType)[0].data;
                    }
                    logService.collection('vm.tabs', vm.tabs);
                    $scope.$apply();
                });
            }
        }

        logService.collection('vm.tabs', vm.tabs);

        vm.attrs = [];
        vm.baseAttrs = [];
        vm.entityAttrs = [];
        vm.userInputs = []; // setting from edit layout
        vm.layoutAttrs = layoutService.getLayoutAttrs();

        vm.baseAttrs = metaService.getBaseAttrs();
        vm.entityAttrs = metaService.getEntityAttrs(vm.entityType) || [];

        vm.setDefaults = function () {

            if ($scope.$parent.vm.isEventBook == true) {

                var data = $scope.$parent.vm.eventBook;

                vm.complexTransactionOptions.transactionType = data.transaction_type;
                vm.editLayoutEntityInstanceId = data.transaction_type;
                vm.entity = data.complex_transaction;
                vm.entity.transaction_type = data.transaction_type;


                vm.specialRulesReady = true;
                vm.readyStatus.entity = true;
                vm.readyStatus.permissions = true;

                var keys = Object.keys(data.values);

                keys.forEach(function (item) {
                    vm.entity[item] = data.values[item];
                });

                vm.tabs = data.book_transaction_layout.data;
                vm.userInputs = [];
                vm.tabs.forEach(function (tab) {
                    tab.layout.fields.forEach(function (field) {
                        if (field.attribute_class == 'userInput') {
                            vm.userInputs.push(field.attribute);
                        }
                    });
                });

                //console.log('vm.complexTransactionOptions', vm.complexTransactionOptions);
                //console.log('vm.entity', vm.entity);

                var inputsWithCalculations = data.transaction_type_object.inputs;

                inputsWithCalculations.forEach(function (inputWithCalc) {

                    vm.userInputs.forEach(function (userInput) {
                        if (userInput.name == inputWithCalc.name) {
                            if (inputWithCalc.can_recalculate == true) {
                                userInput.buttons = [
                                    {
                                        icon: 'functions',
                                        tooltip: 'Recalculate',
                                        caption: '',
                                        classes: 'md-raised',
                                        action: vm.calculateComplexTransactionInputs
                                    }
                                ]
                            }
                        }
                    })

                });


                $scope.$parent.vm.editLayout = function () {
                    $state.go('app.data-constructor', {
                        entityType: vm.entityType,
                        instanceId: vm.editLayoutEntityInstanceId
                    });
                };

                $scope.$apply();
            }
        };

        attributeTypeService.getList(vm.entityType).then(function (data) {
            vm.attrs = data.results;
            vm.readyStatus.content = true;

            //console.log('vm.entityId55555555555555555555', vm.entityId);

            console.log('------------------', $scope.$parent.vm);

            if (vm.entityId) {

                if (vm.entityType == 'complex-transaction') {


                    if (vm.evAction == 'update') {
                        entityResolverService.getByKey(vm.entityType, vm.entityId).then(function (data) {

                            //console.log('data', data);

                            vm.complexTransactionOptions.transactionType = data.response.transaction_type;
                            vm.transactionTypeId = data.response.transaction_type;
                            vm.editLayoutEntityInstanceId = data.response.complex_transaction.id;
                            vm.getEditListByInstanceId();
                            vm.entity = data.response.complex_transaction;

                            var keys = Object.keys(data.response.values);

                            keys.forEach(function (item) {
                                vm.entity[item] = data.response.values[item];
                            });

                            data.response.complex_transaction.attributes.forEach(function (item) {
                                if (item.attribute_type_object.value_type == 10) {
                                    vm.entity[item.attribute_type_object.name] = item.value_string;
                                }
                                if (item.attribute_type_object.value_type == 20) {
                                    vm.entity[item.attribute_type_object.name] = item.value_float;
                                }
                                if (item.attribute_type_object.value_type == 30) {
                                    vm.entity[item.attribute_type_object.name] = item.classifier;
                                }
                                if (item.attribute_type_object.value_type == 40) {
                                    vm.entity[item.attribute_type_object.name] = item.value_date;
                                }
                            });

                            vm.reserveEntity = JSON.parse(JSON.stringify(vm.entity));
                            vm.reserveEntity.values = data.response.values;

                            vm.specialRulesReady = true;
                            vm.readyStatus.entity = true;
                            vm.readyStatus.permissions = true;

                            $scope.$apply();
                        });
                    } else {
                        entityResolverService.getByKey('transaction-type-book', vm.entityId).then(function (data) {

                            //console.log('data', data);

                            vm.complexTransactionOptions.transactionType = data.transaction_type;
                            vm.editLayoutEntityInstanceId = data.transaction_type;
                            vm.getEditListByInstanceId();
                            vm.entity = data.complex_transaction;
                            vm.entity.transaction_type = data.transaction_type;

                            var keys = Object.keys(data.values);

                            keys.forEach(function (item) {
                                vm.entity[item] = data.values[item];
                            });

                            vm.specialRulesReady = true;
                            vm.readyStatus.entity = true;
                            vm.readyStatus.permissions = true;

                            $scope.$apply();
                        });
                    }

                } else {


                    entityResolverService.getByKey(vm.entityType, vm.entityId).then(function (data) {
                        vm.entity = data;


                        if (vm.entityType == 'transaction-type') {
                            $scope.$parent.vm.editLayout = function () {
                                $state.go('app.data-constructor', {
                                    entityType: 'complex-transaction',
                                    instanceId: data.id
                                });
                            };
                        }


                        entityViewerHelperService.transformItems([vm.entity], vm.attrs).then(function (data) {
                            vm.entity = data[0];
                            vm.entity.$_isValid = true;
                            vm.readyStatus.entity = true;

                            vm.loadPermissions();
                        });
                    });

                }
                //$scope.$apply();
            } else {

                vm.readyStatus.entity = true;
                vm.setDefaults();
                vm.loadPermissions();
            }

        });

        var originatorEv;

        vm.loadPermissions = function () {

            var promises = [];

            promises.push(vm.getMemberList());
            promises.push(vm.getGroupList());

            Promise.all(promises).then(function (data) {

                vm.readyStatus.permissions = true;
                $scope.$apply();
            });

        };

        vm.getMe = function () {
            usersService.getMe().then(function (data) {
                //console.log('data user', data);
                vm.user = data;
                vm.readyStatus.me = true;
                $scope.$apply();
            });
        };

        vm.getMe();

        vm.resolveSpecialRules = function () {
            return 'views/special-rules/' + vm.entityType + '-special-rules-view.html';
        };

        vm.getGroupList = function () {
            return usersGroupService.getList().then(function (data) {

                //console.log('data MEMBERS', data);

                vm.groups = data.results;

                vm.groups.forEach(function (group) {

                    if (vm.entity["group_object_permissions"]) {
                        vm.entity["group_object_permissions"].forEach(function (permission) {

                            if (permission.group == group.id) {
                                if (!group.hasOwnProperty('objectPermissions')) {
                                    group.objectPermissions = {};
                                }
                                if (permission.permission === "manage_" + vm.entityType) {
                                    group.objectPermissions.manage = true;
                                }
                                if (permission.permission === "change_" + vm.entityType) {
                                    group.objectPermissions.change = true;
                                }
                            }
                        })
                    }

                });
            });

        };

        vm.getMemberList = function () {
            usersService.getMemberList().then(function (data) {

                //console.log('data MEMBERS', data);

                vm.members = data.results;

                vm.members.forEach(function (member) {

                    if (vm.entity["user_object_permissions"]) {
                        vm.entity["user_object_permissions"].forEach(function (permission) {

                            if (permission.member == member.id) {
                                if (!member.hasOwnProperty('objectPermissions')) {
                                    member.objectPermissions = {};
                                }
                                if (permission.permission === "manage_" + vm.entityType) {
                                    member.objectPermissions.manage = true;
                                }
                                if (permission.permission === "change_" + vm.entityType) {
                                    member.objectPermissions.change = true;
                                }
                            }
                        })
                    }

                });

                vm.readyStatus.permissions = true;

                $scope.$apply();
            });
        };

        vm.checkPermissions = function () {
            //console.log('metaPermissionsService.getEntitiesWithDisabledPermissions()', metaPermissionsService.getEntitiesWithDisabledPermissions());
            //console.log('metaPermissionsService.getEntitiesWithDisabledPermissions()', vm.entityType);
            if (metaPermissionsService.getEntitiesWithDisabledPermissions().indexOf(vm.entityType) !== -1) {
                return false;
            }
            //console.log('matbe re?');
            if (vm.entityId) {
                var i;
                //console.log('user?', vm.user);
                //console.log('members?', vm.members);
                //console.log('entity?', vm.entityId);

                var haveAccess = false;

                var entityType = vm.entityType.split('-').join('');

                if (vm.entity.granted_permissions && vm.entity.granted_permissions.indexOf("manage_" + entityType) !== -1) {
                    haveAccess = true;
                }

                //for (i = 0; i < vm.members.length; i = i + 1) {
                //    if (vm.user.id == vm.members[i].id) {
                //        console.log('vm.members[i]', vm.members[i]);
                //        if (vm.members[i].objectPermissions && vm.members[i].objectPermissions.manage == true) {
                //            haveAccess = true;
                //        }
                //    }
                //}

                //console.log('have access', haveAccess);

                return haveAccess;
            } else {
                return true;
            }
        };

        vm.checkReadyStatus = function () {
            if (vm.readyStatus.content && vm.readyStatus.entity && vm.readyStatus.me && vm.readyStatus.permissions) {
                return true
            }
            return false;
        };

        vm.range = gridHelperService.range;

        vm.bindFlex = function (tab, row, field) {
            var totalColspans = 0;
            var i;
            for (i = 0; i < tab.layout.fields.length; i = i + 1) {
                if (tab.layout.fields[i].row === row) {
                    totalColspans = totalColspans + tab.layout.fields[i].colspan;
                }
            }
            var flexUnit = 100 / tab.layout.columns;
            return Math.floor(field.colspan * flexUnit);

        };

        vm.bindField = function (tab, field) {
            var i, l, e, u;
            if (field && field.type === 'field') {
                if (field.hasOwnProperty('id') && field.id !== null) {
                    for (i = 0; i < vm.attrs.length; i = i + 1) {
                        if (field.id === vm.attrs[i].id) {
                            vm.attrs[i].options = field.options;
                            return vm.attrs[i];
                        }
                    }
                } else {
                    for (i = 0; i < vm.baseAttrs.length; i = i + 1) {
                        if (field.name === vm.baseAttrs[i].name) {
                            vm.baseAttrs[i].options = field.options;
                            return vm.baseAttrs[i];
                        }
                    }
                    for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                        if (field.name === vm.entityAttrs[e].name) {
                            vm.entityAttrs[e].options = field.options;
                            return vm.entityAttrs[e];
                        }
                    }
                    for (l = 0; l < vm.layoutAttrs.length; l = l + 1) {
                        if (field.name === vm.layoutAttrs[l].name) {
                            vm.layoutAttrs[l].options = field.options;
                            return vm.layoutAttrs[l];
                        }
                    }

                    //console.log('vm.userInputs', vm.userInputs);
                    for (u = 0; u < vm.userInputs.length; u = u + 1) {
                        //console.log('vm.userInputs[u]', vm.userInputs[u]);
                        if (field.name === vm.userInputs[u].name) {
                            vm.userInputs[u].options = field.options;
                            return vm.userInputs[u];
                        }
                    }
                }
            }
        };

        vm.checkFieldRender = function (tab, row, field) {
            if (field.row === row) {
                if (field.type === 'field') {
                    return true;
                } else {
                    var i, c, x;
                    var spannedCols = [];
                    for (i = 0; i < tab.layout.fields.length; i = i + 1) {
                        if (tab.layout.fields[i].row === row) {

                            if (tab.layout.fields[i].type === 'field') {
                                for (c = tab.layout.fields[i].column; c <= (tab.layout.fields[i].column + tab.layout.fields[i].colspan - 1); c = c + 1) {
                                    spannedCols.push(c);
                                }
                            }
                        }
                    }
                    for (x = 0; x < spannedCols.length; x = x + 1) {
                        if (spannedCols[x] === field.column) {
                            return false;
                        }
                    }

                    return true;
                }
            }
            return false;
        };

        vm.openMenu = function ($mdOpenMenu, ev) {
            originatorEv = ev;
            $mdOpenMenu(ev);
        };

        vm.checkViewState = function (tab) {

            if (tab.hasOwnProperty('enabled')) {
                if (tab.enabled.indexOf(vm.evAction) == -1) {
                    return false;
                }
            }

            return true;
        };

        $scope.$parent.vm.copyCallback = function () {

            console.log('COPY CALLBACK ', vm.entity);

            return new Promise(function (resolve) {
                vm.readyStatus.entity = false;
                setTimeout(function () {
                    vm.entity["user_code"] = vm.entity["user_code"] + '_copy';
                    vm.readyStatus.entity = true;
                    resolve(vm.entity);
                }, 500);
            });
        };

        function updateValue(entityAttr, attr, value) {

            if (attr['value_type'] === 10) {
                entityAttr['value_string'] = value;
            }

            if (attr['value_type'] === 20) {
                entityAttr['value_float'] = value;
            }

            if (attr['value_type'] === 30) {
                entityAttr['classifier'] = value;
            }

            if (attr['value_type'] === 40) {
                entityAttr['value_date'] = value;
            }

            return entityAttr;
        }

        function appendAttribute(attr, value) {
            var attribute = {
                attribute_name: attr.name,
                attribute_type: attr.id,
                classifier: null,
                value_date: null,
                value_float: null,
                value_string: null
            };

            if (attr['value_type'] === 10) {
                attribute['value_string'] = value;
            }

            if (attr['value_type'] === 20) {
                attribute['value_float'] = value;
            }

            if (attr['value_type'] === 30) {
                attribute['classifier'] = value;
            }
            if (attr['value_type'] === 40) {
                attribute['value_date'] = value;
            }

            return attribute;
        }

        function checkEntityAttrTypes() {
            var i;
            for (i = 0; i < vm.entityAttrs.length; i = i + 1) {
                //console.log('vm.entityAttrs[i]', vm.entityAttrs[i]);
                if (vm.entityAttrs[i]['value_type'] === 40) {
                    vm.entity[vm.entityAttrs[i].key] = moment(new Date(vm.entity[vm.entityAttrs[i].key])).format('YYYY-MM-DD');
                }
                if (vm.entityAttrs[i]['value_type'] === 20 || vm.entityAttrs[i]['value_type'] === 'float') {
                    //console.log('vm.entity[vm.entityAttrs[i].key]', vm.entity[vm.entityAttrs[i].key]);
                    var withotSpaces = (vm.entity[vm.entityAttrs[i].key] + '').replace(' ', '');
                    var res;
                    if (withotSpaces.indexOf(',') !== -1) {
                        res = withotSpaces.replace(',', '.');
                    } else {
                        res = withotSpaces;
                    }
                    vm.entity[vm.entityAttrs[i].key] = parseFloat(res);
                    //console.log('vm.entity[vm.entityAttrs[i].key]', vm.entity[vm.entityAttrs[i].key]);
                }
            }

            vm.entity.attributes.forEach(function (item) {
                if (item['value_date'] !== null) {
                    item['value_date'] = moment(new Date(item['value_date'])).format('YYYY-MM-DD');
                }
            })
        }

        function clearUnusedAttributeValues() {
            var i;
            for (i = 0; i < vm.entity.attributes.length; i = i + 1) {
                if (vm.entity.attributes[i].classifier == null) {
                    delete vm.entity.attributes[i].classifier;
                }
                if (vm.entity.attributes[i].value_date == null) {
                    delete vm.entity.attributes[i].value_date;
                }
                if (vm.entity.attributes[i].value_float == null) {
                    delete vm.entity.attributes[i].value_float;
                }
                if (vm.entity.attributes[i].value_string == null) {
                    delete vm.entity.attributes[i].value_string;
                }
            }

        }

        function checkForNulls(item) {
            var i;
            var keys = Object.keys(item);
            var result = {};
            for (i = 0; i < keys.length; i = i + 1) {
                if (item[keys[i]] && item[keys[i]].length) {
                    result[keys[i]] = item[keys[i]];
                } else {
                    if (item[keys[i]] != null && !isNaN(item[keys[i]])) {
                        result[keys[i]] = item[keys[i]];
                    }
                }
            }
            return result;
        }

        function checkForNotNullRestriction(item) {
            var i, e, b, a;
            var keys = Object.keys(item);
            var isValid = true;
            for (i = 0; i < keys.length; i = i + 1) {
                for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                    if (keys[i] == vm.entityAttrs[e].key) {
                        if (vm.entityAttrs[e].options && vm.entityAttrs[e].options.notNull == true) {
                            if (item[keys[i]] == '' || item[keys[i]] == null || item[keys[i]] == undefined) {
                                isValid = false
                            }
                        }
                    }
                }

                for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                    if (keys[i] == vm.baseAttrs[b].key) {
                        if (vm.baseAttrs[b].options && vm.baseAttrs[b].options.notNull == true) {
                            if (item[keys[i]] == '' || item[keys[i]] == null || item[keys[i]] == undefined) {
                                isValid = false
                            }
                        }
                    }
                }

                for (a = 0; a < vm.attrs.length; a = a + 1) {
                    if (keys[i] == vm.attrs[a].name) {
                        if (vm.attrs[a].options && vm.attrs[a].options.notNull == true) {
                            if (item[keys[i]] == '' || item[keys[i]] == null || item[keys[i]] == undefined) {
                                isValid = false
                            }
                        }
                    }
                }
            }

            vm.entity.$_isValid = isValid;

            return isValid
        }

        $scope.$parent.vm.saveCallback = function (options) {

            if (metaService.getEntitiesWithoutDynAttrsList().indexOf(vm.entityType) == -1) {
                vm.entity.attributes = [];
            }

            if (vm.entity.attributes) {
                var i, a, c;
                var keys = Object.keys(vm.entity), attrExist;
                for (i = 0; i < vm.attrs.length; i = i + 1) {
                    for (a = 0; a < keys.length; a = a + 1) {
                        if (vm.attrs[i].name === keys[a]) {
                            attrExist = false;
                            for (c = 0; c < vm.entity.attributes.length; c = c + 1) {
                                if (vm.entity.attributes[c]['attribute_type'] === vm.attrs[i].id) {
                                    attrExist = true;
                                    vm.entity.attributes[c] = updateValue(vm.entity.attributes[c], vm.attrs[i], vm.entity[keys[a]]);
                                }
                            }
                            if (!attrExist) {
                                vm.entity.attributes.push(appendAttribute(vm.attrs[i], vm.entity[keys[a]]));
                            }
                        }
                    }
                }
            }

            if (vm.entity.attributes) {
                checkEntityAttrTypes();
                clearUnusedAttributeValues();
            }

            if (metaPermissionsService.getEntitiesWithDisabledPermissions().indexOf(vm.entityType) == -1) {
                vm.entity["user_object_permissions"] = [];
            }

            if (vm.members) {
                vm.members.forEach(function (member) {

                    if (member.objectPermissions && member.objectPermissions.manage == true) {
                        vm.entity["user_object_permissions"].push({
                            "member": member.id,
                            "permission": "manage_" + vm.entityType //TODO remove _vm.entityType
                        })
                    }

                    if (member.objectPermissions && member.objectPermissions.change == true) {
                        vm.entity["user_object_permissions"].push({
                            "member": member.id,
                            "permission": "change_" + vm.entityType //TODO remove _vm.entityType
                        })
                    }

                });
            }

            vm.entity["group_object_permissions"] = [];

            if (vm.groups) {
                vm.groups.forEach(function (group) {

                    if (group.objectPermissions && group.objectPermissions.manage == true) {
                        vm.entity["group_object_permissions"].push({
                            "group": group.id,
                            "permission": "manage_" + vm.entityType
                        })
                    }

                    if (group.objectPermissions && group.objectPermissions.change == true) {
                        vm.entity["group_object_permissions"].push({
                            "group": group.id,
                            "permission": "change_" + vm.entityType
                        })
                    }

                });
            }

            //console.log('vm.entity', vm.entity);

            if (checkForNotNullRestriction(vm.entity)) {

                var resultEntity = checkForNulls(vm.entity);
                //console.log('resultEntity', resultEntity);

                if (vm.entityType == 'transaction-type') {
                    resultEntity.book_transaction_layout = vm.entity.book_transaction_layout;
                }


                if (vm.entityType == 'complex-transaction') {

                    resultEntity.values = {};
                    //console.log('userInputs', vm.userInputs);

                    vm.userInputs.forEach(function (userInput) {

                        if (userInput !== null) {
                            var keys = Object.keys(vm.entity);
                            keys.forEach(function (key) {
                                if (key == userInput.name) {
                                    resultEntity.values[userInput.name] = vm.entity[userInput.name];
                                }
                            });
                        }
                    });

                    resultEntity.store = true;
                    resultEntity.calculate = true;

                }


                // values []
                // complex_transaction: {}


                return new Promise(function (resolve, reject) {

                    var _options = {
                        entityType: vm.entityType,
                        entity: resultEntity
                    };

                    if (vm.entityId) {
                        _options.entityId = vm.entityId
                    }


                    if (vm.entityType == 'complex-transaction') {

                        if (vm.evAction == 'update') {

                            var changed = false;


                            console.log('resultEntity', resultEntity);
                            console.log('vm.reserveEntity', vm.reserveEntity);

                            var valuesKeys = Object.keys(resultEntity.values);


                            valuesKeys.forEach(function (key) {

                                if (resultEntity[key] != vm.reserveEntity[key]) {
                                    changed = true;
                                }

                            });

                            //return;

                            if (options) {
                                if (options.complexTransactionOptions) {

                                    if (options.complexTransactionOptions.complexTransactionChangeStatus == true) {
                                        _options.complexTransactionChangeStatus = true;

                                        changed = true;
                                    }

                                }
                            }

                            if (changed == true) {
                                _options = {
                                    entityType: vm.entityType,
                                    complexTransactionChangeStatus: true,
                                    entity: {
                                        complex_transaction: {
                                            status: resultEntity.status,
                                            code: resultEntity.code,
                                            text: resultEntity.text,
                                            date: resultEntity.date,
                                            attributes: resultEntity.attributes
                                        },
                                        id: resultEntity.id,
                                        values: resultEntity.values
                                    }
                                }
                            } else {
                                _options = {
                                    entityType: vm.entityType,
                                    complexTransactionChangeStatus: false,
                                    entity: {
                                        id: resultEntity.id,
                                        status: resultEntity.status,
                                        code: resultEntity.code,
                                        text: resultEntity.text,
                                        date: resultEntity.date,
                                        attributes: resultEntity.attributes
                                    }
                                }
                            }


                            if (vm.entityId) {
                                _options.entityId = vm.entityId
                            }


                        }
                    }

                    console.log('_options', _options);

                    resolve(_options);
                });
            }
        };

        $scope.$parent.vm.rebookTransaction = function ($event) {

            console.log('$scope.$parent.vm', $scope.$parent.vm);

            // INSANE ARCHITECTURE VIOLATION

            $scope.$parent.vm.save($event, {
                complexTransactionOptions: {
                    complexTransactionChangeStatus: true
                }
            })

        }

    }

}());
},{"../../../../core/services/logService":2,"../services/attributeTypeService":304,"../services/entityResolverService":316,"../services/entityViewerHelperService":319,"../services/gridHelperService":322,"../services/layoutService":368,"../services/metaPermissionsService":373,"../services/metaService":375,"../services/uiService":397,"../services/usersGroupService":398,"../services/usersService":399}],96:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';
    var logService = require('../../../../../core/services/logService');

    var entityResolverService = require('../../services/entityResolverService');

    var layoutService = require('../../services/layoutService');

    var metaPermissionsService = require('../../services/metaPermissionsService');

    module.exports = function ($scope, $mdDialog, parentScope, entityId, $state) {

        logService.controller('EntityViewerEditDialogController', 'initialized');

        var vm = this;

        //vm.readyStatus = {content: false, permissions: false, entity: false, me: false};
        vm.entityType = parentScope.entityType;
        console.log('entity edit dialog', parentScope);
        vm.evAction = 'update';
        vm.entityId = entityId;
        vm.saveCallback = ''; // save callback handler in inner controller;
        vm.copyCallback = ''; // copy callback handler in inner controller;

        vm.cancel = function () {
            //localStorage.setItem('entityIsChanged', false);
            $mdDialog.cancel();
        };

        vm.checkVisibility = function () {
            return true;
        };

        vm.save = function ($event) {
            if (vm.evAction == 'create') {
                vm.saveCallback().then(function (options) {

                    entityResolverService.create(options.entityType, options.entity).then(function (data) {
                        //console.log('DATA', data);
                        if (data.status == 200 || data.status == 201) {
                            $mdDialog.hide({res: 'agree'});
                        }
                        if (data.status == 400) {
                            $mdDialog.show({
                                controller: 'ValidationDialogController as vm',
                                templateUrl: 'views/dialogs/validation-dialog-view.html',
                                targetEvent: $event,
                                locals: {
                                    validationData: data.response
                                },
                                preserveScope: true,
                                autoWrap: true,
                                skipHide: true
                            })
                        }
                    });

                })
            } else {
                vm.saveCallback().then(function (options) {

                    entityResolverService.update(options.entityType, options.entityId, options.entity).then(function (data) {
                        console.log('DATA', data);
                        if (data.status == 200 || data.status == 201) {
                            $mdDialog.hide({res: 'agree'});
                        }
                        if (data.status == 400) {
                            $mdDialog.show({
                                controller: 'ValidationDialogController as vm',
                                templateUrl: 'views/dialogs/validation-dialog-view.html',
                                targetEvent: $event,
                                locals: {
                                    validationData: data.response
                                },
                                preserveScope: true,
                                autoWrap: true,
                                skipHide: true
                            })
                        }
                    });
                })

            }
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/entityResolverService":316,"../../services/layoutService":368,"../../services/metaPermissionsService":373}],97:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var attributeTypeService = require('../../services/attributeTypeService');
    var entityResolverService = require('../../services/entityResolverService');

    var usersService = require('../../services/usersService');

    var uiService = require('../../services/uiService');

    var metaService = require('../../services/metaService');
    var layoutService = require('../../services/layoutService');

    var metaPermissionsService = require('../../services/metaPermissionsService');

    module.exports = function ($scope, $mdDialog, parentScope, $state) {

        logService.controller('EntityViewerAddDialogController', 'initialized');

        logService.property('parentScope', parentScope);

        var vm = this;
        vm.readyStatus = {content: false, entity: true, permissions: true};
        vm.entityType = parentScope.vm.entityType;
        vm.evAction = 'create';

        if (parentScope.vm.isEventBook) {
            vm.isEventBook = parentScope.vm.isEventBook;
            vm.eventBook = parentScope.vm.eventBook;
        }

        vm.entityTypeSlug = function () {

            //console.log('here?');

            if (vm.entityType == 'complex-transaction') {
                return 'Transaction';
            }

            return vm.entityType.split('-').join(' ').capitalizeFirstLetter();
        };

        vm.cancel = function () {
            localStorage.setItem('entityIsChanged', false);
            $mdDialog.cancel();
        };

        vm.editLayout = function () {
            $state.go('app.data-constructor', {entityType: vm.entityType});
            $mdDialog.hide();
        };

        vm.manageAttrs = function (ev) {
            $state.go('app.attributesManager', {entityType: vm.entityType});
            $mdDialog.hide();
        };

        vm.MABtnVisibility = function (entityType) {
            //console.log('custom entity type', entityType);
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        };

        vm.checkVisibility = function (btnName) {

            if (btnName == 'edit-form-btn' && vm.entityType == 'complex-transaction') {
                return false;
            }

            if (btnName == 'edit-form-btn' && vm.entityType == 'transaction-type') {
                return false;
            }

            return true;
        };

        vm.save = function ($event) {

            if (vm.isEventBook && vm.isEventBook == true) {

                vm.saveCallback().then(function (options) {
                    $mdDialog.hide({
                        status: 'agree', data: {
                            eventBook: options.entity
                        }
                    });
                });

            } else {
                vm.saveCallback().then(function (options) {

                    console.log('options.entityType', options);
                    console.log('vm', vm);

                    entityResolverService.create(options.entityType, options.entity).then(function (data) {
                        console.log('DATA', data);
                        if (data.status == 200 || data.status == 201) {

                            if (options.entityType == 'complex-transaction') {
                                if (data.response.hasOwnProperty('has_errors') && data.response.has_errors == true) {
                                    $mdDialog.show({
                                        controller: 'ValidationDialogController as vm',
                                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                                        targetEvent: $event,
                                        locals: {
                                            validationData: {
                                                complex_transaction_errors: data.response.complex_transaction_errors,
                                                instruments_errors: data.response.instruments_errors,
                                                transactions_errors: data.response.transactions_errors
                                            }
                                        },
                                        preserveScope: true,
                                        autoWrap: true,
                                        skipHide: true
                                    })
                                } else {

                                    $mdDialog.hide({res: 'agree'});
                                }
                            } else {

                                $mdDialog.hide({res: 'agree'});
                            }
                        }
                        if (data.status == 400) {
                            $mdDialog.show({
                                controller: 'ValidationDialogController as vm',
                                templateUrl: 'views/dialogs/validation-dialog-view.html',
                                targetEvent: $event,
                                locals: {
                                    validationData: data.response
                                },
                                preserveScope: true,
                                autoWrap: true,
                                skipHide: true
                            })
                        }
                    });

                })
            }
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/entityResolverService":316,"../../services/layoutService":368,"../../services/metaPermissionsService":373,"../../services/metaService":375,"../../services/uiService":397,"../../services/usersService":399}],98:[function(require,module,exports){
/**
 /**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

        'use strict';

        var logService = require('../../../../../core/services/logService');

        var attributeTypeService = require('../../services/attributeTypeService');
        var dynamicAttributesForReportsService = require('../../services/groupTable/dynamicAttributesForReportsService');

        var entityViewerHelperService = require('../../services/entityViewerHelperService');
        var metaService = require('../../services/metaService');
        var entityViewerDataResolver = require('../../services/entityViewerDataResolver');
        var tablePartsService = require('../../services/groupTable/tablePartsService');

        var GroupTableService = require('../../services/groupTable/groupTableService');
        var reportSubtotalService = require('../../services/reportSubtotalService');
        var pricingPolicyService = require('../../services/pricingPolicyService');

        var reportHelper = require('../../helpers/reportHelper');
        var transactionReportHelper = require('../../helpers/transactionReportHelper');

        var uiService = require('../../services/uiService');

        module.exports = function ($scope, $mdDialog) {

            logService.controller('EntityViewerController', 'initialized');


            var vm = this;
            vm.options = {};
            vm.reportOptions = {};

            vm.updateConfig = function () {

                vm.options = {

                    lastUpdate: new Date().getTime(),
                    components: vm.components,

                    columns: vm.columns,
                    columnsWidth: vm.columnsWidth,

                    grouping: vm.grouping,
                    filters: vm.filters,
                    sorting: vm.sorting,
                    folding: vm.folding,

                    entityType: vm.entityType,
                    isRootEntityViewer: vm.isRootEntityViewer,
                    isReport: vm.isReport,

                    tableIsReady: vm.tableIsReady,
                    reportIsReady: vm.reportIsReady,
                    reportProcessing: vm.reportProcessing,


                    externalCallback: vm.updateTable,
                    additionsStatus: vm.additionsStatus,
                    additionsState: vm.additionsState,

                    editorTemplate: vm.editorTemplate,
                    editorEntityId: vm.editorEntityId,

                    permission_selected_id: vm.permission_selected_id,
                    permission_selected_entity: vm.permission_selected_entity,

                    paginationPageCurrent: vm.paginationPageCurrent,
                    paginationItemPerPage: vm.paginationItemPerPage,
                    paginationItemsTotal: vm.paginationItemsTotal

                };

            };

            vm.updateVm = function (options) {

                var keys = Object.keys(options);

                keys.forEach(function (key) {

                    vm[key] = options[key];
                });

                //$scope.$apply();


                //}, 0);
            };

            //console.log('------------------------ EV scope -----------------------------', $scope);

            vm.returnFullAttributes = function (items, attrs, baseAttrs, entityAttrs) {
                var fullItems = [];
                if (!items) {
                    return [];
                }
                var i, a, b, e, item, attr, baseAttr, attrOptions, entityAttr, report_settings, reportAttrs;

                for (i = 0; i < items.length; i = i + 1) {
                    item = items[i];
                    if (item.hasOwnProperty('id')) {

                        if (vm.isReport == true) {

                            //console.log('reportAttrs data is', vm.reportAttrs);

                            var reportAttrsKeys = Object.keys(vm.reportAttrs);

                            reportAttrsKeys.forEach(function (reportAttrKeyEntity) {

                                vm.reportAttrs[reportAttrKeyEntity].map(function (repAttr) {
                                    if (item.r_entityType === repAttr.r_entityType && item.id === repAttr.id) {
                                        if (item.options) {
                                            attrOptions = JSON.parse(JSON.stringify(item.options));
                                        }
                                        if (item.report_settings) {
                                            report_settings = JSON.parse(JSON.stringify(item.report_settings));
                                        }
                                        item = JSON.parse(JSON.stringify(repAttr));
                                        item.options = attrOptions;
                                        if (item.report_settings) {
                                            item.report_settings = JSON.parse(JSON.stringify(report_settings));
                                        }
                                        fullItems.push(item);
                                    }
                                });
                            })
                        }
                        else {

                            var attrsKeys = Object.keys(attrs);

                            attrsKeys.forEach(function (attrKey) {

                                for (a = 0; a < attrs[attrKey].length; a = a + 1) {
                                    attr = attrs[attrKey][a];

                                    if (item.id === attr.id) {
                                        //console.log("fullattributes this isn't report");
                                        if (item.options) {
                                            attrOptions = JSON.parse(JSON.stringify(item.options));
                                        }
                                        if (item.report_settings) {
                                            report_settings = JSON.parse(JSON.stringify(item.report_settings));
                                        }
                                        item = JSON.parse(JSON.stringify(attr));
                                        item.options = attrOptions;
                                        if (item.report_settings) {
                                            item.report_settings = JSON.parse(JSON.stringify(report_settings));
                                        }
                                        fullItems.push(item);
                                    }
                                }
                            })
                        }
                    } else {

                        var baseAttrsKeys = Object.keys(baseAttrs);

                        baseAttrsKeys.forEach(function (baseAttrKey) {

                            for (b = 0; b < baseAttrs[baseAttrKey].length; b = b + 1) {
                                baseAttr = baseAttrs[baseAttrKey][b];
                                if (item.key === baseAttr.key) {
                                    if (item.options) {
                                        attrOptions = JSON.parse(JSON.stringify(item.options));
                                    }
                                    if (item.report_settings) {
                                        report_settings = JSON.parse(JSON.stringify(item.report_settings));
                                    }
                                    item = JSON.parse(JSON.stringify(baseAttr));
                                    item.options = attrOptions;
                                    if (item.report_settings) {
                                        item.report_settings = JSON.parse(JSON.stringify(report_settings));
                                    }
                                    fullItems.push(item);
                                }
                            }
                        });

                        var entityAttrsKeys = Object.keys(entityAttrs);

                        entityAttrsKeys.forEach(function (entityAttrKey) {

                            for (e = 0; e < entityAttrs[entityAttrKey].length; e = e + 1) {
                                entityAttr = entityAttrs[entityAttrKey][e];
                                if (item.key === entityAttr.key) {
                                    if (item.options) {
                                        attrOptions = JSON.parse(JSON.stringify(item.options));
                                    }
                                    if (item.report_settings) {
                                        report_settings = JSON.parse(JSON.stringify(item.report_settings));
                                    }
                                    item = JSON.parse(JSON.stringify(entityAttr));
                                    item.options = attrOptions;
                                    if (item.report_settings) {
                                        item.report_settings = JSON.parse(JSON.stringify(report_settings));
                                    }
                                    fullItems.push(item);
                                }
                            }
                        })
                    }
                }

                return fullItems;

            };

            vm.findFullAttributeForItem = function (item, attrs) {
                if (item.hasOwnProperty('id')) {
                    var i;
                    for (i = 0; i < attrs.length; i = i + 1) {
                        var sort = item.sort;
                        if (item.id === attrs[i].id) {
                            item = attrs[i];
                            item.sort = sort;
                        }
                    }
                }
                return item;
            }; // TODO refactor, move to service

            vm.checkReadyStatus = function () {
                if (vm.tableIsReady == true && vm.readyStatus.uiView == true) {
                    return true;
                }
                return false;
            };

            vm.getView = function () {

                var layoutsIsNotExist = false;

                var handler = function (res, isFromList) {

                    if (res.results.length) {
                        vm.listView = res.results[0];

                        vm.oldListView = JSON.parse(JSON.stringify(vm.listView));

                        vm.table = res.results[0].data.table;
                        vm.columns = res.results[0].data.table.columns;
                        vm.columnsWidth = res.results[0].data.table.columnsWidth;
                        vm.grouping = res.results[0].data.table.grouping;
                        vm.folding = res.results[0].data.table.folding;
                        vm.filters = res.results[0].data.table.filters;
                        vm.sorting = res.results[0].data.table.sorting;

                        logService.collection(res.results.length + 'GET VIEW vm.columns', vm.columns);

                        vm.additionsType = res.results[0].data.tableAdditions.additionsType;

                        vm.additionsStatus = res.results[0].data.tableAdditions.additionsStatus || {
                                editor: false,
                                table: false,
                                permissionEditor: false,
                                extraFeatures: []
                            };

                        vm.additionsState = res.results[0].data.tableAdditions.additionsState;

                        vm.tableAdditions = res.results[0].data.tableAdditions;
                        vm.entityAdditionsColumns = res.results[0].data.tableAdditions.table.columns;
                        vm.entityAdditionsFilters = res.results[0].data.tableAdditions.table.filters;
                        vm.entityAdditionsSorting = res.results[0].data.tableAdditions.table.sorting;

                        if (res.results[0].data.reportOptions) {
                            vm.reportOptions = res.results[0].data.reportOptions;
                        }

                        vm.updateConfig();

                        //vm.additionsStatus[res.results[0].data.tableAdditions.additionsType] = true;
                    } else {

                        if (!isFromList) {
                            uiService.getListLayout(vm.entityType).then(handler, true);
                        } else {

                            var defaultList = uiService.getDefaultListLayout();

                            vm.listView = defaultList[0];

                            vm.table = defaultList[0].data.table;
                            vm.columns = defaultList[0].data.table.columns;
                            vm.columnsWidth = defaultList[0].data.table.columnsWidth;
                            vm.grouping = defaultList[0].data.table.grouping;
                            vm.folding = defaultList[0].data.table.folding;
                            vm.filters = defaultList[0].data.table.filters;
                            vm.sorting = defaultList[0].data.table.sorting;

                            logService.collection(res.results.length + 'GET VIEW (alternative) vm.columns', vm.columns);

                            vm.additionsType = defaultList[0].data.tableAdditions.additionsType;

                            vm.additionsEntityType = defaultList[0].data.tableAdditions.entityType;

                            vm.tableAdditions = defaultList[0].data.tableAdditions;
                            vm.entityAdditionsColumns = defaultList[0].data.tableAdditions.table.columns;
                            vm.entityAdditionsFilters = defaultList[0].data.tableAdditions.table.filters;
                            vm.entityAdditionsSorting = defaultList[0].data.tableAdditions.table.sorting;

                            vm.updateConfig();

                        }
                        //vm.additionsStatus[defaultList[0].data.tableAdditions.additionsType] = true;
                    }


                    vm.readyStatus.uiView = true;

                    //console.log('vm tabs!', vm.tabs);
                    $scope.$apply();
                };

                console.log('vm.uiLayoutId', vm.uiLayoutId);
                if (vm.uiLayoutId !== null && vm.uiLayoutId !== undefined) {
                    return uiService.getListLayoutByKey(vm.uiLayoutId).then(function (data) {
                        handler({results: [data]});
                    });
                } else {
                    return uiService.getActiveListLayout(vm.entityType).then(handler);
                }


            }; // TODO refactor

            vm.checkIfPermissionEditorAllowed = function () {
                return true;
            };

            vm.transformViewAttributes = function () { //deprecated


                vm.columns = vm.returnFullAttributes(vm.columns, vm.attrs, vm.baseAttrs, vm.entityAttrs);
                vm.grouping = vm.returnFullAttributes(vm.grouping, vm.attrs, vm.baseAttrs, vm.entityAttrs);
                vm.filters = vm.returnFullAttributes(vm.filters, vm.attrs, vm.baseAttrs, vm.entityAttrs);
                vm.sorting.group = vm.findFullAttributeForItem(vm.sorting.group, vm.attrs);
                vm.sorting.column = vm.findFullAttributeForItem(vm.sorting.column, vm.attrs);

                logService.collection('vm.grouping', vm.grouping);
                logService.collection('vm.columns', vm.columns);


                vm.updateConfig();
            };

            vm.getAttributes = function () {

                if (vm.isReport == true) {

                    return new Promise(function (resolve, reject) {

                        var promises = [];
                        promises.push(attributeTypeService.getList(vm.entityType));
                        promises.push(attributeTypeService.getList('instrument'));
                        promises.push(attributeTypeService.getList('account'));
                        promises.push(attributeTypeService.getList('portfolio'));

                        Promise.all(promises).then(function (data) {

                            //console.log('dyn attrs for report', data);

                            vm.attrs[vm.entityType] = data[0].results;
                            vm.attrs['instrument'] = data[1].results;
                            vm.attrs['account'] = data[2].results;
                            vm.attrs['portfolio'] = data[3].results;

                            vm.baseAttrs[vm.entityType] = [];
                            vm.baseAttrs['instrument'] = metaService.getBaseAttrs();
                            vm.baseAttrs['account'] = metaService.getBaseAttrs();
                            vm.baseAttrs['portfolio'] = metaService.getBaseAttrs();

                            vm.entityAttrs[vm.entityType] = metaService.getEntityAttrs(vm.entityType).map(function (item) {
                                item.name = vm.entityType.split('-')[0].capitalizeFirstLetter() + '.' + item.name;
                                return item;
                            });

                            vm.entityAttrs['instrument'] = metaService.getEntityAttrs('instrument').map(function (item) {
                                item.name = 'Instrument.' + item.name;
                                item.key = 'instrument_object_' + item.key;
                                return item;
                            });

                            vm.entityAttrs['account'] = metaService.getEntityAttrs('account').map(function (item) {
                                item.key = 'account_object_' + item.key;
                                return item;
                            });

                            vm.entityAttrs['portfolio'] = metaService.getEntityAttrs('portfolio').map(function (item) {
                                item.key = 'portfolio_object_' + item.key;
                                return item;
                            });

                            resolve(undefined);

                        })

                    })

                } else {
                    return attributeTypeService.getList(vm.entityType).then(function (data) {
                        vm.attrs[vm.entityType] = data.results;
                        if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(vm.entityType) == -1) {
                            vm.baseAttrs[vm.entityType] = metaService.getBaseAttrs();
                        }
                        vm.entityAttrs[vm.entityType] = metaService.getEntityAttrs(vm.entityType) || [];
                        $scope.$apply();
                    })
                }
            };

            vm.itemFilterHasOwnProperty = function (item, filter) {
                //
                //console.log('item', item);
                //console.log('filter', filter);

                if (filter.hasOwnProperty('columnType')) {
                    if (item.hasOwnProperty(filter.name)) {
                        return true;
                    }
                }

                if (filter.hasOwnProperty('key')) {
                    if (item.hasOwnProperty(filter.key)) {
                        return true;
                    }
                }

                if (filter.hasOwnProperty('id')) {

                    if (filter.hasOwnProperty('r_entityType')) {

                        if (item.hasOwnProperty(filter.r_entityType + '_attribute_' + filter.source_name)) {
                            return true;
                        }
                    } else {
                        if (item.hasOwnProperty(filter.attribute_entity + '_attribute_' + filter.source_name)) {
                            return true;
                        }
                    }
                }

                return false;

            }; // TODO refactor, move to service

            vm.getProjection = function () {
                return vm.groupTableService.projection();
            };

            vm.originalData = [];

            vm.updateTable = function (params) {

                //console.log('updateTable', vm.reportOptions);

                if (vm.components.layoutManager == true) {
                    vm.saveLayoutAsManager();
                    vm.saveLayoutManager();
                }

                var reportHandler = function (data) {

                    vm.reportOptions = data;
                    vm.reportOptions.currency = data.report_currency;

                    console.log('reportHandler data', data);

                    if (!data.hasOwnProperty('non_field_errors')) {

                        if (data.task_status !== 'SUCCESS') {

                            vm.reportProcessing = true;
                            vm.updateConfig();

                            $scope.$apply();

                            setTimeout(function () {
                                vm.updateTable();
                            }, 1000)

                        } else {

                            vm.originalData = JSON.parse(JSON.stringify(data)); // store server response data untouched

                            vm.reportOptions.task_id = null;


                            entityViewerHelperService.transformItems(data.items, vm.attrs).then(function (transformedData) {

                                var entity = transformedData;

                                console.log('transformedData', transformedData);

                                vm.reportIsReady = true;

                                if (vm.entityType == 'balance-report') {
                                    entity = reportSubtotalService.groupByAndCalc(entity, vm.reportOptions);
                                }


                                var filteredData = entity;

                                //if (vm.entityType == 'transaction-report' || vm.entityType == 'cash-flow-projection-report') {
                                filteredData = transactionReportHelper.injectIntoItems(filteredData, data);
                                //}

                                if (filteredData.length) {
                                    filteredData = reportHelper.releaseEntityObjects(filteredData);
                                }
                                //console.log('filteredData', filteredData);

                                filteredData = vm.groupTableService.extractDynamicAttributes(filteredData);

                                var isFiltersExist = false;
                                var isFiltersEnabled = false;

                                if (vm.filters.length > 0) {
                                    isFiltersExist = true;

                                    vm.filters.forEach(function (item) {
                                        if (item.options !== undefined && item.options.enabled == true) {

                                            if (item.value_type == 'field' && item.options.query !== undefined && item.options.query.length > 0) {
                                                isFiltersEnabled = true;
                                            }
                                            if (item.value_type == 'float' && item.options.query !== undefined && (item.options.query + '').length > 0) {
                                                isFiltersEnabled = true;
                                            }

                                            if (item.hasOwnProperty('columnType') || item.value_type == 10 && item.options.query !== undefined && (item.options.query + '').length > 0) {
                                                isFiltersEnabled = true;
                                            }
                                        }
                                    });
                                }

                                //console.log('filteredData123', filteredData);

                                if (isFiltersExist == true && isFiltersEnabled == true) {

                                    var itemsRepository = JSON.parse(JSON.stringify(filteredData));

                                    vm.filters.forEach(function (filterItem) {

                                        if (filterItem.hasOwnProperty('columnType')) {
                                            filterItem.value_type = 10
                                        }

                                        //console.log('filterItem', filterItem);

                                        var localFilteredData = [];

                                        if (filterItem.options !== undefined && filterItem.options.enabled == true) {

                                            itemsRepository.forEach(function (item) {

                                                if (vm.itemFilterHasOwnProperty(item, filterItem)) {

                                                    if (filterItem.value_type == 'field') {

                                                        if (filterItem.options.query !== undefined && filterItem.options.query.length) {
                                                            var matched = false;

                                                            filterItem.options.query.forEach(function (queryItem) {
                                                                if (item[filterItem.key] == queryItem) {
                                                                    matched = true;
                                                                }
                                                            });

                                                            if (matched) {
                                                                localFilteredData.push(item);
                                                            }
                                                        } else {
                                                            localFilteredData.push(item);
                                                        }

                                                    }

                                                    if (filterItem.value_type == 'float') {
                                                        if (filterItem.options.query !== undefined) {
                                                            if (item[filterItem.key] == parseFloat(filterItem.options.query)) {
                                                                localFilteredData.push(item);
                                                            }
                                                        } else {
                                                            localFilteredData.push(item);
                                                        }
                                                    }


                                                    if (filterItem.value_type == 10) {

                                                        var _name;

                                                        if (filterItem.hasOwnProperty('r_entityType')) {
                                                            _name = filterItem.r_entityType + '_attribute_' + filterItem.source_name;
                                                        } else {
                                                            if (filterItem.hasOwnProperty('columnType')) {
                                                                _name = filterItem.name;
                                                            } else {
                                                                _name = filterItem.key;
                                                                //_name = filterItem.attribute_entity + '_attribute_' + filterItem.source_name;
                                                            }
                                                        }


                                                        if (filterItem.options.query !== undefined) {

                                                            var strName = item[_name] + '';
                                                            var strQuery = filterItem.options.query + '';

                                                            if (strName.toLocaleLowerCase().indexOf(strQuery.toLocaleLowerCase()) !== -1) {


                                                                localFilteredData.push(item);
                                                            }
                                                        } else {
                                                            localFilteredData.push(item);
                                                        }
                                                    }

                                                    //if(item[filterItem.key] == filterItem.otions.query[0])
                                                }

                                            });

                                            //console.log('localFilteredData', localFilteredData);
                                            //console.log('itemsRepository', itemsRepository);

                                            itemsRepository = localFilteredData;
                                        }
                                    });

                                    filteredData = itemsRepository;
                                }

                                //console.log('filteredData1234', filteredData);


                                var entitiesList = [vm.entityType, 'instrument', 'account',
                                    'portfolio', 'instrument-type', 'account-type',
                                    'strategy-1', 'strategy-1-subgroup', 'strategy-1-subgroup',
                                    'strategy-2', 'strategy-2-subgroup', 'strategy-2-subgroup',
                                    'strategy-3', 'strategy-3-subgroup', 'strategy-3-subgroup'];

                                if (vm.entityType == 'cash-flow-projection-report') {
                                    entitiesList.push('transaction-report');
                                }

                                vm.groupTableService.setItems(filteredData);

                                vm.groupTableService.columns.setColumns(vm.columns);
                                //vm.groupTableService.filtering.setFilters(vm.filters);
                                vm.groupTableService.grouping.setGroupsWithColumns(vm.grouping, vm.columns, entitiesList);
                                //console.log("EXTERNAL CALLBACK ", vm.folding);
                                vm.groupTableService.folding.setFolds(vm.folding);
                                //console.log('UPDATE TABLE scope.sorting.group', vm.sorting.group);
                                //vm.sorting.group = vm.findFullAttributeForItem(vm.sorting.group, vm.attrs);
                                //vm.sorting.column = vm.findFullAttributeForItem(vm.sorting.column, vm.attrs);
                                vm.groupTableService.sorting.group.sort(vm.sorting.group);

                                //vm.groupTableService.sorting.column.sort(vm.sorting.column);

                                console.log('report projection', vm.groupTableService.projection());

                                vm.tableIsReady = true;
                                vm.reportProcessing = false;

                                vm.updateConfig();

                                $scope.$apply();
                            });
                        }
                    } else {
                        $mdDialog.show({
                            controller: 'ValidationDialogController as vm',
                            templateUrl: 'views/dialogs/validation-dialog-view.html',
                            //targetEvent: $event,
                            locals: {
                                validationData: data
                            },
                            preserveScope: true,
                            autoWrap: true,
                            skipHide: true
                        })
                    }
                };

                var handler = function (data) {

                    vm.originalData = JSON.parse(JSON.stringify(data)); // store server response data untouched

                    vm.paginationItemsTotal = data.count;
                    vm.nextExist = !!data.next;
                    vm.previousExist = !!data.previous;

                    data.results = data.results.map(function (item) {

                        if (item.object_permissions) {
                            item.object_permissions_group = [];
                            item.object_permissions_user = [];


                            item.object_permissions.forEach(function (permission) {
                                if (permission.group == null) {
                                    item.object_permissions_user.push(permission);
                                }
                                if (permission.member == null) {
                                    item.object_permissions_group.push(permission);
                                }
                            });
                        }

                        return item;
                    });

                    entityViewerHelperService.transformItems(data.results, vm.attrs).then(function (data) {

                        var entity = data;
                        entity = entity.map(function (item) {
                            item.date_formatted = moment(new Date(item.created)).format('DD/MM/YYYY');

                            if (vm.entityType == 'audit-transaction' || vm.entityType == 'audit-instrument') {
                                item.username = item.member.username;
                            }
                            return item;
                        });


                        //console.log('audit transaction data is', vm.entity);
                        vm.groupTableService.setItems(entity);

                        vm.groupTableService.columns.setColumns(vm.columns);
                        //vm.groupTableService.filtering.setFilters(vm.filters);
                        vm.groupTableService.grouping.setGroups(vm.grouping, [vm.entityType]);
                        //console.log("EXTERNAL CALLBACK ", vm.folding);
                        vm.groupTableService.folding.setFolds(vm.folding);
                        //console.log('UPDATE TABLE scope.sorting.group', vm.sorting.group);
                        vm.sorting.group = vm.findFullAttributeForItem(vm.sorting.group, vm.attrs);
                        vm.sorting.column = vm.findFullAttributeForItem(vm.sorting.column, vm.attrs);

                        //console.log('vm.sorting.column', vm.sorting.column);

                        vm.groupTableService.sorting.group.sort(vm.sorting.group);
                        vm.groupTableService.sorting.column.sort(vm.sorting.column);
                        vm.tableIsReady = true;

                        vm.updateConfig();

                        //console.log('handler update config', vm.columns);
                        //console.log('handler update options', vm.options.columns);


                        console.log(vm.groupTableService.projection());

                        $scope.$apply();
                    });
                };

                var optionsHandler = function (entityType, isReport) {

                    isReport = isReport || false;

                    if (isReport == true) {

                        vm.reportOptions.custom_fields = [];

                        vm.columns.forEach(function (column) {

                            if (column.hasOwnProperty('columnType') && column.columnType == 'custom-field') {
                                vm.reportOptions.custom_fields.push(column.id);
                            }
                        });

                        vm.reportIsReady = false;

                        return options
                    }

                    if (vm.entityType === 'audit-transaction') {

                        options = {
                            sort: {
                                key: vm.sorting.column.key,
                                direction: vm.sorting.column.sort
                            },
                            filters: {'content_type': 'transactions.transaction'},
                            page: vm.paginationPageCurrent,
                            pageSize: vm.paginationItemPerPage
                        };

                        vm.reportIsReady = true;

                        vm.filters.forEach(function (item) {
                            if (item.options && item.options.enabled === true) {
                                options.filters[item.key] = item.options.query;
                            }
                        });

                        if (vm.columns.length == 0) {

                            var attrs = metaService.getEntityAttrs('audit-transaction');

                            vm.columns = vm.columns.concat(attrs);

                        }

                        return options
                    }

                    if (vm.entityType === 'audit-instrument') {

                        options = {
                            sort: {
                                key: vm.sorting.column.key,
                                direction: vm.sorting.column.sort
                            },
                            filters: {'content_type': 'instruments.instrument'},
                            page: vm.paginationPageCurrent,
                            pageSize: vm.paginationItemPerPage
                        };

                        vm.reportIsReady = true;

                        //console.log('vm.filters', vm.filters);

                        vm.filters.forEach(function (item) {
                            if (item.options && item.options.enabled === true) {
                                options.filters[item.key] = item.options.query;
                            }
                        });

                        if (vm.columns.length == 0) {

                            var attrs = metaService.getEntityAttrs('audit-instrument');

                            vm.columns = vm.columns.concat(attrs);

                        }

                        return options;

                    }

                    options = {
                        sort: {
                            key: vm.sorting.column.key,
                            direction: vm.sorting.column.sort
                        },
                        filters: {},
                        page: vm.paginationPageCurrent,
                        pageSize: vm.paginationItemPerPage
                    };

                    vm.reportIsReady = true;

                    vm.filters.forEach(function (item) {
                        if (item.options && item.options.enabled === true) {
                            options.filters[item.key] = item.options.query;
                        }
                    });

                    //console.log('here', options);


                    return options;

                };


                console.log('params', params);
                var defaultParams = {
                    redraw: true,
                    silent: false,
                    options: {}
                };

                var _params = Object.assign(defaultParams, params);

                vm.updateVm(_params.options);


                var options = optionsHandler(vm.entityType, vm.isReport);


                //console.log('_params', _params);
                //console.log('vm.originalData', vm.originalData);


                console.log('vm', vm);

                console.trace();

                if (_params.reportOptionsUpdated == true) {

                } else {

                    if (_params.redraw == true) {

                        if (vm.isReport == true) {

                            if (_params.silent == true) {
                                if (vm.originalData.length || vm.originalData.hasOwnProperty('items')) {
                                    reportHandler(vm.originalData)
                                } else {
                                    vm.updateConfig();
                                }
                            } else {
                                entityViewerDataResolver.getList(vm.entityType, vm.reportOptions).then(function (data) {
                                    reportHandler(data);
                                })
                            }

                        } else {
                            if (_params.silent == true) {
                                handler(vm.originalData);
                            } else {
                                entityViewerDataResolver.getList(vm.entityType, options).then(function (data) {
                                    handler(data);
                                })
                            }
                        }
                    } else {
                        vm.updateConfig();
                    }
                }

            };

            vm.addEntity = function (ev) {
                //console.log('Add entity dialog have been activated');
                $mdDialog.show({
                    controller: 'EntityViewerAddDialogController as vm',
                    templateUrl: 'views/entity-viewer/entity-viewer-dialog-view.html',
                    parent: angular.element(document.body),
                    targetEvent: ev,
                    //clickOutsideToClose: true,
                    locals: {
                        parentScope: $scope
                    }
                }).then(function () {
                    vm.updateTable({test: 'ololo'});
                })
            };

            vm.openCustomAdditionsView = function ($event, customButton) {
                vm.additionsStatus.reportWizard = false;
                vm.additionsStatus.table = false;
                vm.additionsState = true;
                vm.additionsStatus.extraFeatures.forEach(function (item) {
                    item.isOpened = false;
                    if (item.id === customButton.id) {
                        item.isOpened = true;
                    }
                });
                //console.log('vm.additionsStatus.extraFeatures', vm.additionsStatus.extraFeatures);

                vm.updateConfig();

            };

            vm.openDataViewPanel = function () {

                vm.additionsStatus.editor = false;
                vm.additionsStatus.permissionEditor = false;
                vm.additionsState = true;
                vm.additionsStatus.extraFeatures.forEach(function (item) {
                    item.isOpened = false;
                });
                vm.additionsStatus.reportWizard = true;

                vm.updateConfig();

            };

            vm.openPermissionEditor = function () {
                vm.additionsStatus.editor = false;
                vm.additionsStatus.reportWizard = false;
                vm.additionsState = true;

                vm.additionsStatus.extraFeatures.forEach(function (item) {
                    item.isOpened = false;
                });

                vm.additionsStatus.permissionEditor = true;

                vm.updateConfig();

            };

            vm.openEditorViewPanel = function () {

                vm.additionsStatus.editor = true;
                vm.additionsState = true;
                vm.additionsStatus.extraFeatures.forEach(function (item) {
                    item.isOpened = false;
                });
                vm.additionsStatus.reportWizard = false;
                vm.additionsStatus.permissionEditor = false;

                vm.updateConfig();
            };

            vm.checkAdditionStatus = function () {
                if (!vm.additionsStatus.reportWizard && !vm.additionsStatus.editor && !vm.additionsStatus.permissionEditor) {
                    //vm.editorEntityId = undefined;
                    return true;
                }
                return false;
            };

            vm.hideAdditions = function () {
                vm.additionsState = false;
                vm.additionsStatus.reportWizard = false;
                vm.additionsStatus.editor = false;
                vm.additionsStatus.permissionEditor = false;

                //vm.editorEntityId = undefined;

                vm.updateConfig();
            };

            vm.getReport = function () {

                //console.log('getReport, vm', vm);

                pricingPolicyService.getList().then(function (data) {

                    vm.reportOptions = {
                        cost_method: 1,
                        pricing_policy: data.results[0].id
                    };

                    vm.readyStatus.reportOptions = true;

                    vm.getView().then(function () {
                        vm.getAttributes().then(function () {
                            vm.transformViewAttributes();
                            //debugger;
                            vm.updateTable();
                        });
                    });

                })

            };

            vm.checkOnBeforeLoadAction = function () {

                if (vm.onBeforeLoadAction && vm.onBeforeLoadActionFinish == false) {
                    return true;
                }

                if (vm.onBeforeLoadAction && vm.onBeforeLoadActionFinish == true) {
                    return false;
                }

                return false;

            };

            vm.checkAddEntityBtn = function () {
                return vm.checkAddEntityBtn && vm.components.addEntityBtn;
            };

            // entityViewer initialization
            // resolving is instance of entityViewer root
            // settings all props depends of root/child


            vm.saveLayoutAsManager = function () {
                $('.save-layout-as-btn').unbind('click');
                $('.save-layout-as-btn').bind('click', function (e) {

                    // saving columns widths
                    var tHead = $('.g-columns-component');
                    var th = $('.g-columns-component.g-thead').find('.g-cell');
                    var thWidths = [];
                    for (var i = 0; i < th.length; i = i + 1) {
                        var thWidth = $(th[i]).width();
                        thWidths.push(thWidth);
                    }

                    vm.listView.data.table.columnsWidth = thWidths;

                    //console.log("View data is ", vm.listView.data);
                    vm.listView.data.table = vm.table;
                    vm.listView.data.table.columns = vm.columns;
                    // vm.listView.data.table.columns['cellWidth']
                    //console.log('---------vm.grouping-------', vm.grouping);
                    vm.listView.data.table.grouping = vm.grouping;
                    vm.listView.data.table.folding = vm.folding;
                    vm.listView.data.table.filters = vm.filters;
                    vm.listView.data.table.sorting = vm.sorting;

                    // vm.listView.data.table.cellWidth = 200;

                    vm.listView.data.additionsType = vm.additionsType;

                    vm.listView.data.tableAdditions.entityType = vm.additionsEntityType;

                    vm.listView.data.tableAdditions = vm.tableAdditions;
                    vm.listView.data.tableAdditions.table.columns = vm.entityAdditionsColumns;
                    vm.listView.data.tableAdditions.table.filters = vm.entityAdditionsFilters;
                    vm.listView.data.tableAdditions.table.sorting = vm.entityAdditionsSorting;
                    vm.listView.data.tableAdditions.additionsStatus = vm.additionsStatus;
                    vm.listView.data.tableAdditions.additionsState = vm.additionsState;

                    vm.listView.data.reportOptions = vm.reportOptions;

                    //vm.additionsStatus[res.results[0].data.tableAdditions.additionsType] = true;


                    $mdDialog.show({
                        controller: 'UiLayoutSaveAsDialogController as vm',
                        templateUrl: 'views/dialogs/ui/ui-layout-save-as-view.html',
                        parent: angular.element(document.body),
                        targetEvent: e,
                        locals: {
                            options: {}
                        },
                        clickOutsideToClose: false
                    }).then(function (res) {

                        if (res.status == 'agree') {

                            if (vm.oldListView) {
                                vm.oldListView.is_default = false;

                                uiService.updateListLayout(vm.oldListView.id, vm.oldListView).then(function () {
                                    //console.log('saved');
                                }).then(function () {

                                    vm.listView.name = res.data.name;
                                    vm.listView.is_default = true;

                                    uiService.createListLayout(vm.entityType, vm.listView).then(function () {
                                        //console.log('saved');
                                        vm.getView();
                                    });

                                })

                            } else {

                                vm.listView.name = res.data.name;
                                vm.listView.is_default = true;

                                uiService.createListLayout(vm.entityType, vm.listView).then(function () {
                                    //console.log('saved');
                                    vm.getView();
                                });
                            }
                        }

                    });

                });
            };

            vm.saveLayoutManager = function () {
                $('.save-layout-btn').unbind('click');
                $('.save-layout-btn').bind('click', function (e) {


                    // saving columns widths
                    var tHead = $('.g-columns-component');
                    var th = $('.g-columns-component.g-thead').find('.g-cell');
                    var thWidths = [];
                    for (var i = 0; i < th.length; i = i + 1) {
                        var thWidth = $(th[i]).width();
                        thWidths.push(thWidth);
                    }
                    vm.listView.data.table.columnsWidth = thWidths;
                    //console.log('entity viewer columnsWidth is', vm.listView.data.table.columnsWidth);

                    //console.log("View data is ", vm.listView.data);


                    vm.listView.data.table = vm.table;
                    vm.listView.data.table.columns = vm.columns;
                    // vm.listView.data.table.columns['cellWidth']
                    //console.log('---------vm.grouping-------', vm.grouping);
                    vm.listView.data.table.grouping = vm.grouping;
                    vm.listView.data.table.folding = vm.folding;
                    vm.listView.data.table.filters = vm.filters;
                    vm.listView.data.table.sorting = vm.sorting;

                    // vm.listView.data.table.cellWidth = 200;

                    vm.listView.data.additionsType = vm.additionsType;

                    vm.listView.data.tableAdditions.entityType = vm.additionsEntityType;

                    vm.listView.data.tableAdditions = vm.tableAdditions;
                    vm.listView.data.tableAdditions.table.columns = vm.entityAdditionsColumns;
                    vm.listView.data.tableAdditions.table.filters = vm.entityAdditionsFilters;
                    vm.listView.data.tableAdditions.table.sorting = vm.entityAdditionsSorting;
                    vm.listView.data.tableAdditions.additionsStatus = vm.additionsStatus;
                    vm.listView.data.tableAdditions.additionsState = vm.additionsState;

                    vm.listView.data.reportOptions = vm.reportOptions;

                    //vm.additionsStatus[res.results[0].data.tableAdditions.additionsType] = true;

                    //console.log('vm.listView', vm.listView);

                    if (vm.listView.hasOwnProperty('id')) {
                        uiService.updateListLayout(vm.listView.id, vm.listView).then(function () {
                            //console.log('saved');
                        });
                    } else {
                        uiService.createListLayout(vm.entityType, vm.listView).then(function () {
                            //console.log('saved');
                        });
                    }
                    $mdDialog.show({
                        controller: 'SaveLayoutDialogController as vm',
                        templateUrl: 'views/save-layout-dialog-view.html',
                        targetEvent: e,
                        clickOutsideToClose: true
                    }).then(function () {
                        vm.getView();
                    });


                });
            };

            (function ResolveEntityViewer() {

                if ($scope.$parent.options && $scope.$parent.options.additionsState == true) { // nested EntityViewer

                    (function SetPropsForEntityViewer() {

                        vm.oldListView = null;

                        // TODO make onBeforeActionResolver

                        if ($scope.$parent.options.additionsStatus.reportWizard == true) {
                            vm.onBeforeLoadAction = 'views/entity-viewer/report-wizard-view.html';
                        }
                        vm.onBeforeLoadActionFinish = false; // will be updated from onBeforeLoadAction controller, when it finish

                        vm.paginationPageCurrent = 1;
                        vm.paginationItemPerPage = 20;
                        vm.paginationItemsTotal = 0;

                        // ATTRIBUTE STUFF START

                        vm.isRootEntityViewer = false;

                        vm.attrs = {};
                        vm.baseAttrs = {};
                        vm.layoutAttrs = [];
                        vm.entityAttrs = {};

                        // ENTITY STUFF START

                        //vm.entityType = $scope.$parent.vm.entityType;
                        //vm.isReport = $scope.$parent.vm.isReport || false;

                        //console.log('vm.isReport', vm.isReport);

                        //vm.customButtons = $scope.$parent.vm.entityViewer.extraFeatures;
                        vm.groupTableService = GroupTableService.getInstance(true, 'child');

                        vm.columns = [];
                        vm.columnsWidth = [];
                        vm.grouping = [];
                        vm.filters = [];
                        vm.sorting = [];

                        vm.permission_selected_id = null;
                        vm.permission_selected_entity = null;

                        // ENTITY ADDITIONS STUFF START

                        vm.entityAdditions = [];
                        vm.additionsType = '';
                        vm.additionsEntityType = '';
                        vm.components = {
                            sidebar: true,
                            groupingArea: true,
                            columnAreaHeader: true,
                            splitPanel: false,
                            addEntityBtn: false,
                            fieldManagerBtn: true,
                            layoutManager: false,
                            autoReportRequest: false
                        };

                        vm.entityAdditionsColumns = [];
                        vm.entityAdditionsFilters = [];
                        vm.entityAdditionsSorting = [];

                        // OTHER STUFF START

                        vm.tabs = [];
                        vm.table = {};
                        vm.tableAdditions = {};

                        vm.tableIsReady = false;
                        vm.readyStatus = {uiView: false};

                        vm.editorTemplate = 'views/additions-editor-view.html';

                        vm.additionsStatus = {
                            editor: false,
                            table: false,
                            permissionEditor: false,
                            extraFeatures: []
                        };
                        vm.additionsState = false;
                        vm.additionsStatus.extraFeatures = vm.customButtons;

                        vm.reportIsReady = false;

                        vm.reportAttrs = {};	//	array of reports's dynamic attributes

                        dynamicAttributesForReportsService.getDynamicAttributes().then(function (data) {
                            vm.reportAttrs = data;
                        });

                        //if (vm.isReport == true) {
                        //    pricingPolicyService.getList().then(function (data) {
                        //
                        //        vm.reportOptions = {
                        //            cost_method: 1,
                        //            pricing_policy: data.results[0].id
                        //        };
                        //
                        //        vm.getView().then(function () {
                        //            vm.getAttributes().then(function () {
                        //                vm.transformViewAttributes();
                        //                vm.updateTable();
                        //            });
                        //        });
                        //
                        //    })
                        //} else {
                        //    vm.getView().then(function () {
                        //        vm.getAttributes().then(function () {
                        //            vm.transformViewAttributes();
                        //            vm.updateTable();
                        //        });
                        //    });
                        //}

                        //vm.tableParts = tablePartsService.setTablePartsSettings(vm.entityType);

                        $scope.$on("$destroy", function (event) {

                            logService.controller('EntityViewerController', 'destroyed');

                        });

                    }());

                } else { // root EntityViewer
                    (function SetPropsForRootEntityViewer() {

                        vm.oldListView = null;

                        vm.onBeforeLoadAction = false; // no before action for root, for now
                        vm.onBeforeLoadActionFinish = true; // will be updated from onBeforeLoadAction controller, when it finish

                        vm.paginationPageCurrent = 1;
                        vm.paginationItemPerPage = 20;
                        vm.paginationItemsTotal = 0;

                        // ATTRIBUTE STUFF START

                        vm.isRootEntityViewer = true;

                        vm.attrs = {};
                        vm.baseAttrs = {};
                        vm.layoutAttrs = [];
                        vm.entityAttrs = {};

                        // ENTITY STUFF START
                        vm.entityType = $scope.$parent.vm.entityType;
                        vm.uiLayoutId = $scope.$parent.vm.uiLayoutId;
                        vm.components = $scope.$parent.vm.components || {
                                sidebar: true,
                                groupingArea: true,
                                columnAreaHeader: true,
                                splitPanel: true,
                                addEntityBtn: true,
                                fieldManagerBtn: true,
                                layoutManager: true,
                                autoReportRequest: false
                            };

                        console.log('vm.components', vm.components);

                        vm.isReport = $scope.$parent.vm.isReport || false;

                        vm.customButtons = $scope.$parent.vm.entityViewer.extraFeatures;
                        vm.groupTableService = GroupTableService.getInstance(true, 'root');

                        vm.columns = [];
                        vm.columnsWidth = [];
                        vm.grouping = [];
                        vm.filters = [];
                        vm.sorting = [];

                        vm.permission_selected_id = null;
                        vm.permission_selected_entity = null;

                        // ENTITY ADDITIONS STUFF START

                        vm.entityAdditions = [];
                        vm.additionsType = '';
                        vm.additionsEntityType = '';

                        // OTHER STUFF START

                        vm.tabs = [];
                        vm.table = {};
                        vm.tableAdditions = {};

                        vm.tableIsReady = false;
                        vm.readyStatus = {uiView: false};

                        vm.editorTemplate = 'views/additions-editor-view.html';

                        vm.additionsStatus = {
                            editor: false,
                            table: false,
                            permissionEditor: false,
                            extraFeatures: []
                        };

                        vm.additionsState = false;
                        vm.additionsStatus.extraFeatures = vm.customButtons;

                        vm.reportIsReady = false;

                        vm.reportAttrs = {};	//	array of reports's dynamic attributes

                        dynamicAttributesForReportsService.getDynamicAttributes().then(function (data) {
                            vm.reportAttrs = data;
                        });

                        if (vm.isReport == true) {
                            pricingPolicyService.getList().then(function (data) {

                                //console.log('111111111111111111111111111111111111111');

                                vm.reportOptions = {
                                    cost_method: 1,
                                    pricing_policy: data.results[0].id,
                                    report_date: moment(new Date(Date.now() - 86400000)).format('YYYY-MM-DD') // yesterday
                                };


                                console.log('vm.reportOptions', vm.reportOptions);

                                vm.getView().then(function () {
                                    vm.getAttributes().then(function () {
                                        //vm.transformViewAttributes();

                                        vm.tableIsReady = true;

                                        if (vm.components.autoReportRequest == true) {
                                            vm.updateTable();
                                        }


                                    });
                                });

                            })
                        } else {
                            vm.getView().then(function () {
                                vm.getAttributes().then(function () {
                                    vm.transformViewAttributes();
                                    vm.updateTable();
                                });
                            });
                        }

                        vm.tableParts = tablePartsService.setTablePartsSettings(vm.entityType);

                        if (vm.components.layoutManager == true) {
                            vm.saveLayoutAsManager();
                            vm.saveLayoutManager();
                        }

                        $scope.$on("$destroy", function (event) {


                            if (vm.components.layoutManager == true) {
                                $('.save-layout-btn').unbind('click');
                                $('.save-layout-as-btn').unbind('click');
                            }


                            logService.controller('EntityViewerController', 'destroyed');

                        });

                    }());
                }

            }());

        }

    }()
);
},{"../../../../../core/services/logService":2,"../../helpers/reportHelper":184,"../../helpers/transactionReportHelper":185,"../../services/attributeTypeService":304,"../../services/entityViewerDataResolver":318,"../../services/entityViewerHelperService":319,"../../services/groupTable/dynamicAttributesForReportsService":324,"../../services/groupTable/groupTableService":328,"../../services/groupTable/tablePartsService":331,"../../services/metaService":375,"../../services/pricingPolicyService":379,"../../services/reportSubtotalService":382,"../../services/uiService":397}],99:[function(require,module,exports){
/**
 * Created by szhitenev on 16.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var entityResolverService = require('../../services/entityResolverService');

    module.exports = function ($scope, $mdDialog, entity, entityType) {

        logService.controller('EntityViewerDeleteDialogController', 'initialized');

        var vm = this;
        console.log('vm.entity', entity);
        vm.entity = entity;
        vm.entityType = entityType;

        vm.displayCaption = function () {
            if (vm.entity.name) {
                return vm.entity.name;
            }
            return 'item';
        };

        vm.cancel = function () {
            $mdDialog.cancel();
        };

        vm.delete = function () {
            entityResolverService.deleteByKey(vm.entityType, vm.entity.id).then(function (data) {
                console.log('deleted!', data);

                $mdDialog.hide({status: 'agree'});
            });
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/entityResolverService":316}],100:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';
    var logService = require('../../../../../core/services/logService');

    var attributeTypeService = require('../../services/attributeTypeService');
    var entityResolverService = require('../../services/entityResolverService');
    var entityViewerHelperService = require('../../services/entityViewerHelperService');

    var usersService = require('../../services/usersService');

    var uiService = require('../../services/uiService');

    var gridHelperService = require('../../services/gridHelperService');
    var metaService = require('../../services/metaService');
    var layoutService = require('../../services/layoutService');

    var metaPermissionsService = require('../../services/metaPermissionsService');

    module.exports = function ($scope, $mdDialog, parentScope, entityId, $state) {

        logService.controller('EntityViewerEditDialogController', 'initialized');

        var vm = this;

        //vm.readyStatus = {content: false, permissions: false, entity: false, me: false};
        vm.entityType = parentScope.entityType;
        console.log('entity edit dialog', parentScope);
        vm.evAction = 'update';
        vm.entityId = entityId;
        vm.saveCallback = ''; // save callback handler in inner controller;
        vm.copyCallback = ''; // copy callback handler in inner controller;

        vm.entityTypeSlug = function () {

            if (vm.entityType == 'complex-transaction') {
                return 'Transaction';
            }

            return vm.entityType.split('-').join(' ').capitalizeFirstLetter();
        };

        vm.cancel = function () {
            //localStorage.setItem('entityIsChanged', false);
            $mdDialog.cancel();
        };

        vm.editLayout = function (ev) {
            $state.go('app.data-constructor', {entityType: vm.entityType});
            $mdDialog.hide();
        };

        vm.manageAttrs = function (ev) {
            $state.go('app.attributesManager', {entityType: vm.entityType});
            $mdDialog.hide();
        };

        vm.MABtnVisibility = function (entityType) {
            //console.log('custom entity type', entityType);
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        }

        vm.copy = function () {
            vm.copyCallback().then(function () {
                vm.evAction = 'create';
                $scope.$apply();
            }); // look at entityEditorController
        };

        vm.checkVisibility = function () {
            return true;
        };

        vm.save = function ($event, options) {
            if (vm.evAction == 'create') {
                vm.saveCallback().then(function (options) {

                    entityResolverService.create(options.entityType, options.entity).then(function (data) {
                        //console.log('DATA', data);
                        if (data.status == 200 || data.status == 201) {
                            $mdDialog.hide({res: 'agree'});
                        }
                        if (data.status == 400) {
                            $mdDialog.show({
                                controller: 'ValidationDialogController as vm',
                                templateUrl: 'views/dialogs/validation-dialog-view.html',
                                targetEvent: $event,
                                locals: {
                                    validationData: data.response
                                },
                                preserveScope: true,
                                autoWrap: true,
                                skipHide: true
                            })
                        }
                    });

                })
            } else {
                vm.saveCallback(options).then(function (options) {

                    var entityType = options.entityType;

                    if (options.entityType == 'complex-transaction') {
                        if (options.complexTransactionChangeStatus == false) {
                            entityType = 'complex-transaction-default'
                        }
                    }

                    entityResolverService.update(entityType, options.entityId, options.entity).then(function (data) {
                        console.log('DATA', data);
                        if (options.entityType == 'complex-transaction') {
                            if (data.response.hasOwnProperty('has_errors') && data.response.has_errors == true) {
                                $mdDialog.show({
                                    controller: 'ValidationDialogController as vm',
                                    templateUrl: 'views/dialogs/validation-dialog-view.html',
                                    targetEvent: $event,
                                    locals: {
                                        validationData: {
                                            complex_transaction_errors: data.response.complex_transaction_errors,
                                            instruments_errors: data.response.instruments_errors,
                                            transactions_errors: data.response.transactions_errors
                                        }
                                    },
                                    preserveScope: true,
                                    autoWrap: true,
                                    skipHide: true
                                })
                            }
                            else {

                                $mdDialog.hide({res: 'agree'});
                            }
                        }
                        if (data.status == 400) {
                            $mdDialog.show({
                                controller: 'ValidationDialogController as vm',
                                templateUrl: 'views/dialogs/validation-dialog-view.html',
                                targetEvent: $event,
                                locals: {
                                    validationData: data.response
                                },
                                preserveScope: true,
                                autoWrap: true,
                                skipHide: true
                            })
                        } else {
                            $mdDialog.hide({res: 'agree'});
                        }
                    });
                })

            }
        };

    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/entityResolverService":316,"../../services/entityViewerHelperService":319,"../../services/gridHelperService":322,"../../services/layoutService":368,"../../services/metaPermissionsService":373,"../../services/metaService":375,"../../services/uiService":397,"../../services/usersService":399}],101:[function(require,module,exports){
/**
 * Created by szhitenev on 09.01.2017.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var usersService = require('../../services/usersService');
    var usersGroupService = require('../../services/usersGroupService');
    var entityResolverService = require('../../services/entityResolverService');


    module.exports = function ($scope) {

        logService.controller('EntityViewerPermissionEditorController', 'initialized');

        var vm = this;

        vm.readyStatus = {users: false, groups: false};

        vm.processing = false;

        vm.getUsers = function () {

            vm.readyStatus.users = false;

            usersService.getMemberList().then(function (data) {

                //console.log('users data', data);

                vm.users = data.results;

                vm.readyStatus.users = true;

                $scope.$apply();
            })
        };

        vm.getGroups = function () {

            vm.readyStatus.groups = false;

            usersGroupService.getList().then(function (data) {

                //console.log('groups data', data);

                vm.groups = data.results;

                vm.readyStatus.groups = true;

                $scope.$apply();
            })
        };

        /*
         @entity: user / group
         */

        vm.selectEntity = function (type, item) {

            if (type == 'user') {
                vm.users.forEach(function (user) {
                    if (item.id !== user.id) {
                        user.isSelected = false;
                    }
                });

                if (!item.isSelected) {
                    item.isSelected = true;

                    $scope.$parent.options.externalCallback({
                        silent: true,
                        options: {
                            permission_selected_id: item.id,
                            permission_selected_entity: 'user'
                        }
                    })

                }


            } else {
                vm.groups.forEach(function (user) {
                    user.isSelected = false;
                });

                item.isSelected = !item.isSelected;

                if (item.isSelected == true) {

                    $scope.$parent.options.externalCallback({
                        silent: true,
                        options: {
                            permission_selected_id: item.id,
                            permission_selected_entity: 'group'
                        }
                    })

                }

            }

            //console.log('1111111111111111111111111111111111111111111111111', $scope.$parent.items);

        };

        vm.toggleManage = function (state, entity) {

            if (!entity.hasOwnProperty('manager_actions')) {
                entity.manager_actions = {manage: false, change: false};
            }

            //console.log('$scope', $scope);
            //
            //console.log($scope.$parent.items);

            var selectedRows = [];
            var entityType = $scope.$parent.options.entityType;

            if ($scope.$parent.items[0].hasOwnProperty('groups')) {

                $scope.$parent.items.map(function (group) {
                    group.items.forEach(function (item) {

                        if (item.hasOwnProperty('selectedRow') && item.selectedRow == true) {
                            selectedRows.push(item);
                        }
                    });
                });
            } else {
                $scope.$parent.items.forEach(function (item) {
                    if (item.hasOwnProperty('selectedRow') && item.selectedRow == true) {
                        selectedRows.push(item);
                    }
                })
            }

            //console.log('selectedRows', selectedRows);

            entity.manager_actions.manage = state;

            var permissionType = 'manage';

            vm.updateBulk(selectedRows, entityType, entity, permissionType);
        };

        /*
         @entity: user / group
         */

        vm.toggleChange = function (state, entity) {

            if (!entity.hasOwnProperty('manager_actions')) {
                entity.manager_actions = {manage: false, change: false};
            }

            var selectedRows = [];
            var entityType = $scope.$parent.options.entityType;

            if ($scope.$parent.items[0].hasOwnProperty('groups')) {

                $scope.$parent.items.map(function (group) {
                    group.items.forEach(function (item) {

                        if (item.hasOwnProperty('selectedRow') && item.selectedRow == true) {
                            selectedRows.push(item);
                        }
                    });
                });
            } else {
                $scope.$parent.items.forEach(function (item) {
                    if (item.hasOwnProperty('selectedRow') && item.selectedRow == true) {
                        selectedRows.push(item);
                    }
                })
            }

            //console.log('selectedRows', selectedRows);

            entity.manager_actions.change = state;

            var permissionType = 'change';

            vm.updateBulk(selectedRows, entityType, entity, permissionType);
        };

        vm.updateBulk = function (selectedRows, entityType, entity, permissionType) {

            vm.processing = true;

            var selectedRowsUpdated = selectedRows.map(function (item) {
                return {id: item.id, object_permissions: item.object_permissions};
            });

            if (entity.hasOwnProperty('first_name')) {

                selectedRowsUpdated.forEach(function (item) {

                    item.object_permissions.forEach(function (permission, $index) {

                        //console.log('entity USER', entity);
                        //console.log('permission', permission);

                        if (permission.member == entity.id) {
                            if (permission.group == null) {

                                if (permission.permission.indexOf(permissionType) == 0) {
                                    item.object_permissions.splice($index, 1);
                                }

                                console.log('?here', item);
                            }
                        }

                    });

                    if (!item.hasOwnProperty('object_permissions')) {
                        item.object_permissions = [];
                    }

                    if (entity.hasOwnProperty('manager_actions')) {

                        if (entity.manager_actions.change == true) {
                            item.object_permissions.push(
                                {
                                    "group": null,
                                    "member": entity.id,
                                    "permission": "change_" + entityType.split('-').join('').toLowerCase()
                                }
                            )
                        }

                        if (entity.manager_actions.manage == true) {
                            item.object_permissions.push(
                                {
                                    "group": null,
                                    "member": entity.id,
                                    "permission": "manage_" + entityType.split('-').join('').toLowerCase()
                                }
                            )
                        }

                    }

                    //console.log('item', item);

                })

            } else {

                selectedRowsUpdated.forEach(function (item) {

                    item.object_permissions.forEach(function (permission, $index) {

                        if (permission.group == entity.id) {
                            if (permission.member == null) {
                                item.object_permissions.splice($index, 1);
                            }
                        }

                    });

                    if (!item.hasOwnProperty('object_permissions')) {
                        item.object_permissions = [];
                    }

                    if (entity.hasOwnProperty('manager_actions')) {

                        if (entity.manager_actions.change == true) {
                            item.object_permissions.push(
                                {
                                    "group": entity.id,
                                    "member": null,
                                    "permission": "change_" + entityType.split('-').join('').toLowerCase()
                                }
                            )
                        }

                        if (entity.manager_actions.manage == true) {
                            item.object_permissions.push({
                                "group": entity.id,
                                "member": null,
                                "permission": "manage_" + entityType.split('-').join('').toLowerCase()
                            })
                        }

                    }

                })
            }

            entityResolverService.updateBulk(entityType, selectedRowsUpdated).then(function () {
                vm.processing = false;
                $scope.$parent.options.externalCallback();
                $scope.$apply();
            })

        };

        vm.getUsers();
        vm.getGroups();
    }

}());
},{"../../../../../core/services/logService":2,"../../services/entityResolverService":316,"../../services/usersGroupService":398,"../../services/usersService":399}],102:[function(require,module,exports){
/**
 * Created by szhitenev on 21.12.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    var uiService = require('../../../services/uiService');

    module.exports = function ($scope) {

        logService.controller('ReportWizardController', 'initialized');

        var vm = this;

        vm.currentStep = 1;
        vm.readyStatus = {layouts: true};
        vm.wizard = {entityType: null, uiLayout: null};

        //setTimeout(function () {
        //
        //    $scope.$parent.vm.entityType = 'balance-report';
        //    $scope.$parent.vm.isReport = true;
        //    $scope.$parent.vm.onBeforeLoadActionFinish = true;
        //
        //    $scope.$parent.vm.getReport();
        //
        //}, 2000)

        vm.reportTypes = [
            {
                caption: 'Balance report',
                entityType: 'balance-report'
            },
            {
                caption: 'Profit & Lost report',
                entityType: 'pnl-report'
            },
            {
                caption: 'Transaction report',
                entityType: 'transaction-report'
            },
            {
                caption: 'Cash flow projection report',
                entityType: 'cash-flow-projection-report'
            },
            {
                caption: 'Performance report',
                entityType: 'performance-report'
            }
        ];

        vm.selectReport = function (item) {

            vm.reportTypes.forEach(function (reportTypeItem) {
                reportTypeItem.selected = false;
            });

            item.selected = true;
            vm.wizard.entityType = item.entityType;
            vm.currentStep = vm.currentStep + 1;
            vm.renderStep();

        };

        vm.selectLayout = function (item) {

            vm.layouts.forEach(function (layout) {
                layout.selected = false;
            });

            item.selected = true;
            vm.wizard.uiLayout = item.id;
            vm.currentStep = vm.currentStep + 1;
            vm.renderStep();
        };

        vm.checkDisabled = function () {

            if (vm.currentStep == 1 && vm.wizard.entityType !== null) {
                return false;
            }

            if (vm.currentStep == 2 && vm.wizard.uiLayout !== null) {
                return false;
            }

            return true;

        };

        vm.checkReadyStatus = function () {

            if (vm.readyStatus.layouts == true) {
                return true;
            }

            return false;

        };

        vm.getUiLayouts = function () {
            vm.readyStatus.layouts = false;
            uiService.getListLayout(vm.wizard.entityType).then(function (data) {

                vm.layouts = data.results;

                vm.readyStatus.layouts = true;
                $scope.$apply();
            })
        };

        vm.renderStep = function () {

            if (vm.currentStep == 2) {
                vm.getUiLayouts();
            }

            if (vm.currentStep == 3) {
                $scope.$parent.vm.entityType = vm.wizard.entityType;
                $scope.$parent.vm.uiLayoutId = vm.wizard.uiLayout;
                $scope.$parent.vm.isReport = true;
                $scope.$parent.vm.onBeforeLoadActionFinish = true;

                $scope.$parent.vm.getReport();
            }


        };

        vm.nextStep = function () {
            vm.currentStep = vm.currentStep + 1;
            vm.renderStep();
        };

        vm.prevStep = function () {
            vm.currentStep = vm.currentStep - 1;
            vm.renderStep();
        }


    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/uiService":397}],103:[function(require,module,exports){
/**
 * Created by szhitenev on 20.02.2017.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');

    module.exports = function ($scope) {

        logService.controller('FloatCustomFieldConstructorController', 'initialized');

        var vm = this;

        vm.rangeItems = $scope.$parent.vm.rangeItems;

        if (!vm.rangeItems.length) {
            vm.rangeItems.push({
                value_left: '-inf',
                value_right: 'inf',
                group_name: 'Group 1'
            });
        }

        $scope.$parent.vm.rangeType = 20;

    }

}());
},{"../../../../core/services/logService":2}],104:[function(require,module,exports){
/**
 * Created by szhitenev on 01.11.2016.
 */
(function(){

    'use strict';

    //var instrumentService = require('../../services/instrumentService'); // TODO change to balance report service
    var reportService = require('../../services/reportService');

    module.exports = function($scope){

        console.log('{"controller": "BalanceReportController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'balance-report';
        vm.entityRaw = [];

        vm.isReport = true;

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        vm.readyStatus.content = true;

        //reportService.getList().then(function (data) {
        //    vm.entityRaw = data.items;
        //    vm.readyStatus.content = true;
        //    $scope.$apply();
        //});

        vm.getList = function (options) {
            return reportService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/reportService":381}],105:[function(require,module,exports){
/**
 * Created by szhitenev on 01.11.2016.
 */
(function(){

    'use strict';

    //var instrumentService = require('../../services/instrumentService'); // TODO change to balance report service
    var reportService = require('../../services/reportService');

    module.exports = function($scope){

        console.log('{"controller": "CashFlowProjectionReportController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'cash-flow-projection-report';
        vm.entityRaw = [];

        vm.isReport = true;

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        vm.readyStatus.content = true;

        //reportService.getList().then(function (data) {
        //    vm.entityRaw = data.items;
        //    vm.readyStatus.content = true;
        //    $scope.$apply();
        //});

        vm.getList = function (options) {
            return reportService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/reportService":381}],106:[function(require,module,exports){
/**
 * Created by szhitenev on 01.11.2016.
 */
(function(){

    'use strict';

    //var instrumentService = require('../../services/instrumentService'); // TODO change to balance report service
    var reportService = require('../../services/reportService');

    module.exports = function($scope){

        console.log('{"controller": "PerformanceReportController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'performance-report';
        vm.entityRaw = [];

        vm.isReport = true;

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        vm.readyStatus.content = true;

        //reportService.getList().then(function (data) {
        //    vm.entityRaw = data.items;
        //    vm.readyStatus.content = true;
        //    $scope.$apply();
        //});

        vm.getList = function (options) {
            return reportService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/reportService":381}],107:[function(require,module,exports){
/**
 * Created by szhitenev on 01.11.2016.
 */
(function(){

    'use strict';

    var reportService = require('../../services/reportService');

    module.exports = function($scope){

        console.log('{"controller": "ProfitAndLostReportController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'pnl-report';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.isReport = true;

        vm.entityViewer = {extraFeatures: []};

        vm.readyStatus.content = true;

        //reportService.getList().then(function (data) {
        //    vm.entityRaw = data.results;
        //    vm.readyStatus.content = true;
        //    $scope.$apply();
        //});

        vm.getList = function (options) {
            return reportService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/reportService":381}],108:[function(require,module,exports){
/**
 * Created by szhitenev on 14.06.2016.
 */
(function () {

	'use strict';
	var logService = require('../../../../../core/services/logService');

	var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');

	module.exports = function ($scope, $stateParams, $mdDialog) {

		logService.controller('BalanceReportCustomAttributesController', 'initialized');

		var vm = this;

		vm.showHidden = false;

		vm.attrs = [];

		//vm.entityType = '';

		vm.entityType = $stateParams.entityType;

		var getList = function () {
			balanceReportCustomAttrService.getList(vm.entityType).then(function (data) {
				vm.attrs = data.results;
				$scope.$apply();
				console.log('balance custom attr', vm.attrs);
			});
		};

		getList();

		vm.addAttribute = function (ev) {
			$mdDialog.show({
				controller: 'BalanceReportDialogCustomAttrController as vm',
				templateUrl: 'views/dialogs/balance-report-custom-attr-dialog-view.html',
				parent: angular.element(document.body),
				targetEvent: ev,
				locals: {
					data: {
						editRestriction: false
					}
				}
			}).then(function (res) {
				if (res.status === 'agree') {
					console.log(res.data.attribute);
					console.log("res", res.data);
					balanceReportCustomAttrService.create(res.data.attribute).then(getList);
				}
			});
		};

		// function setName(item) {
		//     item.name = item.text;
		//     if (item.id.indexOf('j') !== -1) {
		//         delete item['li_attr'];
		//         delete item['state'];
		//         delete item['icon'];
		//         delete item['a_attr'];
		//         delete item['data'];
		//         delete item['text'];
		//         delete item['type'];
		//         delete item.id;
		//     }
		//     item.children = item.children.map(setName);
		//     return item
		// }

		vm.editAttr = function (item, ev) {
			$mdDialog.show({
				controller: 'BalanceReportDialogCustomAttrController as vm',
				templateUrl: 'views/dialogs/balance-report-custom-attr-dialog-view.html',
				parent: angular.element(document.body),
				targetEvent: ev,
				locals: {
					data: {
						attributeId: item.id,
						editRestriction: true
					}
				}
			}).then(function (res) {
				if (res.status === 'agree') {
					console.log("res", res.data);
					balanceReportCustomAttrService.update(res.data.attribute.id, res.data.attribute).then(getList);
				}
			});
		};

		// vm.toggleHidden = function () {
		//     vm.showHidden = !vm.showHidden;
		// };

		vm.checkIsHidden = function(attribute){
			// if(vm.showHidden == false && attribute.is_hidden == true) {
			//     return false;
			// }
			return true;
		};

		vm.deleteAttr = function (item, ev) {

			var description = 'Are you sure to delete attribute ' + item.name + ' ?';

			$mdDialog.show({
				controller: 'WarningDialogController as vm',
				templateUrl: 'views/warning-dialog-view.html',
				parent: angular.element(document.body),
				targetEvent: ev,
				clickOutsideToClose: true,
				locals: {
					warning: {
						title: 'Warning',
						description: description
					}
				}
			}).then(function (res) {
				console.log('res', res);
				if (res.status === 'agree') {
					balanceReportCustomAttrService.deleteByKey(item.id).then(function (data) {
						if (data.status === 'conflict') {
							$mdDialog.show({
								controller: 'InfoDialogController as vm',
								templateUrl: 'views/info-dialog-view.html',
								parent: angular.element(document.body),
								targetEvent: ev,
								clickOutsideToClose: true,
								locals: {
									info: {
										title: 'Notification',
										description: "You can not delete attributed that already in use"
									}
								}
							})
						} else {
							getList();
						}
					});

				}

			});
		};

	}

}());
},{"../../../../../core/services/logService":2,"../../services/reports/balanceReportCustomAttrService":383}],109:[function(require,module,exports){
/**
 * Created by szhitenev on 01.11.2016.
 */
(function(){

    'use strict';

    //var instrumentService = require('../../services/instrumentService'); // TODO change to balance report service
    var reportService = require('../../services/reportService');

    module.exports = function($scope){

        console.log('{"controller": "TransactionReportController", status: "initialized"}');

        var vm = this;

        vm.entityType = 'transaction-report';
        vm.entityRaw = [];

        vm.isReport = true;

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        vm.readyStatus.content = true;

        //reportService.getList().then(function (data) {
        //    vm.entityRaw = data.items;
        //    vm.readyStatus.content = true;
        //    $scope.$apply();
        //});

        vm.getList = function (options) {
            return reportService.getList(options).then(function (data) {
                return data;
            })
        }

    }

}());
},{"../../services/reportService":381}],110:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    var logService = require('../../../../../../core/services/logService');

    var timeZonesService = require('../../../services/timeZonesService');

    var usersService = require('../../../services/usersService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('SettingsGeneralChangePassowrdController', 'initialized');

        var vm = this;

        vm.readyStatus = {processing: false, finished: false};

        vm.timeZones = timeZonesService.getList();

        vm.save = function ($event) {
            vm.readyStatus.processing = true;
            vm.readyStatus.finished = false;
            usersService.changePassword(0, vm.data).then(function (data) {
                vm.readyStatus.processing = false;
                if (data.status == 400) {
                    $mdDialog.show({
                        controller: 'ValidationDialogController as vm',
                        templateUrl: 'views/dialogs/validation-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            validationData: data.response
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    })
                } else {
                    vm.data = {};
                    vm.readyStatus.finished = true;
                    $scope.$apply();
                }
            })
        }
    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/timeZonesService":391,"../../../services/usersService":399}],111:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    var logService = require('../../../../../../core/services/logService');

    var dataProvidersService = require('../../../services/import/dataProvidersService');

    module.exports = function ($scope, $stateParams, $mdDialog, $state) {

        logService.controller('SettingsGeneralDataProvidersConfigController', 'initialized');

        var vm = this;

        vm.providerId = $stateParams.dataProviderId;

        vm.provider = [];

        vm.readyStatus = {provider: false};

        dataProvidersService.getConfig(vm.providerId).then(function(data){
            vm.provider = data.results[0];

            vm.readyStatus.provider = true;
            $scope.$apply();
        });

        vm.saveConfig = function($event){

            $event.preventDefault();
            $event.stopPropagation();

            var formData = new FormData();

            formData.append('p12cert', vm.provider.p12cert);
            formData.append('password', vm.provider.password);
            formData.append('provider', vm.provider.provider);

            dataProvidersService.setConfig(vm.provider.id, formData).then(function(data){

                console.log('test!', data);

                if (data.status == 200 || data.status == 201) {
                    $mdDialog.show({
                        controller: 'SuccessDialogController as vm',
                        templateUrl: 'views/dialogs/success-dialog-view.html',
                        targetEvent: $event,
                        locals: {
                            success: {
                                title: "",
                                description: "You have you have successfully add sertificate"
                            }
                        },
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true
                    }).then(function () {
                        $state.go('app.settings.general.data-providers');
                    });

                }

            });
        }


    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/import/dataProvidersService":339}],112:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    var logService = require('../../../../../../core/services/logService');

    var dataProvidersService = require('../../../services/import/dataProvidersService');

    module.exports = function ($scope) {

        logService.controller('SettingsGeneralDataProvidersController', 'initialized');

        var vm = this;

        vm.dataProviders = [];

        vm.readyStatus = {dataProviders: false};

        dataProvidersService.getList().then(function(data){
            vm.dataProviders = data;
            vm.readyStatus.dataProviders = true;
            $scope.$apply();
        })

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/import/dataProvidersService":339}],113:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    var logService = require('../../../../../../core/services/logService');

    var instrumentSchemeService = require('../../../services/import/instrumentSchemeService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('SettingsGeneralInstrumentImportController', 'initialized');

        var vm = this;

        vm.readyStatus = {instrumentSchemes: false};
        vm.instrumentSchemes = [];

        vm.getList = function () {
            vm.readyStatus.instrumentSchemes = false;
            instrumentSchemeService.getList().then(function (data) {
                vm.instrumentSchemes = data.results;
                vm.readyStatus.instrumentSchemes = true;
                $scope.$apply();
            });
        };

        vm.getList();

        vm.addScheme = function ($event) {
            $mdDialog.show({
                controller: 'InstrumentMappingAddDialogController as vm',
                templateUrl: 'views/dialogs/instrument-mapping-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    vm.getList();
                }
            });
        };

        vm.editScheme = function ($event, item) {
            console.log('what?');

            $mdDialog.show({
                controller: 'InstrumentMappingEditDialogController as vm',
                templateUrl: 'views/dialogs/instrument-mapping-dialog-view.html',
                targetEvent: $event,
                locals: {
                    schemeId: item.id
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    instrumentSchemeService.update(item.id, res.data).then(function () {
                        vm.getList();
                        $scope.$apply();
                    })
                }
            });

        };

        vm.deleteScheme = function ($event, item) {
            $mdDialog.show({
                controller: 'WarningDialogController as vm',
                templateUrl: 'views/warning-dialog-view.html',
                targetEvent: $event,
                locals: {
                    warning: {
                        title: 'Warning!',
                        description: 'Are you sure to delete ' + item['scheme_name']
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    instrumentSchemeService.deleteByKey(item.id);
                    setTimeout(function () {
                        vm.getList();
                    }, 100)
                }
            });

        };

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/import/instrumentSchemeService":347}],114:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    var logService = require('../../../../../../core/services/logService');

    var timeZonesService = require('../../../services/timeZonesService');

    var usersService = require('../../../services/usersService');

    module.exports = function ($scope) {

        logService.controller('SettingsGeneralProfileController', 'initialized');

        var vm = this;

        vm.readyStatus = {user: false};

        vm.timeZones = timeZonesService.getList();

        usersService.getByKey(0).then(function (data) {
            vm.user = data;
            vm.readyStatus.user = true;
            $scope.$apply();
        });

        vm.save = function () {
            usersService.update(0, vm.user).then(function () {
                $scope.$apply();
            })
        }
    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/timeZonesService":391,"../../../services/usersService":399}],115:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    var logService = require('../../../../../../core/services/logService');

    var transactionSchemeService = require('../../../services/import/transactionSchemeService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('SettingsGeneralTransactionImportController', 'initialized');

        var vm = this;

        vm.readyStatus = {instrumentSchemes: false};
        vm.instrumentSchemes = [];

        vm.getList = function () {
            vm.readyStatus.instrumentSchemes = false;
            transactionSchemeService.getList().then(function (data) {
                vm.instrumentSchemes = data.results;
                vm.readyStatus.instrumentSchemes = true;
                $scope.$apply();
            });
        };

        vm.getList();

        vm.addScheme = function ($event) {
            $mdDialog.show({
                controller: 'TransactionMappingAddDialogController as vm',
                templateUrl: 'views/dialogs/transaction-mapping-dialog-view.html',
                targetEvent: $event
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    vm.getList();
                }
            });
        };

        vm.editScheme = function ($event, item) {
            console.log('what?');

            $mdDialog.show({
                controller: 'TransactionMappingEditDialogController as vm',
                templateUrl: 'views/dialogs/transaction-mapping-dialog-view.html',
                targetEvent: $event,
                locals: {
                    schemeId: item.id
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    transactionSchemeService.update(item.id, res.data).then(function () {
                        vm.getList();
                        $scope.$apply();
                    })
                }
            });

        };

        vm.deleteScheme = function ($event, item) {
            $mdDialog.show({
                controller: 'WarningDialogController as vm',
                templateUrl: 'views/warning-dialog-view.html',
                targetEvent: $event,
                locals: {
                    warning: {
                        title: 'Warning!',
                        description: 'Are you sure to delete ' + item['scheme_name']
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log('res', res.data);
                    transactionSchemeService.deleteByKey(item.id);
                    setTimeout(function () {
                        vm.getList();
                    }, 100)
                }
            });

        };

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/import/transactionSchemeService":359}],116:[function(require,module,exports){
/**
 * Created by szhitenev on 04.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var importInstrumentService = require('../../services/importInstrumentService');

    module.exports = function ($scope) {

        logService.controller('SettingsBloomberImportInstrumentController', 'initialized');

        var vm = this;

        vm.readyStatus = {content: false};

        importInstrumentService.getInstrumentMappingList().then(function (data) {
            vm.mapping = data.results;
            vm.readyStatus.content = true;
            $scope.$apply()
        });


    };

}());
},{"../../../../../core/services/logService":2,"../../services/importInstrumentService":333}],117:[function(require,module,exports){
/**
 * Created by szhitenev on 02.08.2016.
 */
(function(){

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function($scope, $state) {

        logService.controller('SettingsFormDesignController', 'initialized');

        var vm = this;

        vm.goToState = function(entity){
            $state.go('app.data-constructor', {entityType: entity});
        }

    };

}());
},{"../../../../../core/services/logService":2}],118:[function(require,module,exports){
/**
 * Created by szhitenev on 02.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var timeZonesService = require('../../services/timeZonesService');

    var usersService = require('../../services/usersService');

    module.exports = function ($scope, $state) {

        logService.controller('SettingsGeneralController', 'initialized');

        var vm = this;

        $scope.$state = $state;

        vm.checkProviders = function () {
            return $state.includes('app.settings.general.data-providers') || $state.includes('app.settings.general.data-providers-config')
        }


    };

}());
},{"../../../../../core/services/logService":2,"../../services/timeZonesService":391,"../../services/usersService":399}],119:[function(require,module,exports){
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var membersAndGroupsService = require('../../services/membersAndGroupsService');

    module.exports = function ($scope, $mdDialog) {
        var vm = this;

        vm.members = [];
        vm.groups = [];
        vm.getList = function () {
            membersAndGroupsService.getList('members').then(function (data) {
                console.log('members is', data);
                vm.members = [];
                vm.members = data.results;

                membersAndGroupsService.getList('groups').then(function (data) {
                    console.log('groups is', data);
                    vm.groups = data.results;

                    // add member's groups name
                    vm.members.map(function (member) {
                        var groupsOfMember = member['groups'];
                        if (groupsOfMember && groupsOfMember.length > 0) {
                            member.groupsName = [];
                            groupsOfMember.map(function (memberGroupId) {
                                vm.groups.map(function (group) {
                                    if (group['id'] === memberGroupId) {
                                        member.groupsName.push(group['name']);
                                    }
                                });
                            });
                        }
                        ;
                    })
                    $scope.$apply();
                });
            });
        };
        vm.getGroupsList = function () {
            membersAndGroupsService.getList('groups').then(function (data) {
                vm.groups = data.results;
            });
            $scope.$apply();
        };
        // membersAndGroupsService.getList('groups').then(function (data) {
        // 	console.log('groups is', data);
        // 	vm.groups = data.results;
        // });
        vm.deleteMemberGroupByKey = function (type, id) {
            membersAndGroupsService.deleteByKey(type, id).then(function () {
                if (type === 'members') {
                    vm.getList();
                }
                else if (type === 'groups') {
                    vm.getGroupsList();
                }
            });
        }

        vm.createMemberDialog = function (ev) {
            $mdDialog.show({
                controller: 'CreateMemberDialogController as vm',
                templateUrl: 'views/dialogs/create-member-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev
            }).then(function (data) {
                vm.getList();
            });
        };

        vm.createGroupDialog = function (ev) {
            $mdDialog.show({
                controller: 'CreateGroupDialogController as vm',
                templateUrl: 'views/dialogs/create-group-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev
            }).then(function (data) {
                console.log("new group's data is", data);
                membersAndGroupsService.create('groups', {
                    name: data.data.name,
                    members: data.data.members
                }).then(function () {
                    vm.getGroupsList();
                    console.log('group has been created');
                });
            });
        }

        vm.manageMemberDialog = function (ev, memberId) {
            $mdDialog.show({
                controller: 'ManageMemberDialogController as vm',
                templateUrl: 'views/dialogs/manage-member-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                locals: {
                    memberId: memberId
                }
            }).then(function (data) {
                membersAndGroupsService.update('members', memberId, {
                    is_admin: data.data.isAdmin,
                    groups: data.data.groups,
                    join_date: data.data.join_date
                }).then(function () {
                    vm.getList();
                    console.log('member is updated');
                });
            });
        }

        vm.manageGroupDialog = function (ev, groupId) {
            $mdDialog.show({
                controller: 'ManageGroupDialogController as vm',
                templateUrl: 'views/dialogs/manage-group-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: ev,
                locals: {
                    groupId: groupId
                }
            }).then(function (data) {
                // console.log('group data is', data);
                membersAndGroupsService.update('groups', groupId, {
                    name: data.data.name,
                    members: data.data.members
                }).then(function () {
                    vm.getList();
                    console.log('member is updated');
                });
            });
        }

        vm.getList();
    }
}());
},{"../../../../../core/services/logService":2,"../../services/membersAndGroupsService":369}],120:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');
    var cookiesService = require('../../../../core/services/cookieService');

    var usersService = require('../services/usersService');
    var metaContentTypesService = require('../services/metaContentTypesService');
    var notificationsService = require('../services/notificationsService');

    var reportCopyHelper = require('../helpers/reportCopyHelper');

    module.exports = function ($scope, $state, $rootScope, $mdDialog) {

        logService.controller('ShellController', 'initialized', 1);

        var vm = this;

        vm.readyStatus = {masters: false};

        vm.logout = function () {
            console.log('Logged out');
            usersService.logout();
            window.location.pathname = '/';
            cookiesService.deleteCookie();
            //usersService.logout();
        };

        //usersService.ping().then(function (data) {
        //    return data.json()
        //}).then(function (data) {
        setTimeout(function () {
            //usersService.login('dev1', 'Itein9Ha4eige6Aiph5a').then(function () {
            usersService.login('dev1', '123456abc').then(function () {
                //usersService.login('dev1', 'Uethohk0').then(function () {
                //usersService.login('dev2', 'ceechohf8Eexue6u').then(function () {
                //usersService.login('dev11', 'cheeL1ei').then(function () {
                //	console.log('after login', cookiesService.getCookie('csrftoken'));
                $scope.$apply();
            });
        }, 1000);
        //});

        usersService.getMasterList().then(function (data) {
            vm.masters = data.results;
            vm.readyStatus.masters = true;
            $scope.$apply();
        });

        usersService.getList().then(function (data) {
            vm.user = data.results[0];
            $scope.$apply();
        });

        vm.selectMaster = function (master) {

            usersService.setMasterUser(master.id);
            setTimeout(function () {
                $state.reload();
            }, 300);

        };

        vm.currentState = function () {
            return '';
        };

        vm.currentLocation = function () {
            vm.currentLocationShowBtns = true;

            if ($state.current.name.indexOf('app.forum') !== -1) {

                vm.currentLocationShowBtns = false;

                return 'FORUM';

            }

            if ($state.current.name.indexOf('app.settings') !== -1) {

                vm.currentLocationShowBtns = false;

                return 'SETTINGS';
            }

            switch ($state.current.name) {
                case 'app.dashboard':
                    return "DASHBOARD";
                    break;
                case 'app.data.portfolio':
                    return "PORTFOLIO";
                    break;
                case 'app.data.account':
                    return "ACCOUNT";
                    break;
                case 'app.data.counterparty':
                    return "COUNTERPARTY";
                    break;
                case 'app.data.counterparty-group':
                    return "COUNTERPARTY GROUP";
                    break;
                case 'app.data.responsible':
                    return "RESPONSIBLE";
                    break;
                case 'app.data.responsible-group':
                    return "RESPONSIBLE GROUP";
                    break;
                case 'app.data.instrument':
                    return "INSTRUMENT";
                    break;
                case 'app.data.transaction':
                    return "TRANSACTION";
                    break;
                case 'app.data.price-history':
                    return "PRICE HISTORY";
                    break;
                case 'app.data.currency-history':
                    return "CURRENCY HISTORY";
                    break;
                case 'app.data.strategy':
                    return "STRATEGY";
                    break;
                case 'app.data.strategy-subgroup':
                    return "STRATEGY SUBGROUP";
                    break;
                case 'app.data.strategy-group':
                    return "STRATEGY GROUP";
                    break;
                case 'app.data.account-type':
                    return "ACCOUNT TYPES";
                    break;
                case 'app.data.instrument-type':
                    return "INSTRUMENT TYPES";
                    break;
                case 'app.data.pricing-policy':
                    return "PRICING POLICY";
                    break;
                case 'app.data.transaction-type':
                    return "TRANSACTION TYPE";
                    break;
                case 'app.data.transaction-type-group':
                    return "TRANSACTION TYPE GROUPS";
                    break;
                case 'app.data.currency':
                    return "CURRENCY";
                    break;
                case 'app.data.complex-transaction':
                    return "Transaction";
                    break;
                case 'app.data.tag':
                    return "Tags";
                    break;
                case 'app.reports.balance-report':
                    return "BALANCE REPORT";
                    break;
                case 'app.reports.pnl-report':
                    return "P&L REPORT";
                    break;
                case 'app.reports.transaction-report':
                    return "TRANSACTION REPORT";
                    break;
                case 'app.reports.cash-flow-projection-report':
                    return "CASH FLOW PROJECTION REPORT";
                    break;
                case 'app.reports.performance-report':
                    return "PERFORMANCE REPORT";
                    break;
                case 'app.actions':
                    vm.currentLocationShowBtns = false;
                    return 'ACTIONS';
                    break;
                case 'app.system.notifications':
                    vm.currentLocationShowBtns = false;
                    return 'NOTIFICATIONS';
                    break;
                case 'app.system.transactions':
                    vm.currentLocationShowBtns = false;
                    return 'AUDIT TRANSACTIONS';
                    break;
                case 'app.system.instruments':
                    vm.currentLocationShowBtns = false;
                    return 'AUDIT INSTRUMENTS';
                    break;
                case 'app.settings.users-groups':
                    vm.currentLocationShowBtns = false;
                    return 'USERS & GROUPS';
                    break;
                default:
                    vm.currentLocationShowBtns = false;
                    return "";
                    break;
            }
        };

        vm.openHelp = function ($event) {

            //console.log('$state', $state);

            var urlPieces = $state.current.url.split('/');
            var destinationUrl = urlPieces[urlPieces.length - 1].replace('-', '_');

            var helpPageUrl = destinationUrl + '.html';

            $mdDialog.show({
                controller: 'HelpDialogController as vm',
                templateUrl: 'views/dialogs/help-dialog-view.html',
                targetEvent: $event,
                locals: {
                    data: {
                        helpPageUrl: helpPageUrl
                    }
                },
                preserveScope: true,
                autoWrap: true,
                skipHide: true
            })
        };

        vm.isReport = function () {

            switch ($state.current.name) {
                case 'app.reports.balance-report':
                    return true;
                    break;
                case 'app.reports.pnl-report':
                    return true;
                    break;
                case 'app.reports.transaction-report':
                    return true;
                    break;
                case 'app.reports.cash-flow-projection-report':
                    return true;
                    break;
                case 'app.reports.performance-report':
                    return true;
                    break;
                default:
                    return false
            }

        };

        vm.copyReport = function ($event) {
            console.log('copy report');
            reportCopyHelper.copy($event);
        };

        vm.openLayoutList = function ($event) {

            var entityType = metaContentTypesService.getContentTypeUIByState($state.current.name);

            $mdDialog.show({
                controller: 'UiLayoutListDialogController as vm',
                templateUrl: 'views/dialogs/ui/ui-layout-list-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                locals: {
                    options: {
                        entityType: entityType
                    }
                }
            }).then(function (res) {
                if (res.status == 'agree') {
                    $state.reload($state.current.name);
                }

            })
        };

        vm.openNotificationsMenu = function ($event) {
            $mdDialog.show({
                controller: 'HeaderNotificationsDialogController as vm',
                templateUrl: 'views/dialogs/header-notifications-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event
            });
        }

        vm.unreadedNotificationsAmount;
        notificationsService.getList(1, 'unreaded').then(function (data) {
            vm.unreadedNotificationsAmount = data.count;
            $scope.$apply();
        });

        $rootScope.$on('$stateChangeSuccess', function () {
            $mdDialog.cancel();
        });

        // console.log('root scope is ', $rootScope);
        console.log("Curent state is ", $state.current);

        vm.logOutMethod = function () {
            usersService.logout().then(function (data) {
                console.log('Logged out');
                window.location.pathname = '/';
                cookiesService.deleteCookie();
            });
        }
    }

}());
},{"../../../../core/services/cookieService":1,"../../../../core/services/logService":2,"../helpers/reportCopyHelper":183,"../services/metaContentTypesService":370,"../services/notificationsService":376,"../services/usersService":399}],121:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');

    var metaService = require('../services/metaService');

    module.exports = function ($scope, $mdDialog) {

        logService.controller('SideNavController', 'initialized');

        var vm = this;
        vm.sections = [];

        vm.sideNavStatus = 'expand';

        vm.resizeSideNav = function (status) {
            vm.sideNavStatus = status;
            if (status == 'expand') {
                $('body').removeClass('sidenav-collapsed');
                $('body').addClass('sidenav-expanded');
                $('.sidenav-wrapper').unbind('mouseenter');
                $('.sidenav-wrapper').unbind('mouseleave');
                $(window).trigger('resize');
            } else {

                $('body').removeClass('sidenav-expanded');
                $('body').addClass('sidenav-collapsed');

                $('.sidenav-wrapper').bind('mouseenter', function () {
                    $('.sidenav-wrapper').width(200);
                    $(".md-button.md-raised.side-nav-btn ").show();
                    $('.menu-toggle-list').show();
                });

                setTimeout(function () {
                    $('.sidenav-wrapper').width(55);
                }, 0);
                var interval = setInterval(function () {
                    $(window).trigger('resize');
                }, 50);

                setTimeout(function () {
                    clearInterval(interval)
                }, 300);

                $('.sidenav-wrapper').bind('mouseleave', function () {
                    $('.sidenav-wrapper').width(55);
                    $(".md-button.md-raised.side-nav-btn ").hide();
                    $('.menu-toggle-list').hide();
                });


            }


        };

        metaService.getMenu().then(function (data) {
            vm.sections = data;
            //console.log('vm.sections', vm.sections);
            $scope.$apply();
        });

        vm.isOpen = function isOpen(section) {
            //console.log('section', section);
            var isParent = false;
            if (vm.openedSection && section.hasOwnProperty("pages")) {
                section.pages.forEach(function (item) {
                    if (item.title === vm.openedSection.title) {
                        isParent = true;
                    }
                })
            }
            if (isParent) {
                return true;
            } else {
                return vm.openedSection === section;
            }
            //return true;
        };
        vm.toggleOpen = function toggleOpen(event, section) {
            vm.openedSection = (vm.openedSection === section ? null : section);
        };
        vm.autoFocusContent = false;

        vm.openHelp = function ($event) {
            $mdDialog.show({
                controller: 'HelpDialogController as vm',
                templateUrl: 'views/dialogs/help-dialog-view.html',
                targetEvent: $event,
                locals: {
                    data: {}
                },
                preserveScope: true,
                autoWrap: true,
                skipHide: true
            })
        }
    }

}());
},{"../../../../core/services/logService":2,"../services/metaService":375}],122:[function(require,module,exports){
/**
 * Created by szhitenev on 03.10.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var portfolioService = require('../../services/portfolioService');
    var instrumentTypeService = require('../../services/instrumentTypeService');
    var transactionTypeService = require('../../services/transactionTypeService');

    module.exports = function ($scope) {

        logService.controller('complexTransactionSpecialRulesController', 'initialized');

        var vm = this;

        vm.complexTransactionOptions = {
            portfolio: $scope.$parent.vm.complexTransactionOptions.portfolio,
            instrumentType: $scope.$parent.vm.complexTransactionOptions.instrumentType,
            transactionType: $scope.$parent.vm.complexTransactionOptions.transactionType
        };

        $scope.$parent.vm.specialRulesReady = false;

        portfolioService.getList().then(function (data) {
            vm.portfolios = data.results;
            $scope.$apply();
        });

        instrumentTypeService.getList().then(function (data) {
            vm.instrumentTypes = data.results;
            $scope.$apply();
        });

        transactionTypeService.getList().then(function (data) {
            vm.transactionTypes = data.results;
            $scope.$apply();
        });

        vm.loadTransactionTypes = function () {

            var options = {
                filters: {
                    portfolio: vm.complexTransactionOptions.portfolio,
                    'instrument_type': vm.complexTransactionOptions.instrumentType
                }
            };

            transactionTypeService.getList(options).then(function (data) {
                vm.transactionTypes = data.results;
                $scope.$apply();
            })
        };

        $scope.$parent.$watchCollection('vm.complexTransactionOptions', function () {
            console.log('hererer?');
            vm.complexTransactionOptions = $scope.$parent.vm.complexTransactionOptions;

            vm.loadTransactionTypes();
        });


        vm.transactionTypeHandler = function () {
            $scope.$parent.vm.specialRulesReady = false;
            setTimeout(function () {
                $scope.$parent.vm.complexTransactionOptions.transactionType = vm.complexTransactionOptions.transactionType;
                $scope.$parent.vm.editLayoutEntityInstanceId = vm.complexTransactionOptions.transactionType;
                $scope.$parent.vm.specialRulesReady = true;
                $scope.$parent.vm.entity._transaction_type_id = vm.complexTransactionOptions.transactionType;
                console.log('PARENT', $scope.$parent.vm);
                $scope.$parent.vm.getEditListByInstanceId();
                $scope.$apply();
            }, 200); // but why?

        }

    }

}());
},{"../../../../../core/services/logService":2,"../../services/instrumentTypeService":362,"../../services/portfolioService":377,"../../services/transactionTypeService":393}],123:[function(require,module,exports){
/**
 * Created by szhitenev on 22.07.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var auditService = require('../../services/auditService');

    module.exports = function ($scope) {

        logService.controller('AuditController', 'initialized');

        var vm = this;
        vm.readyStatus = {transaction: false, instrument: false};
        vm.itemPerPage = 20;

        vm.checkActiveTab = function (tab) {
            if (window.location.hash.split('tab=')[1] == tab) {
                return true;
            }
            return false;
        };

        vm.setActiveTab = function (tab) {
            window.location.hash = '#/system/audit?tab=' + tab;
            vm.instrumentCurrent = 1;
            vm.transactionCurrent = 1;
        };

        vm.changePage = function (tab, page) {

            if (tab === 'instrument') {
                vm.instrumentCurrent = page;
                getInstruments();
            } else {
                getTransaction();
                vm.transactionCurrent = page;
            }

            console.log('--------', tab, page);
        };

        function getInstruments() {

            vm.instrumentCurrent = vm.instrumentCurrent || 1;
            vm.readyStatus.instrument = false;

            auditService.getList({filters: {'content_type': 'instruments.instrument'}, page: vm.instrumentCurrent}).then(function (data) {
                vm.instruments = data.results.map(function (item) {
                    item.dateFormatted = moment(new Date(item.created)).format('DD/MM/YYYY');
                    item.timeFormatted = moment(new Date(item.created)).format('HH:ss');
                    return item
                });


                vm.instrumentTotal = data.count;

                vm.readyStatus.instrument = true;
                $scope.$apply();
            });
        }

        getInstruments();

        // function getTransaction() {

        //     vm.transactionCurrent = vm.transactionCurrent || 1;
        //     vm.readyStatus.transaction = false;

        //     auditService.getList({filters: {'content_type': 'transactions.transaction'}, page: vm.transactionCurrent}).then(function (data) {
        //         vm.transactions = data.results.map(function (item) {
        //             item.dateFormatted = moment(new Date(item.created)).format('DD/MM/YYYY');
        //             return item
        //         });


        //         vm.transactionTotal = data.count;

        //         vm.readyStatus.transaction = true;
        //         $scope.$apply();
        //     });
        // }

        // getTransaction();

    };

}());
},{"../../../../../core/services/logService":2,"../../services/auditService":305}],124:[function(require,module,exports){
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var auditService = require('../../services/auditService');

    module.exports = function ($scope) {

        logService.controller('AuditController', 'initialized');

        var vm = this;
        var vm = this;

        vm.entityType = 'audit-instrument';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        auditService.getList({filters: {'content_type': 'instruments.instrument'}}).then(function (data) {
            vm.entityRaw = data;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return auditService.getList(options).then(function (data) {
                return data;
            })
        }
    };

}());
},{"../../../../../core/services/logService":2,"../../services/auditService":305}],125:[function(require,module,exports){
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var auditService = require('../../services/auditService');

    module.exports = function ($scope) {

        logService.controller('AuditController', 'initialized');

        var vm = this;
        var vm = this;

        vm.entityType = 'audit-transaction';
        vm.entityRaw = [];

        vm.readyStatus = {content: false};

        vm.entityViewer = {extraFeatures: []};

        auditService.getList({filters: {'content_type': 'transactions.transaction'}}).then(function (data) {
            vm.entityRaw = data;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.getList = function (options) {
            return auditService.getList(options).then(function (data) {
                return data;
            })
        }
    };

}());
},{"../../../../../core/services/logService":2,"../../services/auditService":305}],126:[function(require,module,exports){
/**
 * Created by szhitenev on 14.06.2016.
 */
(function(){

	'use strict';

	var logService = require('../../../../../core/services/logService');

	var notificationsService = require('../../services/notificationsService');

	module.exports = function($scope, $state, $stateParams){

		logService.controller('NotificationsController', 'initialized');

		var vm = this;

		vm.itemPerPage = 20;
		vm.notificationsReady = true;

		if ($stateParams.notificationsListType && $stateParams.notificationsListType.length) {
			vm.notificationsListType = $stateParams.notificationsListType;
		}
		else {
			vm.notificationsListType = 'all';
		}

		console.log('notification state', $state, $stateParams);

		vm.changePage = function (page) {
			vm.notificationsCurrent = page;
			vm.getNotifications();
		}
		vm.getNotifications = function () {
			vm.notificationsCurrent = vm.notificationsCurrent || 1;
			vm.notificationsReady = false;

			notificationsService.getList(vm.notificationsCurrent, vm.notificationsListType).then(function(data){
				vm.notificationsTotal = data.count;
				vm.notifications = data.results;
				vm.markNotificationAsReaded(vm.notifications);
				vm.notificationsReady = true;
				$scope.$apply();
			});
		}

		vm.getNotifications();

		vm.markNotificationAsReaded = function (notificationsList) {
			notificationsList.map(function(item) {
				var notificationId = item.id;
				var notificationsReadedDate = {
					create_date: item.create_date,
					read_date: moment(new Date()).format('YYYY-MM-DD[T]HH:mm:ssZZ')
				};
				if (item.read_date == null) {
					// console.log('notification marked as readed is', item);
					notificationsService.markAsReaded(notificationId, notificationsReadedDate);
				}
			});
		}
		vm.markAllNotificationsAsReaded	= function () {
			notificationsService.markAllAsReaded();
		}
		vm.hideShowReadedNotifications = function (type) {
			vm.notificationsListType = type;
			vm.notificationsCurrent = 1;
			vm.getNotifications();
		}
	}

}());
},{"../../../../../core/services/logService":2,"../../services/notificationsService":376}],127:[function(require,module,exports){
/**
 * Created by szhitenev on 27.09.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    var transactionTypeService = require('../../../services/transactionTypeService');

    module.exports = function ($scope) {
        logService.controller('BookTransactionActionsTabController', 'initialized');

        var vm = this;
        vm.entity = $scope.$parent.vm.entity;

        vm.transactionTypeId = $scope.$parent.vm.transactionTypeId;
        vm.readyStatus = {transactionType: false};

        vm.beatufier = function (key) {
            //console.log('KEY', key);
            if (key !== undefined) {
                var str = key.split('_').join(' ');
                return str;
            }
            return key
        };

        transactionTypeService.getByKey(vm.transactionTypeId).then(function (data) {
            vm.transactionType = data;

            vm.transactionActions = {
                action_order: [],
                action_type: [],
                action_notes: [],

                transaction_class: [],
                portfolio: [],
                instrument: [],
                account_cash: [],
                account_interim: [],
                account_position: [],
                accounting_date: [],
                carry_amount: [],
                carry_with_sign: [],
                cash_consideration: [],
                cash_date: [],
                counterparty: [],
                factor: [],
                overheads: [],
                overheads_with_sign: [],
                position_size_with_sign: [],
                principal_amount: [],
                principal_with_sign: [],
                responsible: [],
                settlement_currency: [],
                strategy1_cash: [],
                strategy1_position: [],
                strategy2_cash: [],
                strategy2_position: [],
                strategy3_cash: [],
                strategy3_position: [],
                trade_price: [],
                transaction_currency: [],

                accrued_currency: [],
                accrued_multiplier: [],
                daily_pricing_model: [],
                default_accrued: [],
                default_price: [],
                instrument_type: [],
                maturity_date: [],
                name: [],
                notes: [],
                payment_size_detail: [],
                price_download_scheme: [],
                price_multiplier: [],
                pricing_currency: [],
                public_name: [],
                reference_for_pricing: [],
                short_name: [],
                user_code: [],
                user_text_1: [],
                user_text_2: [],
                user_text_3: []
            };

            vm.transactionActionsKeys = Object.keys(vm.transactionActions);

            console.log('vm.transactionType', vm.transactionType);

            vm.transactionType.actions.forEach(function (action, $index) {
                vm.transactionActions.action_order.push(action.order);
                vm.transactionActions.action_notes.push(action.action_notes);

                if (action.instrument !== null) {

                    vm.transactionActions.action_type.push('Instrument');

                    if (action.instrument.accrued_currency_object !== null) {
                        vm.transactionActions.accrued_currency.push(action.instrument.accrued_currency_object.name);
                    } else {
                        if (action.instrument.accrued_currency_input !== null) {
                            vm.transactionActions.accrued_currency.push(action.instrument.accrued_currency_input);
                        } else {
                            vm.transactionActions.accrued_currency.push('-');
                        }

                    }

                    vm.transactionActions.accrued_multiplier.push(action.instrument.accrued_multiplier);

                    if (action.instrument.daily_pricing_model_object !== null) {
                        vm.transactionActions.daily_pricing_model.push(action.instrument.daily_pricing_model_object.name);
                    } else {
                        if (action.instrument.daily_pricing_model_input !== null) {
                            vm.transactionActions.daily_pricing_model.push(action.instrument.daily_pricing_model_input);
                        } else {
                            vm.transactionActions.daily_pricing_model.push('-');
                        }
                    }

                    vm.transactionActions.default_accrued.push(action.instrument.default_accrued);
                    vm.transactionActions.default_price.push(action.instrument.default_price);

                    if (action.instrument.payment_size_detail_object !== null) {
                        vm.transactionActions.payment_size_detail.push(action.instrument.payment_size_detail_object.name);
                    } else {
                        if (action.instrument.payment_size_detail_input !== null) {
                            vm.transactionActions.payment_size_detail.push(action.instrument.payment_size_detail_input);
                        } else {
                            vm.transactionActions.payment_size_detail.push('-');
                        }
                    }

                    vm.transactionActions.maturity_date.push(action.instrument.maturity_date);
                    vm.transactionActions.name.push(action.instrument.name);
                    vm.transactionActions.notes.push(action.instrument.notes);

                    if (action.instrument.price_download_scheme_object !== null) {
                        vm.transactionActions.price_download_scheme.push(action.instrument.price_download_scheme_object.scheme_name);
                    } else {
                        if (action.instrument.price_download_scheme_input !== null) {
                            vm.transactionActions.price_download_scheme.push(action.instrument.price_download_scheme_input);
                        } else {
                            vm.transactionActions.price_download_scheme.push('-');
                        }
                    }

                    vm.transactionActions.price_multiplier.push(action.instrument.price_multiplier);

                    if (action.instrument.pricing_currency_object !== null) {
                        vm.transactionActions.pricing_currency.push(action.instrument.pricing_currency_object.name);
                    } else {
                        if (action.instrument.pricing_currency_input !== null) {
                            vm.transactionActions.pricing_currency.push(action.instrument.pricing_currency_input);
                        } else {
                            vm.transactionActions.pricing_currency.push('-');
                        }
                    }

                    vm.transactionActions.public_name.push(action.instrument.public_name);
                    vm.transactionActions.reference_for_pricing.push(action.instrument.reference_for_pricing);
                    vm.transactionActions.short_name.push(action.instrument.short_name);
                    vm.transactionActions.user_code.push(action.instrument.user_code);
                    vm.transactionActions.user_text_1.push(action.instrument.user_text_1);
                    vm.transactionActions.user_text_2.push(action.instrument.user_text_2);
                    vm.transactionActions.user_text_3.push(action.instrument.user_text_3);

                    // transaction fields

                    vm.transactionActions.transaction_class.push('-');
                    vm.transactionActions.portfolio.push('-');
                    vm.transactionActions.instrument.push('-');
                    vm.transactionActions.account_cash.push('-');
                    vm.transactionActions.account_interim.push('-');
                    vm.transactionActions.account_position.push('-');
                    vm.transactionActions.accounting_date.push('-');
                    vm.transactionActions.carry_amount.push('-');
                    vm.transactionActions.carry_with_sign.push('-');
                    vm.transactionActions.cash_consideration.push('-');
                    vm.transactionActions.cash_date.push('-');
                    vm.transactionActions.counterparty.push('-');
                    vm.transactionActions.factor.push('-');
                    vm.transactionActions.overheads.push('-');
                    vm.transactionActions.overheads_with_sign.push('-');
                    vm.transactionActions.position_size_with_sign.push('-');
                    vm.transactionActions.principal_amount.push('-');
                    vm.transactionActions.principal_with_sign.push('-');
                    vm.transactionActions.responsible.push('-');
                    vm.transactionActions.settlement_currency.push('-');

                    vm.transactionActions.strategy1_cash.push('-');
                    vm.transactionActions.strategy1_position.push('-');
                    vm.transactionActions.strategy2_cash.push('-');
                    vm.transactionActions.strategy2_position.push('-');
                    vm.transactionActions.strategy3_cash.push('-');
                    vm.transactionActions.strategy3_position.push('-');
                    vm.transactionActions.trade_price.push('-');
                    vm.transactionActions.transaction_currency.push('-');

                } else {

                    vm.transactionActions.action_type.push('Transaction');

                    if (action.transaction.transaction_class_object !== null) {
                        vm.transactionActions.transaction_class.push(action.transaction.transaction_class_object.name);
                    } else {
                        vm.transactionActions.transaction_class.push('-');
                    }

                    if (action.transaction.portfolio_object !== null) {
                        vm.transactionActions.portfolio.push(action.transaction.portfolio_object.name);
                    } else {
                        if (action.transaction.portfolio_input !== null) {
                            vm.transactionActions.portfolio.push(action.transaction.portfolio_input);
                        } else {
                            vm.transactionActions.portfolio.push('-');
                        }
                    }

                    if (action.transaction.instrument_phantom !== null) {
                        vm.transactionActions.instrument.push("Instrument Action #" + action.transaction.instrument_phantom);
                    } else {
                        if (action.transaction.instrument_object !== null) {
                            vm.transactionActions.instrument.push(action.transaction.instrument_object.name);
                        } else {
                            if (action.transaction.instrument_input !== null) {
                                vm.transactionActions.instrument.push(action.transaction.instrument_input);
                            } else {
                                vm.transactionActions.instrument.push('-');
                            }
                        }
                    }

                    if (action.transaction.account_cash_object !== null) {
                        vm.transactionActions.account_cash.push(action.transaction.account_cash_object.name);
                    } else {
                        if (action.transaction.account_cash_input !== null) {
                            vm.transactionActions.account_cash.push(action.transaction.account_cash_input);
                        } else {
                            vm.transactionActions.account_cash.push('-');
                        }
                    }

                    if (action.transaction.account_interim_object !== null) {
                        vm.transactionActions.account_interim.push(action.transaction.account_interim_object.name);
                    } else {
                        if (action.transaction.account_interim_input !== null) {
                            vm.transactionActions.account_interim.push(action.transaction.account_interim_input);
                        } else {
                            vm.transactionActions.account_interim.push('-');
                        }
                    }

                    if (action.transaction.account_position_object !== null) {
                        vm.transactionActions.account_position.push(action.transaction.account_position_object.name);
                    } else {
                        if (action.transaction.account_position_input !== null) {
                            vm.transactionActions.account_position.push(action.transaction.account_position_input);
                        } else {
                            vm.transactionActions.account_position.push('-');
                        }
                    }

                    vm.transactionActions.accounting_date.push(action.transaction.accounting_date);
                    vm.transactionActions.carry_amount.push(action.transaction.carry_amount);
                    vm.transactionActions.carry_with_sign.push(action.transaction.carry_with_sign);
                    vm.transactionActions.cash_consideration.push(action.transaction.cash_consideration);
                    vm.transactionActions.cash_date.push(action.transaction.cash_date);

                    if (action.transaction.counterparty_object !== null) {
                        vm.transactionActions.counterparty.push(action.transaction.counterparty_object.name);
                    } else {
                        if (action.transaction.counterparty_input !== null) {
                            vm.transactionActions.counterparty.push(action.transaction.counterparty_input);
                        } else {
                            vm.transactionActions.counterparty.push('-');
                        }
                    }

                    vm.transactionActions.factor.push(action.transaction.factor);
                    vm.transactionActions.overheads.push(action.transaction.overheads);
                    vm.transactionActions.overheads_with_sign.push(action.transaction.overheads_with_sign);
                    vm.transactionActions.position_size_with_sign.push(action.transaction.position_size_with_sign);
                    vm.transactionActions.principal_amount.push(action.transaction.principal_amount);
                    vm.transactionActions.principal_with_sign.push(action.transaction.principal_with_sign);

                    if (action.transaction.responsible_object !== null) {
                        vm.transactionActions.responsible.push(action.transaction.responsible_object.name);
                    } else {
                        if (action.transaction.responsible_input !== null) {
                            vm.transactionActions.responsible.push(action.transaction.responsible_input);
                        } else {
                            vm.transactionActions.responsible.push('-');
                        }
                    }

                    if (action.transaction.settlement_currency_object !== null) {
                        vm.transactionActions.settlement_currency.push(action.transaction.settlement_currency_object.name);
                    } else {
                        if (action.transaction.settlement_currency_input !== null) {
                            vm.transactionActions.settlement_currency.push(action.transaction.settlement_currency_input);
                        } else {
                            vm.transactionActions.settlement_currency.push('-');
                        }
                    }

                    if (action.transaction.strategy1_cash_object !== null) {
                        vm.transactionActions.strategy1_cash.push(action.transaction.strategy1_cash_object.name);
                    } else {
                        if (action.transaction.strategy1_cash_input !== null) {
                            vm.transactionActions.strategy1_cash.push(action.transaction.strategy1_cash_input);
                        } else {
                            vm.transactionActions.strategy1_cash.push('-');
                        }
                    }

                    if (action.transaction.strategy1_position_object !== null) {
                        vm.transactionActions.strategy1_position.push(action.transaction.strategy1_position_object.name);
                    } else {
                        if (action.transaction.strategy1_position_input !== null) {
                            vm.transactionActions.strategy1_position.push(action.transaction.strategy1_position_input);
                        } else {
                            vm.transactionActions.strategy1_position.push('-');
                        }
                    }

                    if (action.transaction.strategy2_cash_object !== null) {
                        vm.transactionActions.strategy2_cash.push(action.transaction.strategy2_cash_object.name);
                    } else {
                        if (action.transaction.strategy2_cash_input !== null) {
                            vm.transactionActions.strategy2_cash.push(action.transaction.strategy2_cash_input);
                        } else {
                            vm.transactionActions.strategy2_cash.push('-');
                        }
                    }

                    if (action.transaction.strategy2_position_object !== null) {
                        vm.transactionActions.strategy2_position.push(action.transaction.strategy2_position_object.name);
                    } else {
                        if (action.transaction.strategy2_position_input !== null) {
                            vm.transactionActions.strategy2_position.push(action.transaction.strategy2_position_input);
                        } else {
                            vm.transactionActions.strategy2_position.push('-');
                        }
                    }

                    if (action.transaction.strategy3_cash_object !== null) {
                        vm.transactionActions.strategy3_cash.push(action.transaction.strategy3_cash_object.name);
                    } else {
                        if (action.transaction.strategy3_cash_input !== null) {
                            vm.transactionActions.strategy3_cash.push(action.transaction.strategy3_cash_input);
                        } else {
                            vm.transactionActions.strategy3_cash.push('-');
                        }
                    }

                    if (action.transaction.strategy3_position_object !== null) {
                        vm.transactionActions.strategy3_position.push(action.transaction.strategy3_position_object.name);
                    } else {
                        if (action.transaction.strategy3_position_input !== null) {
                            vm.transactionActions.strategy3_position.push(action.transaction.strategy3_position_input);
                        } else {
                            vm.transactionActions.strategy3_position.push('-');
                        }
                    }

                    vm.transactionActions.trade_price.push(action.transaction.trade_price);

                    if (action.transaction.transaction_currency_object !== null) {
                        vm.transactionActions.transaction_currency.push(action.transaction.transaction_currency_object.name);
                    } else {
                        if (action.transaction.transaction_currency_input !== null) {
                            vm.transactionActions.transaction_currency.push(action.transaction.transaction_currency_input);
                        } else {
                            vm.transactionActions.transaction_currency.push('-');
                        }
                    }


                    // instrument fields

                    vm.transactionActions.accrued_currency.push('-');
                    vm.transactionActions.accrued_multiplier.push('-');
                    vm.transactionActions.daily_pricing_model.push('-');
                    vm.transactionActions.default_accrued.push('-');
                    vm.transactionActions.default_price.push('-');
                    vm.transactionActions.instrument_type.push('-');
                    vm.transactionActions.maturity_date.push('-');
                    vm.transactionActions.name.push('-');
                    vm.transactionActions.notes.push('-');
                    vm.transactionActions.payment_size_detail.push('-');
                    vm.transactionActions.price_download_scheme.push('-');
                    vm.transactionActions.price_multiplier.push('-');
                    vm.transactionActions.public_name.push('-');
                    vm.transactionActions.reference_for_pricing.push('-');
                    vm.transactionActions.short_name.push('-');
                    vm.transactionActions.user_code.push('-');
                    vm.transactionActions.user_text_1.push('-');
                    vm.transactionActions.user_text_2.push('-');
                    vm.transactionActions.user_text_3.push('-');
                    vm.transactionActions.pricing_currency.push('-');

                }
            });

            console.log('vm.transactionActions', vm.transactionActions);

            vm.readyStatus.transactionType = true;

            $scope.$apply();
        })

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/transactionTypeService":393}],128:[function(require,module,exports){
/**
 * Created by szhitenev on 29.11.2016.
 */
(function () {

	'use strict';

	module.exports = function ($scope, $mdDialog) {

		var vm = this;

		vm.transactions = $scope.$parent.vm.entity.transactions_object;

		console.log('complex transactions scope', $scope, vm.transactions);

		vm.editBaseTransaction = function (ev, entityId) {
			$mdDialog.show({
				controller: 'EntityViewerEditDialogController as vm',
				templateUrl: 'views/entity-viewer/entity-viewer-dialog-view.html',
				parent: angular.element(document.body),
				targetEvent: ev,
				locals: {
					parentScope: {entityType: 'transaction'},
					entityId: entityId
				}
			}).then(function (res) {
				if (res && res.res === 'agree') {
					scope.externalCallback();
				}
			});
		}
		// scope.editEntity = function (ev, entity) {
		// 	$mdDialog.show({
		// 		controller: 'EntityViewerEditDialogController as vm',
		// 		templateUrl: 'views/entity-viewer/entity-viewer-dialog-view.html',
		// 		parent: angular.element(document.body),
		// 		targetEvent: ev,
		// 		//clickOutsideToClose: true,
		// 		locals: {
		// 			parentScope: scope,
		// 			entityId: entity.id
		// 		}
		// 	}).then(function (res) {
		// 		if (res && res.res === 'agree') {
		// 			scope.externalCallback();
		// 		}
		// 	});
		// };

	}

}());
},{}],129:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    var accrualCalculationModelService = require('../../../services/accrualCalculationModelService');
    var instrumentPeriodicityService = require('../../../services/instrumentPeriodicityService');

    module.exports = function ($scope) {

        logService.controller('AccrualCalculationSchedulesController', 'initialized');

        var vm = this;

        vm.entity = $scope.$parent.vm.entity;

        vm.readyStatus = {accrualModals: false, periodicityItems: false};

        accrualCalculationModelService.getList().then(function (data) {
            vm.accrualModels = data;
            vm.readyStatus.accrualModals = true;
            $scope.$apply();
        });

        instrumentPeriodicityService.getList().then(function (data) {
            vm.periodicityItems = data;
            vm.readyStatus.periodicityItems = true;
            $scope.$apply();
        });

        vm.checkReadyStatus = function () {
            if (vm.readyStatus.accrualModals == true && vm.readyStatus.periodicityItems == true) {
                return true;
            }
            return false;
        };

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function (propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.bindCalculationModel = function (row) {
            var name;
            vm.accrualModels.forEach(function (item) {
                if (row.accrual_calculation_model == item.id) {
                    row.calculation_model_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.bindPeriodicity = function (row) {
            var name;
            vm.periodicityItems.forEach(function (item) {
                if (row.periodicity == item.id) {
                    row.periodicity_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.newItem = {
            "accrual_start_date": new Date(),
            "first_payment_date": new Date(),
            "accrual_size": '',
            "accrual_calculation_model": '',
            "periodicity": '',
            "periodicity_n": '',
            "notes": ""
        };

        vm.editItem = function (item) {
            item.editStatus = true;
        };

        vm.saveItem = function (item) {
            item.editStatus = false;
        };

        vm.deleteItem = function (item, index) {
            vm.entity.accrual_calculation_schedules.splice(index, 1);
        };

        vm.addRow = function () {
            vm.entity.accrual_calculation_schedules.push({
                "accrual_start_date": moment(new Date(vm.newItem.accrual_start_date)).format('YYYY-MM-DD'),
                "first_payment_date": moment(new Date(vm.newItem.first_payment_date)).format('YYYY-MM-DD'),
                "accrual_size": vm.newItem.accrual_size,
                "accrual_calculation_model": vm.newItem.accrual_calculation_model,
                "periodicity": vm.newItem.periodicity,
                "periodicity_n": vm.newItem.periodicity_n,
                "notes": vm.newItem.notes
            });

            vm.newItem = {
                "accrual_start_date": new Date(),
                "first_payment_date": new Date(),
                "accrual_size": '',
                "accrual_calculation_model": '',
                "periodicity": '',
                "periodicity_n": '',
                "notes": ""
            };
        }

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/accrualCalculationModelService":303,"../../../services/instrumentPeriodicityService":360}],130:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    //var instrumentEventScheduleService = require('../../services/instrument/instrumentEventScheduleService');
    var metaNotificationClassService = require('../../../services/metaNotificationClassService');
    var metaEventClassService = require('../../../services/metaEventClassService');
    var instrumentPeriodicityService = require('../../../services/instrumentPeriodicityService');

    module.exports = function ($scope) {

        logService.controller('AccrualCalculationSchedulesController', 'initialized');

        var vm = this;

        vm.entity = $scope.$parent.vm.entity;

        vm.readyStatus = {notificationClasses: false, eventClasses: false};

        metaNotificationClassService.getList().then(function (data) {
            vm.notificationClasses = data;
            vm.readyStatus.notificationClasses = true;
            $scope.$apply();
        });

        metaEventClassService.getList().then(function (data) {
            vm.eventClasses = data;
            vm.readyStatus.eventClasses = true;
            $scope.$apply();
        });

        instrumentPeriodicityService.getList().then(function (data) {
            vm.periodicityItems = data;
            vm.readyStatus.periodicityItems = true;
            $scope.$apply();
        });

        vm.checkReadyStatus = function () {
            return vm.readyStatus.notificationClasses && vm.readyStatus.eventClasses;
        };

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function (propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.bindNotificationClass = function (row) {
            var name;
            vm.notificationClasses.forEach(function (item) {
                if (row.notification_class == item.id) {
                    row.notification_class_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.bindEventClass = function (row) {
            var name;
            vm.eventClasses.forEach(function (item) {
                if (row.event_class == item.id) {
                    row.event_class_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.bindPeriodicity = function (row) {
            var name;
            vm.periodicityItems.forEach(function (item) {
                if (row.periodicity == item.id) {
                    row.periodicity_name = item.name;
                    name = item.name
                }
            });
            return name;
        };



        vm.newItem = {
            "name": '',
            "description": "",
            "notification_class": '',
            "notify_in_n_days": '',
            "periodicity": '',
            "periodicity_n": '',
            "action_is_sent_to_pending": null,
            "action_is_book_automatic": null,
            "actions": [],
            "effective_date": null,
            "final_date": null,
            "event_class": null
        };

        vm.editItem = function (item) {
            item.editStatus = true;
        };

        vm.saveItem = function (item) {
            item.editStatus = false;
        };

        vm.deleteItem = function (item, index) {
            vm.entity.event_schedules.splice(index, 1);
        };

        vm.addRow = function () {
            vm.entity.event_schedules.push({
                "name": vm.newItem.name,
                "description": vm.newItem.description,
                "notification_class": vm.newItem.notification_class,
                "notify_in_n_days": vm.newItem.notify_in_n_days,
                "action_text": vm.newItem.action_text,
                "event_class": vm.newItem.event_class,
                "action_is_sent_to_pending": vm.newItem.action_is_sent_to_pending,
                "action_is_book_automatic": vm.newItem.action_is_book_automatic,
                "effective_date": vm.newItem.effective_date,
                "final_date": vm.newItem.final_date,
                "periodicity": vm.newItem.periodicity,
                "periodicity_n": vm.newItem.periodicity_n
            });

            vm.newItem = {
                "name": '',
                "description": "",
                "notification_class": '',
                "notify_in_n_days": '',
                "periodicity": '',
                "periodicity_n": '',
                "action_is_sent_to_pending": null,
                "action_is_book_automatic": null,
                "actions": [],
                "effective_date": null,
                "final_date": null,
                "event_class": null
            };
        }

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/instrumentPeriodicityService":360,"../../../services/metaEventClassService":371,"../../../services/metaNotificationClassService":372}],131:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    module.exports = function ($scope) {

        logService.controller('FactorScheduleTabController', 'initialized');

        var vm = this;

        vm.entity = $scope.$parent.vm.entity;

        console.log('----------------------------------', vm.entity);

        vm.newItem = {};
        vm.newItem.date = new Date();

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function(propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.editItem = function (item) {
            item.editStatus = true;
        };

        vm.saveItem = function (item) {
            item.editStatus = false;
        };

        vm.deleteItem = function (item, index) {
            vm.entity.factor_schedules.splice(index, 1);
        };

        vm.addRow = function () {
            vm.entity.factor_schedules.push({
                factor_value: vm.newItem.value,
                effective_date: moment(new Date(vm.newItem.date)).format('YYYY-MM-DD')
            });

            vm.newItem.value = null;
            vm.newItem.date = null
        }

    }

}());
},{"../../../../../../core/services/logService":2}],132:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');
    var pricingPolicyService = require('../../../services/pricingPolicyService');

    module.exports = function ($scope) {

        logService.controller('ManualPricingFormulasTabController', 'initialized');

        var vm = this;

        vm.readyStatus = {content: false};

        vm.entity = $scope.$parent.vm.entity;

        vm.newItem = {pricing_policy: '', expr: '', notes: ''};

        pricingPolicyService.getList().then(function (data) {
            vm.policies = data.results;
            vm.readyStatus.content = true;
            $scope.$apply();
        });

        vm.bindPricingPolicy = function (policy) {
            var name;
            vm.policies.forEach(function (item) {
                if (policy.pricing_policy == item.id) {
                    policy.policy_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function(propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.editItem = function (item) {
            item.editStatus = true;
        };

        vm.saveItem = function (item) {
            item.editStatus = false;
        };

        vm.deleteItem = function (item, index) {
            vm.entity.manual_pricing_formulas.splice(index, 1);
        };

        vm.addRow = function () {
            vm.entity.manual_pricing_formulas.push({
                pricing_policy: vm.newItem.pricing_policy,
                expr: vm.newItem.expr,
                notes: vm.newItem.notes
            });

            vm.newItem.pricing_policy = null;
            vm.newItem.expr = null;
            vm.newItem.notes = null;
        }

    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/pricingPolicyService":379}],133:[function(require,module,exports){
/**
 * Created by szhitenev on 27.09.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    var fieldResolverService = require('../../../services/fieldResolverService');
    var metaContentTypesService = require('../../../services/metaContentTypesService');

    module.exports = function ($scope, $mdDialog) {
        logService.controller('TransactionTypeActionsTabController', 'initialized');

        var vm = this;
        vm.entity = $scope.$parent.vm.entity;

        vm.contentTypes = metaContentTypesService.getListForTransactionTypeInputs();

        vm.toggleItem = function (pane, item) {
            pane.toggle();
            if (item.isPaneExpanded == true) {
                item.isPaneExpanded = false;
            } else {
                item.isPaneExpanded = true;
            }
        };

        vm.openExpressionDialog = function ($event, item, options) {

            var itemObj = {expression: ''};
            if (item) {
                itemObj = {expression: JSON.parse(JSON.stringify(item))};
            }

            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: itemObj
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    if (options) {
                        options.obj[options.prop] = res.data.item.expression;
                    }
                }
                console.log('item', item);
            });
        };

        vm.entity.actions.forEach(function (action) {
            var keys;
            if (action.instrument !== null) {
                keys = Object.keys(action.instrument);

                keys.forEach(function (key) {
                    if (action.instrument.hasOwnProperty(key + '_input')) {
                        if (action.instrument[key] !== null) {
                            action.instrument[key + '_toggle'] = true;
                        }
                    }
                })
            } else {
                keys = Object.keys(action.transaction);
                keys.forEach(function (key) {
                    if (action.transaction.hasOwnProperty(key + '_input')) {
                        if (action.transaction[key] !== null) {
                            action.transaction[key + '_toggle'] = true;
                        }
                    }
                })
            }
        });

        vm.resetProperty = function (item, propertyName, fieldName) {

            item[propertyName][fieldName] = null;
            item[propertyName][fieldName + '_input'] = null;

        };

        vm.resetPropertyBtn = function (item, propertyName, fieldName) {

            item[propertyName][fieldName] = null;
            item[propertyName][fieldName + '_input'] = null;

            item[propertyName][fieldName + '_toggle'] = !item[propertyName][fieldName + '_toggle'];

        };

        vm.findInputs = function (entity) {

            var content_type = '';
            var result = [];

            vm.contentTypes.forEach(function (contentTypeItem) {
                if (contentTypeItem.entity === entity) {
                    content_type = contentTypeItem.key
                }
            });

            vm.entity.inputs.forEach(function (input) {
                if (input.content_type === content_type) {
                    result.push(input);
                }
            });

            return result;

        };

        vm.deletePane = function (item, $index, $event) {

            var description = 'Are you sure to delete this action?';

            $mdDialog.show({
                controller: 'WarningDialogController as vm',
                templateUrl: 'views/warning-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    warning: {
                        title: 'Warning',
                        description: description
                    }
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    vm.entity.actions.splice($index, 1);
                }
                $scope.$apply();
            });
        };

        vm.addAction = function (actionType) {
            $scope.accordion.collapseAll();
            if (actionType == 'instrument') {
                vm.entity.actions.push({
                    isPaneExpanded: true,
                    instrument: {}
                })
            } else {
                vm.entity.actions.push({
                    isPaneExpanded: true,
                    transaction: {}
                })
            }
            vm.findPhantoms();
        };

        vm.relationItems = {};

        vm.moveDown = function (item, $index) {
            var swap = JSON.parse(JSON.stringify(item));
            vm.entity.actions[$index] = vm.entity.actions[$index + 1];
            vm.entity.actions[$index + 1] = swap;
            vm.findPhantoms();
        };

        vm.moveUp = function (item, $index) {
            var swap = JSON.parse(JSON.stringify(item));
            vm.entity.actions[$index] = vm.entity.actions[$index - 1];
            vm.entity.actions[$index - 1] = swap;
            vm.findPhantoms();

        };

        vm.resolveInstrumentProp = function (item, prop) {

            if (prop == 'instrument') {
                if (item.transaction.instrument_input !== null) {
                    return 'instrument_input'
                }
                return 'instrument_phantom'
            }

            if (prop == 'linked_instrument') {
                if (item.transaction.linked_instrument_input !== null) {
                    return 'linked_instrument_input'
                }
                return 'linked_instrument_phantom'
            }
            if (prop == 'allocation_pl') {
                if (item.transaction.allocation_pl_input !== null) {
                    return 'allocation_pl_input'
                }
                return 'allocation_pl_phantom'
            }

            if (prop == 'allocation_balance') {
                if (item.transaction.allocation_balance_input !== null) {
                    return 'allocation_balance_input'
                }
                return 'allocation_balance_phantom'
            }

        };

        vm.setTransactionInstrumentInput = function (item, name, prop) {

            if (prop == 'instrument') {
                item.transaction.instrument_input = name;
                item.transaction.instrument_phantom = null;
                item.transaction.instrument = null;
            }

            if (prop == 'linked_instrument') {
                item.transaction.linked_instrument_input = name;
                item.transaction.linked_instrument_phantom = null;
                item.transaction.linked_instrument = null;
            }

            if (prop == 'allocation_pl') {
                item.transaction.allocation_pl_input = name;
                item.transaction.allocation_pl_phantom = null;
                item.transaction.allocation_pl = null;
            }

            if (prop == 'allocation_balance') {
                item.transaction.allocation_balance_input = name;
                item.transaction.allocation_balance_phantom = null;
                item.transaction.allocation_balance = null;
            }
        };

        vm.setTransactionInstrumentPhantom = function (item, positionOrder, prop) {

            if (prop == 'instrument') {
                item.transaction.instrument_input = null;
                item.transaction.instrument_phantom = positionOrder;
                item.transaction.instrument = null;
            }

            if (prop == 'linked_instrument') {
                item.transaction.linked_instrument_input = null;
                item.transaction.linked_instrument_phantom = positionOrder;
                item.transaction.linked_instrument = null;
            }

            if (prop == 'allocation_pl') {
                item.transaction.allocation_pl_input = null;
                item.transaction.allocation_pl_phantom = positionOrder;
                item.transaction.allocation_pl = null;
            }

            if (prop == 'allocation_balance') {
                item.transaction.allocation_balance_input = null;
                item.transaction.allocation_balance_phantom = positionOrder;
                item.transaction.allocation_balance = null;
            }

        };

        vm.findPhantoms = function () {
            var result = [];
            vm.entity.actions.forEach(function (action, $index) {
                action.positionOrder = $index;
                if (action.instrument !== null) {
                    result.push(action);
                }
            });
            return result;
        };

        vm.loadRelation = function (field) {

            //console.log('entity', entity);

            return new Promise(function (resolve, reject) {
                if (!vm.relationItems[field]) {
                    fieldResolverService.getFields(field).then(function (data) {
                        vm.relationItems[field] = data.data;
                        resolve(vm.relationItems[field]);
                    })
                } else {
                    resolve(vm.relationItems[field]);
                }
            })
        };
    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/fieldResolverService":321,"../../../services/metaContentTypesService":370}],134:[function(require,module,exports){
/**
 * Created by szhitenev on 27.09.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');

    var transactionTypeGroupService = require('../../../services/transaction/transactionTypeGroupService');
    var portfolioService = require('../../../services/portfolioService');
    var instrumentTypeService = require('../../../services/instrumentTypeService');
    var tagService = require('../../../services/tagService');

    module.exports = function ($scope, $mdDialog) {
        logService.controller('TransactionTypeGeneralTabController', 'initialized');

        var vm = this;
        vm.entity = $scope.$parent.vm.entity;

        vm.entity.book_transaction_layout = vm.entity.book_transaction_layout || '';
        vm.entity.actions = vm.entity.actions || [];
        vm.entity.inputs = vm.entity.inputs || [];

        vm.readyStatus = {transactionTypeGroups: false, instrumentTypes: false, portfolios: false, tags: false};

        vm.getTransactionTypeGroups = function () {
            transactionTypeGroupService.getList().then(function (data) {
                vm.transactionTypeGroups = data.results;
                vm.readyStatus.transactionTypeGroups = true;
                $scope.$apply();
            })
        };

        vm.getPortfolios = function () {
            portfolioService.getList().then(function (data) {
                vm.portfolios = data.results;
                vm.readyStatus.portfolios = true;
                $scope.$apply();
            })
        };

        vm.getInstrumentTypes = function () {
            instrumentTypeService.getList().then(function (data) {
                vm.instrumentTypes = data.results;
                vm.readyStatus.instrumentTypes = true;
                $scope.$apply();
            })
        };

        vm.getTags = function () {
            tagService.getListByContentType('transaction-type').then(function (data) {
                vm.tags = data.results;
                vm.readyStatus.tags = true;
                $scope.$apply();
            });

        };

        vm.bindSelectedText = function (entity, fallback) {
            if (entity) {
                return '[' + entity.length + ']';
            }
            return fallback;
        };

        vm.openExpressionDialog = function ($event, item, options) {


            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: {expression: item[options.key]}
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    item[options.key] = res.data.item.expression;
                }
                console.log('item', item);
            });
        };

        vm.getTransactionTypeGroups();
        vm.getPortfolios();
        vm.getInstrumentTypes();
        vm.getTags();

        vm.tagTransform = function (newTag) {
            //console.log('newTag', newTag);
            var item = {
                name: newTag,
                id: null
            };

            return item;
        };

        $scope.$watch('vm.entity.tags', function () {
            vm.entity.tags.forEach(function (item) {
                if (item.id == null) {
                    tagService.create({
                        name: item.name,
                        content_types: ['transactions.transactiontype']
                    })
                }
            })
        });

        $scope.$watch('vm.entity.group', function () {
            if (vm.entity.group.name != null) {
                transactionTypeGroupService.create({
                    name: vm.entity.group.name
                })
            }
        });

        vm.checkReadyStatus = function () {
            if (vm.readyStatus.transactionTypeGroups == true &&
                vm.readyStatus.portfolios == true &&
                vm.readyStatus.instrumentTypes == true &&
                vm.readyStatus.tags == true) {
                return true;
            }
            return false;
        }
    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/instrumentTypeService":362,"../../../services/portfolioService":377,"../../../services/tagService":390,"../../../services/transaction/transactionTypeGroupService":396}],135:[function(require,module,exports){
/**
 * Created by szhitenev on 27.09.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../../core/services/logService');
    var metaContentTypesService = require('../../../services/metaContentTypesService');
    var entityResolverService = require('../../../services/entityResolverService');

    module.exports = function ($scope, $mdDialog) {
        logService.controller('TransactionTypeInputsTabController', 'initialized');

        var vm = this;
        vm.entity = $scope.$parent.vm.entity;

        vm.relationItems = {};

        vm.newItem = {
            content_type: null,
            account: null,
            instrument_type: null,
            instrument: null,
            currency: null,
            counterparty: null,
            is_fill_from_context: false,
            responsible: null,
            portfolio: null,
            strategy1: null,
            strategy2: null,
            strategy3: null,
            daily_pricing_model: null,
            payment_size_detail: null,
            price_download_scheme: null
        };

        vm.valueTypes = [
            {
                "display_name": "Number",
                "value": 20
            },
            {
                "display_name": "String",
                "value": 10
            },
            {
                "display_name": "Date",
                "value": 40
            },
            {
                "display_name": "Relation",
                "value": 100
            }
        ];

        vm.contentTypes = metaContentTypesService.getListForTransactionTypeInputs();

        vm.bindValueType = function (row) {
            var name;
            vm.valueTypes.forEach(function (item) {
                if (row.value_type == item.value) {
                    row.value_type_name = item.display_name;
                    name = item.display_name
                }
            });
            return name;
        };

        vm.bindContentType = function (row) {
            var name;
            vm.contentTypes.forEach(function (item) {
                if (row.content_type == item.key) {
                    row.content_type_name = item.name;
                    name = item.name
                }
            });
            return name;
        };

        vm.resolveRelation = function (item) {
            var relation;

            //console.log('item', item);
            vm.contentTypes.forEach(function (contentType) {
                if (contentType.key == item.content_type) {
                    relation = contentType.entity;
                }
            });

            //console.log('relation', relation);

            return relation
        };

        vm.resolveDefaultValue = function (item) {

            //console.log('item', item);

            if (item.value_type == 100) {

                var itemEntity = '';

                vm.contentTypes.forEach(function (contentType) {
                    if (item.content_type == contentType.key) {
                        itemEntity = contentType.entity;
                    }
                });

                if (item[itemEntity + '_object']) {
                    return item[itemEntity + '_object'].name;
                } else {

                    var entityName = '';

                    if (vm.relationItems[itemEntity]) {
                        vm.relationItems[itemEntity].forEach(function (relationItem) {
                            if (relationItem.id == item[itemEntity]) {
                                entityName = relationItem.name;
                            }
                        });
                    }

                    return entityName;
                }
            } else {
                return item.value;
            }

        };

        vm.loadRelation = function (entity) {

            //console.log('entity', entity);

            return new Promise(function (resolve, reject) {
                if (!vm.relationItems[entity]) {
                    entityResolverService.getList(entity).then(function (data) {
                        vm.relationItems[entity] = data.results;
                        resolve(vm.relationItems[entity]);
                    })
                } else {
                    resolve(vm.relationItems[entity]);
                }
            })
        };

        vm.toggleQuery = function () {
            vm.queryStatus = !vm.queryStatus;
            vm.query = {};
        };

        vm.setSort = function (propertyName) {
            vm.direction = (vm.sort === propertyName) ? !vm.direction : false;
            vm.sort = propertyName;
        };

        vm.editItem = function (item) {
            item.editStatus = true;
        };

        vm.saveItem = function (item) {
            item.editStatus = false;
        };

        vm.deleteItem = function (item, index) {
            vm.entity.inputs.splice(index, 1);
        };

        vm.openExpressionDialog = function ($event, item, options) {

            $mdDialog.show({
                controller: 'ExpressionEditorDialogController as vm',
                templateUrl: 'views/dialogs/expression-editor-dialog-view.html',
                parent: angular.element(document.body),
                targetEvent: $event,
                preserveScope: true,
                autoWrap: true,
                skipHide: true,
                locals: {
                    item: {expression: item[options.key]}
                }
            }).then(function (res) {
                if (res.status === 'agree') {
                    console.log("res", res.data);
                    item[options.key] = res.data.item.expression;
                }
                console.log('item', item);
            });
        };

        vm.addRow = function () {
            vm.entity.inputs.push({
                name: vm.newItem.name,
                verbose_name: vm.newItem.verbose_name,
                value_type: vm.newItem.value_type,
                content_type: vm.newItem.content_type,
                is_fill_from_context: vm.newItem.is_fill_from_context,
                account: vm.newItem.account,
                instrument_type: vm.newItem.instrument_type,
                instrument: vm.newItem.instrument,
                currency: vm.newItem.currency,
                counterparty: vm.newItem.counterparty,
                responsible: vm.newItem.responsible,
                portfolio: vm.newItem.portfolio,
                strategy1: vm.newItem.strategy1,
                strategy2: vm.newItem.strategy2,
                strategy3: vm.newItem.strategy3,
                daily_pricing_model: vm.newItem.daily_pricing_model,
                payment_size_detail: vm.newItem.payment_size_detail,
                price_download_scheme: vm.newItem.price_download_scheme,
                value: vm.newItem.value,
                value_expr: vm.newItem.value_expr
            });

            vm.newItem.name = null;
            vm.newItem.verbose_name = null;
            vm.newItem.value_type = null;
            vm.newItem.content_type = null;
            vm.newItem.is_fill_from_context = false;
            vm.newItem.account = null;
            vm.newItem.instrument_type = null;
            vm.newItem.instrument = null;
            vm.newItem.currency = null;
            vm.newItem.counterparty = null;
            vm.newItem.responsible = null;
            vm.newItem.portfolio = null;
            vm.newItem.strategy1 = null;
            vm.newItem.strategy2 = null;
            vm.newItem.strategy3 = null;
            vm.newItem.daily_pricing_model = null;
            vm.newItem.payment_size_detail = null;
            vm.newItem.price_download_scheme = null;
            vm.newItem.value = null;
            vm.newItem.value_expr = null;
        }
    }

}());
},{"../../../../../../core/services/logService":2,"../../../services/entityResolverService":316,"../../../services/metaContentTypesService":370}],136:[function(require,module,exports){
/**
 * Created by szhitenev on 01.06.2016.
 */
(function () {

    'use strict';

    module.exports = function ($compile) {
        return {
            scope: {
                tabs: '='
            },
            link: function (scope, elem) {

                var btnString = '<md-button class="ec-tab-add-btn"' +
                    'data-ng-click="vm.addTab()">' +
                    '<ng-md-icon icon="add_circle"></ng-md-icon>' +
                    '</md-button>';

                var btn = $compile(btnString)(scope.$parent);

                var wrapper  = elem.find('md-pagination-wrapper');

                wrapper.append(btn);

            }
        }
    }


}());
},{}],137:[function(require,module,exports){
/**
 * Created by szhitenev on 16.05.2016.
 */
(function () {

    'use strict';

    var metaService = require('../services/metaService');
    var layoutService = require('../services/layoutService');
    var attributeTypeService = require('../services/attributeTypeService');

    module.exports = function () {
        return {
            restrict: 'AE',
            templateUrl: 'views/directives/bind-field-control-view.html',
            scope: {
                item: '='
            },
            link: function (scope, elem, attr) {

                scope.entityType = scope.$parent.vm.entityType;
                scope.readyStatus = {classifier: false};
                scope.entity = scope.$parent.vm.entity;

                var attrs = scope.$parent.vm.attrs || [];
                var userInputs = scope.$parent.vm.userInputs || [];
                var choices = metaService.getValueTypes() || [];
                var baseAttrs = metaService.getBaseAttrs() || [];
                var entityAttrs = metaService.getEntityAttrs(scope.entityType) || [];

                scope.layoutAttrs = layoutService.getLayoutAttrs();

                if (scope.item) {
                    scope.fieldType = null;
                    //console.log(scope.item);
                    scope.attribute = scope.item;

                    var i;
                    for (i = 0; i < choices.length; i = i + 1) {
                        if (choices[i].value === scope.attribute['value_type']) {
                            scope.fieldType = choices[i];
                        }
                    }

                    if (scope.attribute['value_type'] == 100) {
                        scope.fieldType = choices[5]; // relation == field, backend&frontend naming conflict
                    }

                }

                scope.getName = function () {

                    if (scope.item.hasOwnProperty('verbose_name')) {
                        return scope.item.verbose_name
                    }

                    if (scope.item.options && scope.item.options.fieldName) {
                        return scope.item.options.fieldName;
                    }

                    return scope.item.name
                };

                scope.copyFromField = function (attr) {
                    var attrObj = JSON.parse(attr);

                    if (attrObj.key) {
                        scope.entity[scope.getModelKey()] = scope.entity[attrObj.key];
                        console.log(scope.entity[scope.getModelKey()]);
                    }
                    if (attrObj.id) {
                        var resAttr = null;
                        attrs.forEach(function (item) {
                            if (item.id === attrObj.id) {
                                resAttr = item;
                            }
                        });
                        scope.entity[scope.getModelKey()] = scope.entity[resAttr.name];
                    }
                };

                scope.checkValid = function () {

                    if (scope.entity.$_isValid == false) {
                        var item = scope.entity[scope.getModelKey()];
                        if (item == null || item == '' || item == undefined) {
                            return true
                        }
                    }

                    return false

                };

                scope.dateFormatter = function () {
                    //console.log('scope.entity[scope.getModelKey()]', scope.entity[scope.getModelKey()]);

                    //scope.entity[scope.getModelKey()] = moment(new Date(scope.entity[scope.getModelKey()])).format('YYYY-MM-DD');
                };

                scope.getModelKey = function () {

                    if (scope.item) {
                        if (scope.item.hasOwnProperty('id') && scope.item.id !== null) {

                            //console.log('scope,entity', scope.entity);

                            return scope.item.name
                        } else {
                            var i, l, e, u;
                            for (i = 0; i < baseAttrs.length; i = i + 1) {
                                if (scope.item.name === baseAttrs[i].name) {
                                    return baseAttrs[i].key;
                                }
                            }
                            for (l = 0; l < scope.layoutAttrs.length; l = l + 1) {
                                if (scope.item.name === scope.layoutAttrs[l].name) {

                                    return scope.layoutAttrs[l].key;
                                }
                            }
                            for (e = 0; e < entityAttrs.length; e = e + 1) {
                                if (scope.item.name === entityAttrs[e].name) {
                                    return entityAttrs[e].key;
                                }
                            }
                            for (u = 0; u < userInputs.length; u = u + 1) {
                                if (scope.item.name === userInputs[u].name) {
                                    return userInputs[u].name;
                                }
                            }
                        }
                    }
                };

                var fieldKey = scope.getModelKey();

                scope.options = {};

                if (fieldKey == 'tags') {
                    scope.options = {
                        entityType: scope.entityType
                    }
                } else {
                    if (metaService.getEntitiesWithSimpleFields().indexOf(scope.entityType) !== -1) {
                        scope.options = {
                            entityType: scope.entityType,
                            key: fieldKey
                        };
                    }
                }

                scope.setDateToday = function () {
                    //console.log('1232', scope.entity[scope.getModelKey()])
                    scope.entity[scope.getModelKey()] = new Date();
                    //console.log('1232', scope.entity[scope.getModelKey()])
                };

                scope.setDatePlus = function () {
                    scope.entity[scope.getModelKey()] = new Date(new Date().setDate(new Date(scope.entity[scope.getModelKey()]).getDate() + 1));
                };

                scope.setDateMinus = function () {
                    scope.entity[scope.getModelKey()] = new Date(new Date().setDate(new Date(scope.entity[scope.getModelKey()]).getDate() - 1));
                };

                scope.node = scope.node || null;

                function findNodeInChildren(item) {
                    if (scope.classifierId == item.id) {
                        scope.node = item;
                    } else {
                        if (item.children.length) {
                            item.children.forEach(findNodeInChildren);
                        }
                    }
                }

                var classifierTree;

                function getNode() {
                    return attributeTypeService.getByKey(scope.entityType, scope.item.id).then(function (data) {
                        classifierTree = data;
                        classifierTree.classifiers.forEach(findNodeInChildren);
                        return scope.node;
                    });
                }

                scope.findNodeItem = function () {
                    scope.readyStatus.classifier = false;
                    return new Promise(function (resolve) {
                        getNode().then(function (data) {
                            scope.readyStatus.classifier = true;
                            scope.node = data;
                            scope.entity[scope.getModelKey()] = scope.classifierId;
                            resolve(undefined)
                        });
                    })
                };

                if (scope.fieldType && scope.fieldType.value == 30) {

                    if (scope.entity) {

                        scope.classifierId = scope.entity[scope.getModelKey()];

                        scope.findNodeItem().then(function () {
                            scope.$apply();
                        })
                    }
                }

                scope.changeWatcher = function () {
                    localStorage.setItem('entityIsChanged', true);
                };

                scope.changeClassifier = function () {
                    if (classifierTree) {
                        //localStorage.setItem('entityIsChanged', true);
                        scope.classifierId = scope.entity[scope.getModelKey()];

                        scope.findNodeItem().then(function () {
                            classifierTree.classifiers.forEach(findNodeInChildren);
                            scope.$apply();
                        })
                    }
                };

            }
        }
    }

}());
},{"../services/attributeTypeService":304,"../services/layoutService":368,"../services/metaService":375}],138:[function(require,module,exports){
(function () {

    'use strict';

    var bookmarkService = require('../services/bookmarkService');

    module.exports = function ($mdDialog) {
        return {
            restriction: 'AE',
            templateUrl: 'views/directives/bookmarks-view.html',
            link: function (scope, elem, attr) {

                //scope.showBookmarks = true;

                scope.toggleBookmarkPanel = function () {
                    scope.showBookmarks = !scope.showBookmarks;
                };

                scope.getBookmarks = function () {
                    bookmarkService.getList().then(function (data) {
                        scope.items = data.results;
                        scope.$apply();
                    });
                };

                scope.getBookmarks();

                scope.openSettings = function ($event) {

                    $mdDialog.show({
                        controller: 'BookmarksWizardDialogController as vm',
                        templateUrl: 'views/dialogs/bookmarks-wizard-dialog-view.html',
                        parent: angular.element(document.body),
                        targetEvent: $event,
                        locals: {}
                    }).then(function (res) {
                        if (res.status === 'agree') {
                            scope.getBookmarks();
                        }
                    });

                };

                scope.getState = function (item) {

                    var uiState = item.data;

                    return uiState.state + '({listLayout: ' + item.list_layout + '})';
                }

            }
        }
    }
}());
},{"../services/bookmarkService":308}],139:[function(require,module,exports){
/**
 * Created by szhitenev on 21.07.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');
    var attributeTypeService = require('../services/attributeTypeService');

    module.exports = function ($mdDialog) {
        return {
            restrict: 'A',
            require: '?ngModel',
            scope: {
                classifierAttr: '=',
                entityType: '=',
                classifierValue: '='
            },
            link: function (scope, elem, attr, ngModelCtrl) {

                logService.component('ClassifierModalResolver', 'initialize');

                $(elem).on('click', function (event) {
                    event.preventDefault();
                    event.stopPropagation();

                    setTimeout(function () {
                        $('.md-select-backdrop')[0].dispatchEvent(new Event('click'));
                    }, 400);

                    $mdDialog.show({
                        controller: 'ClassifierSelectDialogController as vm',
                        templateUrl: 'views/classifier-select-dialog-view.html',
                        parent: angular.element(document.body),
                        targetEvent: event,
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true,
                        locals: {
                            data: {
                                ngModelCtrl: ngModelCtrl,
                                classifier: scope.classifierAttr,
                                classifierId: scope.classifierValue,
                                entityType: scope.entityType
                            }
                        }
                    }).then(function (res) {
                        if (res.status === 'agree') {
                            ngModelCtrl.$setViewValue(res.data.item);
                            ngModelCtrl.$render();
                            console.log('ngModelCtrl', ngModelCtrl);
                        }
                    });

                })
            }
        }
    }

}());
},{"../../../../core/services/logService":2,"../services/attributeTypeService":304}],140:[function(require,module,exports){
/**
 * Created by szhitenev on 11.08.2016.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'AE',
            scope: {
                scrollY: '@',
                scrollSticky: '@'
            },
            link: function (scope, elem) {
                //baron($(elem));
                if (scope.scrollY && scope.scrollY == 'false') {
                    $(elem).perfectScrollbar({
                        suppressScrollY: true
                    });

                    var scrollBar;
                    var scrollBarX;
                    var scrollBarLeft;

                    $(elem).on('ps-scroll-x', function (e) {
                        if ($('.ps-scrollbar-y-rail.sticky')) {
                            scrollBar = $('.ps-scrollbar-y-rail.sticky');
                            scrollBarX = $(elem).find('> .ps-scrollbar-x-rail');
                            scrollBarLeft = parseInt(scrollBarX.css('left').split('px')[0], 10);
                            if (scrollBarLeft > 0) {
                                $(scrollBar).css('left', ($('.g-table-section').width() + scrollBarLeft - 21) + 'px');
                            } else {
                                $(scrollBar).css('left', ($('.g-table-section').width() - 21) + 'px');
                            }
                        }
                    })
                } else {
                    $(elem).perfectScrollbar();

                    if (scope.scrollSticky && scope.scrollSticky == 'true') {
                        //setTimeout(function () {
                        $(elem).find('.ps-scrollbar-y-rail').addClass('sticky');
                        //}, 0)
                    }

                }


            }

        }
    }

}());
},{}],141:[function(require,module,exports){
(function () {

	'use strict';

	var logService = require('../../../../core/services/logService');

	module.exports = function () {
		return {
			restrict: 'A',
			link: function (scope, elem, attrs) {

				//console.log('drag dialog working');

				var dragger = $(elem).find('md-toolbar');
				// var dragger = $(elem);
				//console.log('drag element is', $(elem), dragger);
				var parent = $(elem);

				var posY = 0, posX = 0;
				var elemLeft = 0, elemTop = 0;
				var initMouseX = 0, initMouseY = 0;

				function mousemove(e) {

					// posX = document.all ? window.event.clientX : e.pageX;
					// posY = document.all ? window.event.clientY : e.pageY;
					posX = e.pageX;
					posY = e.pageY;
					//console.log('posX', posX);
					//console.log('elemLeft', elemLeft);
					//console.log(posX - elemLeft);
					//console.log(posY - elemTop);
					//console.log(initMouseX, initMouseY, posX, posY, elemLeft, elemTop);

					// parent[0].style.left = (posX - elemLeft + 8) + 'px';
					// parent[0].style.top = (posY - elemTop - 8 - 150) + 'px';
					parent[0].style.left = (posX + elemLeft - initMouseX) + 'px';
					parent[0].style.top = (posY + elemTop - initMouseY) + 'px';
					// parent[0].style.left = ()

				}

				dragger.bind('mousedown', function (e) {
					e.preventDefault();
					e.stopPropagation();
					//console.log(parent);
					initMouseX = e.clientX;
					initMouseY = e.clientY;
					// if (elemLeft !== 0) {
						elemLeft = parent[0].offsetLeft;
						elemTop = parent[0].offsetTop;
						// elemLeft = posX - parent[0].offsetLeft;
						// elemTop = posY - parent[0].offsetTop;
					// }
					//console.log(elemLeft, elemTop);
					$(window).bind('mousemove', mousemove);

					$(window).bind('mouseup', function (e) {
						//console.log('unbind');
						$(window).unbind('mousemove');
					});
					return false;
				})
			}
		}
	}

}());
},{"../../../../core/services/logService":2}],142:[function(require,module,exports){
/**
 * Created by szhitenev on 17.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');
    var fieldResolverService = require('../services/fieldResolverService');
    var bindFieldsHelper = require('../helpers/bindFieldsHelper');
    var metaService = require('../services/metaService');
    var tagService = require('../services/tagService');

    module.exports = function ($scope) {

        return {
            scope: {
                item: '=',
                entity: '=',
                content_type: '=',
                options: '='
            },
            templateUrl: 'views/entity-viewer/field-resolver-view.html',
            link: function (scope, elem, attrs) {

                logService.component('EntityViewerFieldResolverDirective', 'initialized');

                scope.readyStatus = {content: false, tags: false};
                scope.type = '';

                //logService.property('field scope', scope.item);
                //logService.property('field entity', scope.entity);
                //logService.property('field options', scope.options);

                scope.resolveMultiple = function () {
                    if (scope.$parent.entityType !== 'instrument-type') { // refactor this
                        return true
                    }
                    if (scope.item.key == 'tags') {
                        return true;
                    }
                    return false;
                };

                scope.getFieldsGrouped = function () {

                    if (metaService.getFieldsWithTagGrouping().indexOf(scope.item.key) !== -1) {

                        var entityType = scope.item.key.replace('_', '-'); // refactor this

                        console.log('ENTITYTYPE------------------------------------------', entityType);

                        if (entityType === 'transaction-types') {
                            entityType = 'transaction-type'
                        }

                        tagService.getListByContentType(entityType).then(function (data) { //refactor entityType getter
                            scope.tags = data.results;

                            scope.groups = bindFieldsHelper.groupFieldsByTagsWithDuplicates(scope.fields, scope.tags);

                            console.log('test?');

                            scope.readyStatus.tags = true;

                            scope.$apply(function () {

                                setTimeout(function () {
                                    $(elem).find('.md-select-search-pattern').on('keydown', function (ev) {
                                        ev.stopPropagation();
                                    });
                                }, 100);
                            })
                        })
                    }
                };

                scope.searchTerm = '';

                //scope.onOpen = function () {

                    //if (scope.item.content_type) {

                        //console.log('scope.item.content_type', scope.item.content_type);
                        //
                        //fieldResolverService.getFieldsByContentType(scope.item.content_type, scope.options).then(function (res) {
                        //    logService.collection('DATA', res);
                        //    scope.type = res.type;
                        //    scope.fields = res.data;
                        //    scope.readyStatus.content = true;
                        //
                        //    scope.getFieldsGrouped();
                        //
                        //    scope.$apply(function () {
                        //
                        //        setTimeout(function () {
                        //            $(elem).find('.md-select-search-pattern').on('keydown', function (ev) {
                        //                ev.stopPropagation();
                        //            });
                        //        }, 100);
                        //    });
                        //});
                    //}
                    //} else {
                //
                        fieldResolverService.getFields(scope.item.key, scope.options).then(function (res) {
                            logService.collection('DATA', res);
                            scope.type = res.type;
                            scope.fields = res.data;
                            scope.readyStatus.content = true;

                            scope.getFieldsGrouped();

                            scope.$apply(function () {

                                setTimeout(function () {
                                    $(elem).find('.md-select-search-pattern').on('keydown', function (ev) {
                                        ev.stopPropagation();
                                    });
                                }, 100);
                            });
                        });
                //    }
                //};

                scope.resolveSort = function (field) {
                    if (field) {
                        if (field.hasOwnProperty('name')) {
                            return field.name
                        }
                        if (field.hasOwnProperty('user_code')) {
                            return field.user_code
                        }
                        if (field.hasOwnProperty('public_name')) {
                            return field.public_name
                        }
                    }
                };

                scope.checkComplexEntityType = function () {
                    if (metaService.getFieldsWithTagGrouping().indexOf(scope.item.key) !== -1) {
                        return true
                    }
                    return false
                };

                scope.getName = function () {

                    if (scope.item.hasOwnProperty('verbose_name')) {
                        return scope.item.verbose_name
                    }

                    if (scope.item.options && scope.item.options.fieldName) {
                        return scope.item.options.fieldName;
                    }
                    return scope.item.name
                };

                scope.changeWatcher = function () {
                    localStorage.setItem('entityIsChanged', true);
                };

                scope.bindFormFields = function () {

                    var id = scope.entity[scope.getModelKey()];
                    if (id) {
                        var i;
                        var attr;

                        for (i = 0; i < scope.fields.length; i = i + 1) {
                            if (id == scope.fields[i].id) {
                                attr = scope.fields[i]
                            }
                        }

                        if (scope.item.options && scope.item.options.fieldsForm) {
                            var resultCaption = '';
                            scope.item.options.fieldsForm.forEach(function (item, index) {
                                if (index + 1 === scope.item.options.fieldsForm.length) {
                                    resultCaption = resultCaption + attr[item];
                                } else {
                                    resultCaption = resultCaption + attr[item] + ' / ';
                                }
                            });

                            return resultCaption
                        }

                        return attr.name
                    } else {
                        return scope.getName();
                    }
                };

                scope.bindListFields = function (field) {
                    //console.log('scope.item.options', scope.item.options);
                    if (scope.item.options && scope.item.options.fieldsList) {
                        var resultCaption = '';
                        scope.item.options.fieldsList.forEach(function (item, index) {
                            if (index + 1 === scope.item.options.fieldsList.length) {
                                resultCaption = resultCaption + field[item];
                            } else {
                                resultCaption = resultCaption + field[item] + ' / ';
                            }
                        });

                        return resultCaption
                    }

                    return field.name
                };

                scope.bindMCField = function (model) {
                    if (scope.entity[scope.getModelKey()] && scope.entity[scope.getModelKey()].length > 0) {
                        return '[' + scope.entity[scope.getModelKey()].length + '] selected';
                    }
                    else {
                        return scope.getName();
                    }
                }

                scope.getModelKey = scope.$parent.getModelKey;

            }

        }
    }
}());
},{"../../../../core/services/logService":2,"../helpers/bindFieldsHelper":181,"../services/fieldResolverService":321,"../services/metaService":375,"../services/tagService":390}],143:[function(require,module,exports){
/**
 * Created by szhitenev on 15.11.2016.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'AE',
            scope: {
                'fileRead': '='
            },
            link: function (scope, elem, attrs) {

                console.log('scope?13124',scope);

                elem.bind('change', function (changeEvent) {
                    //
                    //console.log('change', changeEvent);
                    //var reader = new FileReader();
                    //
                    //reader.onload = function (loadEvent) {
                    //
                    //    scope.$apply(function () {
                    //        scope.fileRead = loadEvent.target.result;
                    //    })
                    //
                    //};
                    //
                    //reader.readAsDataURL(changeEvent.target.files[0]);

                    scope.fileRead = changeEvent.target.files[0];

                })
            }
        }
    }

}());
},{}],144:[function(require,module,exports){
/**
 * Created by szhitenev on 24.06.2016.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {
                onlyPositive: '@'
            },
            require: '?ngModel',
            link: function (scope, elem, attrs, ngModelCtrl) {
                if (!ngModelCtrl) {
                    return;
                }


                ngModelCtrl.$parsers.push(function (val) {

                    //console.log('val', val);

                    var clean = val.replace(/[^-0-9\.]/g, '');
                    var negativeCheck = clean.split('-');
                    var decimalCheck = clean.split(',');


                    if (!angular.isUndefined(negativeCheck[1])) {
                        negativeCheck[1] = negativeCheck[1].slice(0, negativeCheck[1].length);
                        if (scope.onlyPositive) {
                            clean = negativeCheck[1];
                        } else {
                            clean = negativeCheck[0] + '-' + negativeCheck[1];
                        }
                        if (negativeCheck[0].length > 0) {
                            clean = negativeCheck[0];
                        }
                    }

                    if (!angular.isUndefined(decimalCheck[1])) {
                        decimalCheck[1] = decimalCheck[1].slice(0, decimalCheck[1].length);
                        clean = decimalCheck[0] + ',' + decimalCheck[1];
                    }

                    if (val !== clean) {
                        ngModelCtrl.$setViewValue(clean);
                        ngModelCtrl.$render();
                    }
                    return clean;
                });

                elem.bind('keypress', function (event) {
                    if (event.keyCode === 32) {
                        event.preventDefault();
                    }
                });

                elem.bind('blur', function () {

                    function addSpaces(nStr) {
                        var remainder = nStr.length % 3;
                        return (nStr.substr(0, remainder) + nStr.substr(remainder).replace(/(\d{3})/g, ' $1')).trim();
                    }

                    var val = elem.val();
                    var first, second;


                    if(val.indexOf(',') === 0) {
                        first = val.split(',')[0];
                        second = val.split(',')[1];
                        first = addSpaces(first);
                        second = addSpaces(second);
                        elem.val(first + ',' + second);
                    } else {
                        elem.val(addSpaces(val));
                    }
                })
            }
        }
    }

}());
},{}],145:[function(require,module,exports){
/**
 * Created by szhitenev on 02.11.2016.
 */
(function () {

    'use strict';

    module.exports = function () {
        return {
            restrict: 'AE',
            transclude: true,
            templateUrl: 'views/directives/groupTable/bind-report-row-view.html',
            link: function (scope, elem, attrs) {

                //console.log('scope.item', scope.item);


            }
        }
    }

}());
},{}],146:[function(require,module,exports){
/**
 * Created by szhitenev on 30.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {
                items: '=',
                columns: '='
            },
            link: function (scope, elem, attrs) {
                logService.component('groupClipboardHandlerComponent', 'initialized');

                var handler = function (e) {

                    if (e) {

                        var copiedItems = [];

                        scope.items.forEach(function (item) {
                            //console.log('item', item);
                            if (item.hasOwnProperty('groups')) {
                                if (item.selectedRow === true) {
                                    copiedItems.push({type: 'group', data: item.groups});
                                }
                                item.items.forEach(function (row) {
                                    //console.log('row', row);
                                    if (row.selectedRow === true) {
                                        copiedItems.push(row);
                                    }
                                })
                            } else {
                                if (item.selectedRow === true) {
                                    copiedItems.push(item);
                                }
                            }
                        });

                        if (copiedItems.length) {
                            //console.log(copiedItems);

                            var result = '<table>';
                            copiedItems.forEach(function (item) {
                                var row = '<tr>';

                                if (item.hasOwnProperty('type')) {
                                    row = row + '<td>' + item.data.map(function (item) {
                                            return item.value
                                        }).join(' ') + '</td>';
                                } else {
                                    scope.columns.forEach(function (column) {
                                        if (column.hasOwnProperty('key')) {
                                            row = row + '<td>' + item[column.key] + '</td>';
                                        } else {
                                            row = row + '<td>' + item[column.name] + '</td>';
                                        }
                                    });
                                }


                                row = row + '</tr>';
                                result = result + row;
                            });
                            result = result + '</table';

                            console.log('result', result);
                            if (e.clipboardData) {
                                e.clipboardData.setData('text/html', result);
                            }
                            console.log('e', e);
                            e.preventDefault(); // We want our data, not data from any selection, to be written to the clipboard
                        }
                    }
                };

                document.addEventListener('copy', handler);

                $(document).bind('copy', handler);

                scope.$on("destroy", function () {
                    logService.component('groupClipboardHandlerComponent', 'destroyed');
                    $(document).unbind('copy');
                    document.removeEventListener('copy');
                })
            }
        }

    }

}());
},{"../../../../../core/services/logService":2}],147:[function(require,module,exports){
(function () {

    'use strict';

    var metaService = require('../../services/metaService');

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {
                columns: "="
            },
            link: function (scope, elem, attr) {
                var groupsWidth = metaService.columnsWidthGroups();
                var setDefaultWidth = function () {
                    if (groupsWidth['newColumnAdded']) {
                        var columns = elem.find('.g-column');
                        var lastColumn = columns.length - 1;
                        var newColumn = columns[lastColumn];
                        var columnWidth;
                        switch (scope.columns[lastColumn]["value_type"]) {
                            case 10:
                                columnWidth = groupsWidth.groupThree;
                                break;
                            case 20:
                            case 40:
                                columnWidth = groupsWidth.groupFive;
                                break;
                            case 30:
                                columnWidth = groupsWidth.groupOne;
                                break;
                        }
                        $(newColumn).width(columnWidth);
                    }
                };
                scope.$watchCollection('columns', function () {
                    setTimeout(function () {
                        setDefaultWidth();
                    }, 0)
                });
            }
        }
    }
}());
},{"../../services/metaService":375}],148:[function(require,module,exports){
/**
 * Created by sergey on 11.05.16.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var renderEventService = require('../../services/renderEventService');
    // var uiService = require('../../services/uiService');

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {
                items: '=',
                options: '='
            },
            link: function (scope, elem, attr) {

                scope.columnsWidth = scope.options.columnsWidth;

                logService.component('groupColumnResizer', 'initialized');

                var minWidth = 65;	// width value for showing tooltip
                var columnsWidthSet = false;

                function toggleColumnNameTooltip(column, columnWidth) {
                    if (columnWidth <= minWidth && !column.hasClass('small-width')) {
                        column.addClass('small-width');
                    }
                    else if (columnWidth > minWidth && column.hasClass('small-width')) {
                        column.removeClass('small-width');
                    }
                }

                function setColumnsWidthAndNameTooltip() {
                    if (!columnsWidthSet) {
                        var columns = elem.find('.g-column');
                        var savedWidths = scope.columnsWidth;
                        //console.log('setColumnsWidthAndNameTooltip changes');
                        if (columns.length > 0 && columns.length === savedWidths.length) {
                            for (var i = 0; i < columns.length; i = i + 1) {
                                if (savedWidths[i] && !isNaN(savedWidths[i])) {
                                    $(columns[i]).width(savedWidths[i]);
                                    // if width small enough, show tooltip
                                    if (savedWidths[i] <= minWidth) {
                                        $(columns[i]).addClass('small-width');
                                    }
                                }
                            }
                            columnsWidthSet = true;
                        }
                    }
                }

                setTimeout(function () {

                    var workAreaElem = elem.parents('.g-workarea-wrap');

                    workAreaElem.width($(elem).parents('.entity-viewer-holder').width() - $(elem).parents('.g-wrapper').find('.g-filter-sidebar.main-sidebar').width());

                    var wrapperWidth = $('.g-columns-component.g-thead').width() - $('.g-cell-select.all').width();

                    //console.log('--------------------', wrapperWidth);
                    //console.log('--------------------', $(elem).parents('.g-table-section').width());

                    if (wrapperWidth < $(elem).parents('.g-table-section').width()) {
                        wrapperWidth = $(elem).parents('.g-table-section').width();
                        $(elem).width(wrapperWidth);
                    }

                    $(elem).find('.g-scroll-wrapper').width(wrapperWidth);
                    $(elem).find('.g-scrollable-area').width(wrapperWidth);

                }, 0);

                var resizeWorkarea = function () {
                    var workAreaElem = elem.parents('.g-workarea-wrap');
                    workAreaElem.width($(elem).parents('.entity-viewer-holder').width() - $(elem).parents('.g-wrapper').find('.g-filter-sidebar.main-sidebar').width());
                    var wrapperWidth = $(elem).find('.g-columns-component.g-thead').width() - $(elem).find('.g-cell-select.all').width();
                    $(elem).find('.g-scroll-wrapper').width(wrapperWidth);
                    $(elem).find('.g-scrollable-area').width(wrapperWidth);

                    resizeScrollableArea();
                    resize();
                };

                scope.$parent.triggerResize = resize;

                $('.filter-area-size-btn').click(function () {
                    //console.log('filter toggle working');
                    var filterArea = $(elem).parents('.g-wrapper').find('.g-filter-sidebar.main-sidebar');
                    if (filterArea.hasClass('min-filter')) {
                        filterArea.attr({
                            'min-width': '20px',
                            'width': '20px'
                        });
                        resizeWorkarea();
                        filterArea.addClass('min-filter');
                    }
                    else {
                        filterArea.attr({
                            'min-width': '239px',
                            'width': '235px'
                        });
                        resizeWorkarea();
                        filterArea.removeClass('min-filter');
                    }
                });

                function resizeScrollableArea() {
                    var columns;
                    var i;
                    var areaWidth = 0;
                    var columnMargins = 16;
                    var dropNewFieldWidth = 400;
                    columns = elem.find('.g-column');

                    for (i = 0; i < columns.length; i = i + 1) {
                        areaWidth = areaWidth + $(columns[i]).width() + columnMargins;
                    }
                    var wrapperWidth = $(elem).find('.g-columns-component.g-thead').width() - $(elem).find('.g-cell-select.all').width();
                    if (wrapperWidth < areaWidth + dropNewFieldWidth) {
                        $(elem).find('.g-scrollable-area').width(areaWidth + dropNewFieldWidth);
                        $(elem).width(areaWidth + dropNewFieldWidth + 24);
                    } else {
                        //$(elem).width(wrapperWidth);
                    }
                }


                var i, x, a;
                var tHead;
                var th;
                var tr;
                var thSliders;
                var td;

                var setThMinWidths = function (th) {
                    //var i, a;
                    // var lastColumn = th.length - 1;
                    // console.log('min width seted ', th.length, 'resizer columns ', [scope.columns]);
                    for (i = 0; i < th.length; i = i + 1) {
                        if (!$(th[i]).attr('min-width')) {
                            $(th[i]).attr('min-width', '20');
                        }
                    }
                };

                function resizeCells() {

                    tHead = $(elem).find('.g-thead');
                    th = tHead.find('.g-cell');
                    tr = $(elem).find('.g-row');

                    //var i, x;

                    for (i = 0; i < tr.length; i = i + 1) {
                        td = $(tr[i]).find('.g-cell-wrap');
                        for (x = 0; x < th.length; x = x + 1) {
                            (function (x) {
                                $(td[x]).css({width: $(th[x]).width() + 'px'});
                                //console.log('cell widths is ', $(td[x]).width(), $(th[x]).width());
                            }(x))
                        }
                    }
                }

                function resize() {

                    //console.log('resize', elem);

                    tHead = $(elem).find('.g-thead');
                    th = tHead.find('.g-cell');
                    tr = $(elem).find('.g-row');
                    thSliders = th.find('.resize-slider');

                    setThMinWidths(th);

                    $(thSliders).bind('mousedown', function (e) {
                        e.preventDefault();
                        e.stopPropagation();

                        var parent = $(this).parents('md-card.g-cell.g-column');
                        var width = parent.width();
                        var minWidth = parent.attr('min-width');
                        var newWidth;
                        var mouseDownLeft = e.clientX;

                        $(window).bind('mousemove', function (e) {
                            newWidth = e.clientX - mouseDownLeft;
                            resizeScrollableArea();
                            resizeCells();
                            //resizeScrollableArea();
                            parent.width(width + newWidth);
                            if (newWidth + width > minWidth) {
                                parent.width(width + newWidth);
                            }
                            toggleColumnNameTooltip(parent, parent.width());

                        });
                        $(window).bind('mouseup', function () {
                            $(window).unbind('mousemove');
                        });
                    });

                    //setTimeout(function () {
                    resizeCells();
                    //}, 100);

                    //console.log('th', th);
                }

                //console.log('options', scope.options);

                scope.$watch('options.lastUpdate', function () {

                    console.log('OPTIONS LAST UPDATE', scope.options.lastUpdate);

                    resizeScrollableArea();

                    resize();

                    setColumnsWidthAndNameTooltip();
                });

                //console.log('renderEventService', renderEventService);
                //console.log('renderEventService scope.options.entityType', scope.options.entityType);

                renderEventService.on(scope.options.entityType + ':ng-repeat:finished', resize);


                $(window).on('resize', function () {
                    resizeWorkarea();
                });

                scope.$on('$destroy', function(){
                    //console.log('destroy resize scope');
                    renderEventService.destroy(scope.options.entityType + ':ng-repeat:finished');

                })


            }
        }
    }

}());
},{"../../../../../core/services/logService":2,"../../services/renderEventService":380}],149:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var metaService = require('../../services/metaService');

    module.exports = function () {
        return {
            restrict: 'AE',
            scope: {
                items: '=',
                options: '='
            },
            templateUrl: 'views/directives/groupTable/columns-view.html',
            link: function (scope, elem, attrs) {

                scope.grouping = scope.options.grouping;
                scope.filters = scope.options.filters;
                scope.sorting = scope.options.sorting;
                scope.columns = scope.options.columns;
                scope.entityType = scope.options.entityType;
                scope.externalCallback = scope.options.externalCallback;
                scope.isReport = scope.options.isReport;


                logService.component('groupColumnResizer', 'initialized');


                var baseAttrs = [];
                var entityAttrs = [];
                if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(scope.entityType) === -1) {
                    baseAttrs = metaService.getBaseAttrs();
                }
                entityAttrs = metaService.getEntityAttrs(scope.entityType);

                scope.isAllSelected = false;

                scope.selectAllRows = function () {
                    scope.isAllSelected = !scope.isAllSelected;
                    scope.items.forEach(function (item) {
                        if (item.hasOwnProperty('groups')) {
                            item.selectedRow = scope.isAllSelected;
                            item.items.forEach(function (row) {
                                row.selectedRow = scope.isAllSelected;
                            })
                        } else {
                            item.selectedRow = scope.isAllSelected;
                        }
                    })
                };

                scope.isColumnFloat = function (column) {

                    if (column.value_type == 'float' || column.value_type == 20) {
                        return true
                    }

                    return false;
                };

                scope.sortHandler = function (column, sort) {
                    var i;
                    for (i = 0; i < scope.columns.length; i = i + 1) {
                        if (!scope.columns[i].options) {
                            scope.columns[i].options = {};
                        }
                        scope.columns[i].options.sort = null;
                    }
                    column.options.sort = sort;

                    if (column.hasOwnProperty('id')) {
                        scope.sorting.column.id = column.id;
                        scope.sorting.column.key = null;
                        scope.sorting.column.sort = sort;
                    } else {
                        scope.sorting.column.id = null;
                        scope.sorting.column.key = column.key;
                        scope.sorting.column.sort = sort;
                    }
                    scope.externalCallback({silent: true, options: {columns: scope.columns}});
                };

                scope.selectSubtotalType = function (column, type) {

                    if (!column.hasOwnProperty('report_settings')) {
                        column.report_settings = {};
                    }

                    if (column.report_settings.subtotal_formula_id == type) {
                        column.report_settings.subtotal_formula_id = null;
                    } else {
                        column.report_settings.subtotal_formula_id = type;
                    }

                    //console.log('scope.column11111s JSON', JSON.parse(JSON.stringify(column)));
                    //console.log('scope.column11111s JSON', JSON.parse(JSON.stringify(scope.columns)));

                    scope.externalCallback({silent: true, options: {columns: scope.columns}});
                };

                scope.checkSubtotalFormula = function (column, type) {

                    if (column.hasOwnProperty('report_settings') && column.report_settings) {
                        if (column.report_settings.subtotal_formula_id == type) {
                            return true;
                        }

                    }

                    return false

                };
                //
                //scope.$watchCollection('columns', function () {
                //
                //
                //    setTimeout(function () {
                //
                //        scope.externalCallback({silent: true, options: {columns: scope.columns}});
                //        scope.$apply();
                //
                //    }, 0)
                //});

                var dragAndDrop = {

                    init: function () {
                        this.dragula();
                        this.eventListeners();
                    },

                    eventListeners: function () {

                        this.dragula.on('over', function (elem, container, source) {
                            $(container).addClass('active');
                            $(container).on('mouseleave', function () {
                                $(this).removeClass('active');
                            })
                        });
                        this.dragula.on('drop', function (elem, target) {
                            $(target).removeClass('active');
                        });

                        this.dragula.on('dragend', function (el) {

                            scope.externalCallback({silent: true});

                        })
                    },

                    dragula: function () {
                        console.log('COLUMSN DRAGULA INIT?');

                        var items = [document.querySelector('.g-columns-holder')];
                        var i;
                        //var itemsElem = document.querySelectorAll('.g-columns-holder md-card');
                        //for (i = 0; i < itemsElem.length; i = i + 1) {
                        //    items.push(itemsElem[i]);
                        //}

                        this.dragula = dragula(items);
                    }
                };

                //
                //setTimeout(function () {
                //    dragAndDrop.init();
                //}, 500);

                scope.isSortable = function (column) {
                    var b, e;
                    if (baseAttrs && baseAttrs.length) {
                        for (b = 0; b < baseAttrs.length; b = b + 1) {
                            if (baseAttrs[b].key === column.key && baseAttrs[b].key !== 'notes') {
                                return true;
                            }
                        }
                    }
                    if (entityAttrs && entityAttrs.length) {
                        for (e = 0; e < entityAttrs.length; e = e + 1) {
                            if (entityAttrs[e].key === column.key) {
                                return true;
                            }
                        }
                    }

                    return false;
                };

                scope.removeColumn = function (column) {
                    if (column.id) {
                        scope.columns = scope.columns.map(function (item) {
                            if (item.id === column.id || item.key === column.key) {
                                item = undefined
                            }
                            return item
                        }).filter(function (item) {
                            return !!item;
                        });
                    }
                    if (column.key) {
                        scope.columns = scope.columns.map(function (item) {
                            if (item.key === column.key) {
                                return undefined
                            }
                            return item
                        }).filter(function (item) {
                            return !!item;
                        });
                    }
                    //console.log('remove', scope.columns);

                    //console.log('scope.columns', scope.columns)

                    //setTimeout(function () {
                    scope.externalCallback({silent: true, options: {columns: scope.columns}});
                    //}, 0)
                };

                scope.reportHideSubtotal = function (column) {

                    if (!column.hasOwnProperty('report_settings')) {
                        column.report_settings = {};
                    }

                    column.report_settings.hide_subtotal = !column.report_settings.hide_subtotal;

                }
            }
        }
    }


}());
},{"../../../../../core/services/logService":2,"../../services/metaService":375}],150:[function(require,module,exports){
/**
 * Created by sergey on 11.05.16.
 */
(function () {

	'use strict';

	var logService = require('../../../../../core/services/logService');

	module.exports = function () {
		return {
			restrict: 'A',
			link: function (scope, elem, attrs) {

				logService.component('gDialogDraggable', 'initialized');

				var dragger = $(elem).find('.md-toolbar-tools');
				var parent = $(elem).parent();

				//set md-dialog-contaner overflow to visible
				var dialogContainer = $(elem).parent('.md-dialog-container');
				dialogContainer.addClass('viewConstructorDialog');

				var posY = 0, posX = 0;
				var elemLeft = 0, elemTop = 0;
				var initMouseX = 0, initMouseY = 0;

				$(parent).width(400);
				$(parent).height($(elem).height());
				$(parent).css({left: "65%"});

				function mousemove(e) {

					posX = document.all ? window.event.clientX : e.pageX;
					posY = document.all ? window.event.clientY : e.pageY;
					//console.log('posX', posX);
					//console.log('elemLeft', elemLeft);
					//console.log(posX - elemLeft);
					//console.log(posY - elemTop);
					//console.log(initMouseX, initMouseY);

					// parent[0].style.left = (posX - elemLeft + 8) + 'px';
					// parent[0].style.top = (posY - elemTop - 8 - 150) + 'px';
					parent[0].style.left = (posX + elemLeft - initMouseX) + 'px';
					parent[0].style.top = (posY + elemTop - initMouseY) + 'px';
					// parent[0].style.left = ()

				}

				dragger.bind('mousedown', function (e) {
					e.preventDefault();
					e.stopPropagation();
					//console.log(parent);
					initMouseX = e.clientX;
					initMouseY = e.clientY;
					// if (elemLeft !== 0) {
						elemLeft = parent[0].offsetLeft;
						elemTop = parent[0].offsetTop;
						// elemLeft = posX - parent[0].offsetLeft;
						// elemTop = posY - parent[0].offsetTop;
					// }
					//console.log(elemLeft, elemTop);
					$(window).bind('mousemove', mousemove);

					$(window).bind('mouseup', function (e) {
						//console.log('unbind');
						$(window).unbind('mousemove');
					});
					return false;
				})
			}
		}
	}

}());
},{"../../../../../core/services/logService":2}],151:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function ($mdDialog) {
        return {
            restrict: 'AE',
            scope: {
                options: '='
            },
            templateUrl: 'views/directives/groupTable/grouping-view.html',
            link: function (scope, elem, attrs) {

                scope.grouping = scope.options.grouping;
                scope.filters = scope.options.filters;
                scope.columns = scope.options.columns;
                scope.sorting = scope.options.sorting;
                scope.folding = scope.options.folding;
                scope.entityType = scope.options.entityType;
                scope.externalCallback = scope.options.externalCallback;
                scope.isReport = scope.options.isReport;


                logService.component('groupGrouping', 'initialized');
                //console.log(' scope.grouping', scope.grouping);

                scope.sortHandler = function (group, sort) {
                    var i;
                    for (i = 0; i < scope.grouping.length; i = i + 1) {
                        if (!scope.grouping[i].options) {
                            scope.grouping[i].options = {};
                        }
                        scope.grouping[i].options.sort = null;
                    }
                    group.options.sort = sort;

                    if (group.hasOwnProperty('columnType') && group.columnType == 'custom-field') {
                        scope.sorting.group = {};
                        scope.sorting.group.id = null;
                        scope.sorting.group.key = group.name;
                        scope.sorting.group.sort = sort;
                    } else {

                        if (group.hasOwnProperty('id')) {
                            scope.sorting.group = {};
                            scope.sorting.group.id = group.id;
                            scope.sorting.group.key = null;
                            scope.sorting.group.sort = sort;
                        } else {
                            scope.sorting.group = {};
                            scope.sorting.group.id = null;
                            scope.sorting.group.key = group.key;
                            scope.sorting.group.sort = sort;
                        }
                    }
                    scope.externalCallback({silent: true, options: {grouping: scope.grouping}});
                };

                scope.openGroupSettings = function ($mdOpenMenu, ev) {
                    $mdOpenMenu(ev);
                };

                scope.$watchCollection('grouping', function () {


                    if (scope.isReport == true) {
                        scope.grouping.forEach(function (group) {

                            if (!group.hasOwnProperty('report_settings') && !group.report_settings) {
                                group.report_settings = {subtotal_type: 'area'};
                            } else {
                                if (group.report_settings.subtotal_type == undefined) {
                                    group.report_settings.subtotal_type = 'area';
                                }

                            }

                        })
                    }

                    setTimeout(function () {
                        scope.externalCallback({silent: true, options: {grouping: scope.grouping}});
                        scope.$apply();
                    }, 0)
                });

                scope.toggleGroupFold = function () {
                    scope.folding = !scope.folding;
                    setTimeout(function () {
                        scope.externalCallback({silent: true, options: {grouping: scope.grouping}});
                        scope.$apply();
                    }, 0)
                };

                scope.removeGroup = function (group) {
                    //console.log('grouping', scope.grouping);
                    //console.log('remove', group);
                    if (group.id) {
                        scope.grouping = scope.grouping.map(function (item) {
                            if (item.id === group.id) {
                                item = undefined
                            }
                            return item
                        }).filter(function (item) {
                            return !!item;
                        });
                    }
                    if (group.name) {
                        scope.grouping = scope.grouping.map(function (item) {
                            if (item.name === group.name) {
                                item = undefined
                            }
                            return item
                        }).filter(function (item) {
                            return !!item;
                        });
                    }
                    //console.log('grouping after', scope.grouping);
                    setTimeout(function () {
                        scope.externalCallback({silent: true, options: {grouping: scope.grouping}});
                    }, 0)
                };

                scope.reportSetSubtotalType = function (group, type, $index) {

                    if (!group.hasOwnProperty('report_settings') || group.report_settings == undefined) {
                        group.report_settings = {};
                    }

                    if (type == 'area') {

                        scope.grouping.forEach(function (groupItem, $itemIndex) {

                            if ($itemIndex > $index) {
                                groupItem.disableLineSubtotal = true;

                                //console.log('group', groupItem);

                                if (groupItem.hasOwnProperty('report_settings')) {

                                    if (groupItem.report_settings.subtotal_type == 'line') {
                                        groupItem.report_settings.subtotal_type = false;
                                    }
                                }
                            } else {
                                if ($itemIndex < $index) {
                                    groupItem.disableLineSubtotal = false;
                                }
                            }


                        });
                    }

                    if (type == 'line') {

                        scope.grouping.forEach(function (groupItem, $itemIndex) {

                            if ($itemIndex > $index) {
                                groupItem.disableLineSubtotal = false;
                            }

                        });
                    }

                    if (group.report_settings.subtotal_type == type) {
                        group.report_settings.subtotal_type = false;
                    } else {
                        group.report_settings.subtotal_type = type;
                    }


                    scope.externalCallback({silent: true, options: {grouping: scope.grouping}});
                };

                scope.isReportGroupHaveExtSettings = function (group, $index, subtotalType) {

                    var haveAccess = false;
                    var preInitOffset = 0;
                    var initIndex = 0;

                    scope.grouping.forEach(function (groupItem, $groupItemIndex) {

                        if (scope.columns.length > $groupItemIndex) {
                            if (groupItem.hasOwnProperty('id')) {
                                if (groupItem.id == scope.columns[$groupItemIndex - preInitOffset].id) {
                                    initIndex = preInitOffset;
                                } else {
                                    preInitOffset = preInitOffset + 1;
                                }
                            } else {
                                if (groupItem.hasOwnProperty('key') && scope.columns[$groupItemIndex] && scope.columns[$groupItemIndex].hasOwnProperty('key')) {

                                    if (groupItem.key == scope.columns[$groupItemIndex - preInitOffset].key) {
                                        initIndex = preInitOffset;
                                    } else {
                                        preInitOffset = preInitOffset + 1;
                                    }
                                } else {
                                    preInitOffset = preInitOffset + 1;
                                }
                            }
                        }

                    });

                    if (scope.columns.length > $index) {
                        if (group.hasOwnProperty('id') && scope.columns[$index - initIndex] && scope.columns[$index - initIndex].hasOwnProperty('id')) {
                            if (group.id == scope.columns[$index - initIndex].id) {
                                haveAccess = true;
                            }
                        } else {
                            if (group.hasOwnProperty('key') && scope.columns[$index - initIndex] && scope.columns[$index - initIndex].hasOwnProperty('key')) {
                                if (group.key == scope.columns[$index - initIndex].key) {
                                    haveAccess = true;
                                }
                            }

                        }
                    }

                    if (group.hasOwnProperty('disableLineSubtotal') && group.disableLineSubtotal == true && subtotalType == 'line') {
                        haveAccess = false;
                    }

                    return haveAccess;

                };

                scope.openModalSettings = function (ev) {

                    if (scope.isReport) {

                        if (scope.options.entityType == 'balance-report' || scope.options.entityType == 'pnl-report') {

                            $mdDialog.show({
                                controller: 'gModalReportController as vm', // ../directives/gTable/gModalComponents
                                templateUrl: 'views/directives/groupTable/modal-report-view.html',
                                parent: angular.element(document.body),
                                targetEvent: ev,
                                locals: {
                                    callback: scope.externalCallback,
                                    parentScope: scope
                                }
                            });
                        } else {

                            if (scope.options.entityType == 'performance-report') {

                                $mdDialog.show({
                                    controller: 'gModalReportPerformanceController as vm', // ../directives/gTable/gModalComponents
                                    templateUrl: 'views/directives/groupTable/modal-report-performance-view.html',
                                    parent: angular.element(document.body),
                                    targetEvent: ev,
                                    locals: {
                                        callback: scope.externalCallback,
                                        parentScope: scope
                                    }
                                });
                            } else {

                                if (scope.options.entityType == 'cash-flow-projection-report') {
                                    $mdDialog.show({
                                        controller: 'gModalReportCashFlowProjectionController as vm', // ../directives/gTable/gModalComponents
                                        templateUrl: 'views/directives/groupTable/modal-report-cash-flow-projection-view.html',
                                        parent: angular.element(document.body),
                                        targetEvent: ev,
                                        locals: {
                                            callback: scope.externalCallback,
                                            parentScope: scope
                                        }
                                    });
                                } else {

                                    $mdDialog.show({
                                        controller: 'gModalReportTransactionController as vm', // ../directives/gTable/gModalComponents
                                        templateUrl: 'views/directives/groupTable/modal-report-transaction-view.html',
                                        parent: angular.element(document.body),
                                        targetEvent: ev,
                                        locals: {
                                            callback: scope.externalCallback,
                                            parentScope: scope
                                        }
                                    });
                                }
                            }
                        }
                    } else {
                        $mdDialog.show({
                            controller: 'gModalController as vm', // ../directives/gTable/gModalComponents
                            templateUrl: 'views/directives/groupTable/modal-view.html',
                            parent: angular.element(document.body),
                            targetEvent: ev,
                            locals: {
                                callback: scope.externalCallback,
                                parentScope: scope
                            }
                        });
                    }
                }
            }
        }
    }


}());
},{"../../../../../core/services/logService":2}],152:[function(require,module,exports){
/**
 * Created by szhitenev on 20.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {
                options: '='
            },
            link: function (scope, elem, attrs) {

                var lastMouseMoveEvent = null;

                function setDefaultHeights() {

                    //workAreaHeight = $(window).height() - $('.header').first().height();
                    //workAreaWithoutGrouping = workAreaHeight - $('.g-wrapper .g-grouping-section').first().height(); // margin 4px
                    //$('.g-filter-sidebar').first().height(workAreaHeight);
                    //$('.g-wrapper .g-table-section').first().height(workAreaWithoutGrouping);
                    //$('.g-additions').first().height($(window).height() - workAreaHeight);
                    //$('group-table-body').first().css('height', 'auto');

                    var upperFilterSidebar = $(elem).find('.g-filter-sidebar').first();
                    var upperTableSection = $(elem).find('.g-wrapper .g-table-section').first();
                    //var additions = $(elem).find('.g-additions').first();
                    var upperGroupTableBody = $(elem).find('group-table-body').first();
                    var upperGroupSection = $(elem).find('.g-wrapper .g-grouping-section').first();

                    workAreaHeight = $(elem).parents('.entity-viewer-holder').height();
                    workAreaWithoutGrouping = workAreaHeight - upperGroupSection.height();

                    upperFilterSidebar.height(workAreaHeight);
                    upperTableSection.height(workAreaWithoutGrouping);
                    //additions.height($(window).height() - workAreaHeight);
                    upperGroupTableBody.css('height', 'auto');


                }

                function setSplitHeights() {

                    //workAreaHeight = Math.floor(($(window).height() - $('.header').height()) / 2);
                    //workAreaWithoutGrouping = Math.floor((workAreaHeight - $('.g-wrapper .g-grouping-section').first().height()));

                    //$('.g-filter-sidebar').first().height(workAreaHeight);
                    //$('.g-wrapper .g-table-section').first().height(workAreaWithoutGrouping);


                    //$('.g-additions').height(workAreaHeight);
                    //$('.g-additions-workarea .g-table-section').last().height(workAreaHeight);
                    //$('.g-additions-workarea .group-table-body').last().height(workAreaHeight);

                    $('.g-height-slider').bind('mousedown', function (e) {

                        var mouseMoveY;
                        var spaceLeft;
                        var headerBoxHeight = $('.header').height();
                        var mainAreaBox = $('.g-workarea.main-area .g-table-section').first();
                        var mainAreaSidebarBox = $('.g-filter-sidebar.main-sidebar').first();
                        var groupingSectionBoxHeight = $('.g-wrapper .g-grouping-section').height();

                        var additionsBox = $('.g-additions');
                        var additionsBoxTableSection = $('.g-additions-workarea .g-table-section').last();
                        var additionsBoxSidebarBox = $('.g-additions-workarea .g-filter-sidebar').last();

                        var handler = function (e) {

                            lastMouseMoveEvent = e;

                            spaceLeft = $(window).height() - headerBoxHeight;
                            mouseMoveY = e.clientY;

                            $(elem).find('.mCSB_scrollTools_vertical').css({
                                position: 'absolute',
                                top: 0,
                                left: 'auto'
                            });


                            // WTF IS 88???

                            additionsBox.height(spaceLeft - mouseMoveY + 88 - 15);
                            additionsBoxTableSection.height(spaceLeft - mouseMoveY + 88);
                            additionsBoxSidebarBox.height(spaceLeft - mouseMoveY + 88);
                            $('.g-workarea.main-area .group-table-body').first().height(mouseMoveY - $('.header').height() - $('.g-columns-component.g-thead').height() - 88);
                            $('.g-additions-workarea .group-table-body').last().height($(window).height() - mouseMoveY - $('.g-additions-workarea .g-columns-component.g-thead').height());
                            mainAreaBox.height(mouseMoveY - headerBoxHeight - 88);
                            if (groupingSectionBoxHeight < (mouseMoveY + groupingSectionBoxHeight - headerBoxHeight - 88)) {
                                mainAreaSidebarBox.height(mouseMoveY + groupingSectionBoxHeight - headerBoxHeight - 88);
                            }
                        };


                        $(window).bind('mousemove', function (e) {
                            handler(e);
                            $(window).bind('mouseup', function () {
                                $(window).unbind('mousemove');
                            })
                        });

                    })


                    var upperGroupSection = $(elem).find('.g-wrapper .g-grouping-section').first();
                    var upperFilterSidebar = $(elem).find('.g-filter-sidebar').first();
                    var upperTableSection = $(elem).find('.g-wrapper .g-table-section').first();
                    var additions = $(elem).find('.g-additions').first();
                    var additionsTableSection = $(elem).find('.g-additions-workarea .g-table-section').last();
                    var additionsAdditionsTableBody = $(elem).find('.g-additions-workarea .g-table-section').last();

                    workAreaHeight = Math.floor($(elem).parents('.entity-viewer-holder').height() / 2);
                    workAreaWithoutGrouping = Math.floor((workAreaHeight - upperGroupSection.height()));

                    upperFilterSidebar.height(workAreaHeight);
                    upperTableSection.height(workAreaWithoutGrouping);

                    additions.height(workAreaHeight);
                    additionsTableSection.height(workAreaHeight);
                    additionsAdditionsTableBody.height(workAreaHeight);

                }

                function resolveHeight() {
                    if (scope.additionsStatus.reportWizard || scope.additionsStatus.editor || scope.additionsStatus.permissionEditor) {
                        setTimeout(function () {
                            setSplitHeights()
                        }, 100);
                    } else {
                        if (!scope.additionsStatus.reportWizard && !scope.additionsStatus.editor && !scope.additionsStatus.permissionEditor) {
                            setDefaultHeights()
                        }
                    }
                }

                if (scope.options.isRootEntityViewer == true) { // only root entityViewer has gHeightSlider

                    scope.additionsStatus = scope.options.additionsStatus;

                    logService.component('groupHeightAligner', 'initialized');

                    var workAreaHeight;
                    var workAreaWithoutGrouping;


                    scope.$watchCollection('additionsStatus', function () {

                        //console.log('scope.additionsStatus', scope.additionsStatus);

                        resolveHeight()
                    });

                    // THAT DUPLICATED NEEDS FOR SPLIT PANEL PROPER HEIGHT CALCULATION

                    setInterval(function () {

                        //if ($('.g-additions-workarea .g-filter-sidebar').length) {

                            var mouseMoveY;
                            var spaceLeft;
                            var headerBoxHeight = $('.header').height();
                            var mainAreaBox = $('.g-workarea.main-area .g-table-section').first();
                            var mainAreaSidebarBox = $('.g-filter-sidebar.main-sidebar').first();
                            var groupingSectionBoxHeight = $('.g-wrapper .g-grouping-section').height();

                            var additionsBox = $('.g-additions');
                            var additionsBoxTableSection = $('.g-additions-workarea .g-table-section').last();
                            var additionsBoxSidebarBox = $('.g-additions-workarea .g-filter-sidebar').last();

                            var handler = function (e) {

                                spaceLeft = $(window).height() - headerBoxHeight;
                                mouseMoveY = e.clientY;

                                $(elem).find('.mCSB_scrollTools_vertical').css({
                                    position: 'absolute',
                                    top: 0,
                                    left: 'auto'
                                });

                                // WTF IS 88???

                                additionsBox.height(spaceLeft - mouseMoveY + 88 - 15);
                                additionsBoxTableSection.height(spaceLeft - mouseMoveY + 88);
                                $('.g-additions-workarea .g-filter-sidebar').last().height(spaceLeft - mouseMoveY + 88);
                                $('.g-workarea.main-area .group-table-body').first().height(mouseMoveY - $('.header').height() - $('.g-columns-component.g-thead').height() - 88);
                                $('.g-additions-workarea .group-table-body').last().height($(window).height() - mouseMoveY - $('.g-additions-workarea .g-columns-component.g-thead').height());
                                mainAreaBox.height(mouseMoveY - headerBoxHeight - 88);
                                if (groupingSectionBoxHeight < (mouseMoveY + groupingSectionBoxHeight - headerBoxHeight - 88)) {
                                    mainAreaSidebarBox.height(mouseMoveY + groupingSectionBoxHeight - headerBoxHeight - 88);
                                }

                            };

                            if (lastMouseMoveEvent == null) {
                                lastMouseMoveEvent = new Event('mousemove');
                                lastMouseMoveEvent._is_default_event = true;
                            }

                            if (lastMouseMoveEvent.hasOwnProperty('_is_default_event')) {
                                if ($('.g-additions-workarea .g-filter-sidebar').length) {
                                    lastMouseMoveEvent.clientY = Math.floor(($(window).height() - $('.header').height()) / 2);
                                }
                            }

                            handler(lastMouseMoveEvent);
                        //} else {
                        //    lastMouseMoveEvent = null;
                        //}

                    }, 100);


                    $(window).on('resize', function () {
                        resolveHeight();
                    });

                }
            }
        }
    }

}());
},{"../../../../../core/services/logService":2}],153:[function(require,module,exports){
/**
 * Created by szhitenev on 03.06.2016.
 */

(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {},
            link: function (scope, elem, attrs) {

                logService.component('groupHorizontalScroll', 'initialized');

                //$(elem).mCustomScrollbar({axis: "x", callbacks: {
                //    onInit: function(){},
                //    onOverflowX: function(){
                //        //console.log("HORIZONTAL SCROLL");
                //        //console.log('test');
                //    },
                //    whileScrolling: function(){
                //
                //    }
                //
                //}});

            }
        }
    }

}());
},{"../../../../../core/services/logService":2}],154:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var uiService = require('../../services/uiService');

    var metaService = require('../../services/metaService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');
    var dynamicAttributesForReportsService = require('../../services/groupTable/dynamicAttributesForReportsService');

    module.exports = function ($scope, $mdDialog, parentScope, callback) {

        logService.controller('gModalController', 'initialized');

        var vm = this;
        vm.readyStatus = {content: false};

        vm.tabs = [];
        vm.entityType = parentScope.entityType;

        console.log('parentScope', parentScope);
        console.log('vm', vm);

        logService.property('vm.entityType', vm.entityType);

        //uiService.getListLayout(vm.entityType).then(function (data) {
        //	logService.collection('DATA', data);
        //	vm.tabs = data.results[0].data.modalDrag;
        //	logService.collection('vm.tabs!!!!!!!!!!!!!', vm.tabs);
        //
        //	$scope.$apply();
        //});

        vm.general = [];
        vm.attrs = [];
        vm.baseAttrs = [];
        vm.entityAttrs = [];
        vm.custom = [];

        vm.isReport = parentScope.isReport;

        vm.tabAttrsReady = false;

        // refactore this block
        function restoreAttrs() {
            function fillTabWithAttrs() {
                var i, x;
                for (i = 0; i < vm.tabs.length; i = i + 1) {
                    if (!vm.tabs[i].attrs) {
                        vm.tabs[i].attrs = [];

                        for (x = 0; x < vm.tabs[i].layout.fields.length; x = x + 1) {
                            ;
                            if (vm.tabs[i].layout.fields[x].type === 'field') {
                                if (vm.tabs[i].layout.fields[x].hasOwnProperty('id')) {
                                    vm.tabs[i].attrs.push({
                                        id: vm.tabs[i].layout.fields[x].id
                                    })
                                } else {
                                    if (vm.tabs[i].layout.fields[x].type === 'field') {
                                        if (vm.tabs[i].layout.fields[x].name != 'Labeled Line' && vm.tabs[i].layout.fields[x].name != 'Line') {
                                            vm.tabs[i].attrs.push({
                                                name: vm.tabs[i].layout.fields[x].name
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //console.log('vm.tabs[i].attrs', vm.tabs[0].attrs)
            }

            function fillTabAttrs() {

                var a, t, c, b, e;
                var tab, tabAttr, attr, baseAttr, attributeIsExist, entityAttr;
                //console.log('METHOD: restoreAttrs, data: vm.tabs, value: ', vm.tabs);
                //console.log('METHOD: restoreAttrs, data: vm.attrs, value: ', vm.attrs);
                for (t = 0; t < vm.tabs.length; t = t + 1) {
                    tab = vm.tabs[t];
                    for (c = 0; c < tab.attrs.length; c = c + 1) {
                        tabAttr = tab.attrs[c];
                        attributeIsExist = false;
                        if (tabAttr.hasOwnProperty('id')) {
                            for (a = 0; a < vm.attrs.length; a = a + 1) {
                                attr = vm.attrs[a];
                                if (tabAttr.id === attr.id) {
                                    vm.tabs[t].attrs[c] = attr;
                                    attributeIsExist = true;
                                }
                            }
                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        } else {
                            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                                baseAttr = vm.baseAttrs[b];
                                if (tabAttr.name === baseAttr.name) {
                                    vm.tabs[t].attrs[c] = baseAttr;
                                    attributeIsExist = true;
                                }
                            }
                            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                                entityAttr = vm.entityAttrs[e];
                                if (tabAttr.name === entityAttr.name) {
                                    vm.tabs[t].attrs[c] = entityAttr;
                                    attributeIsExist = true;
                                }
                            }

                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
            }

            fillTabWithAttrs();
            fillTabAttrs();
            vm.tabAttrsReady = true;
        }

        // end refactore

        var columns = parentScope.columns;
        var currentColumnsWidth = parentScope.columns.length;
        var filters = parentScope.filters;
        var grouping = parentScope.grouping;

        var attrsList = [];

        $('body').addClass('drag-dialog'); // hide backdrop
        vm.getAttributes = function () {

            if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(vm.entityType) === -1) {
                vm.baseAttrs = metaService.getBaseAttrs();
            }

            vm.entityAttrs = metaService.getEntityAttrs(vm.entityType);

            balanceReportCustomAttrService.getList().then(function (data) {
                vm.custom = data.results;
                vm.custom.forEach(function (customItem) {
                    customItem.columnType = 'custom-field';
                });
                restoreAttrs();
                syncAttrs();

                $scope.$apply();
            });

            if (parentScope.isReport == true) {

                vm.attrs = [];
                dynamicAttributesForReportsService.getDynamicAttributes().then(function (data) {
                    vm.attrs = data;

                    attrsList = vm.attrs.concat(vm.baseAttrs);
                    attrsList = attrsList.concat(vm.entityAttrs);
                    restoreAttrs();
                    syncAttrs();

                    console.log('report balance new custom attr is', vm.attrs);
                    vm.readyStatus.content = true;
                    $scope.$apply();
                });

            } else {
                return attributeTypeService.getList(vm.entityType).then(function (data) {
                    vm.attrs = data.results;
                    attrsList = vm.attrs.concat(vm.baseAttrs);
                    attrsList = attrsList.concat(vm.entityAttrs);
                    restoreAttrs();
                    syncAttrs();
                    // logService.collection('attrsList!!!!!!!!!', attrsList);
                    vm.readyStatus.content = true;
                    $scope.$apply();
                })
            }

        };

        vm.getAttributes();

        vm.checkAreaAccessibility = function (item, type) {
            if (type === 'group') {
                if (['notes', 'accounts', 'responsibles', 'counterparties', 'transaction_types', 'portfolios', 'tags', 'content_types'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
            else {
                if (['notes'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
        };

        parentScope.$watch('options.columns', function () {
            if (vm.tabAttrsReady) {
                columns = parentScope.options.columns;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.filters', function () {
            if (vm.tabAttrsReady) {
                filters = parentScope.options.filters;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.grouping', function () {
            if (vm.tabAttrsReady) {
                grouping = parentScope.options.grouping;
                syncAttrs();
                callback({silent: true});
            }
        });

        var syncAttrs = function () {
            syncTypeAttrs(vm.baseAttrs);
            syncTypeAttrs(vm.entityAttrs);
            syncTypeAttrs(vm.attrs);
            syncTypeAttrs(vm.custom);
        };

        var updateAttrs = function () {
            console.log('gModalComponents columns ', columns);

            updateTypeAttrs(vm.baseAttrs);
            updateTypeAttrs(vm.entityAttrs);
            updateTypeAttrs(vm.attrs);
            updateTypeAttrs(vm.custom);

            addColumn();

        };

        function syncTypeAttrs(attrs) {
            var i;
            for (i = 0; i < attrs.length; i = i + 1) {
                attrs[i].columns = false;
                attrs[i].filters = false;
                attrs[i].groups = false;
                columns.map(function (item) {
                    //console.log('item', item);
                    //console.log('attrs[i]', attrs[i]);
                    if (attrs[i].name === item.name) {
                        attrs[i].columns = true;
                    }
                    return item;
                });
                filters.map(function (item) {
                    if (attrs[i].name === item.name) {
                        attrs[i].filters = true;
                    }
                    return item;
                });
                grouping.map(function (item) {
                    if (item.hasOwnProperty('key')) {
                        if (attrs[i].key === item.key) {
                            attrs[i].groups = true;
                        }
                    } else {
                        if (attrs[i].name === item.name) {
                            attrs[i].groups = true;
                        }
                    }
                    return item;
                });
            }
        }

        function updateTypeAttrs(typeAttrs) {
            var i, c, g, f;
            var columnExist, groupExist, filterExist;

            for (i = 0; i < typeAttrs.length; i = i + 1) {
                columnExist = false;
                groupExist = false;
                filterExist = false;
                for (c = 0; c < columns.length; c = c + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === columns[c].key) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === columns[c].name) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
                if (!columnExist) {
                    if (typeAttrs[i].columns === true) {
                        columns.push(typeAttrs[i]);
                    }
                }

                /////// GROUPING

                for (g = 0; g < grouping.length; g = g + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === grouping[g].key) {
                            groupExist = true;
                            if (typeAttrs[i].groups === false) {
                                grouping.splice(g, 1);
                                g = g - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].id === grouping[g].id) {
                            groupExist = true;
                            if (typeAttrs[i].groups === false) {
                                grouping.splice(g, 1);
                                g = g - 1;
                            }
                        }
                    }
                }
                if (!groupExist) {
                    if (typeAttrs[i].groups === true) {
                        grouping.push(typeAttrs[i]);
                    }
                }

                /////// FILTERING

                for (f = 0; f < filters.length; f = f + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === filters[f].key) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === filters[f].name) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    }
                }
                if (!filterExist) {
                    if (typeAttrs[i].filters === true) {
                        filters.push(typeAttrs[i]);
                    }
                }
            }

            // console.log('attributes in modal ', vm.attrs, vm.baseAttrs, vm.entityAttrs, parentScope);
        }

        vm.updateAttrs = function () {
            updateAttrs();
            callback({silent: true});
        };

        vm.cancel = function () {
            $('body').removeClass('drag-dialog');
            $mdDialog.cancel();
        };

        var dragAndDrop = {

            init: function () {
                this.dragula();
                this.eventListeners();
            },

            eventListeners: function () {
                var that = this;
                var exist = false;
                this.dragula.on('over', function (elem, container, source) {
                    $(container).addClass('active');
                    $(container).on('mouseleave', function () {
                        $(this).removeClass('active');
                    })

                });
                this.dragula.on('drop', function (elem, target) {
                    //console.log('here?', target); //TODO fallback to ids instead of name/key
                    $(target).removeClass('active');
                    var name = $(elem).html();
                    var i;

                    //console.log('elem111111111111111111111111111111', elem);
                    //console.log('columns111111111111111111111111111111', columns);
                    //console.log('grouping111111111111111111111111111111', grouping);
                    //console.log('filters111111111111111111111111111111', filters);

                    exist = false;
                    if (target === document.querySelector('#columnsbag')) {
                        for (i = 0; i < columns.length; i = i + 1) {
                            if (columns[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#groupsbag')) {
                        for (i = 0; i < grouping.length; i = i + 1) {
                            if (grouping[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#filtersbag .drop-new-filter')) {
                        for (i = 0; i < filters.length; i = i + 1) {
                            if (filters[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (!exist) {
                        var a;
                        if (target === document.querySelector('#columnsbag')) {
                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    columns.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#groupsbag')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    grouping.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#filtersbag .drop-new-filter')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    filters.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        $scope.$apply();
                    }
                    $scope.$apply();
                });

                this.dragula.on('dragend', function (el) {
                    $scope.$apply();
                    $(el).remove();
                })
            },

            dragula: function () {
                var items = [document.querySelector('#columnsbag'), document.querySelector('#groupsbag'), document.querySelector('#filtersbag .drop-new-filter')];
                var i;
                var itemsElem = document.querySelectorAll('#dialogbag .g-modal-draggable-card');
                for (i = 0; i < itemsElem.length; i = i + 1) {
                    items.push(itemsElem[i]);
                }

                this.dragula = dragula(items,
                    {
                        copy: true
                    });
            }
        };

        var addColumn = function () {
            if (currentColumnsWidth < columns.length) {
                metaService.columnsWidthGroups(true);
            }
            else {
                metaService.columnsWidthGroups(false);
            }
        };

        setTimeout(function () {
            dragAndDrop.init()
        }, 500);

        vm.MABtnVisibility = function (entityType) {
            //console.log('custom entity type', entityType);
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        }
    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/groupTable/dynamicAttributesForReportsService":324,"../../services/metaService":375,"../../services/reports/balanceReportCustomAttrService":383,"../../services/uiService":397}],155:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var uiService = require('../../services/uiService');

    var metaService = require('../../services/metaService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');
    var dynamicAttributesForReportsService = require('../../services/groupTable/dynamicAttributesForReportsService');

    module.exports = function ($scope, $mdDialog, parentScope, callback) {

        logService.controller('gModalController', 'initialized');

        var vm = this;
        vm.readyStatus = {content: false};

        vm.tabs = [];
        vm.entityType = parentScope.entityType;

        //console.log('parentScope', parentScope);
        //console.log('vm', vm);

        logService.property('vm.entityType', vm.entityType);

        vm.general = [];
        vm.attrs = [];
        vm.baseAttrs = [];
        vm.entityAttrs = [];
        vm.custom = [];

        vm.instrumentDynamicAttrs = [];
        vm.accountDynamicAttrs = [];
        vm.portfolioDynamicAttrs = [];

        vm.isReport = parentScope.isReport;

        vm.tabAttrsReady = false;

        vm.toggleAll = function ($event, checkboxType) {

            var parent = $($event.target).parent().parent();
            var checkboxes = parent.find('.g-checkbox-row div md-checkbox');

            var i;
            var checkbox;

            for (i = 0; i < checkboxes.length; i = i + 1) {

                (function (index) {


                    //console.log('checkbox', checkbox);

                    setTimeout(function () {

                        //console.log('12312331232', checkbox);

                        if (checkboxType == 'columns' && !$(checkboxes[index]).hasClass('md-g-green') && !$(checkboxes[index]).hasClass('md-primary')) {

                            checkboxes[index].dispatchEvent(new Event('click'))

                        }

                        if (checkboxType == 'groups' && $(checkboxes[index]).hasClass('md-g-green')) {

                            checkboxes[index].dispatchEvent(new Event('click'))

                        }

                        if (checkboxType == 'filters' && $(checkboxes[index]).hasClass('md-primary')) {


                            checkboxes[index].dispatchEvent(new Event('click'))

                        }

                        $scope.$apply();

                    }, 1);
                })(i);
            }


        };

        // refactore this block
        function restoreAttrs() {
            function fillTabWithAttrs() {
                var i, x;
                for (i = 0; i < vm.tabs.length; i = i + 1) {
                    if (!vm.tabs[i].attrs) {
                        vm.tabs[i].attrs = [];

                        for (x = 0; x < vm.tabs[i].layout.fields.length; x = x + 1) {
                            ;
                            if (vm.tabs[i].layout.fields[x].type === 'field') {
                                if (vm.tabs[i].layout.fields[x].hasOwnProperty('id')) {
                                    vm.tabs[i].attrs.push({
                                        id: vm.tabs[i].layout.fields[x].id
                                    })
                                } else {
                                    if (vm.tabs[i].layout.fields[x].type === 'field') {
                                        if (vm.tabs[i].layout.fields[x].name != 'Labeled Line' && vm.tabs[i].layout.fields[x].name != 'Line') {
                                            vm.tabs[i].attrs.push({
                                                name: vm.tabs[i].layout.fields[x].name
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //console.log('vm.tabs[i].attrs', vm.tabs[0].attrs)
            }

            function fillTabAttrs() {

                var a, t, c, b, e;
                var tab, tabAttr, attr, baseAttr, attributeIsExist, entityAttr;
                //console.log('METHOD: restoreAttrs, data: vm.tabs, value: ', vm.tabs);
                //console.log('METHOD: restoreAttrs, data: vm.attrs, value: ', vm.attrs);
                for (t = 0; t < vm.tabs.length; t = t + 1) {
                    tab = vm.tabs[t];
                    for (c = 0; c < tab.attrs.length; c = c + 1) {
                        tabAttr = tab.attrs[c];
                        attributeIsExist = false;
                        if (tabAttr.hasOwnProperty('id')) {
                            for (a = 0; a < vm.attrs.length; a = a + 1) {
                                attr = vm.attrs[a];
                                if (tabAttr.id === attr.id) {
                                    vm.tabs[t].attrs[c] = attr;
                                    attributeIsExist = true;
                                }
                            }
                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        } else {
                            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                                baseAttr = vm.baseAttrs[b];
                                if (tabAttr.name === baseAttr.name) {
                                    vm.tabs[t].attrs[c] = baseAttr;
                                    attributeIsExist = true;
                                }
                            }
                            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                                entityAttr = vm.entityAttrs[e];
                                if (tabAttr.name === entityAttr.name) {
                                    vm.tabs[t].attrs[c] = entityAttr;
                                    attributeIsExist = true;
                                }
                            }

                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
            }

            fillTabWithAttrs();
            fillTabAttrs();
            vm.tabAttrsReady = true;
        }

        // end refactore

        var columns = parentScope.options.columns;
        var currentColumnsWidth = parentScope.columns.length;
        var filters = parentScope.options.filters;
        var grouping = parentScope.options.grouping;

        var attrsList = [];

        $('body').addClass('drag-dialog'); // hide backdrop

        vm.getAttributes = function () {

            if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(vm.entityType) === -1) {
                vm.baseAttrs = metaService.getBaseAttrs();
            }

            //vm.entityAttrs = metaService.getEntityAttrs(vm.entityType);

            vm.transactionAttrs = metaService.getEntityAttrs('transaction-report').map(function (item) {
                item.name = 'Transaction.' + item.name;
                return item;
            });

            vm.cashFlowProjectionAttrs = metaService.getEntityAttrs('cash-flow-projection-report').map(function (item) {
                item.name = 'Cash flow.' + item.name;
                return item;
            });

            vm.portfolioAttrs = metaService.getEntityAttrs('portfolio').map(function (item) {
                item.name = 'Portfolio.' + item.name;
                item.attribute_entity = 'portfolio';
                item.key = 'portfolio_object_' + item.key;
                return item;
            });

            vm.instrumentAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Instrument.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'instrument_object_' + item.key;
                return item;
            });

            vm.responsibleAttrs = metaService.getEntityAttrs('responsible').map(function (item) {
                item.name = 'Responsible.' + item.name;
                item.attribute_entity = 'responsible';
                item.key = 'responsible_object_' + item.key;
                return item;
            });

            vm.counterpartyAttrs = metaService.getEntityAttrs('counterparty').map(function (item) {
                item.name = 'Counterparty.' + item.name;
                item.attribute_entity = 'counterparty';
                item.key = 'counterparty_object_' + item.key;
                return item;
            });


            // instruments

            vm.linkedInstrumentAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Linked instrument.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'linked_instrument_object_' + item.key;
                return item;
            });

            vm.allocationBalanceAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Allocation balance.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'allocation_balance_object_' + item.key;
                return item;
            });

            vm.allocationPlAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Allocation P&L.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'allocation_pl_object_' + item.key;
                return item;
            });

            // currencies

            vm.transactionCurrencyAttrs = metaService.getEntityAttrs('currency').map(function (item) {
                item.name = 'Transaction currency.' + item.name;
                item.attribute_entity = 'currency';
                item.key = 'transaction_currency_object_' + item.key;
                return item;
            });

            vm.settlementCurrencyAttrs = metaService.getEntityAttrs('currency').map(function (item) {
                item.name = 'Settlement currency.' + item.name;
                item.attribute_entity = 'currency';
                item.key = 'settlement_currency_object_' + item.key;
                return item;
            });


            // accounts

            vm.accountPositionAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account Position.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_position_object_' + item.key;
                return item;
            });

            vm.accountCashAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account Cash.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_cash_object_' + item.key;
                return item;
            });

            vm.accountInterimAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account interim.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_interim_object_' + item.key;
                return item;
            });


            // strategies

            vm.strategy1cashAttrs = metaService.getEntityAttrs('strategy-1').map(function (item) {
                item.name = 'Strategy1 Cash.' + item.name;
                item.key = 'strategy1_cash_object_' + item.key;
                return item;
            });
            vm.strategy1positionAttrs = metaService.getEntityAttrs('strategy-1').map(function (item) {
                item.name = 'Strategy1 Position.' + item.name;
                item.key = 'strategy1_position_object_' + item.key;
                return item;
            });

            vm.strategy2cashAttrs = metaService.getEntityAttrs('strategy-2').map(function (item) {
                item.name = 'Strategy2 Cash.' + item.name;
                item.key = 'strategy2_cash_object_' + item.key;
                return item;
            });
            vm.strategy2positionAttrs = metaService.getEntityAttrs('strategy-2').map(function (item) {
                item.name = 'Strategy2 Position.' + item.name;
                item.key = 'strategy2_position_object_' + item.key;
                return item;
            });


            vm.strategy3cashAttrs = metaService.getEntityAttrs('strategy-3').map(function (item) {
                item.name = 'Strategy3 Cash.' + item.name;
                item.key = 'strategy3_cash_object_' + item.key;
                return item;
            });
            vm.strategy3positionAttrs = metaService.getEntityAttrs('strategy-3').map(function (item) {
                item.name = 'Strategy3 Position.' + item.name;
                item.key = 'strategy3_position_object_' + item.key;
                return item;
            });

            balanceReportCustomAttrService.getList().then(function (data) {
                vm.custom = data.results;
                vm.custom.forEach(function (customItem) {
                    customItem.columnType = 'custom-field';
                });

                restoreAttrs();
                syncAttrs();

                vm.readyStatus.content = true;
                $scope.$apply();

            });

        };

        vm.getAttributes();

        vm.checkAreaAccessibility = function (item, type) {
            if (type === 'group') {
                if (['notes', 'accounts', 'responsibles', 'counterparties', 'transaction_types', 'portfolios', 'tags', 'content_types'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
            else {
                if (['notes'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
        };

        parentScope.$watch('options.columns', function () {
            if (vm.tabAttrsReady) {
                columns = parentScope.options.columns;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.filters', function () {
            if (vm.tabAttrsReady) {
                filters = parentScope.options.filters;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.grouping', function () {
            if (vm.tabAttrsReady) {
                grouping = parentScope.options.grouping;
                syncAttrs();
                callback({silent: true});
            }
        });

        vm.bindReportItemName = function (item) {

            //if (item.name.toLocaleLowerCase().indexOf('strategy') == -1) {
            //
            //    var pieces = item.name.split('.');
            //
            //    return pieces[pieces.length - 1];
            //}

            return item.name;
        };

        var syncAttrs = function () {

            syncTypeAttrs(vm.transactionAttrs);
            syncTypeAttrs(vm.cashFlowProjectionAttrs);

            syncTypeAttrs(vm.portfolioAttrs);
            syncTypeAttrs(vm.instrumentAttrs);
            syncTypeAttrs(vm.responsibleAttrs);
            syncTypeAttrs(vm.counterpartyAttrs);

            syncTypeAttrs(vm.linkedInstrumentAttrs);
            syncTypeAttrs(vm.allocationBalanceAttrs);
            syncTypeAttrs(vm.allocationPlAttrs);

            syncTypeAttrs(vm.transactionCurrencyAttrs);
            syncTypeAttrs(vm.settlementCurrencyAttrs);

            syncTypeAttrs(vm.accountPositionAttrs);
            syncTypeAttrs(vm.accountCashAttrs);
            syncTypeAttrs(vm.accountInterimAttrs);

            syncTypeAttrs(vm.strategy1cashAttrs);
            syncTypeAttrs(vm.strategy1positionAttrs);

            syncTypeAttrs(vm.strategy2cashAttrs);
            syncTypeAttrs(vm.strategy2positionAttrs);

            syncTypeAttrs(vm.strategy3cashAttrs);
            syncTypeAttrs(vm.strategy3positionAttrs);

            syncTypeAttrs(vm.custom);

        };

        function syncTypeAttrs(attrs) {

            var i;
            for (i = 0; i < attrs.length; i = i + 1) {
                attrs[i].columns = false;
                attrs[i].filters = false;
                attrs[i].groups = false;
                columns.map(function (item) {
                    //console.log('item', item);
                    //console.log('attrs[i]', attrs[i]);
                    if (attrs[i].name === item.name) {
                        attrs[i].columns = true;
                    }
                    return item;
                });
                filters.map(function (item) {
                    if (attrs[i].name === item.name) {
                        attrs[i].filters = true;
                    }
                    return item;
                });
                grouping.map(function (item) {
                    if (item.hasOwnProperty('key')) {
                        if (attrs[i].key === item.key) {
                            attrs[i].groups = true;
                        }
                    } else {
                        if (attrs[i].name === item.name) {
                            attrs[i].groups = true;
                        }
                    }
                    return item;
                });
            }
        }

        function updateTypeAttrs(typeAttrs) {
            var i, c, g, f;
            var columnExist, groupExist, filterExist;

            for (i = 0; i < typeAttrs.length; i = i + 1) {
                columnExist = false;
                groupExist = false;
                filterExist = false;
                for (c = 0; c < columns.length; c = c + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === columns[c].key) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === columns[c].name) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
                if (!columnExist) {
                    if (typeAttrs[i].columns === true) {
                        columns.push(typeAttrs[i]);
                    }
                }

                /////// GROUPING

                for (g = 0; g < grouping.length; g = g + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === grouping[g].key) {
                            groupExist = true;
                            if (typeAttrs[i].groups === false) {
                                grouping.splice(g, 1);
                                g = g - 1;
                            }
                        }
                    }

                    else if (typeAttrs[i].name === grouping[g].name) {

                        groupExist = true;
                        if (typeAttrs[i].groups === false) {
                            grouping.splice(c, 1);
                            g = g - 1;
                        }
                    }
                    else {
                        if (typeAttrs[i].id === grouping[g].id) {
                            groupExist = true;
                            if (typeAttrs[i].groups === false) {
                                grouping.splice(g, 1);
                                g = g - 1;
                            }
                        }
                    }
                }
                if (!groupExist) {
                    if (typeAttrs[i].groups === true) {
                        grouping.push(typeAttrs[i]);
                    }
                }

                /////// FILTERING

                for (f = 0; f < filters.length; f = f + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === filters[f].key) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === filters[f].name) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    }
                }
                if (!filterExist) {
                    if (typeAttrs[i].filters === true) {
                        filters.push(typeAttrs[i]);
                    }
                }
            }

            // console.log('attributes in modal ', vm.attrs, vm.baseAttrs, vm.entityAttrs, parentScope);
        }

        vm.updateAttrs = function () {

            updateTypeAttrs(vm.transactionAttrs);
            updateTypeAttrs(vm.cashFlowProjectionAttrs);

            updateTypeAttrs(vm.portfolioAttrs);
            updateTypeAttrs(vm.instrumentAttrs);
            updateTypeAttrs(vm.responsibleAttrs);
            updateTypeAttrs(vm.counterpartyAttrs);

            updateTypeAttrs(vm.linkedInstrumentAttrs);
            updateTypeAttrs(vm.allocationBalanceAttrs);
            updateTypeAttrs(vm.allocationPlAttrs);

            updateTypeAttrs(vm.accountPositionAttrs);
            updateTypeAttrs(vm.accountCashAttrs);
            updateTypeAttrs(vm.accountInterimAttrs);

            updateTypeAttrs(vm.transactionCurrencyAttrs);
            updateTypeAttrs(vm.settlementCurrencyAttrs);

            updateTypeAttrs(vm.strategy1cashAttrs);
            updateTypeAttrs(vm.strategy1positionAttrs);

            updateTypeAttrs(vm.strategy2cashAttrs);
            updateTypeAttrs(vm.strategy2positionAttrs);

            updateTypeAttrs(vm.strategy3cashAttrs);
            updateTypeAttrs(vm.strategy3positionAttrs);

            updateTypeAttrs(vm.custom);


            addColumn();
            callback({
                silent: true, options: {
                    columns: columns,
                    filters: filters,
                    grouping: grouping
                }
            });
        };

        vm.cancel = function () {
            $('body').removeClass('drag-dialog');
            $mdDialog.cancel();
        };

        var dragAndDrop = {

            init: function () {
                this.dragula();
                this.eventListeners();
            },

            eventListeners: function () {
                var that = this;
                var exist = false;
                this.dragula.on('over', function (elem, container, source) {
                    $(container).addClass('active');
                    $(container).on('mouseleave', function () {
                        $(this).removeClass('active');
                    })

                });
                this.dragula.on('drop', function (elem, target) {
                    $(target).removeClass('active');
                    var name = $(elem).html();
                    var i;

                    exist = false;
                    if (target === document.querySelector('#columnsbag')) {
                        for (i = 0; i < columns.length; i = i + 1) {
                            if (columns[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#groupsbag')) {
                        for (i = 0; i < grouping.length; i = i + 1) {
                            if (grouping[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#filtersbag .drop-new-filter')) {
                        for (i = 0; i < filters.length; i = i + 1) {
                            if (filters[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (!exist) {
                        var a;
                        if (target === document.querySelector('#columnsbag')) {
                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    columns.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#groupsbag')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    grouping.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#filtersbag .drop-new-filter')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    filters.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        $scope.$apply();
                    }
                    $scope.$apply();
                });

                this.dragula.on('dragend', function (el) {
                    $scope.$apply();
                    $(el).remove();
                })
            },

            dragula: function () {
                var items = [document.querySelector('#columnsbag'), document.querySelector('#groupsbag'), document.querySelector('#filtersbag .drop-new-filter')];
                var i;
                var itemsElem = document.querySelectorAll('#dialogbag .g-modal-draggable-card');
                for (i = 0; i < itemsElem.length; i = i + 1) {
                    items.push(itemsElem[i]);
                }

                this.dragula = dragula(items,
                    {
                        copy: true
                    });
            }
        };

        var addColumn = function () {


            //console.log('parentScope.columns', parentScope.columns);

            //if (currentColumnsWidth < parentScope.columns.length) {
            metaService.columnsWidthGroups(true);
            //}
            //else {
            //    metaService.columnsWidthGroups(false);
            //}
        };

        setTimeout(function () {
            dragAndDrop.init()
        }, 500);

        vm.MABtnVisibility = function (entityType) {
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        }
    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/groupTable/dynamicAttributesForReportsService":324,"../../services/metaService":375,"../../services/reports/balanceReportCustomAttrService":383,"../../services/uiService":397}],156:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var uiService = require('../../services/uiService');

    var metaService = require('../../services/metaService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');
    var dynamicAttributesForReportsService = require('../../services/groupTable/dynamicAttributesForReportsService');

    module.exports = function ($scope, $mdDialog, parentScope, callback) {

        logService.controller('gModalController', 'initialized');

        var vm = this;
        vm.readyStatus = {content: false};

        vm.tabs = [];
        vm.entityType = parentScope.entityType;

        //console.log('parentScope', parentScope);
        //console.log('vm', vm);

        logService.property('vm.entityType', vm.entityType);

        vm.general = [];
        vm.attrs = [];
        vm.baseAttrs = [];
        vm.entityAttrs = [];
        vm.custom = [];

        vm.instrumentDynamicAttrs = [];
        vm.accountDynamicAttrs = [];
        vm.portfolioDynamicAttrs = [];

        vm.isReport = parentScope.isReport;

        vm.tabAttrsReady = false;

        // refactore this block
        function restoreAttrs() {
            function fillTabWithAttrs() {
                var i, x;
                for (i = 0; i < vm.tabs.length; i = i + 1) {
                    if (!vm.tabs[i].attrs) {
                        vm.tabs[i].attrs = [];

                        for (x = 0; x < vm.tabs[i].layout.fields.length; x = x + 1) {
                            ;
                            if (vm.tabs[i].layout.fields[x].type === 'field') {
                                if (vm.tabs[i].layout.fields[x].hasOwnProperty('id')) {
                                    vm.tabs[i].attrs.push({
                                        id: vm.tabs[i].layout.fields[x].id
                                    })
                                } else {
                                    if (vm.tabs[i].layout.fields[x].type === 'field') {
                                        if (vm.tabs[i].layout.fields[x].name != 'Labeled Line' && vm.tabs[i].layout.fields[x].name != 'Line') {
                                            vm.tabs[i].attrs.push({
                                                name: vm.tabs[i].layout.fields[x].name
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //console.log('vm.tabs[i].attrs', vm.tabs[0].attrs)
            }

            function fillTabAttrs() {

                var a, t, c, b, e;
                var tab, tabAttr, attr, baseAttr, attributeIsExist, entityAttr;
                //console.log('METHOD: restoreAttrs, data: vm.tabs, value: ', vm.tabs);
                //console.log('METHOD: restoreAttrs, data: vm.attrs, value: ', vm.attrs);
                for (t = 0; t < vm.tabs.length; t = t + 1) {
                    tab = vm.tabs[t];
                    for (c = 0; c < tab.attrs.length; c = c + 1) {
                        tabAttr = tab.attrs[c];
                        attributeIsExist = false;
                        if (tabAttr.hasOwnProperty('id')) {
                            for (a = 0; a < vm.attrs.length; a = a + 1) {
                                attr = vm.attrs[a];
                                if (tabAttr.id === attr.id) {
                                    vm.tabs[t].attrs[c] = attr;
                                    attributeIsExist = true;
                                }
                            }
                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        } else {
                            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                                baseAttr = vm.baseAttrs[b];
                                if (tabAttr.name === baseAttr.name) {
                                    vm.tabs[t].attrs[c] = baseAttr;
                                    attributeIsExist = true;
                                }
                            }
                            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                                entityAttr = vm.entityAttrs[e];
                                if (tabAttr.name === entityAttr.name) {
                                    vm.tabs[t].attrs[c] = entityAttr;
                                    attributeIsExist = true;
                                }
                            }

                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
            }

            fillTabWithAttrs();
            fillTabAttrs();
            vm.tabAttrsReady = true;
        }

        // end refactore

        var columns = parentScope.options.columns;
        var currentColumnsWidth = parentScope.columns.length;
        var filters = parentScope.options.filters;
        var grouping = parentScope.options.grouping;

        var attrsList = [];

        $('body').addClass('drag-dialog'); // hide backdrop

        vm.getAttributes = function () {

            if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(vm.entityType) === -1) {
                vm.baseAttrs = metaService.getBaseAttrs();
            }

            //vm.entityAttrs = metaService.getEntityAttrs(vm.entityType);

            vm.balanceAttrs = metaService.getEntityAttrs('balance-report').map(function (item) {
                item.name = 'Balance.' + item.name;
                return item;
            });

            vm.balanceMismatchAttrs = metaService.getEntityAttrs('report-mismatch').map(function (item) {
                item.name = 'Mismatch.' + item.name;
                return item;
            });

            vm.balancePerformanceAttrs = metaService.getEntityAttrs('report-addon-performance').map(function (item) {
                item.name = 'Performance.' + item.name;
                return item;
            });

            vm.allocationAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Allocation.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'allocation_object_' + item.key;
                return item;
            });

            vm.instrumentAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Instrument.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'instrument_object_' + item.key;
                return item;
            });

            vm.instrumentTypeAttrs = metaService.getEntityAttrs('instrument-type').map(function (item) {
                item.name = 'Instrument.Instrument Type.' + item.name;
                item.key = 'instrument_type_object_' + item.key;
                return item;
            });

            vm.accountAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_object_' + item.key;
                return item;
            });

            vm.accountTypeAttrs = metaService.getEntityAttrs('account-type').map(function (item) {
                item.name = 'Account.Account Type.' + item.name;
                item.key = 'account_type_object_' + item.key;
                return item;
            });

            vm.portfolioAttrs = metaService.getEntityAttrs('portfolio').map(function (item) {
                item.name = 'Portfolio.' + item.name;
                item.attribute_entity = 'portfolio';
                item.key = 'portfolio_object_' + item.key;
                return item;
            });

            vm.strategy1attrs = metaService.getEntityAttrs('strategy-1').map(function (item) {
                item.name = 'Strategy1.' + item.name;
                item.key = 'strategy1_object_' + item.key;
                return item;
            });
            vm.strategy1subgroupAttrs = metaService.getEntityAttrs('strategy-1-subgroup').map(function (item) {
                item.name = 'Strategy1.Subgroup.' + item.name;
                item.key = 'strategy1_subgroup_object' + item.key;
                return item;
            });
            vm.strategy1groupAttrs = metaService.getEntityAttrs('strategy-1-group').map(function (item) {
                item.name = 'Strategy1.Subgroup.Group.' + item.name;
                item.key = 'strategy1_group_object' + item.key;
                return item;
            });

            vm.strategy2attrs = metaService.getEntityAttrs('strategy-2').map(function (item) {
                item.name = 'Strategy2.' + item.name;
                item.key = 'strategy2_object' + item.key;
                return item;
            });
            vm.strategy2subgroupAttrs = metaService.getEntityAttrs('strategy-2-subgroup').map(function (item) {
                item.name = 'Strategy2.Subgroup.' + item.name;
                item.key = 'strategy2_subgroup_object' + item.key;
                return item;
            });
            vm.strategy2groupAttrs = metaService.getEntityAttrs('strategy-2-group').map(function (item) {
                item.name = 'Strategy2.Subgroup.Group.' + item.name;
                item.key = 'strategy2_group_object' + item.key;
                return item;
            });

            vm.strategy3attrs = metaService.getEntityAttrs('strategy-3').map(function (item) {
                item.name = 'Strategy3.' + item.name;
                item.key = 'strategy3_object' + item.key;
                return item;
            });
            vm.strategy3subgroupAttrs = metaService.getEntityAttrs('strategy-3-subgroup').map(function (item) {
                item.name = 'Strategy3.Subgroup.' + item.name;
                item.key = 'strategy3_subgroup_object' + item.key;
                return item;
            });
            vm.strategy3groupAttrs = metaService.getEntityAttrs('strategy-3-group').map(function (item) {
                item.name = 'Strategy3.Subgroup.Group.' + item.name;
                item.key = 'strategy3_group_object' + item.key;
                return item;
            });

            balanceReportCustomAttrService.getList().then(function (data) {
                vm.custom = data.results;
                vm.custom.forEach(function (customItem) {
                    customItem.columnType = 'custom-field';
                });

                dynamicAttributesForReportsService.getDynamicAttributes().then(function (data) {

                    vm.portfolioDynamicAttrs = data['portfolio'];
                    vm.accountDynamicAttrs = data['account'];
                    vm.instrumentDynamicAttrs = data['instrument'];

                    attrsList = vm.attrs.concat(vm.baseAttrs);
                    attrsList = attrsList.concat(vm.entityAttrs);
                    attrsList = attrsList.concat(vm.balanceAttrs);
                    attrsList = attrsList.concat(vm.allocationAttrs);

                    attrsList = attrsList.concat(vm.balancePerformanceAttrs);
                    attrsList = attrsList.concat(vm.balanceMismatchAttrs);
                    attrsList = attrsList.concat(vm.custom);

                    attrsList = attrsList.concat(vm.instrumentAttrs);
                    attrsList = attrsList.concat(vm.instrumentTypeAttrs);
                    attrsList = attrsList.concat(vm.instrumentDynamicAttrs);

                    attrsList = attrsList.concat(vm.accountAttrs);
                    attrsList = attrsList.concat(vm.accountTypeAttrs);
                    attrsList = attrsList.concat(vm.accountDynamicAttrs);

                    attrsList = attrsList.concat(vm.portfolioAttrs);
                    attrsList = attrsList.concat(vm.portfolioDynamicAttrs);

                    attrsList = attrsList.concat(vm.strategy1attrs);
                    attrsList = attrsList.concat(vm.strategy1subgroupAttrs);
                    attrsList = attrsList.concat(vm.strategy1groupAttrs);

                    attrsList = attrsList.concat(vm.strategy2attrs);
                    attrsList = attrsList.concat(vm.strategy2subgroupAttrs);
                    attrsList = attrsList.concat(vm.strategy2groupAttrs);

                    attrsList = attrsList.concat(vm.strategy3attrs);
                    attrsList = attrsList.concat(vm.strategy3subgroupAttrs);
                    attrsList = attrsList.concat(vm.strategy3groupAttrs);

                    restoreAttrs();
                    syncAttrs();


                    vm.readyStatus.content = true;
                    $scope.$apply();
                });
            });

        };

        vm.getAttributes();

        vm.checkAreaAccessibility = function (item, type) {
            if (type === 'group') {
                if (['notes', 'accounts', 'responsibles', 'counterparties', 'transaction_types', 'portfolios', 'tags', 'content_types'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
            else {
                if (['notes'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
        };

        parentScope.$watch('options.columns', function () {
            if (vm.tabAttrsReady) {
                columns = parentScope.options.columns;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.filters', function () {
            if (vm.tabAttrsReady) {
                filters = parentScope.options.filters;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.grouping', function () {
            if (vm.tabAttrsReady) {
                grouping = parentScope.options.grouping;
                syncAttrs();
                callback({silent: true});
            }
        });

        vm.bindReportItemName = function (item) {

            if (item.name.toLocaleLowerCase().indexOf('strategy') == -1) {

                var pieces = item.name.split('.');

                return pieces[pieces.length - 1];
            }

            return item.name;
        };

        var syncAttrs = function () {

            syncTypeAttrs(vm.balanceAttrs);
            syncTypeAttrs(vm.balancePerformanceAttrs);
            syncTypeAttrs(vm.balanceMismatchAttrs);
            syncTypeAttrs(vm.custom);
            syncTypeAttrs(vm.allocationAttrs);

            syncTypeAttrs(vm.instrumentAttrs);
            syncTypeAttrs(vm.instrumentTypeAttrs);
            syncTypeAttrs(vm.instrumentDynamicAttrs);

            syncTypeAttrs(vm.accountAttrs);
            syncTypeAttrs(vm.accountTypeAttrs);
            syncTypeAttrs(vm.accountDynamicAttrs);

            syncTypeAttrs(vm.portfolioAttrs);
            syncTypeAttrs(vm.portfolioDynamicAttrs);

            syncTypeAttrs(vm.strategy1attrs);
            syncTypeAttrs(vm.strategy1subgroupAttrs);
            syncTypeAttrs(vm.strategy1groupAttrs);

            syncTypeAttrs(vm.strategy2attrs);
            syncTypeAttrs(vm.strategy2subgroupAttrs);
            syncTypeAttrs(vm.strategy2groupAttrs);

            syncTypeAttrs(vm.strategy3attrs);
            syncTypeAttrs(vm.strategy3subgroupAttrs);
            syncTypeAttrs(vm.strategy3groupAttrs);

        };

        function syncTypeAttrs(attrs) {

            var i;
            for (i = 0; i < attrs.length; i = i + 1) {
                attrs[i].columns = false;
                attrs[i].filters = false;
                attrs[i].groups = false;
                columns.map(function (item) {
                    //console.log('item', item);
                    //console.log('attrs[i]', attrs[i]);
                    if (attrs[i].name === item.name) {
                        attrs[i].columns = true;
                    }
                    return item;
                });
                filters.map(function (item) {
                    if (attrs[i].name === item.name) {
                        attrs[i].filters = true;
                    }
                    return item;
                });
                grouping.map(function (item) {
                    if (item.hasOwnProperty('key')) {
                        if (attrs[i].key === item.key) {
                            attrs[i].groups = true;
                        }
                    } else {
                        if (attrs[i].name === item.name) {
                            attrs[i].groups = true;
                        }
                    }
                    return item;
                });
            }
        }

        function updateTypeAttrs(typeAttrs) {
            var i, c, g, f;
            var columnExist, groupExist, filterExist;

            for (i = 0; i < typeAttrs.length; i = i + 1) {
                columnExist = false;
                groupExist = false;
                filterExist = false;
                for (c = 0; c < columns.length; c = c + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === columns[c].key) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === columns[c].name) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
                if (!columnExist) {
                    if (typeAttrs[i].columns === true) {
                        columns.push(typeAttrs[i]);
                    }
                }

                /////// GROUPING

                for (g = 0; g < grouping.length; g = g + 1) {
                    if (typeAttrs[i].hasOwnProperty('columnType')
                        && typeAttrs[i].columnType == 'custom-field'
                        && typeAttrs[i].name === grouping[g].name) {
                        groupExist = true;
                        if (typeAttrs[i].groups === false) {
                            grouping.splice(g, 1);
                            g = g - 1;
                        }
                    } else {


                        if (typeAttrs[i].hasOwnProperty('key')) {
                            if (typeAttrs[i].key === grouping[g].key) {
                                groupExist = true;
                                if (typeAttrs[i].groups === false) {
                                    grouping.splice(g, 1);
                                    g = g - 1;
                                }
                            }
                        }
                    }
                    //else if (typeAttrs[i].name === grouping[g].name) {
                    //
                    //    groupExist = true;
                    //    if (typeAttrs[i].groups === false) {
                    //        grouping.splice(c, 1);
                    //        g = g - 1;
                    //    }
                    //}
                    //
                    //else {
                    //    //if (typeAttrs[i].id === grouping[g].id) {
                    //    //    groupExist = true;
                    //    //    if (typeAttrs[i].groups === false) {
                    //    //        grouping.splice(g, 1);
                    //    //        g = g - 1;
                    //    //    }
                    //    //}
                    //}
                }
                if (!groupExist) {
                    if (typeAttrs[i].groups === true) {
                        grouping.push(typeAttrs[i]);
                    }
                }

                /////// FILTERING

                for (f = 0; f < filters.length; f = f + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === filters[f].key) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === filters[f].name) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    }
                }
                if (!filterExist) {
                    if (typeAttrs[i].filters === true) {
                        filters.push(typeAttrs[i]);
                    }
                }
            }

            // console.log('attributes in modal ', vm.attrs, vm.baseAttrs, vm.entityAttrs, parentScope);
        }

        vm.updateAttrs = function () {
            updateTypeAttrs(vm.balanceAttrs);
            updateTypeAttrs(vm.balancePerformanceAttrs);
            updateTypeAttrs(vm.balanceMismatchAttrs);
            updateTypeAttrs(vm.custom);
            updateTypeAttrs(vm.allocationAttrs);

            updateTypeAttrs(vm.instrumentAttrs);
            updateTypeAttrs(vm.instrumentTypeAttrs);
            updateTypeAttrs(vm.instrumentDynamicAttrs);

            updateTypeAttrs(vm.accountAttrs);
            updateTypeAttrs(vm.accountTypeAttrs);
            updateTypeAttrs(vm.accountDynamicAttrs);

            updateTypeAttrs(vm.portfolioAttrs);
            updateTypeAttrs(vm.portfolioDynamicAttrs);

            updateTypeAttrs(vm.strategy1attrs);
            updateTypeAttrs(vm.strategy1subgroupAttrs);
            updateTypeAttrs(vm.strategy1groupAttrs);

            updateTypeAttrs(vm.strategy2attrs);
            updateTypeAttrs(vm.strategy2subgroupAttrs);
            updateTypeAttrs(vm.strategy2groupAttrs);

            updateTypeAttrs(vm.strategy3attrs);
            updateTypeAttrs(vm.strategy3subgroupAttrs);
            updateTypeAttrs(vm.strategy3groupAttrs);

            addColumn();
            callback({
                silent: true, options: {
                    columns: columns,
                    filters: filters,
                    grouping: grouping
                }
            });
        };

        vm.cancel = function () {
            $('body').removeClass('drag-dialog');
            $mdDialog.cancel();
        };

        var dragAndDrop = {

            init: function () {
                this.dragula();
                this.eventListeners();
            },

            eventListeners: function () {
                var that = this;
                var exist = false;
                this.dragula.on('over', function (elem, container, source) {
                    $(container).addClass('active');
                    $(container).on('mouseleave', function () {
                        $(this).removeClass('active');
                    })

                });
                this.dragula.on('drop', function (elem, target) {
                    $(target).removeClass('active');

                    console.log('elem', elem);
                    var identifier;
                    if ($(elem).attr('data-key-identifier')) {
                        identifier = $(elem).attr('data-key-identifier');
                    } else {
                        identifier = $(elem).html();
                    }

                    var i;

                    exist = false;
                    if (target === document.querySelector('#columnsbag')) {
                        for (i = 0; i < columns.length; i = i + 1) {
                            if (columns[i].key === identifier) {
                                exist = true;
                            }

                            if (columns[i].name === identifier) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#groupsbag')) {
                        for (i = 0; i < grouping.length; i = i + 1) {

                            if (grouping[i].key === identifier) {
                                exist = true;
                            }

                            if (grouping[i].name === identifier) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#filtersbag .drop-new-filter')) {
                        for (i = 0; i < filters.length; i = i + 1) {

                            if (filters[i].key === identifier) {
                                exist = true;
                            }

                            if (filters[i].name === identifier) {
                                exist = true;
                            }
                        }
                    }
                    if (!exist) {
                        var a;

                        console.log('attrsList', attrsList);

                        if (target === document.querySelector('#columnsbag')) {
                            for (a = 0; a < attrsList.length; a = a + 1) {

                                if (attrsList[a].key === identifier) {
                                    columns.push(attrsList[a]);
                                } else {
                                    if (attrsList[a].name === identifier) {
                                        columns.push(attrsList[a]);
                                    }
                                }

                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#groupsbag')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === identifier) {
                                    grouping.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#filtersbag .drop-new-filter')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === identifier) {
                                    filters.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        $scope.$apply();
                    }
                    $scope.$apply();
                });

                this.dragula.on('dragend', function (el) {
                    $scope.$apply();
                    $(el).remove();
                })
            },

            dragula: function () {
                var items = [document.querySelector('#columnsbag'), document.querySelector('#groupsbag'), document.querySelector('#filtersbag .drop-new-filter')];
                var i;
                var itemsElem = document.querySelectorAll('#dialogbag .g-modal-draggable-card');
                for (i = 0; i < itemsElem.length; i = i + 1) {
                    items.push(itemsElem[i]);
                }

                this.dragula = dragula(items,
                    {
                        copy: true
                    });
            }
        };

        var addColumn = function () {


            //console.log('parentScope.columns', parentScope.columns);

            //if (currentColumnsWidth < parentScope.columns.length) {
            metaService.columnsWidthGroups(true);
            //}
            //else {
            //    metaService.columnsWidthGroups(false);
            //}
        };

        setTimeout(function () {
            dragAndDrop.init();
        }, 500);

        vm.MABtnVisibility = function (entityType) {
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        }
    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/groupTable/dynamicAttributesForReportsService":324,"../../services/metaService":375,"../../services/reports/balanceReportCustomAttrService":383,"../../services/uiService":397}],157:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var uiService = require('../../services/uiService');

    var metaService = require('../../services/metaService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');
    var dynamicAttributesForReportsService = require('../../services/groupTable/dynamicAttributesForReportsService');

    module.exports = function ($scope, $mdDialog, parentScope, callback) {

        logService.controller('gModalController', 'initialized');

        var vm = this;
        vm.readyStatus = {content: false};

        vm.tabs = [];
        vm.entityType = parentScope.entityType;

        //console.log('parentScope', parentScope);
        //console.log('vm', vm);

        logService.property('vm.entityType', vm.entityType);

        vm.general = [];
        vm.attrs = [];
        vm.baseAttrs = [];
        vm.entityAttrs = [];
        vm.custom = [];

        vm.instrumentDynamicAttrs = [];
        vm.accountDynamicAttrs = [];
        vm.portfolioDynamicAttrs = [];

        vm.isReport = parentScope.isReport;

        vm.tabAttrsReady = false;

        // refactore this block
        function restoreAttrs() {
            function fillTabWithAttrs() {
                var i, x;
                for (i = 0; i < vm.tabs.length; i = i + 1) {
                    if (!vm.tabs[i].attrs) {
                        vm.tabs[i].attrs = [];

                        for (x = 0; x < vm.tabs[i].layout.fields.length; x = x + 1) {
                            ;
                            if (vm.tabs[i].layout.fields[x].type === 'field') {
                                if (vm.tabs[i].layout.fields[x].hasOwnProperty('id')) {
                                    vm.tabs[i].attrs.push({
                                        id: vm.tabs[i].layout.fields[x].id
                                    })
                                } else {
                                    if (vm.tabs[i].layout.fields[x].type === 'field') {
                                        if (vm.tabs[i].layout.fields[x].name != 'Labeled Line' && vm.tabs[i].layout.fields[x].name != 'Line') {
                                            vm.tabs[i].attrs.push({
                                                name: vm.tabs[i].layout.fields[x].name
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //console.log('vm.tabs[i].attrs', vm.tabs[0].attrs)
            }

            function fillTabAttrs() {

                var a, t, c, b, e;
                var tab, tabAttr, attr, baseAttr, attributeIsExist, entityAttr;
                //console.log('METHOD: restoreAttrs, data: vm.tabs, value: ', vm.tabs);
                //console.log('METHOD: restoreAttrs, data: vm.attrs, value: ', vm.attrs);
                for (t = 0; t < vm.tabs.length; t = t + 1) {
                    tab = vm.tabs[t];
                    for (c = 0; c < tab.attrs.length; c = c + 1) {
                        tabAttr = tab.attrs[c];
                        attributeIsExist = false;
                        if (tabAttr.hasOwnProperty('id')) {
                            for (a = 0; a < vm.attrs.length; a = a + 1) {
                                attr = vm.attrs[a];
                                if (tabAttr.id === attr.id) {
                                    vm.tabs[t].attrs[c] = attr;
                                    attributeIsExist = true;
                                }
                            }
                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        } else {
                            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                                baseAttr = vm.baseAttrs[b];
                                if (tabAttr.name === baseAttr.name) {
                                    vm.tabs[t].attrs[c] = baseAttr;
                                    attributeIsExist = true;
                                }
                            }
                            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                                entityAttr = vm.entityAttrs[e];
                                if (tabAttr.name === entityAttr.name) {
                                    vm.tabs[t].attrs[c] = entityAttr;
                                    attributeIsExist = true;
                                }
                            }

                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
            }

            fillTabWithAttrs();
            fillTabAttrs();
            vm.tabAttrsReady = true;
        }

        // end refactore

        var columns = parentScope.options.columns;
        var currentColumnsWidth = parentScope.columns.length;
        var filters = parentScope.options.filters;
        var grouping = parentScope.options.grouping;

        var attrsList = [];

        $('body').addClass('drag-dialog'); // hide backdrop

        vm.getAttributes = function () {

            if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(vm.entityType) === -1) {
                vm.baseAttrs = metaService.getBaseAttrs();
            }

            //vm.entityAttrs = metaService.getEntityAttrs(vm.entityType);

            vm.performanceAttrs = metaService.getEntityAttrs('performance-report').map(function (item) {
                item.name = 'Performance.' + item.name;
                return item;
            });

            vm.portfolioAttrs = metaService.getEntityAttrs('portfolio').map(function (item) {
                item.name = 'Portfolio.' + item.name;
                item.attribute_entity = 'portfolio';
                item.key = 'portfolio_object_' + item.key;
                return item;
            });

            vm.instrumentAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Instrument.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'instrument_object_' + item.key;
                return item;
            });

            vm.responsibleAttrs = metaService.getEntityAttrs('responsible').map(function (item) {
                item.name = 'Responsible.' + item.name;
                item.attribute_entity = 'responsible';
                item.key = 'responsible_object_' + item.key;
                return item;
            });

            vm.counterpartyAttrs = metaService.getEntityAttrs('counterparty').map(function (item) {
                item.name = 'Counterparty.' + item.name;
                item.attribute_entity = 'counterparty';
                item.key = 'counterparty_object_' + item.key;
                return item;
            });


            // instruments

            vm.linkedInstrumentAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Linked instrument.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'linked_instrument_object_' + item.key;
                return item;
            });

            vm.allocationBalanceAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Allocation balance.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'allocation_balance_object_' + item.key;
                return item;
            });

            vm.allocationPlAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Allocation P&L.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'allocation_pl_object_' + item.key;
                return item;
            });

            // currencies

            vm.transactionCurrencyAttrs = metaService.getEntityAttrs('currency').map(function (item) {
                item.name = 'Transaction currency.' + item.name;
                item.attribute_entity = 'currency';
                item.key = 'transaction_currency_object_' + item.key;
                return item;
            });

            vm.settlementCurrencyAttrs = metaService.getEntityAttrs('currency').map(function (item) {
                item.name = 'Settlement currency.' + item.name;
                item.attribute_entity = 'currency';
                item.key = 'settlement_currency_object_' + item.key;
                return item;
            });


            // accounts

            vm.accountPositionAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account Position.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_position_object_' + item.key;
                return item;
            });

            vm.accountCashAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account Cash.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_cash_object_' + item.key;
                return item;
            });

            vm.accountInterimAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account interim.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_interim_object_' + item.key;
                return item;
            });


            // strategies

            vm.strategy1cashAttrs = metaService.getEntityAttrs('strategy-1').map(function (item) {
                item.name = 'Strategy1 Cash.' + item.name;
                item.key = 'strategy1_cash_object_' + item.key;
                return item;
            });
            vm.strategy1positionAttrs = metaService.getEntityAttrs('strategy-1').map(function (item) {
                item.name = 'Strategy1 Position.' + item.name;
                item.key = 'strategy1_position_object_' + item.key;
                return item;
            });

            vm.strategy2cashAttrs = metaService.getEntityAttrs('strategy-2').map(function (item) {
                item.name = 'Strategy2 Cash.' + item.name;
                item.key = 'strategy2_cash_object_' + item.key;
                return item;
            });
            vm.strategy2positionAttrs = metaService.getEntityAttrs('strategy-2').map(function (item) {
                item.name = 'Strategy2 Position.' + item.name;
                item.key = 'strategy2_position_object_' + item.key;
                return item;
            });


            vm.strategy3cashAttrs = metaService.getEntityAttrs('strategy-3').map(function (item) {
                item.name = 'Strategy3 Cash.' + item.name;
                item.key = 'strategy3_cash_object_' + item.key;
                return item;
            });
            vm.strategy3positionAttrs = metaService.getEntityAttrs('strategy-3').map(function (item) {
                item.name = 'Strategy3 Position.' + item.name;
                item.key = 'strategy3_position_object_' + item.key;
                return item;
            });

            balanceReportCustomAttrService.getList().then(function (data) {
                vm.custom = data.results;
                vm.custom.forEach(function (customItem) {
                    customItem.columnType = 'custom-field';
                });

                restoreAttrs();
                syncAttrs();

                vm.readyStatus.content = true;
                $scope.$apply();

            });

        };

        vm.getAttributes();

        vm.checkAreaAccessibility = function (item, type) {
            if (type === 'group') {
                if (['notes', 'accounts', 'responsibles', 'counterparties', 'transaction_types', 'portfolios', 'tags', 'content_types'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
            else {
                if (['notes'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
        };

        parentScope.$watch('options.columns', function () {
            if (vm.tabAttrsReady) {
                columns = parentScope.options.columns;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.filters', function () {
            if (vm.tabAttrsReady) {
                filters = parentScope.options.filters;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.grouping', function () {
            if (vm.tabAttrsReady) {
                grouping = parentScope.options.grouping;
                syncAttrs();
                callback({silent: true});
            }
        });

        vm.bindReportItemName = function (item) {

            if (item.name.toLocaleLowerCase().indexOf('strategy') == -1) {

                var pieces = item.name.split('.');

                return pieces[pieces.length - 1];
            }

            return item.name;
        };

        var syncAttrs = function () {

            syncTypeAttrs(vm.performanceAttrs);

            syncTypeAttrs(vm.portfolioAttrs);
            syncTypeAttrs(vm.instrumentAttrs);
            syncTypeAttrs(vm.responsibleAttrs);
            syncTypeAttrs(vm.counterpartyAttrs);

            syncTypeAttrs(vm.linkedInstrumentAttrs);
            syncTypeAttrs(vm.allocationBalanceAttrs);
            syncTypeAttrs(vm.allocationPlAttrs);

            syncTypeAttrs(vm.transactionCurrencyAttrs);
            syncTypeAttrs(vm.settlementCurrencyAttrs);

            syncTypeAttrs(vm.accountPositionAttrs);
            syncTypeAttrs(vm.accountCashAttrs);
            syncTypeAttrs(vm.accountInterimAttrs);

            syncTypeAttrs(vm.strategy1cashAttrs);
            syncTypeAttrs(vm.strategy1positionAttrs);

            syncTypeAttrs(vm.strategy2cashAttrs);
            syncTypeAttrs(vm.strategy2positionAttrs);

            syncTypeAttrs(vm.strategy3cashAttrs);
            syncTypeAttrs(vm.strategy3positionAttrs);

            syncTypeAttrs(vm.custom);

        };

        function syncTypeAttrs(attrs) {

            var i;
            for (i = 0; i < attrs.length; i = i + 1) {
                attrs[i].columns = false;
                attrs[i].filters = false;
                attrs[i].groups = false;
                columns.map(function (item) {
                    //console.log('item', item);
                    //console.log('attrs[i]', attrs[i]);
                    if (attrs[i].name === item.name) {
                        attrs[i].columns = true;
                    }
                    return item;
                });
                filters.map(function (item) {
                    if (attrs[i].name === item.name) {
                        attrs[i].filters = true;
                    }
                    return item;
                });
                grouping.map(function (item) {
                    if (item.hasOwnProperty('key')) {
                        if (attrs[i].key === item.key) {
                            attrs[i].groups = true;
                        }
                    } else {
                        if (attrs[i].name === item.name) {
                            attrs[i].groups = true;
                        }
                    }
                    return item;
                });
            }
        }

        function updateTypeAttrs(typeAttrs) {
            var i, c, g, f;
            var columnExist, groupExist, filterExist;

            for (i = 0; i < typeAttrs.length; i = i + 1) {
                columnExist = false;
                groupExist = false;
                filterExist = false;
                for (c = 0; c < columns.length; c = c + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === columns[c].key) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === columns[c].name) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
                if (!columnExist) {
                    if (typeAttrs[i].columns === true) {
                        columns.push(typeAttrs[i]);
                    }
                }

                /////// GROUPING

                for (g = 0; g < grouping.length; g = g + 1) {
                    if (typeAttrs[i].hasOwnProperty('columnType')
                        && typeAttrs[i].columnType == 'custom-field'
                        && typeAttrs[i].name === grouping[g].name) {
                        groupExist = true;
                        if (typeAttrs[i].groups === false) {
                            grouping.splice(g, 1);
                            g = g - 1;
                        }
                    } else {


                        if (typeAttrs[i].hasOwnProperty('key')) {
                            if (typeAttrs[i].key === grouping[g].key) {
                                groupExist = true;
                                if (typeAttrs[i].groups === false) {
                                    grouping.splice(g, 1);
                                    g = g - 1;
                                }
                            }
                        }
                    }
                    //else if (typeAttrs[i].name === grouping[g].name) {
                    //
                    //    groupExist = true;
                    //    if (typeAttrs[i].groups === false) {
                    //        grouping.splice(c, 1);
                    //        g = g - 1;
                    //    }
                    //}
                    //
                    //else {
                    //    //if (typeAttrs[i].id === grouping[g].id) {
                    //    //    groupExist = true;
                    //    //    if (typeAttrs[i].groups === false) {
                    //    //        grouping.splice(g, 1);
                    //    //        g = g - 1;
                    //    //    }
                    //    //}
                    //}
                }
                if (!groupExist) {
                    if (typeAttrs[i].groups === true) {
                        grouping.push(typeAttrs[i]);
                    }
                }

                /////// FILTERING

                for (f = 0; f < filters.length; f = f + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === filters[f].key) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === filters[f].name) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    }
                }
                if (!filterExist) {
                    if (typeAttrs[i].filters === true) {
                        filters.push(typeAttrs[i]);
                    }
                }
            }

            // console.log('attributes in modal ', vm.attrs, vm.baseAttrs, vm.entityAttrs, parentScope);
        }

        vm.updateAttrs = function () {
            
            updateTypeAttrs(vm.performanceAttrs);

            updateTypeAttrs(vm.portfolioAttrs);
            updateTypeAttrs(vm.instrumentAttrs);
            updateTypeAttrs(vm.responsibleAttrs);
            updateTypeAttrs(vm.counterpartyAttrs);

            updateTypeAttrs(vm.linkedInstrumentAttrs);
            updateTypeAttrs(vm.allocationBalanceAttrs);
            updateTypeAttrs(vm.allocationPlAttrs);

            updateTypeAttrs(vm.accountPositionAttrs);
            updateTypeAttrs(vm.accountCashAttrs);
            updateTypeAttrs(vm.accountInterimAttrs);

            updateTypeAttrs(vm.transactionCurrencyAttrs);
            updateTypeAttrs(vm.settlementCurrencyAttrs);

            updateTypeAttrs(vm.strategy1cashAttrs);
            updateTypeAttrs(vm.strategy1positionAttrs);

            updateTypeAttrs(vm.strategy2cashAttrs);
            updateTypeAttrs(vm.strategy2positionAttrs);

            updateTypeAttrs(vm.strategy3cashAttrs);
            updateTypeAttrs(vm.strategy3positionAttrs);

            updateTypeAttrs(vm.custom);


            addColumn();
            callback({
                silent: true, options: {
                    columns: columns,
                    filters: filters,
                    grouping: grouping
                }
            });
        };

        vm.cancel = function () {
            $('body').removeClass('drag-dialog');
            $mdDialog.cancel();
        };

        var dragAndDrop = {

            init: function () {
                this.dragula();
                this.eventListeners();
            },

            eventListeners: function () {
                var that = this;
                var exist = false;
                this.dragula.on('over', function (elem, container, source) {
                    $(container).addClass('active');
                    $(container).on('mouseleave', function () {
                        $(this).removeClass('active');
                    })

                });
                this.dragula.on('drop', function (elem, target) {
                    $(target).removeClass('active');

                    console.log('elem', elem);
                    var identifier;
                    if ($(elem).attr('data-key-identifier')) {
                        identifier = $(elem).attr('data-key-identifier');
                    } else {
                        identifier = $(elem).html();
                    }

                    var i;

                    exist = false;
                    if (target === document.querySelector('#columnsbag')) {
                        for (i = 0; i < columns.length; i = i + 1) {
                            if (columns[i].key === identifier) {
                                exist = true;
                            }

                            if (columns[i].name === identifier) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#groupsbag')) {
                        for (i = 0; i < grouping.length; i = i + 1) {

                            if (grouping[i].key === identifier) {
                                exist = true;
                            }

                            if (grouping[i].name === identifier) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#filtersbag .drop-new-filter')) {
                        for (i = 0; i < filters.length; i = i + 1) {

                            if (filters[i].key === identifier) {
                                exist = true;
                            }

                            if (filters[i].name === identifier) {
                                exist = true;
                            }
                        }
                    }
                    if (!exist) {
                        var a;

                        console.log('attrsList', attrsList);

                        if (target === document.querySelector('#columnsbag')) {
                            for (a = 0; a < attrsList.length; a = a + 1) {

                                if (attrsList[a].key === identifier) {
                                    columns.push(attrsList[a]);
                                } else {
                                    if (attrsList[a].name === identifier) {
                                        columns.push(attrsList[a]);
                                    }
                                }

                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#groupsbag')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === identifier) {
                                    grouping.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#filtersbag .drop-new-filter')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === identifier) {
                                    filters.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        $scope.$apply();
                    }
                    $scope.$apply();
                });

                this.dragula.on('dragend', function (el) {
                    $scope.$apply();
                    $(el).remove();
                })
            },

            dragula: function () {
                var items = [document.querySelector('#columnsbag'), document.querySelector('#groupsbag'), document.querySelector('#filtersbag .drop-new-filter')];
                var i;
                var itemsElem = document.querySelectorAll('#dialogbag .g-modal-draggable-card');
                for (i = 0; i < itemsElem.length; i = i + 1) {
                    items.push(itemsElem[i]);
                }

                this.dragula = dragula(items,
                    {
                        copy: true
                    });
            }
        };

        var addColumn = function () {


            //console.log('parentScope.columns', parentScope.columns);

            //if (currentColumnsWidth < parentScope.columns.length) {
            metaService.columnsWidthGroups(true);
            //}
            //else {
            //    metaService.columnsWidthGroups(false);
            //}
        };

        setTimeout(function () {
            dragAndDrop.init();
        }, 500);

        vm.MABtnVisibility = function (entityType) {
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        }
    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/groupTable/dynamicAttributesForReportsService":324,"../../services/metaService":375,"../../services/reports/balanceReportCustomAttrService":383,"../../services/uiService":397}],158:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    var uiService = require('../../services/uiService');

    var metaService = require('../../services/metaService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var balanceReportCustomAttrService = require('../../services/reports/balanceReportCustomAttrService');
    var dynamicAttributesForReportsService = require('../../services/groupTable/dynamicAttributesForReportsService');

    module.exports = function ($scope, $mdDialog, parentScope, callback) {

        logService.controller('gModalController', 'initialized');

        var vm = this;
        vm.readyStatus = {content: false};

        vm.tabs = [];
        vm.entityType = parentScope.entityType;

        //console.log('parentScope', parentScope);
        //console.log('vm', vm);

        logService.property('vm.entityType', vm.entityType);

        vm.general = [];
        vm.attrs = [];
        vm.baseAttrs = [];
        vm.entityAttrs = [];
        vm.custom = [];

        vm.instrumentDynamicAttrs = [];
        vm.accountDynamicAttrs = [];
        vm.portfolioDynamicAttrs = [];

        vm.isReport = parentScope.isReport;

        vm.tabAttrsReady = false;

        vm.toggleAll = function ($event, checkboxType) {

            var parent = $($event.target).parent().parent();
            var checkboxes = parent.find('.g-checkbox-row div md-checkbox');

            var i;
            var checkbox;

            for (i = 0; i < checkboxes.length; i = i + 1) {

                (function (index) {


                    //console.log('checkbox', checkbox);

                    setTimeout(function () {

                        //console.log('12312331232', checkbox);

                        if (checkboxType == 'columns' && !$(checkboxes[index]).hasClass('md-g-green') && !$(checkboxes[index]).hasClass('md-primary')) {

                            checkboxes[index].dispatchEvent(new Event('click'))

                        }

                        if (checkboxType == 'groups' && $(checkboxes[index]).hasClass('md-g-green')) {

                            checkboxes[index].dispatchEvent(new Event('click'))

                        }

                        if (checkboxType == 'filters' && $(checkboxes[index]).hasClass('md-primary')) {


                            checkboxes[index].dispatchEvent(new Event('click'))

                        }

                        $scope.$apply();

                    }, 1);
                })(i);
            }


        };

        // refactore this block
        function restoreAttrs() {
            function fillTabWithAttrs() {
                var i, x;
                for (i = 0; i < vm.tabs.length; i = i + 1) {
                    if (!vm.tabs[i].attrs) {
                        vm.tabs[i].attrs = [];

                        for (x = 0; x < vm.tabs[i].layout.fields.length; x = x + 1) {
                            ;
                            if (vm.tabs[i].layout.fields[x].type === 'field') {
                                if (vm.tabs[i].layout.fields[x].hasOwnProperty('id')) {
                                    vm.tabs[i].attrs.push({
                                        id: vm.tabs[i].layout.fields[x].id
                                    })
                                } else {
                                    if (vm.tabs[i].layout.fields[x].type === 'field') {
                                        if (vm.tabs[i].layout.fields[x].name != 'Labeled Line' && vm.tabs[i].layout.fields[x].name != 'Line') {
                                            vm.tabs[i].attrs.push({
                                                name: vm.tabs[i].layout.fields[x].name
                                            })
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                //console.log('vm.tabs[i].attrs', vm.tabs[0].attrs)
            }

            function fillTabAttrs() {

                var a, t, c, b, e;
                var tab, tabAttr, attr, baseAttr, attributeIsExist, entityAttr;
                //console.log('METHOD: restoreAttrs, data: vm.tabs, value: ', vm.tabs);
                //console.log('METHOD: restoreAttrs, data: vm.attrs, value: ', vm.attrs);
                for (t = 0; t < vm.tabs.length; t = t + 1) {
                    tab = vm.tabs[t];
                    for (c = 0; c < tab.attrs.length; c = c + 1) {
                        tabAttr = tab.attrs[c];
                        attributeIsExist = false;
                        if (tabAttr.hasOwnProperty('id')) {
                            for (a = 0; a < vm.attrs.length; a = a + 1) {
                                attr = vm.attrs[a];
                                if (tabAttr.id === attr.id) {
                                    vm.tabs[t].attrs[c] = attr;
                                    attributeIsExist = true;
                                }
                            }
                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        } else {
                            for (b = 0; b < vm.baseAttrs.length; b = b + 1) {
                                baseAttr = vm.baseAttrs[b];
                                if (tabAttr.name === baseAttr.name) {
                                    vm.tabs[t].attrs[c] = baseAttr;
                                    attributeIsExist = true;
                                }
                            }
                            for (e = 0; e < vm.entityAttrs.length; e = e + 1) {
                                entityAttr = vm.entityAttrs[e];
                                if (tabAttr.name === entityAttr.name) {
                                    vm.tabs[t].attrs[c] = entityAttr;
                                    attributeIsExist = true;
                                }
                            }

                            if (!attributeIsExist) {
                                vm.tabs[t].attrs.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
            }

            fillTabWithAttrs();
            fillTabAttrs();
            vm.tabAttrsReady = true;
        }

        // end refactore

        var columns = parentScope.options.columns;
        var currentColumnsWidth = parentScope.columns.length;
        var filters = parentScope.options.filters;
        var grouping = parentScope.options.grouping;

        var attrsList = [];

        $('body').addClass('drag-dialog'); // hide backdrop

        vm.getAttributes = function () {

            if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(vm.entityType) === -1) {
                vm.baseAttrs = metaService.getBaseAttrs();
            }

            //vm.entityAttrs = metaService.getEntityAttrs(vm.entityType);

            vm.transactionAttrs = metaService.getEntityAttrs('transaction-report').map(function (item) {
                item.name = 'Transaction.' + item.name;
                return item;
            });

            vm.portfolioAttrs = metaService.getEntityAttrs('portfolio').map(function (item) {
                item.name = 'Portfolio.' + item.name;
                item.attribute_entity = 'portfolio';
                item.key = 'portfolio_object_' + item.key;
                return item;
            });

            vm.instrumentAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Instrument.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'instrument_object_' + item.key;
                return item;
            });

            vm.responsibleAttrs = metaService.getEntityAttrs('responsible').map(function (item) {
                item.name = 'Responsible.' + item.name;
                item.attribute_entity = 'responsible';
                item.key = 'responsible_object_' + item.key;
                return item;
            });

            vm.counterpartyAttrs = metaService.getEntityAttrs('counterparty').map(function (item) {
                item.name = 'Counterparty.' + item.name;
                item.attribute_entity = 'counterparty';
                item.key = 'counterparty_object_' + item.key;
                return item;
            });


            // instruments

            vm.linkedInstrumentAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Linked instrument.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'linked_instrument_object_' + item.key;
                return item;
            });

            vm.allocationBalanceAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Allocation balance.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'allocation_balance_object_' + item.key;
                return item;
            });

            vm.allocationPlAttrs = metaService.getEntityAttrs('instrument').map(function (item) {
                item.name = 'Allocation P&L.' + item.name;
                item.attribute_entity = 'instrument';
                item.key = 'allocation_pl_object_' + item.key;
                return item;
            });

            // currencies

            vm.transactionCurrencyAttrs = metaService.getEntityAttrs('currency').map(function (item) {
                item.name = 'Transaction currency.' + item.name;
                item.attribute_entity = 'currency';
                item.key = 'transaction_currency_object_' + item.key;
                return item;
            });

            vm.settlementCurrencyAttrs = metaService.getEntityAttrs('currency').map(function (item) {
                item.name = 'Settlement currency.' + item.name;
                item.attribute_entity = 'currency';
                item.key = 'settlement_currency_object_' + item.key;
                return item;
            });


            // accounts

            vm.accountPositionAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account Position.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_position_object_' + item.key;
                return item;
            });

            vm.accountCashAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account Cash.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_cash_object_' + item.key;
                return item;
            });

            vm.accountInterimAttrs = metaService.getEntityAttrs('account').map(function (item) {
                item.name = 'Account interim.' + item.name;
                item.attribute_entity = 'account';
                item.key = 'account_interim_object_' + item.key;
                return item;
            });


            // strategies

            vm.strategy1cashAttrs = metaService.getEntityAttrs('strategy-1').map(function (item) {
                item.name = 'Strategy1 Cash.' + item.name;
                item.key = 'strategy1_cash_object_' + item.key;
                return item;
            });
            vm.strategy1positionAttrs = metaService.getEntityAttrs('strategy-1').map(function (item) {
                item.name = 'Strategy1 Position.' + item.name;
                item.key = 'strategy1_position_object_' + item.key;
                return item;
            });

            vm.strategy2cashAttrs = metaService.getEntityAttrs('strategy-2').map(function (item) {
                item.name = 'Strategy2 Cash.' + item.name;
                item.key = 'strategy2_cash_object_' + item.key;
                return item;
            });
            vm.strategy2positionAttrs = metaService.getEntityAttrs('strategy-2').map(function (item) {
                item.name = 'Strategy2 Position.' + item.name;
                item.key = 'strategy2_position_object_' + item.key;
                return item;
            });


            vm.strategy3cashAttrs = metaService.getEntityAttrs('strategy-3').map(function (item) {
                item.name = 'Strategy3 Cash.' + item.name;
                item.key = 'strategy3_cash_object_' + item.key;
                return item;
            });
            vm.strategy3positionAttrs = metaService.getEntityAttrs('strategy-3').map(function (item) {
                item.name = 'Strategy3 Position.' + item.name;
                item.key = 'strategy3_position_object_' + item.key;
                return item;
            });

            balanceReportCustomAttrService.getList().then(function (data) {
                vm.custom = data.results;
                vm.custom.forEach(function (customItem) {
                    customItem.columnType = 'custom-field';
                });

                restoreAttrs();
                syncAttrs();

                vm.readyStatus.content = true;
                $scope.$apply();

            });

        };

        vm.getAttributes();

        vm.checkAreaAccessibility = function (item, type) {
            if (type === 'group') {
                if (['notes', 'accounts', 'responsibles', 'counterparties', 'transaction_types', 'portfolios', 'tags', 'content_types'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
            else {
                if (['notes'].indexOf(item.key) !== -1) {
                    return true;
                }
                return false;
            }
        };

        parentScope.$watch('options.columns', function () {
            if (vm.tabAttrsReady) {
                columns = parentScope.options.columns;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.filters', function () {
            if (vm.tabAttrsReady) {
                filters = parentScope.options.filters;
                syncAttrs();
                callback({silent: true});
            }
        });
        parentScope.$watch('options.grouping', function () {
            if (vm.tabAttrsReady) {
                grouping = parentScope.options.grouping;
                syncAttrs();
                callback({silent: true});
            }
        });

        vm.bindReportItemName = function (item) {

            //if (item.name.toLocaleLowerCase().indexOf('strategy') == -1) {
            //
            //    var pieces = item.name.split('.');
            //
            //    return pieces[pieces.length - 1];
            //}

            return item.name;
        };

        var syncAttrs = function () {

            syncTypeAttrs(vm.transactionAttrs);

            syncTypeAttrs(vm.portfolioAttrs);
            syncTypeAttrs(vm.instrumentAttrs);
            syncTypeAttrs(vm.responsibleAttrs);
            syncTypeAttrs(vm.counterpartyAttrs);

            syncTypeAttrs(vm.linkedInstrumentAttrs);
            syncTypeAttrs(vm.allocationBalanceAttrs);
            syncTypeAttrs(vm.allocationPlAttrs);

            syncTypeAttrs(vm.transactionCurrencyAttrs);
            syncTypeAttrs(vm.settlementCurrencyAttrs);

            syncTypeAttrs(vm.accountPositionAttrs);
            syncTypeAttrs(vm.accountCashAttrs);
            syncTypeAttrs(vm.accountInterimAttrs);

            syncTypeAttrs(vm.strategy1cashAttrs);
            syncTypeAttrs(vm.strategy1positionAttrs);

            syncTypeAttrs(vm.strategy2cashAttrs);
            syncTypeAttrs(vm.strategy2positionAttrs);

            syncTypeAttrs(vm.strategy3cashAttrs);
            syncTypeAttrs(vm.strategy3positionAttrs);

            syncTypeAttrs(vm.custom);

        };

        function syncTypeAttrs(attrs) {

            var i;
            for (i = 0; i < attrs.length; i = i + 1) {
                attrs[i].columns = false;
                attrs[i].filters = false;
                attrs[i].groups = false;
                columns.map(function (item) {
                    //console.log('item', item);
                    //console.log('attrs[i]', attrs[i]);
                    if (attrs[i].name === item.name) {
                        attrs[i].columns = true;
                    }
                    return item;
                });
                filters.map(function (item) {
                    if (attrs[i].name === item.name) {
                        attrs[i].filters = true;
                    }
                    return item;
                });
                grouping.map(function (item) {
                    if (item.hasOwnProperty('key')) {
                        if (attrs[i].key === item.key) {
                            attrs[i].groups = true;
                        }
                    } else {
                        if (attrs[i].name === item.name) {
                            attrs[i].groups = true;
                        }
                    }
                    return item;
                });
            }
        }

        function updateTypeAttrs(typeAttrs) {
            var i, c, g, f;
            var columnExist, groupExist, filterExist;

            for (i = 0; i < typeAttrs.length; i = i + 1) {
                columnExist = false;
                groupExist = false;
                filterExist = false;
                for (c = 0; c < columns.length; c = c + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === columns[c].key) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === columns[c].name) {
                            columnExist = true;
                            if (typeAttrs[i].columns === false) {
                                columns.splice(c, 1);
                                c = c - 1;
                            }
                        }
                    }
                }
                if (!columnExist) {
                    if (typeAttrs[i].columns === true) {
                        columns.push(typeAttrs[i]);
                    }
                }

                /////// GROUPING

                for (g = 0; g < grouping.length; g = g + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === grouping[g].key) {
                            groupExist = true;
                            if (typeAttrs[i].groups === false) {
                                grouping.splice(g, 1);
                                g = g - 1;
                            }
                        }
                    }

                    else if (typeAttrs[i].name === grouping[g].name) {

                        groupExist = true;
                        if (typeAttrs[i].groups === false) {
                            grouping.splice(c, 1);
                            g = g - 1;
                        }
                    }
                    else {
                        if (typeAttrs[i].id === grouping[g].id) {
                            groupExist = true;
                            if (typeAttrs[i].groups === false) {
                                grouping.splice(g, 1);
                                g = g - 1;
                            }
                        }
                    }
                }
                if (!groupExist) {
                    if (typeAttrs[i].groups === true) {
                        grouping.push(typeAttrs[i]);
                    }
                }

                /////// FILTERING

                for (f = 0; f < filters.length; f = f + 1) {
                    if (typeAttrs[i].hasOwnProperty('key')) {
                        if (typeAttrs[i].key === filters[f].key) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    } else {
                        if (typeAttrs[i].name === filters[f].name) {
                            filterExist = true;
                            if (typeAttrs[i].filters === false) {
                                filters.splice(f, 1);
                                f = f - 1;
                            }
                        }
                    }
                }
                if (!filterExist) {
                    if (typeAttrs[i].filters === true) {
                        filters.push(typeAttrs[i]);
                    }
                }
            }

            // console.log('attributes in modal ', vm.attrs, vm.baseAttrs, vm.entityAttrs, parentScope);
        }

        vm.updateAttrs = function () {

            updateTypeAttrs(vm.transactionAttrs);

            updateTypeAttrs(vm.portfolioAttrs);
            updateTypeAttrs(vm.instrumentAttrs);
            updateTypeAttrs(vm.responsibleAttrs);
            updateTypeAttrs(vm.counterpartyAttrs);

            updateTypeAttrs(vm.linkedInstrumentAttrs);
            updateTypeAttrs(vm.allocationBalanceAttrs);
            updateTypeAttrs(vm.allocationPlAttrs);

            updateTypeAttrs(vm.accountPositionAttrs);
            updateTypeAttrs(vm.accountCashAttrs);
            updateTypeAttrs(vm.accountInterimAttrs);

            updateTypeAttrs(vm.transactionCurrencyAttrs);
            updateTypeAttrs(vm.settlementCurrencyAttrs);

            updateTypeAttrs(vm.strategy1cashAttrs);
            updateTypeAttrs(vm.strategy1positionAttrs);

            updateTypeAttrs(vm.strategy2cashAttrs);
            updateTypeAttrs(vm.strategy2positionAttrs);

            updateTypeAttrs(vm.strategy3cashAttrs);
            updateTypeAttrs(vm.strategy3positionAttrs);

            updateTypeAttrs(vm.custom);


            addColumn();
            callback({
                silent: true, options: {
                    columns: columns,
                    filters: filters,
                    grouping: grouping
                }
            });
        };

        vm.cancel = function () {
            $('body').removeClass('drag-dialog');
            $mdDialog.cancel();
        };

        var dragAndDrop = {

            init: function () {
                this.dragula();
                this.eventListeners();
            },

            eventListeners: function () {
                var that = this;
                var exist = false;
                this.dragula.on('over', function (elem, container, source) {
                    $(container).addClass('active');
                    $(container).on('mouseleave', function () {
                        $(this).removeClass('active');
                    })

                });
                this.dragula.on('drop', function (elem, target) {
                    $(target).removeClass('active');
                    var name = $(elem).html();
                    var i;

                    exist = false;
                    if (target === document.querySelector('#columnsbag')) {
                        for (i = 0; i < columns.length; i = i + 1) {
                            if (columns[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#groupsbag')) {
                        for (i = 0; i < grouping.length; i = i + 1) {
                            if (grouping[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (target === document.querySelector('#filtersbag .drop-new-filter')) {
                        for (i = 0; i < filters.length; i = i + 1) {
                            if (filters[i].name === name) {
                                exist = true;
                            }
                        }
                    }
                    if (!exist) {
                        var a;
                        if (target === document.querySelector('#columnsbag')) {
                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    columns.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#groupsbag')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    grouping.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        if (target === document.querySelector('#filtersbag .drop-new-filter')) {

                            for (a = 0; a < attrsList.length; a = a + 1) {
                                if (attrsList[a].name === name) {
                                    filters.push(attrsList[a]);
                                }
                            }
                            syncAttrs();
                            callback({silent: true});
                        }
                        $scope.$apply();
                    }
                    $scope.$apply();
                });

                this.dragula.on('dragend', function (el) {
                    $scope.$apply();
                    $(el).remove();
                })
            },

            dragula: function () {
                var items = [document.querySelector('#columnsbag'), document.querySelector('#groupsbag'), document.querySelector('#filtersbag .drop-new-filter')];
                var i;
                var itemsElem = document.querySelectorAll('#dialogbag .g-modal-draggable-card');
                for (i = 0; i < itemsElem.length; i = i + 1) {
                    items.push(itemsElem[i]);
                }

                this.dragula = dragula(items,
                    {
                        copy: true
                    });
            }
        };

        var addColumn = function () {


            //console.log('parentScope.columns', parentScope.columns);

            //if (currentColumnsWidth < parentScope.columns.length) {
            metaService.columnsWidthGroups(true);
            //}
            //else {
            //    metaService.columnsWidthGroups(false);
            //}
        };

        setTimeout(function () {
            dragAndDrop.init()
        }, 500);

        vm.MABtnVisibility = function (entityType) {
            return metaService.checkRestrictedEntityTypesForAM(entityType);
        }
    }

}());
},{"../../../../../core/services/logService":2,"../../services/attributeTypeService":304,"../../services/groupTable/dynamicAttributesForReportsService":324,"../../services/metaService":375,"../../services/reports/balanceReportCustomAttrService":383,"../../services/uiService":397}],159:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function(){

    'use strict';

    module.exports = function() {
        return {
            restrict: 'AE',
            templateUrl: 'views/directives/groupTable/report-settings-view.html',
            link: function(scope, elem, attrs) {
                console.log('Report settings component');
            }
        }
    }


}());
},{}],160:[function(require,module,exports){
(function () {

	'use strict';

	var logService = require('../../../../../core/services/logService');

	module.exports = function () {
		return {
			restrict: 'A',
			scope: {},
			link: function (scope, elem, attrs) {

				logService.component('groupVerticalScroll', 'initialized');

				//function decreaseScrollBarMargin() {
				//	console.log("scroll margin decreased");
				//	$(elem).find('#mCSB_2_container').css({
				//		'margin-right': '8px'
				//	});
				//}
                //
				//$(elem).mCustomScrollbar({
				//	axis: "y",
				//	callbacks: {
				//		onInit: decreaseScrollBarMargin,
				//		onBeforeUpdate: decreaseScrollBarMargin
				//	}
				//});


			}
		}
	}

}());
},{"../../../../../core/services/logService":2}],161:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var fieldResolverService = require('../../services/fieldResolverService');


    var pricingPolicyService = require('../../services/pricingPolicyService');
    var currencyService = require('../../services/currencyService');

    module.exports = function ($mdDialog) {
        return {
            restrict: 'AE',
            scope: {
                options: '=',
                reportOptions: '='
            },
            templateUrl: 'views/directives/groupTable/sidebar-filter-view.html',
            link: function (scope, elem, attrs) {

                logService.component('groupSidebarFilter', 'initialized');
                console.log('reportOptions', scope.reportOptions);

                scope.filters = scope.options.filters;
                scope.isReport = scope.options.isReport;
                scope.entityType = scope.options.entityType;
                scope.externalCallback = scope.options.externalCallback;

                scope.fields = {};
                //scope.reportOptions = {};

                scope.filters.forEach(function (item) {
                    if (!item.options) {
                        //item.options = {enabled: false};
                    }
                    //item.options.enabled = false;
                });

                if (scope.isReport == true) {
                    pricingPolicyService.getList().then(function (data) {

                        scope.pricingPolicies = data.results;

                        scope.$apply();

                    });

                    currencyService.getList({"page_size": 200}).then(function (data) {

                        scope.currencies = data.results;

                        scope.$apply();

                    });

                }


                scope.openReportSettings = function ($event) {

                    //console.log('scope.reportOptions', scope.reportOptions);

                    $mdDialog.show({
                        controller: 'GReportSettingsDialogController as vm',
                        templateUrl: 'views/dialogs/g-report-settings-dialog-view.html',
                        parent: angular.element(document.body),
                        targetEvent: $event,
                        locals: {
                            reportOptions: scope.reportOptions
                        }
                    }).then(function (res) {

                        console.log('res', res);

                        if (res.status == 'agree') {

                            scope.externalCallback({reportOptionsUpdated: true, options: {reportOptions: res.data}});
                        }

                    });


                };

                scope.calculateReport = function () {
                    //console.log('calculate report');
                    scope.reportOptions["task_id"] = undefined;
                    scope.externalCallback({silent: false, options: {filters: scope.filters}});
                };

                scope.resizeFilterSideNav = function (actionType) {
                    if (actionType === 'collapse') {
                        $('body').addClass('filter-side-nav-collapsed');
                        scope.sideNavCollapsed = true;
                    } else {
                        $('body').removeClass('filter-side-nav-collapsed');
                        scope.sideNavCollapsed = false;
                    }
                    var interval = setInterval(function () {
                        $(window).trigger('resize');
                    }, 50);

                    setTimeout(function () {
                        clearInterval(interval)
                    }, 300);
                };

                scope.$watchCollection('filters', function () {

                    //scope.externalCallback();

                    var promises = [];

                    scope.filters.forEach(function (item) {
                        //console.log("filter's item ", item);
                        if (!scope.fields.hasOwnProperty(item.key)) {
                            if (item['value_type'] == "mc_field" || item['value_type'] == "field") {
                                if (item.key == 'tags') {
                                    promises.push(fieldResolverService.getFields(item.key, {entityType: scope.entityType}));
                                } else {
                                    promises.push(fieldResolverService.getFields(item.key));
                                }
                            }

                            //console.log("filter's promises ", promises);
                        }
                    });

                    Promise.all(promises).then(function (data) {
                        //console.log("filter's data ", data);
                        data.forEach(function (item) {
                            scope.fields[item.key] = item.data;
                        });
                        scope.$apply(
                            function () {
                                setTimeout(function () {
                                    $(elem).find('.md-select-search-pattern').on('keydown', function (ev) {
                                        ev.stopPropagation();
                                    });
                                }, 100);
                            }
                        )
                        ;
                    });
                });

                scope.openFilterSettings = function ($mdOpenMenu, ev) {
                    $mdOpenMenu(ev);
                };

                scope.toggleFilterState = function () {
                    if (scope.isReport == true) {
                        scope.externalCallback({silent: true, options: {filters: scope.filters}});
                    } else {
                        scope.externalCallback({silent: false, options: {filters: scope.filters}});
                    }
                };

                scope.filterChange = function (filter) {
                    if (scope.isReport == true) {
                        scope.externalCallback({silent: true, options: {filters: scope.filters}});
                    } else {
                        scope.externalCallback({silent: false, options: {filters: scope.filters}});
                    }
                };

                scope.selectAll = function () {
                    scope.filters.forEach(function (item) {
                        item.options.enabled = true;
                    });
                    if (scope.isReport == true) {
                        scope.externalCallback({silent: true, options: {filters: scope.filters}});
                    } else {
                        scope.externalCallback({silent: false, options: {filters: scope.filters}});
                    }
                };

                scope.clearAll = function () {
                    scope.filters.forEach(function (item) {
                        item.options.query = '';
                    });
                    if (scope.isReport == true) {
                        scope.externalCallback({silent: true, options: {filters: scope.filters}});
                    } else {
                        scope.externalCallback({silent: false, options: {filters: scope.filters}});
                    }
                };

                scope.deselectAll = function () {
                    scope.filters.forEach(function (item) {
                        item.options.enabled = false;
                    });
                    if (scope.isReport == true) {
                        scope.externalCallback({silent: true, options: {filters: scope.filters}});
                    } else {
                        scope.externalCallback({silent: false, options: {filters: scope.filters}});
                    }
                };


                if (scope.options.isRootEntityViewer == false) {

                    scope.$on('rootEditorEntityIdDown', function (event, data) {

                        scope.filters.forEach(function (item) {
                            //console.log('item', item);
                            if (item.hasOwnProperty('options') && item.options.useFromAbove == true) {

                                if (item.key == data.entityType) {
                                    item.options.query = [data.editorEntityId]
                                }

                            }

                        });

                        scope.externalCallback({silent: true, options: {filters: scope.filters}});

                    });
                }

                scope.useFromAbove = function (filter) {

                    if (!filter.hasOwnProperty('options')) {
                        filter.options = {};
                    }

                    filter.options.useFromAbove = !filter.options.useFromAbove;

                    scope.externalCallback({silent: true, options: {filters: scope.filters}});
                };

                scope.removeFilter = function (filter) {
                    //console.log('filter to remove is ', filter);
                    scope.filters = scope.filters.map(function (item) {
                        // if (item.id === filter.id || item.name === filter.name) {
                        if (item.name === filter.name) {
                            // return undefined;
                            item = undefined;
                        }
                        //console.log('filter in filters list', item);
                        return item;
                    }).filter(function (item) {
                        return !!item;
                    });

                    scope.externalCallback({silent: true, options: {filters: scope.filters}});
                };


                scope.getFilterType = function (filterType) {
                    switch (filterType) {
                        case 'field':
                        case 'mc_field':
                            return true;
                            break;
                        default:
                            return false;
                            break;
                    }
                };
                //console.log('filter fields', scope.filters);
            }
        }
    }


}());
},{"../../../../../core/services/logService":2,"../../services/currencyService":313,"../../services/fieldResolverService":321,"../../services/pricingPolicyService":379}],162:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');
    var metaService = require('../../services/metaService');
    var attributeTypeService = require('../../services/attributeTypeService');
    var entityClassifierSingletonService = require('../../services/entityClassifierSingletonService');
    var bindCellService = require('../../services/bindCellService');
    var groupTableReportService = require('../../services/groupTable/groupTableReportService');
    var groupTableBodyHelper = require('../../helpers/groupTableBodyHelper');

    module.exports = function ($mdDialog) {
        return {
            restrict: 'AE',
            scope: {
                options: '=',
                items: '='
            },
            templateUrl: 'views/directives/groupTable/table-body-view.html',
            link: function (scope, elem, attrs) {

                logService.component('groupTableBody', 'initialized', 1);

                scope.externalCallback = scope.options.externalCallback;
                scope.grouping = scope.options.grouping;
                scope.columns = scope.options.columns;
                scope.entityType = scope.options.entityType;
                scope.reportIsReady = scope.options.reportIsReady;
                scope.isReport = scope.options.isReport;

                scope.readyStatus = {
                    cellsFirstReady: false,
                    cellsSecondReady: false,
                    attributeTypesReady: false,
                    classifiersReady: false
                }; // if groups not exist

                var entityType = scope.entityType;
                var baseAttrs = [];
                var entityAttrs = [];

                var promisesClassifiersAlreadyAdded = [];
                var promisesEntityFieldsAlreadyAdded = [];
                var promisesAttributeTypesAlreadyAdded = {};

                var entityFieldsArray = {};

                var classifiersInstances = {};

                baseAttrs = metaService.getBaseAttrs();

                if (scope.isReport == true) {

                    entityAttrs = metaService.getEntityAttrs(entityType);

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('instrument').map(function (item) {
                        item.key = 'instrument_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('instrument-type').map(function (item) {
                        item.key = 'instrument_type_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('account').map(function (item) {
                        item.key = 'account_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('account-type').map(function (item) {
                        item.key = 'account_type_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('portfolio').map(function (item) {
                        item.key = 'portfolio_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-1').map(function (item) {
                        item.key = 'strategy1_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-1-subgroup').map(function (item) {
                        item.key = 'strategy1_subgroup_object' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-1-group').map(function (item) {
                        item.key = 'strategy1_group_object' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-2').map(function (item) {
                        item.key = 'strategy2_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-2-subgroup').map(function (item) {
                        item.key = 'strategy2_subgroup_object' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-2-group').map(function (item) {
                        item.key = 'strategy2_group_object' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-3').map(function (item) {
                        item.key = 'strategy3_object_' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-3-subgroup').map(function (item) {
                        item.key = 'strategy3_subgroup_object' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs('strategy-3-group').map(function (item) {
                        item.key = 'strategy3_group_object' + item.key;
                        return item;
                    }));

                    entityAttrs = entityAttrs.concat(metaService.getEntityAttrs(entityType));

                    //console.log('entityAttrs', entityAttrs);

                } else {
                    entityAttrs = metaService.getEntityAttrs(entityType);
                }

                //setInterval(function () {
                //    $('.g-table-section .custom-scrollbar')[0].dispatchEvent(new Event('scroll'));
                //}, 1000);

                function getCellsCaptionsPatterns(item, itemIndex) {

                    var result = [];

                    item.cellsCaptions.forEach(function (cellCaption, $index) {
                        if ($index <= itemIndex) {
                            result.push(cellCaption.comparePattern);
                        }
                    });

                    return result.join('_-_');
                }

                scope.toggleGroupFold = function (item, $index) {

                    if (scope.isReport) {

                        item.cellsCaptions[$index].isFolded = !item.cellsCaptions[$index].isFolded;

                        item.subTotal = item.cellsCaptions[$index].subTotal;

                        var itemCellCaptionsPatterns = getCellsCaptionsPatterns(item, $index);

                        var localItems = []; // to find first element, and revert isFolded;

                        scope.reportItems.forEach(function (reportItem) {

                            var reportCellCaptionsPatterns = getCellsCaptionsPatterns(reportItem, $index);

                            if (itemCellCaptionsPatterns == reportCellCaptionsPatterns) {

                                reportItem.isFirstOfFolded = false;
                                reportItem.cellsCaptions[$index].isFolded = item.cellsCaptions[$index].isFolded;

                                localItems.push(reportItem);
                            }


                        });


                        //localItems[0].isFirstOfFolded = true;
                        localItems[0].isFirstOfFolded = item.cellsCaptions[$index].isFolded;

                        localItems.forEach(function (locItem) {

                            locItem.cellsCaptions.forEach(function (cellCaption, cellCaptionIndex) {

                                if (cellCaptionIndex > $index) {
                                    cellCaption.isFolded = false;
                                }

                            })


                        });

                        //console.log('localItems', localItems);

                    } else {
                        item.isFolded = !item.isFolded;
                    }
                };

                scope.itemIsFolded = function (item) {

                    var isShowed = true;

                    //console.log('item', item);
                    if (item.hasOwnProperty('cellsCaptions')) {
                        if (item.isFirstOfFolded != true) {
                            item.cellsCaptions.forEach(function (cellCaption) {

                                if (cellCaption.hasOwnProperty('isFolded') && cellCaption.isFolded == true) {
                                    isShowed = false;
                                }

                            });
                        }
                    }


                    return isShowed;

                };

                scope.openEntityMenu = function ($mdOpenMenu, ev) {
                    $mdOpenMenu(ev);
                };

                scope.checkReportColumnCaption = function (cellsCaptions, column, $columnIndex) {

                    if ($columnIndex > cellsCaptions.length - 1) { // 1 - index
                        return false;
                    }

                    // todo cellCaptions[columnIndex] == column

                    return true;

                };

                var getFieldDisplayNamesArray = function () {
                    return new Promise(function (resolve, reject) {
                        var i;
                        var promises = [];

                        if (scope.isReport == true) {

                            console.log('entityFieldsArray', entityFieldsArray);
                            //console.log('scope.columns[i]', scope.columns);

                        } else {

                            for (i = 0; i < scope.columns.length; i = i + 1) {
                                var attributeExist = false;
                                //console.log('12312312312312312', scope.columns[i]);
                                if (scope.columns[i]['value_type'] == 'field') {
                                    promises.push(bindCellService.findEntities(scope.columns[i].key, {entityType: entityType}));
                                }
                                if (scope.columns[i]['value_type'] == 30) {
                                    //console.log('scope.columns[i]', scope.columns[i]);

                                    if (!promisesAttributeTypesAlreadyAdded[entityType]) {
                                        promisesAttributeTypesAlreadyAdded[entityType] = [];
                                    }

                                    promisesAttributeTypesAlreadyAdded[entityType].forEach(function (attribute) {
                                        if (attribute == scope.columns[i].id) {
                                            attributeExist = true;
                                        }
                                    });

                                    if (!attributeExist) {
                                        promisesAttributeTypesAlreadyAdded[entityType].push(scope.columns[i].id);
                                        promises.push(attributeTypeService.getByKey(entityType, scope.columns[i].id));
                                    }

                                }
                            }
                        }

                        findEntityFields();

                        Promise.all(promises).then(function (results) {
                            //console.log('results11111111111111111', results);
                            results.forEach(function (item) {
                                if (item.key) {

                                    entityFieldsArray[item.key] = item.data;
                                } else {
                                    entityFieldsArray['classifier_' + item.id] = item;
                                }
                            });

                            scope.readyStatus.attributeTypesReady = true;

                        }).then(function () {
                            scope.$apply();
                        })

                    });

                };

                if (scope.grouping && scope.grouping.length) {
                    syncGroupsAndColumns();
                }

                function findGroups() {

                    return new Promise(function (resolve, reject) {


                        var i, g;
                        var promisesClassifiers = [];
                        var promisesEntityFields = [];


                        var items = scope.items;
                        var classifierExist = false;
                        var entityExist = false;

                        //console.log('ITEMS', scope.items);

                        if (scope.items) {
                            for (i = 0; i < scope.items.length; i = i + 1) {
                                //console.log('scope.items[i].groups', scope.items[i].groups);
                                if (scope.items[i].hasOwnProperty('groups')) {
                                    for (g = 0; g < scope.items[i].groups.length; g = g + 1) {
                                        classifierExist = false;
                                        entityExist = false;
                                        //console.log("scope.items[i].groups[g]['value_type']", scope.items[i].groups[g]['value_type']);
                                        if (scope.items[i].groups[g]['value_type'] === 'classifier') {


                                            promisesClassifiersAlreadyAdded.forEach(function (classifier) {
                                                if (classifier == scope.items[i].groups[g].key + '_' + scope.items[i].groups[g].value) {
                                                    classifierExist = true;
                                                }
                                            });
                                            if (!classifierExist) {
                                                promisesClassifiersAlreadyAdded.push(scope.items[i].groups[g].key + '_' + scope.items[i].groups[g].value);
                                                promisesClassifiers.push(entityClassifierSingletonService.getByKey(scope.entityType, scope.items[i].groups[g].value))
                                            }
                                        }
                                        if (scope.items[i].groups[g]['value_type'] === 'field') {

                                            if (scope.items[i].groups[g].value !== null) {

                                                promisesEntityFieldsAlreadyAdded.forEach(function (entity) {
                                                    if (entity == scope.items[i].groups[g].key + '_' + scope.items[i].groups[g].value) {
                                                        entityExist = true;
                                                    }
                                                });

                                                if (!entityExist) {
                                                    promisesEntityFieldsAlreadyAdded.push(scope.items[i].groups[g].key + '_' + scope.items[i].groups[g].value);
                                                    promisesEntityFields.push(bindCellService.getByKey(scope.items[i].groups[g].key, scope.items[i].groups[g].value, {entityType: scope.entityType}))
                                                }
                                            }
                                        }
                                    }
                                }

                            }
                        }

                        Promise.all(promisesClassifiers).then(function (data) {

                            if (data.length) {
                                var i;
                                for (i = 0; i < data.length; i = i + 1) {
                                    if (classifiersInstances[data[i].key] === undefined) {
                                        classifiersInstances[data[i].key] = {};
                                    }
                                    if (data[i].data !== undefined) {
                                        classifiersInstances[data[i].key] = data[i].data
                                    }
                                }
                            }

                            scope.readyStatus.classifiersReady = true;

                        }).then(function () {
                            scope.$apply();
                        });

                        Promise.all(promisesEntityFields).then(function (data) {

                            if (data.length) {
                                var i;

                                //console.log('data1111111111111111111111111', data);

                                for (i = 0; i < data.length; i = i + 1) {

                                    if (entityFieldsArray[data[i].key] == undefined) {
                                        entityFieldsArray[data[i].key] = [];
                                    }
                                    entityFieldsArray[data[i].key].push(data[i].data);
                                }
                            }

                            scope.readyStatus.cellsFirstReady = true;
                            //console.log('cells first ready');
                            resolve({status: "groups ready"});


                        }).then(function () {
                            scope.$apply();
                        })

                    })
                }

                scope.reportItemsProjection = function () {
                    return scope.reportItems;
                };

                scope.isSubtotalHided = function (column) {
                    if (column.hasOwnProperty('report_settings') && column.report_settings) {

                        //console.log('colum222222222222222n', column);
                        if (column.report_settings.subtotal_formula_id) {
                            if (column.report_settings.hide_subtotal == true) {
                                return false;
                            }
                            return true;
                        } else {
                            return false;
                        }
                    }

                    return true;
                };

                scope.resolveReportCellItemBackground = function (rowType, item, column, $index) {
                    var result = '';

                    //console.log('item', item);

                    if (item.hasOwnProperty('value_options')) {

                        if (item.value_options.type == 'area') {
                            result = 'cell-area-bg-' + item.value_options.level;
                        }

                        if (rowType == 'subtotal-line') {

                            if (item.value_options.type == 'line') {
                                result = 'cell-line-bg-' + item.value_options.level;
                            }
                        }

                    }

                    return result;
                };

                scope.resolveReportCellBackground = function (rowType, item, column, $index) {

                    if ($index == 1) {
                        //console.log(rowType, item, column, $index);
                    }

                    var result = '';


                    if (item.hasOwnProperty('cellsCaptions')) {

                        var cellCaption = item.cellsCaptions[$index];

                        if (cellCaption && cellCaption.hasOwnProperty('level') && cellCaption.hasOwnProperty('type')) {

                            if (cellCaption.type !== 'empty') {
                                if (cellCaption.type == 'area') {
                                    result = 'cell-area-bg-' + cellCaption.level;
                                }

                                if (rowType == 'subtotal-line') {

                                    //console.log('item', item);

                                    if (cellCaption.type == 'line') {
                                        result = 'cell-line-bg-' + cellCaption.level;
                                    }
                                }
                            }
                        }
                    }

                    return result;

                };

                scope.resolveReportCellBorder = function (rowType, item, column, $index) {

                    var result = '';

                    //console.log('item', item);

                    if (rowType == 'subtotal') {

                        if ($index < item.cellsCaptions.length) {
                            if (item.cellsCaptions[$index] == 'Subtotal') {
                                result = 'r-c-border-left-border-bottom';
                            }

                            if (item.cellsCaptions[$index + 1] == 'Subtotal') {
                                result = 'r-c-border-left-border-right'
                            }

                            if (item.cellsCaptions[$index - 1] == 'Subtotal') {
                                result = 'r-c-border-right-border-bottom-border-top';
                            }

                            if ($index == 0) {
                                result = 'r-c-border-left-border-right'
                            }

                        } else {
                            result = 'r-c-border-right-border-bottom-border-top';
                        }

                    }

                    if (rowType == 'normal') {

                        result = 'r-c-border-right-border-bottom-border-top';

                        if ($index < item.cellsCaptions.length) {
                            result = 'r-c-border-left-border-right'
                        }

                        if ($index == 0) {
                            result = 'r-c-border-left-border-right'
                        }


                    }

                    if (rowType == 'header') {

                        result = 'r-c-border-right-border-bottom-border-top';

                        if ($index < item.cellsCaptions.length) {
                            result = 'r-c-border-left-border-right'
                        }
                        if ($index == 0) {
                            result = 'r-c-border-left-border-right'
                        }

                    }

                    return result;

                };

                function syncGroupsAndColumns() {

                    //console.log("scope.grouping!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!", scope.grouping);

                    var promises = [];

                    promises.push(getFieldDisplayNamesArray());
                    promises.push(findGroups());

                    //console.log('??????????????????', promises);

                    Promise.all(promises).then(function () {
                        scope.$apply();
                    })
                }

                function findEntityFields() {

                    return new Promise(function (resolve, reject) {
                        var i, g, e;
                        var promises = [];

                        if (scope.items) {
                            for (i = 0; i < scope.items.length; i = i + 1) {

                                if (scope.items[i].hasOwnProperty('groups')) {
                                    for (g = 0; g < scope.items[i].groups.length; g = g + 1) {

                                        if (scope.items[i].groups[g]['value_type'] === 'field' && scope.items[i].groups[g].value !== null) {
                                            var entityExist = false;

                                            promisesEntityFieldsAlreadyAdded.forEach(function (entity) {
                                                if (entity == scope.items[i].groups[g].key + '_' + scope.items[i].groups[g].value) {
                                                    entityExist = true;
                                                }
                                            });

                                            if (!entityExist) {
                                                promisesEntityFieldsAlreadyAdded.push(scope.items[i].groups[g].key + '_' + scope.items[i].groups[g].value);
                                                promises.push(bindCellService.getByKey(scope.items[i].groups[g].key, scope.items[i].groups[g].value))
                                            }

                                        }
                                    }
                                }
                            }
                        }
                        Promise.all(promises).then(function (results) {
                            //console.log('RESULTS', results);
                            results.forEach(function (item) {
                                //console.log('-------------------------------', item);
                                if (item.key) {
                                    if (entityFieldsArray[item.key] == undefined) {
                                        entityFieldsArray[item.key] = [];
                                    }
                                    if (item.data !== undefined) {
                                        entityFieldsArray[item.key].push(item.data);
                                    }
                                }
                            });

                            scope.readyStatus.cellsSecondReady = true;

                            resolve({status: "entity field ready"});

                        }).then(function () {
                            scope.$apply();
                        })
                    })

                }

                scope.checkRowSelection = function (item) {
                    //console.log('checkRowSelection', item);

                    if (item) {
                        if (item.selectedRow || item.simpleSelect) {
                            return true;
                        }
                    }
                    return false;
                };

                scope.toggleSelectRow = function ($event, item) {

                    if (item.simpleSelect == true) {
                        item.simpleSelect = false;
                    }
                    item.selectedRow = !item.selectedRow;
                    if (scope.isAllSelected === true && item.selectedRow === false) {
                        scope.isAllSelected = false;
                    }

                    var allSelected = true;
                    scope.items.forEach(function (item) {
                        if (item.hasOwnProperty('groups')) {
                            if (!!item.selectedRow === false) {
                                allSelected = false;
                            }
                            item.items.forEach(function (row) {
                                if (!!row.selectedRow === false) {
                                    allSelected = false;
                                }
                            })
                        } else {
                            if (!!item.selectedRow === false) {
                                allSelected = false;
                            }
                        }
                    });

                    if (allSelected) {
                        scope.isAllSelected = true;
                    }
                    $event.stopPropagation();
                };

                scope.checkReady = function () {

                    //console.log('scope.options.reportIsReady', scope.options.reportIsReady);

                    if (scope.options.reportProcessing == true) {
                        return false;
                    }

                    if (!scope.items) {
                        return true;
                    }

                    if (scope.readyStatus.cellsFirstReady == true &&
                        scope.readyStatus.cellsSecondReady == true &&
                        scope.readyStatus.classifiersReady == true &&
                            //scope.reportIsReady == true &&
                        scope.options.reportIsReady == true &&
                        scope.readyStatus.attributeTypesReady == true) {

                        scope.$parent.triggerResize();

                        return true;
                    }
                    return false;
                };

                scope.bindGroupValue = function (group) {

                    //console.log('group', group);

                    if (group.hasOwnProperty('r_entityType')) {
                        return group[group.r_entityType + '_attribute_' + group.source_name];
                    }

                    var result = '';

                    if (group.value_type === 'classifier') {
                        if (scope.readyStatus.cellsFirstReady) {
                            //console.log('classifiersInstances', classifiersInstances);
                            if (classifiersInstances.hasOwnProperty(scope.entityType + '_' + group.value) && classifiersInstances[scope.entityType + '_' + group.value] !== undefined) {
                                //console.log('11111111111111111111111111111111', classifiersInstances[scope.entityType]);
                                if (classifiersInstances[scope.entityType + '_' + group.value] && classifiersInstances[scope.entityType + '_' + group.value] !== undefined) {
                                    result = classifiersInstances[scope.entityType + '_' + group.value].name
                                }
                            }
                        }
                    }


                    //console.log('group', group);

                    if (group.value_type === 'field') {
                        if (!entityFieldsArray.hasOwnProperty(group.key)) {
                            //findGroups();
                        }


                        if (group.hasOwnProperty(group.key + '_object') && group.value !== "") {
                            return group[group.key + '_object'].user_code;
                        }

                        //console.log('entityFieldsArray', entityFieldsArray);

                        if (scope.readyStatus.cellsFirstReady == true) {

                            if (entityFieldsArray.hasOwnProperty(group.key) &&
                                entityFieldsArray[group.key] &&
                                entityFieldsArray[group.key] !== undefined &&
                                entityFieldsArray[group.key].length) {

                                var i, resultObject;
                                for (i = 0; i < entityFieldsArray[group.key].length; i = i + 1) {

                                    if (group.value !== undefined) {
                                        if (entityFieldsArray[group.key][i].id === group.value) {

                                            resultObject = entityFieldsArray[group.key][i];
                                            //console.log('result', resultObject, '++' + entityFieldsArray[group.key][i].id);
                                        }
                                    }

                                }


                                if (resultObject) {
                                    if (result.hasOwnProperty('display_name')) {
                                        result = resultObject.display_name;
                                    } else {
                                        if (result.hasOwnProperty('scheme_name')) {
                                            result = resultObject.scheme_name;
                                        } else {
                                            result = resultObject.name;
                                        }
                                    }

                                }
                            }
                        }
                    }

                    if (group.value_type == 'float') {

                        result = '';
                        if (group.value) {
                            result = parseFloat(group.value).toFixed(2);
                        }
                    }

                    if (group.value_type == '10'
                        || group.value_type == '40'
                        || group.value_type == 'string'
                        || group.value_type == 'date'
                        || group.value_type == 'value_string'
                        || group.value_type == 'value_float'
                        || group.value_type == 'value_date'
                    ) {
                        result = group.value;
                    }

                    //console.log('result string', result);

                    return result;
                };

                scope.bindCellSubTotal = function (values, column) {

                    //console.log(column);

                    var result = '';

                    if (column.hasOwnProperty('key')) {
                        result = values[column.key];
                    }

                    if (result !== undefined) {

                        if (column.value_type == 20 || column.value_type == 'float') {
                            return parseFloat(result).toFixed(2) + '';
                        } else {
                            return result;
                        }
                    }

                };

                scope.bindCell = function (groupedItem, column, options) {


                    //console.log(groupedItem, column, options);

                    if (column.hasOwnProperty('r_entityType')) {

                        return groupedItem[column.r_entityType + '_attribute_' + column.source_name];

                    }

                    function findNodeInChildren(item) {
                        if (groupedItem[column.name] == item.id) {
                            classifierNode = item;
                        } else {
                            if (item.children.length) {
                                item.children.forEach(findNodeInChildren);
                            }
                        }
                    }

                    //console.log('column', column);

                    if (column.hasOwnProperty('id')) {
                        if (column['value_type'] === 30) {
                            var classifierNode;
                            if (entityFieldsArray && entityFieldsArray['classifier_' + column.id]) {
                                entityFieldsArray['classifier_' + column.id].classifiers.forEach(findNodeInChildren);
                                if (classifierNode) {
                                    if (classifierNode['display_name']) {
                                        return classifierNode['display_name'];
                                    }
                                    return classifierNode['name'];
                                }
                            }
                            return '';
                        } else {

                            //console.log('groupedItem', groupedItem);

                            if (column.hasOwnProperty('columnType') && column.columnType == 'custom-field') {

                                result = '';

                                //console.log('groupedItem', groupedItem);

                                groupedItem.custom_fields.forEach(function (customField) {

                                    if (customField.custom_field == column.id) {
                                        result = customField.value;
                                    }

                                });

                                return result

                            } else {

                                if (groupedItem.hasOwnProperty(column.name)) {
                                    return groupedItem[column.name];
                                } else {
                                    return groupTableBodyHelper.findGroupedItemAttribute(groupedItem, column.id);
                                }
                            }
                        }
                    } else {

                        var i, e, c;
                        for (i = 0; i < baseAttrs.length; i = i + 1) {
                            if (baseAttrs[i].key === column.key) {
                                return groupedItem[baseAttrs[i].key];
                            }
                        }

                        //console.log('column.key', column.key);

                        for (c = 0; c < scope.columns.length; c = c + 1) {

                            if (scope.columns[c].key == column.key) {

                                if (column.value_type == 'float' || column.value_type == 20) {

                                    if (groupedItem.hasOwnProperty(column.key)) {

                                        if (options && options.hasOwnProperty('reportItem')) {
                                            if (options.reportItem.isFirstOfFolded && options.reportItem.isFirstOfFolded == true) {
                                                //console.log(options);
                                                return parseFloat(options.reportItem.subTotal[column.key]).toFixed(2) + '';
                                            } else {
                                                return parseFloat(groupedItem[column.key]).toFixed(2) + '';
                                            }
                                        } else {

                                            return parseFloat(groupedItem[column.key]).toFixed(2) + '';
                                        }
                                    }
                                }

                                if (groupedItem.hasOwnProperty(column.key)) {

                                    if (options && options.hasOwnProperty('reportItem')) {
                                        if (options.reportItem.isFirstOfFolded && options.reportItem.isFirstOfFolded == true) {
                                            return '';
                                        }
                                    }
                                }

                                if (column.value_type == 10 || column.value_type == 40) {


                                    if (entityType == 'complex-transaction') {
                                        if (column.key == 'status') {
                                            if (groupedItem[column.key] == 1) {
                                                return 'Production';
                                            }
                                            if (groupedItem[column.key] == 2) {
                                                return 'Pending';
                                            }
                                        }
                                    }

                                    if (groupedItem.hasOwnProperty(column.key)) {
                                        return groupedItem[column.key];
                                    }
                                }

                                if (column.value_type == 'boolean') {
                                    if (groupedItem.hasOwnProperty(column.key)) {
                                        if (groupedItem[column.key] == 1) {
                                            return 'True'
                                        } else {
                                            return 'False'
                                        }
                                    }
                                }

                                if (groupedItem[column.key + '_object']) {

                                    if (column.key == 'instrument_type_object_instrument_class') {
                                        return groupedItem[column.key + '_object'].name;
                                    } else {
                                        if (groupedItem[column.key + '_object'].user_code) {
                                            return groupedItem[column.key + '_object'].user_code;
                                        } else {
                                            return groupedItem[column.key + '_object'].name;
                                        }

                                    }


                                }
                            }

                        }


                        for (e = 0; e < entityAttrs.length; e = e + 1) {

                            if (entityAttrs[e].key === column.key) {
                                if (column['value_type'] === 'field') {
                                    var _groupedItemVal = groupedItem[entityAttrs[e].key];
                                    //if (scope.readyStatus.cellsFirstReady) {
                                    //console.log('entityFieldsArray', entityFieldsArray);
                                    if (entityFieldsArray[column.key]) {
                                        var result = entityFieldsArray[column.key].filter(function (item) {
                                            return item.id === _groupedItemVal;
                                        })[0];

                                    }
                                    if (result) {
                                        if (column['key'] === 'instrument' && result['user_code']) {
                                            return result['user_code'];
                                        } else if (column['key'] === 'price_download_scheme') {
                                            return result['scheme_name'];
                                        }
                                        else if (result['display_name']) {
                                            return result['display_name'];
                                        }
                                        return result['name'];
                                    }
                                    return '';
                                } else {
                                    if (column['value_type'] === 'mc_field') {

                                        if (column.key == 'object_permissions_user') {

                                            if (groupedItem[entityAttrs[e].key].length) {

                                                //console.log('scope.options.permission_selected_entity', scope.options.permission_selected_entity);

                                                if (scope.options.permission_selected_entity == 'user') {

                                                    var resultPermission = [];

                                                    groupedItem[entityAttrs[e].key].forEach(function (permission) {

                                                        if (permission.member == scope.options.permission_selected_id) {
                                                            if (permission.permission.indexOf('change') == 0) {
                                                                resultPermission.push('Change');
                                                            }
                                                            if (permission.permission.indexOf('manage') == 0) {
                                                                resultPermission.push('Manage');
                                                            }
                                                        }
                                                    });

                                                    return resultPermission.join(', ');

                                                }
                                            }
                                        }

                                        if (column.key == 'object_permissions_group') {

                                            if (scope.options.permission_selected_entity == 'group') {

                                                var resultPermission = [];

                                                groupedItem[entityAttrs[e].key].forEach(function (permission) {
                                                    if (permission.group == scope.options.permission_selected_id) {
                                                        if (permission.permission.indexOf('change') == 0) {
                                                            resultPermission.push('Change');
                                                        }
                                                        if (permission.permission.indexOf('manage') == 0) {
                                                            resultPermission.push('Manage');
                                                        }
                                                    }
                                                });

                                                return resultPermission.join(', ');
                                            }
                                        }

                                        if (groupedItem[entityAttrs[e].key] && groupedItem[entityAttrs[e].key].length >= 1) {
                                            return '[' + groupedItem[entityAttrs[e].key].length + ']'
                                        }
                                    } else {

                                        if (groupedItem[entityAttrs[e].key] !== null && groupedItem[entityAttrs[e].key] !== undefined) {

                                            if (column.value_type == 20 || column.value_type == 'float') {


                                                if (options && options.hasOwnProperty('reportItem')) {
                                                    if (options.reportItem.isFirstOfFolded && options.reportItem.isFirstOfFolded == true) {
                                                        //console.log(options);
                                                        return parseFloat(options.reportItem.subTotal[entityAttrs[e].key]).toFixed(2) + '';
                                                    } else {
                                                        return parseFloat(groupedItem[entityAttrs[e].key]).toFixed(2) + '';
                                                    }
                                                } else {
                                                    return parseFloat(groupedItem[entityAttrs[e].key]).toFixed(2) + '';
                                                }
                                            } else {

                                                if (entityType == 'complex-transaction') {
                                                    if (entityAttrs[e].key == 'status') {
                                                        if (groupedItem[entityAttrs[e].key] == 1) {
                                                            return 'Production';
                                                        }
                                                        if (groupedItem[entityAttrs[e].key] == 2) {
                                                            return 'Pending';
                                                        }
                                                    }
                                                }


                                                return groupedItem[entityAttrs[e].key];
                                            }
                                        }
                                    }
                                }
                            }
                        }


                    }
                };

                scope.bindCellTitle = function (item, column) {

                    var result = '';

                    if (item && item.hasOwnProperty(column.key)) {
                        if (column['value_type'] === 'mc_field') {
                            result = '[' + item[column.key].length + ']';
                        }
                        else {
                            result = item[column.key];
                        }
                    }

                    return result;
                };

                scope.rowCallback = function (item, ev) {
                    //console.log('open additions!', item);
                    scope.options.editorEntityId = item.id;
                    var itemHasSimpleSelect = false;
                    if (item.simpleSelect) {
                        itemHasSimpleSelect = JSON.parse(JSON.stringify(item.simpleSelect));
                    }

                    //console.log('scope.itemAdditionsEditorEntityId', itemHasSimpleSelect);

                    scope.items.forEach(function (item) {
                        if (item.hasOwnProperty('groups')) {
                            item.simpleSelect = false;
                            item.items.forEach(function (row) {
                                row.simpleSelect = false;
                            })
                        } else {
                            item.simpleSelect = false;
                        }
                    });

                    item.simpleSelect = !item.simpleSelect;

                    if (itemHasSimpleSelect == true) {
                        item.simpleSelect = false;
                        scope.options.editorEntityId = undefined;
                    }

                    if (!scope.options.isReport) {

                        scope.externalCallback({
                            silent: true,
                            redraw: false,
                            options: {editorEntityId: scope.options.editorEntityId}
                        });
                    }

                    //if (localStorage.getItem('entityIsChanged') === "true") { // wow such shitcode
                    //    $mdDialog.show({
                    //        controller: 'WarningDialogController as vm',
                    //        templateUrl: 'views/warning-dialog-view.html',
                    //        parent: angular.element(document.body),
                    //        targetEvent: ev,
                    //        clickOutsideToClose: true,
                    //        locals: {
                    //            warning: {
                    //                title: 'Warning',
                    //                description: 'Unsaved data will be lost'
                    //            }
                    //        }
                    //    }).then(function (res) {
                    //        if (res.status === 'agree') {
                    //            scope.itemAdditionsEditorEntityId = item.id;
                    //            localStorage.setItem('entityIsChanged', false);
                    //        }
                    //    });
                    //} else {
                    //    scope.itemAdditionsEditorEntityId = item.id;
                    //    //localStorage.setItem('entityIsChanged', false);
                    //}
                };

                scope.getAlign = function (column) {

                    switch (column['value_type']) {
                        case 20:
                            return 'cell-right-align';
                            break;
                        case 'float':
                            return 'cell-right-align';
                            break;
                        case 40:
                            return 'cell-center-align';
                            break;
                        default:
                            return '';
                            break;
                    }
                };

                scope.deleteEntity = function (ev, entity) {

                    $mdDialog.show({
                        controller: 'EntityViewerDeleteDialogController as vm',
                        templateUrl: 'views/entity-viewer/entity-viewer-entity-delete-dialog-view.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        //clickOutsideToClose: true,
                        locals: {
                            entity: entity,
                            entityType: scope.entityType
                        }
                    }).then(function (res) {
                        if (res.status === 'agree') {
                            scope.externalCallback();
                        }
                    })
                };

                scope.editEntity = function (ev, entity) {
                    $mdDialog.show({
                        controller: 'EntityViewerEditDialogController as vm',
                        templateUrl: 'views/entity-viewer/entity-viewer-dialog-view.html',
                        parent: angular.element(document.body),
                        targetEvent: ev,
                        //clickOutsideToClose: true,
                        locals: {
                            parentScope: scope,
                            entityId: entity.id
                        }
                    }).then(function (res) {
                        if (res && res.res === 'agree') {
                            scope.externalCallback();
                        }
                    });
                };

                scope.changePage = function (page) {

                    console.log('page----------------', page);

                    scope.externalCallback({options: {paginationPageCurrent: page}});
                };

                scope.$watchCollection('options.lastUpdate', function () {

                    scope.externalCallback = scope.options.externalCallback;
                    scope.grouping = scope.options.grouping;
                    scope.columns = scope.options.columns;
                    scope.entityType = scope.options.entityType;
                    scope.reportIsReady = scope.options.reportIsReady;
                    scope.isReport = scope.options.isReport;

                    syncGroupsAndColumns();

                    if (scope.isReport == true && scope.items) {
                        //console.log('scope.reportItems', scope.reportItems);

                        scope.reportItems = groupTableReportService.transformItems(scope.items);
                    }
                });


            }
        }
    }


}());
},{"../../../../../core/services/logService":2,"../../helpers/groupTableBodyHelper":182,"../../services/attributeTypeService":304,"../../services/bindCellService":307,"../../services/entityClassifierSingletonService":315,"../../services/groupTable/groupTableReportService":327,"../../services/metaService":375}],163:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function () {
        return {
            restrict: 'AE',
            templateUrl: 'views/directives/groupTable/group-table-shell-view.html',
            scope: {
                items: '=',
                options: '=',
                reportOptions: '='
            },
            link: function (scope, elem, attrs) {

                logService.component('groupTable', 'initialized');

                console.log('Group Table shell', scope.options);

                scope.findSelectedFeature = function () {
                    var selected = {isOpened: false, templateUrl: ''};
                    //console.log('additionsStatus', scope.additionsStatus);
                    scope.options.additionsStatus.extraFeatures.forEach(function (item) {
                        if (item.isOpened == true) {
                            selected = item;
                        }
                    });
                    //console.log(selected);

                    return selected;
                };

                scope.triggerResize = function () {

                };

                if (scope.options.isRootEntityViewer == true) {

                    scope.$watch('options.editorEntityId', function (event, data) {

                        scope.$broadcast('rootEditorEntityIdDown', {
                            editorEntityId: scope.options.editorEntityId,
                            entityType: scope.options.entityType
                        });
                    });
                }

                scope.checkAdditions = function () {
                    if (scope.options.additionsState == true && scope.options.isRootEntityViewer == true && scope.options.components.splitPanel == true) {
                        return true;
                    }
                    return false;
                }

            }
        }
    }

}());
},{"../../../../../core/services/logService":2}],164:[function(require,module,exports){
/**
 * Created by szhitenev on 03.06.2016.
 */

(function () {

    'use strict';

    var logService = require('../../../../../core/services/logService');

    module.exports = function () {
        return {
            restrict: 'A',
            scope: {},
            link: function (scope, elem, attrs) {

                logService.component('groupVerticalScroll', 'initialized');

                function setVerticalScrolFixed() {
                    var offsetLeft = $(elem).parents('.g-table-section').width() + $('md-sidenav').width() - 15;
                    var offsetTop = $(elem).offset().top;
                    //console.log('VERTICAL SCROLL BAR TABLE', elem);
                    //$(elem).find('.mCSB_scrollTools_vertical').css({
                    //    height: $(elem).height() + 'px',
                    //    position: 'fixed',
                    //    top: offsetTop + 'px',
                    //    left: offsetLeft + 'px'
                    //});
                }

                //$(elem).mCustomScrollbar({
                //    axis: "y", callbacks: {
                //        onInit: setVerticalScrolFixed,
                //        onBeforeUpdate: setVerticalScrolFixed
                //    }
                //});


            }
        }
    }

}());
},{"../../../../../core/services/logService":2}],165:[function(require,module,exports){
/**
 * Created by szhitenev on 30.06.2016.
 */
(function () {

    'use strict';

    module.exports = function ($templateCache, $compile) {
        return {
            scope: {
                options: '='
            },
            restrict: 'AE',
            link: function (scope, elem, attrs) {

                var tpl = $templateCache.get(scope.options.editorTemplate);
                var ctrl = $compile(tpl)(scope);
                $(elem).append(ctrl);
            }
        }
    }


}());
},{}],166:[function(require,module,exports){
(function () {

	'use strict';

	module.exports = function () {
		return {
			restriction: 'A',
			link: function (scope, elem, attr) {
				console.log('input file directive');
				var inputFile = $('input#providerConfigFile');
				$(elem).on('change', function () {
					console.log('chosen file is 111', this.files);
				});
			}
		}
	}
}());
},{}],167:[function(require,module,exports){
/**
 * Created by szhitenev on 28.06.2016.
 */
(function () {

    'use strict';

    module.exports = function ($mdDialog) {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, elem, attrs, ngModelCtrl) {
                console.log('RESOLVER INSTRUMENT MODAL', ngModelCtrl);

                $(elem).on('click', function (event) {
                    event.preventDefault();
                    event.stopPropagation();

                    setTimeout(function () {
                        $('.md-select-backdrop')[0].dispatchEvent(new Event('click'));
                    }, 400);

                    $mdDialog.show({
                        controller: 'InstrumentEventActionsDialogController as vm',
                        templateUrl: 'views/dialogs/instrument-event-actions-dialog-view.html',
                        parent: angular.element(document.body),
                        targetEvent: event,
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true,
                        clickOutsideToClose: true,
                        locals: {
                            eventActions: ngModelCtrl,
                        }
                    }).then(function (res) {
                        if (res.status === 'agree') {
                            ngModelCtrl.$setViewValue(res.data.item.id);
                            ngModelCtrl.$render();
                            console.log('ngModelCtrl', ngModelCtrl);
                        }
                    });

                    console.log('START MODAL!');
                })

            }
        };
    }

}());
},{}],168:[function(require,module,exports){
/**
 * Created by szhitenev on 28.06.2016.
 */
(function () {

    'use strict';

    module.exports = function ($mdDialog) {
        return {
            restrict: 'A',
            require: '?ngModel',
            link: function (scope, elem, attrs, ngModelCtrl) {
                console.log('RESOLVER INSTRUMENT MODAL', ngModelCtrl);

                $(elem).on('click', function (event) {
                    event.preventDefault();
                    event.stopPropagation();

                    setTimeout(function () {
                        $('.md-select-backdrop')[0].dispatchEvent(new Event('click'));
                    }, 400);

                    $mdDialog.show({
                        controller: 'InstrumentSelectDialogController as vm',
                        templateUrl: 'views/instrument-select-dialog-view.html',
                        parent: angular.element(document.body),
                        targetEvent: event,
                        preserveScope: true,
                        autoWrap: true,
                        skipHide: true,
                        clickOutsideToClose: true,
                        locals: {
                            ngModelCtrl: ngModelCtrl,
                        }
                    }).then(function (res) {
                        if (res.status === 'agree') {
                            ngModelCtrl.$setViewValue(res.data.item.id);
                            ngModelCtrl.$render();
                            console.log('ngModelCtrl', ngModelCtrl);
                        }
                    });

                    console.log('START MODAL!');
                })

            }
        };
    }

}());
},{}],169:[function(require,module,exports){
/**
 * Created by szhitenev on 17.06.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');
    var fieldResolverService = require('../services/fieldResolverService');
    var bindFieldsHelper = require('../helpers/bindFieldsHelper');
    var metaService = require('../services/metaService');
    var tagService = require('../services/tagService');

    module.exports = function ($scope) {

        return {
            scope: {
                item: '=',
                options: '='
            },
            templateUrl: 'views/directives/instrument-scheme-manager-field-resolver-view.html',
            link: function (scope, elem, attrs) {

                logService.component('EntityViewerFieldResolverController', 'initialized');

                scope.readyStatus = {content: false, tags: false};
                scope.type = '';

                logService.property('field scope', scope.item);
                logService.property('field entity', scope.entity);
                logService.property('field options', scope.options);

                scope.getFieldsGrouped = function () {

                    if (metaService.getFieldsWithTagGrouping().indexOf(scope.item.key) !== -1) {

                        var entityType = scope.item.key.replace('_', '-'); // refactor this

                        console.log('ENTITYTYPE------------------------------------------', entityType);

                        tagService.getListByContentType(entityType).then(function (data) { //refactor entityType getter
                            scope.tags = data.results;

                            scope.groups = bindFieldsHelper.groupFieldsByTagsWithDuplicates(scope.fields, scope.tags);

                            console.log('test?');

                            scope.readyStatus.tags = true;

                            scope.$apply(function () {

                                setTimeout(function () {
                                    $(elem).find('.md-select-search-pattern').on('keydown', function (ev) {
                                        ev.stopPropagation();
                                    });
                                }, 100);
                            })
                        })
                    }
                };

                scope.searchTerm = '';

                fieldResolverService.getFields(scope.item.key, scope.options).then(function (res) {
                    logService.collection('DATA', res);
                    scope.type = res.type;
                    scope.fields = res.data;
                    scope.readyStatus.content = true;

                    scope.getFieldsGrouped();

                    scope.$apply(function () {

                        setTimeout(function () {
                            $(elem).find('.md-select-search-pattern').on('keydown', function (ev) {
                                ev.stopPropagation();
                            });
                        }, 100);
                    });
                });

                scope.resolveSort = function (field) {
                    if (field) {
                        if (field.hasOwnProperty('name')) {
                            return field.name
                        }
                        if (field.hasOwnProperty('user_code')) {
                            return field.user_code
                        }
                        if (field.hasOwnProperty('public_name')) {
                            return field.public_name
                        }
                    }
                };

                scope.checkComplexEntityType = function () {
                    if (metaService.getFieldsWithTagGrouping().indexOf(scope.item.key) !== -1) {
                        return true
                    }
                    return false
                };

                scope.getName = function () {
                    if (scope.item.options && scope.item.options.fieldName) {
                        return scope.item.options.fieldName;
                    }
                    return scope.item.name
                };

                scope.changeWatcher = function () {
                    localStorage.setItem('entityIsChanged', true);
                };

                scope.bindFormFields = function () {

                    var id = scope.item.expression;
                    if (id) {
                        var i;
                        var attr;

                        for (i = 0; i < scope.fields.length; i = i + 1) {
                            if (id == scope.fields[i].id) {
                                attr = scope.fields[i]
                            }
                        }

                        if (scope.item.options && scope.item.options.fieldsForm) {
                            var resultCaption = '';
                            scope.item.options.fieldsForm.forEach(function (item, index) {
                                if (index + 1 === scope.item.options.fieldsForm.length) {
                                    resultCaption = resultCaption + attr[item];
                                } else {
                                    resultCaption = resultCaption + attr[item] + ' / ';
                                }
                            });

                            return resultCaption
                        }

                        return attr.name
                    } else {
                        return scope.getName();
                    }
                };

                scope.bindListFields = function (field) {
                    //console.log('scope.item.options', scope.item.options);
                    if (scope.item.options && scope.item.options.fieldsList) {
                        var resultCaption = '';
                        scope.item.options.fieldsList.forEach(function (item, index) {
                            if (index + 1 === scope.item.options.fieldsList.length) {
                                resultCaption = resultCaption + field[item];
                            } else {
                                resultCaption = resultCaption + field[item] + ' / ';
                            }
                        });

                        return resultCaption
                    }

                    return field.name
                };

            }

        }
    }
}());
},{"../../../../core/services/logService":2,"../helpers/bindFieldsHelper":181,"../services/fieldResolverService":321,"../services/metaService":375,"../services/tagService":390}],170:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */
(function () {

    'use strict';

    var logService = require('../../../../core/services/logService');

    var metaService = require('../services/metaService');
    var layoutService = require('../services/layoutService');

    module.exports = function () {
        return {
            restrict: 'AE',
            templateUrl: 'views/directives/layout-constructor-field-view.html',
            scope: {
                tab: '=',
                row: '=',
                column: '='
            },
            link: function (scope, elem, attr) {


                // var choices = metaService.getValueTypes();
                var choices = metaService.getTypeCaptions();
                //console.log('Choices information type ', choices);
                scope.item = {
                    column: scope.column,
                    row: scope.row,
                    colspan: 1,
                    editMode: false
                };

                scope.specialOptionTemplate = '';

                function findItem() {
                    var i;

                    for (i = 0; i < scope.tab.layout.fields.length; i = i + 1) {
                        if (scope.tab.layout.fields[i].row === scope.row) {
                            if (scope.tab.layout.fields[i].column === scope.column) {
                                scope.item = scope.tab.layout.fields[i];
                                scope.backupItem = JSON.parse(JSON.stringify(scope.tab.layout.fields[i]));
                            }
                        }
                    }
                }

                findItem();

                scope.fieldType = null;
                scope.editMode = false;
                scope.entityType = scope.$parent.vm.entityType;

                scope.attrs = scope.$parent.vm.attrs || [];
                scope.baseAttrs = scope.$parent.vm.baseAttrs || [];
                scope.entityAttrs = scope.$parent.vm.entityAttrs || [];
                scope.userInputs = scope.$parent.vm.userInputs || [];
                scope.layoutAttrs = layoutService.getLayoutAttrs();

                var baseAttrsKeys = [];
                scope.baseAttrs.forEach(function (baseAttr) {
                    baseAttrsKeys.push(baseAttr.key);
                });
                var entityAttrsKeys = [];
                scope.entityAttrs.forEach(function (entityAttr) {
                    entityAttrsKeys.push(entityAttr.key);
                });
                var layoutAttrsKeys = [];
                scope.layoutAttrs.forEach(function (layoutAttr) {
                    layoutAttrsKeys.push(layoutAttr.key);
                });


                //console.log('scope.userInputs ', scope.userInputs);

                var tabs = scope.$parent.vm.tabs;

                function addRow() {
                    var c;
                    scope.tab.layout.rows = scope.tab.layout.rows + 1;
                    for (c = 0; c < scope.tab.layout.columns; c = c + 1) {
                        scope.tab.layout.fields.push({
                            row: scope.tab.layout.rows,
                            column: c + 1,
                            colspan: 1,
                            type: 'empty'
                        });
                        console.log('tab', scope.tab);
                    }
                }

                scope.cancel = function () {
                    //console.log('scope.item', scope.item);
                    //console.log('scope.backupItem', scope.backupItem);
                    if (scope.item.name || scope.item.id) {
                        scope.item = scope.backupItem;
                        scope.item.colspan = scope.backupItem.colspan;
                    } else {
                        scope.item.attr = null;
                        scope.item.colspan = 1;
                    }
                    //console.log('scope.item', scope.item);
                    //console.log('scope.backupItem', scope.backupItem);
                    scope.item.editMode = false;
                };

                scope.toggleEditMode = function () {
                    var i;
                    for (i = 0; i < scope.tab.layout.fields.length; i = i + 1) {
                        scope.tab.layout.fields[i].editMode = false;
                    }

                    scope.item.editMode = true;
                };

                scope.saveField = function () {
                    var i;

                    for (i = 0; i < scope.tab.layout.fields.length; i = i + 1) {
                        //console.log('scope.tab.layout', scope.tab.layout.fields[i]);
                        if (scope.tab.layout.fields[i].row === scope.item.row && scope.tab.layout.fields[i].column === scope.item.column) {
                            if (scope.item.attribute.hasOwnProperty('id')) {
                                scope.tab.layout.fields[i].attribute_class = 'attr';
                                scope.tab.layout.fields[i].id = scope.item.attribute.id;
                            } else {
                                scope.tab.layout.fields[i].name = scope.item.attribute.name;
                                if (baseAttrsKeys.indexOf(scope.item.attribute.key) !== -1) {
                                    scope.tab.layout.fields[i].attribute_class = 'baseAttr';
                                } else {
                                    if (entityAttrsKeys.indexOf(scope.item.attribute.key) !== -1) {
                                        scope.tab.layout.fields[i].attribute_class = 'entityAttr';
                                    } else {
                                        if (layoutAttrsKeys.indexOf(scope.item.attribute.key) !== -1) {
                                            scope.tab.layout.fields[i].attribute_class = 'decorationAttr';
                                        } else {
                                            scope.tab.layout.fields[i].attribute_class = 'userInput';
                                        }
                                    }
                                }
                            }
                            scope.tab.layout.fields[i].type = 'field';
                            scope.tab.layout.fields[i].colspan = scope.item.colspan;
                            scope.tab.layout.fields[i].attribute = scope.item.attribute;
                            //console.log('scope.tab.layout', scope.tab.layout);
                            if (scope.tab.layout.fields[i].row == scope.tab.layout.rows) {
                                addRow();
                            } else {
                                //findEmptyRows();
                            }
                        }
                    }
                    scope.item.editMode = false;
                };

                function findEmptyRows() {
                    var i, r, columnsIsEmpty;
                    var emptyRows = [];
                    for (r = 1; r <= scope.tab.layout.rows; r = r + 1) {
                        columnsIsEmpty = true;
                        for (i = 0; i < scope.tab.layout.fields.length; i = i + 1) {
                            if (scope.tab.layout.fields[i].row == r) {
                                if (scope.tab.layout.fields[i].type === 'field') {
                                    columnsIsEmpty = false;
                                    break;
                                }
                            }
                        }
                        if (columnsIsEmpty) {
                            emptyRows.push(r);
                        }
                    }

                    deleteEmptyRows(emptyRows);
                }

                function deleteEmptyRows(emptyRows) {
                    var i, e;
                    //console.log('emptyRows', emptyRows);
                    for (i = scope.tab.layout.rows; i > 0; i = i - 1) {
                        for (e = emptyRows.length; e > 0; e = e - 1) {
                            //console.log('e', e);
                            //console.log('emptyRows[e]', emptyRows[e]);
                            //console.log('i', i);
                            //console.log('------------------------------------------');
                            if (i === emptyRows[e]) {
                                if (i - 1 === emptyRows[e - 1] && i !== emptyRows[0]) {
                                    var f;
                                    for (f = 0; f < scope.tab.layout.fields.length; f = f + 1) {
                                        if (scope.tab.layout.fields[f].row == scope.tab.layout.rows) {
                                            scope.tab.layout.fields.splice(f, 1);
                                            f = f - 1;
                                        }
                                    }
                                    //console.log('scope.tab.layout', scope.tab.layout);
                                    scope.tab.layout.rows = scope.tab.layout.rows - 1;
                                }
                            }
                        }
                    }
                }

                scope.getCols = function () {

                    var i, c = 1;
                    var colsLeft = [1];
                    for (i = scope.column; i < scope.tab.layout.columns; i = i + 1) {
                        c = c + 1;
                        colsLeft.push(c);
                    }

                    return colsLeft;
                };

                scope.changeModel = function (item) {
                    scope.item.attribute = item;
                };

                scope.deleteField = function () {
                    var i;
                    scope.item.id = null;
                    scope.item.key = null;
                    scope.item.attribute = null;
                    scope.item.attribute_class = null;
                    scope.item.disabled = false;
                    scope.item.options = null;
                    scope.item.colspan = 1;
                    for (i = 0; i < scope.tab.layout.fields.length; i = i + 1) {
                        if (scope.tab.layout.fields[i].row == scope.item.row) {
                            if (scope.tab.layout.fields[i].column == scope.item.column) {
                                scope.tab.layout.fields[i].id = null;
                                scope.tab.layout.fields[i].key = null;
                                scope.tab.layout.fields[i].attribute_class = null;
                                scope.tab.layout.fields[i].disabled = false;
                                scope.tab.layout.fields[i].colspan = 1;
                                scope.tab.layout.fields[i].name = '';
                                scope.tab.layout.fields[i].type = 'empty';
                                findEmptyRows();
                                break;
                            }
                        }
                    }
                };

                function findAttribute() {
                    var i, b, l, e, u;
                    for (i = 0; i < scope.attrs.length; i = i + 1) {
                        if (scope.attrs[i].id && scope.item.id) {
                            if (scope.attrs[i].id === scope.item.id) {
                                scope.item.attribute = scope.attrs[i];
                                scope.backupItem.attribute = scope.attrs[i];
                            }
                        } else {
                            for (b = 0; b < scope.baseAttrs.length; b = b + 1) {
                                if (scope.baseAttrs[b].name === scope.item.name) {
                                    scope.item.attribute = scope.baseAttrs[b];
                                    scope.backupItem.attribute = scope.baseAttrs[b];
                                }
                            }
                            for (e = 0; e < scope.entityAttrs.length; e = e + 1) {
                                if (scope.entityAttrs[e].name === scope.item.name) {
                                    scope.item.attribute = scope.entityAttrs[e];
                                    scope.backupItem.attribute = scope.entityAttrs[e];
                                }
                            }
                            for (u = 0; u < scope.userInputs.length; u = u + 1) {
                                if (scope.userInputs[u].name === scope.item.name) {
                                    scope.item.attribute = scope.userInputs[u];
                                    scope.backupItem.attribute = scope.userInputs[u];
                                }
                            }
                            if (!scope.item.attribute) {
                                for (l = 0; l < scope.layoutAttrs.length; l = l + 1) {
                                    if (scope.layoutAttrs[l].name === scope.item.name) {
                                        scope.item.attribute = scope.layoutAttrs[l];
                                        scope.backupItem.attribute = scope.layoutAttrs[l];
                                    }
                                }
                            }
                        }
                    }
                }

                findAttribute();

                scope.findAttrsLeft = function () {

                    scope.attrs.forEach(function (attr) {
                        attr.disabled = false;
                        tabs.forEach(function (tab) {
                            tab.layout.fields.forEach(function (item) {
                                if (item.type === 'field') {
                                    if (attr.id === item.id) {
                                        attr.disabled = true;
                                    }
                                }
                            })
                        })
                    });
                    scope.baseAttrs.forEach(function (baseAttr) {
                        baseAttr.disabled = false;
                        tabs.forEach(function (tab) {
                            tab.layout.fields.forEach(function (item) {
                                if (item.type === 'field') {
                                    if (baseAttr.key === item.attribute.key) {
                                        baseAttr.disabled = true;
                                        console.log('baseAttr', baseAttr);
                                    }
                                }
                            })
                        })
                    });

                    scope.entityAttrs.forEach(function (entityAttr) {
                        entityAttr.disabled = false;
                        tabs.forEach(function (tab) {
                            tab.layout.fields.forEach(function (item) {
                                if (item.type === 'field') {
                                    if (entityAttr.key === item.attribute.key) {
                                        entityAttr.disabled = true;
                                    }
                                }
                            })
                        })
                    });

                    scope.userInputs.forEach(function (userInput) {
                        userInput.disabled = false;
                        tabs.forEach(function (tab) {
                            tab.layout.fields.forEach(function (item) {
                                if (item.type === 'field') {
                                    if (userInput.key === item.attribute.key) {
                                        userInput.disabled = true;
                                    }
                                }
                            })
                        })
                    })

                };


                scope.bindAttrName = function (item) {

                    //console.log('item', item);

                    if (item.attribute.hasOwnProperty('verbose_name')) {
                        return item.attribute.verbose_name;
                    }

                    return item.attribute.name;
                };


                scope.bindTypeByValueType = function (valueType) {
                    var i;
                    for (i = 0; i < choices.length; i = i + 1) {
                        if (valueType === choices[i].value) {
                            // return choices[i]["display_name"];
                            return choices[i]["caption_name"];
                        }
                    }
                };

                scope.findSelected = function (fields, val) {
                    //console.log(fields, val);

                    if (fields && val) {
                        if (fields.join(' ') === val.join(' ')) {
                            return true;
                        }
                    }

                    return false;
                };

                scope.copyFromValue = function (attr) {
                    if (attr.id) {
                        return JSON.stringify({id: attr.id});
                    }
                    return JSON.stringify({key: attr.key});
                };

                scope.findStringAttributes = function () {
                    var b, a, e;
                    var stringAttrs = [];

                    for (a = 0; a < scope.attrs.length; a = a + 1) {
                        if (scope.attrs[a]['value_type'] === 10) {
                            stringAttrs.push(scope.attrs[a]);
                        }
                    }
                    if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(scope.entityType) === -1) {
                        for (b = 0; b < scope.baseAttrs.length; b = b + 1) {
                            if (scope.baseAttrs[b]['value_type'] === 10) {
                                stringAttrs.push(scope.baseAttrs[b]);
                            }
                        }
                    }

                    for (e = 0; e < scope.entityAttrs.length; e = e + 1) {
                        if (scope.entityAttrs[e]['value_type'] === 10) {
                            stringAttrs.push(scope.entityAttrs[e]);
                        }
                    }

                    //console.log('stringAttrs', stringAttrs);

                    return stringAttrs;

                };

                scope.checkForSpecialOptions = function () {

                    if (scope.item.attribute) {

                        if (scope.item.attribute.name === 'Notes') {
                            scope.specialOptionTemplate = 'views/attribute-options/notes.html';
                            return true;
                        }

                        if (scope.item.attribute['value_type'] == 10) {
                            scope.specialOptionTemplate = 'views/attribute-options/string.html';
                            return true;
                        }
                        //console.log('scope.item.attribute', scope.item.attribute);
                        if (scope.item.attribute['value_type'] === 'field'
                            && metaService.getRestrictedEntitiesWithTypeField().indexOf(scope.item.attribute.key) === -1) {
                            scope.specialOptionTemplate = 'views/attribute-options/field.html';
                            return true;
                        }

                        if (scope.item.attribute['value_type'] == 40) {
                            scope.specialOptionTemplate = 'views/attribute-options/date.html';
                            return true;
                        }

                        if (scope.item.attribute['value_type'] === 20 || scope.item.attribute['value_type'] === 'float') {
                            scope.specialOptionTemplate = 'views/attribute-options/number.html';
                            return true;
                        }

                        if (scope.item.attribute['value_type'] === 'decoration' && scope.item.attribute.key === 'layoutLineWithLabel') {
                            scope.specialOptionTemplate = 'views/attribute-options/labeled-line.html';
                            return true;
                        }
                    }

                    return false;
                };

            }
        }
    }

}());
},{"../../../../core/services/logService":2,"../services/layoutService":368,"../services/metaService":375}],171:[function(require,module,exports){
(function() {
	'use strict';

	var logService = require('../../../../core/services/logService');

	module.exports = function () {
		return {
			restrict: 'A',
			scope: {
				rows: '=',
				columnsNames: '=',
				columns: '='
			},
			templateUrl: 'views/directives/members-groups-table-view.html'
		}
	}
}());
},{"../../../../core/services/logService":2}],172:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function(){

    'use strict';

    module.exports = function(){
        return {
            scope: {
                section: '='
            },
            templateUrl: 'views/directives/menu-link-view.html',
            link: function(scope, elem){
                var controller = elem.parent().controller();

                scope.focusSection = function(){
                    $('.side-nav-dropdown').remove();
                    controller.autoFocusContent = true;
                }
            }
        }
    }


}());
},{}],173:[function(require,module,exports){
/**
 * Created by szhitenev on 05.05.2016.
 */
(function(){

    'use strict';

    module.exports = function(){

        return {
            scope: {
                section: '='
            },
            templateUrl: 'views/directives/menu-toggle-view.html',
            link: function(scope, elem) {

                var controller = elem.parent().controller();
                scope.isOpen = function(){
                    return controller.isOpen(scope.section);
                };

                scope.toggle = function($event){
                    controller.toggleOpen($event, scope.section);
                }

            }
        }


    }

}());
},{}],174:[function(require,module,exports){
(function () {

    'use strict';

    var renderEventService = require('../services/renderEventService');

    module.exports = function () {
        return {
            restrict: 'A',

            link: function (scope, element, attr) {

                if (scope.$last === true) {

                    setTimeout(function () {

                        renderEventService.emit(attr.onFinishRender + ':ng-repeat:finished');

                        scope.$apply();

                    }, 0);
                }
            }
        }
    }

}());
},{"../services/renderEventService":380}],175:[function(require,module,exports){
(function () {

	'use strict';

	module.exports = function () {
		return {
			restrict: 'E',
			scope: {
				allOptions: "=",
				selectedOptions: "="
			},
			templateUrl: 'views/directives/two-fields-options-view.html',
			link: function (scope, elem, attr) {
				
				scope.highlightOption = function (ev) {
					var clickedOption = ev.currentTarget;
					if ($(clickedOption).hasClass('active-option')) {
						$(clickedOption).removeClass('active-option');
					}
					else {
						$(clickedOption).addClass('active-option');	
					}
				}
				// switch options to selected
				scope.switchOptions = function (optionsSelector, spliceScope, pushScope) {
					// var hOptions = $('p.two-fields-available-option.active-option');
					var hOptions = $(optionsSelector);
					if (hOptions && hOptions.length > 0) {
						hOptions.each(function() {
							var hOption = $(this);
							var hOptionId = parseInt(hOption.data('member-group-id'));
							// scope.allOptions.map(function(option, optionIndex) {
							// 	if (option['id'] === hOptionId) {
							// 		console.log('before select', scope.allOptions, scope.selectedOptions);
							// 		scope.allOptions.splice(optionIndex, 1); //remove options from available
							// 		scope.selectedOptions.push(option); // add options to selected
							// 		console.log('after select', scope.allOptions, scope.selectedOptions);
							// 	}
							// });
							spliceScope.map(function(option, optionIndex) {
								if (option['id'] === hOptionId) {
									spliceScope.splice(optionIndex, 1); //remove options from available
									pushScope.push(option); // add options to selected
									console.log('after select', scope.allOptions, scope.selectedOptions);
								}
							});
						});
					}
				}

				// getAvailableOptions();
			}
		}
	}

}());
},{}],176:[function(require,module,exports){
/**
 * Created by szhitenev on 01.07.2016.
 */
(function () {

    'use strict';

    module.exports = function () {

        return {
            restrict: 'AE',
            scope: {
                position: '@'
            },
            require: '?ngModel',
            template: '<div class="pick-me-up"><input type="text" value=""></div>',
            // template: '<md-input-container class="pick-me-up"><input type="text" value=""></md-input-containe>',
            link: function (scope, elem, attrs, ngModel) {

                var input = $(elem).find('input');

                var position = 'right';

                if (scope.position) {
                    position = scope.position;
                }


                if (ngModel.$modelValue) {
                    $(elem).parent().addClass('md-input-has-value');
                    input.pickmeup({
                        date: new Date(ngModel.$modelValue),
                        current: new Date(ngModel.$modelValue),
                        position: position,
                        default_date: false,
                        'hide_on_select': true,
                        format: 'Y-m-d',
                        change: function () {
                            ngModel.$setViewValue(this.value);
                        }
                    });
                } else {
                    $(elem).parent().addClass('md-input-has-value');
                    input.pickmeup({
                        position: position,
                        default_date: false,
                        'hide_on_select': true,
                        format: 'Y-m-d',
                        change: function () {
                            ngModel.$setViewValue(this.value);
                        }
                    });
                }


                var unregister = scope.$watch(function () {

                    if (new Date(ngModel.$modelValue) !== 'Invalid Date') {
                        input.val(moment(new Date(ngModel.$modelValue)).format('YYYY-MM-DD'));
                        unregister();
                    }

                });

            }
        }

    }

}());
},{}],177:[function(require,module,exports){
/**
 * Created by szhitenev on 24.01.2017.
 */
(function () {

    'use strict';

    module.exports = function () {
        return function (items, props) {
            var out = [];

            if (angular.isArray(items)) {
                var keys = Object.keys(props);

                items.forEach(function (item) {
                    var itemMatches = false;

                    for (var i = 0; i < keys.length; i++) {
                        var prop = keys[i];
                        var text = props[prop].toLowerCase();
                        if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                            itemMatches = true;
                            break;
                        }
                    }

                    if (itemMatches) {
                        out.push(item);
                    }
                });
            } else {
                // Let the output be the input untouched
                out = items;
            }

            return out;
        };
    };

}());
},{}],178:[function(require,module,exports){
/**
 * Created by szhitenev on 29.06.2016.
 */
(function () {

    'use strict';

    module.exports = function ($filter) {
        return function (value, wordwise, max, tail) {
            console.log('value', value);
            if (!value) return '';
            var val = value.$$unwrapTrustedValue();



            max = parseInt(max, 10);
            if (!max) return value;
            if (val.length <= max) return val;

            val = val.substr(0, max);
            if (wordwise) {
                var lastspace = val.lastIndexOf(' ');
                if (lastspace != -1) {
                    //Also remove . and , so its gives a cleaner result.
                    if (val.charAt(lastspace-1) == '.' || val.charAt(lastspace-1) == ',') {
                        lastspace = lastspace - 1;
                    }
                    val = val.substr(0, lastspace);
                }
            }

            return val + (tail || ' …');
        };
    }

}());
},{}],179:[function(require,module,exports){
/**
 * Created by szhitenev on 24.06.2016.
 */
(function () {

    'use strict';

    module.exports = function ($sce) {
        return function (val) {
            //console.log('val', val);
            if (val) {
                return $sce.trustAsHtml(val.toString());
            }
        };
    }

}());
},{}],180:[function(require,module,exports){
/**
 * Created by szhitenev on 24.06.2016.
 */
(function () {

    'use strict';

    module.exports = function ($sce) {
        return function (val) {
            //console.log('val', val);
            if (val) {
                return $sce.trustAsResourceUrl(val.toString());
            }
        };
    }

}());
},{}],181:[function(require,module,exports){
/**
 * Created by szhitenev on 12.09.2016.
 */
(function () {

    'use strict';

    var groupFieldsByTagsWithDuplicates = function (fields, tags) {

        if (tags && tags.length) {
            tags.forEach(function (tag) {
                tag.fields = [];

                if (fields && fields.length) {
                    fields.forEach(function (field) {
                        field.tags.forEach(function (fieldTag) {
                            if (fieldTag == tag.id) {
                                tag.fields.push(field);
                            }
                        })
                    })
                }

            });
        }

        return [{name: 'No group', fields: fields}];
    };

    module.exports = {
        groupFieldsByTagsWithDuplicates: groupFieldsByTagsWithDuplicates
    }

}());
},{}],182:[function(require,module,exports){
(function () {

    'use strict';

    function returnValue(attribute) {

        if (attribute['attribute_type_object'].value_type == 30) {
            return attribute['classifier']
        } else {
            if (attribute['attribute_type_object'].value_type == 40) {
                return attribute['value_date'];
            } else {
                if (attribute['attribute_type_object'].value_type == 20) {
                    return attribute['value_float'];
                } else {
                    if (attribute['attribute_type_object'].value_type == 10 && attribute['value_string'] !== '') {
                        return attribute['value_string'];
                    } else {
                        return null;
                    }
                }
            }
        }
    }


    var findGroupedItemAttribute = function (groupedItem, attributeId) {

        var result = '';


        if (groupedItem.attributes) {
            groupedItem.attributes.forEach(function (item) {
                if (item.attribute_type_object.id == attributeId) {
                    result = returnValue(item);
                }
            });
        }

        return result;

    };

    module.exports = {
        findGroupedItemAttribute: findGroupedItemAttribute
    }

}());
},{}],183:[function(require,module,exports){
(function () {

    'use strict';

    var copy = function (event) {

        var rows = document.querySelectorAll('.g-table-body-component group-bind-report-row');

        var table = '<table>';

        var columns = document.querySelectorAll('.g-scroll-wrapper .g-cell');

        table = table + '<thead>';
        table = table + '<tr>';

        for (var hc = 0; hc < columns.length; hc = hc + 1) {

            table = table + '<th><b>' + columns[hc].querySelector('.caption').textContent + '</b></th>';
        }

        table = table + '</tr>';
        table = table + '</thead>';

        table = table + '<tbody>';

        var tr;
        var cells;
        var bg;
        for (var i = 0; i < rows.length; i = i + 1) {

            cells = rows[i].querySelectorAll('.g-cell');

            //console.log('cells', cells);

            tr = '<tr>';

            for (var c = 0; c < cells.length; c = c + 1) {

                bg = getComputedStyle(cells[c]).backgroundColor;

                if (cells[c].querySelector('b')) {
                    tr = tr + '<td bgcolor="' + bg + '"><b>' + cells[c].innerText + '</b></td>'
                } else {
                    tr = tr + '<td bgcolor="' + bg + '">' + cells[c].innerText + '</td>'
                }
            }

            tr = tr + '</tr>';

            table = table + tr;
        }

        table = table + "</tbody>";
        table = table + "</table>";

        var listener = function (e) {

            console.log('table', table);

            e.clipboardData.setData('text/html', table);

            e.preventDefault();
        };

        document.addEventListener('copy', listener, false);

        document.execCommand("copy");

        document.removeEventListener('copy', listener, false);


    };

    module.exports = {
        copy: copy
    }

}());
},{}],184:[function(require,module,exports){
/**
 * Created by szhitenev on 13.02.2017.
 */
(function () {

    'use strict';

    var releaseEntityObjects = function (entity) {

        //console.log('entity', entity);

        if (entity.length) {

            entity.forEach(function (item) {

                if (item.hasOwnProperty('instrument_object') && item.instrument_object) {

                    var instrumentObjectKeys = Object.keys(item.instrument_object);

                    instrumentObjectKeys.forEach(function (instrumentObjectKeyItem) {
                        item['instrument_object_' + instrumentObjectKeyItem] = item.instrument_object[instrumentObjectKeyItem];
                    });

                    if (item.instrument_object.hasOwnProperty('instrument_type_object')) {
                        var instrumentTypeObjectKeys = Object.keys(item.instrument_object.instrument_type_object);

                        instrumentTypeObjectKeys.forEach(function (instrumentObjectKeyItem) {
                            item['instrument_type_object_' + instrumentObjectKeyItem] = item.instrument_object.instrument_type_object[instrumentObjectKeyItem];
                        })
                    }

                }

                if (item.hasOwnProperty('allocation_object') && item.allocation_object) {

                    var instrumentBalanceObjectKeys = Object.keys(item.allocation_object);

                    instrumentBalanceObjectKeys.forEach(function (instrumentObjectKeyItem) {
                        item['allocation_object_' + instrumentObjectKeyItem] = item.allocation_object[instrumentObjectKeyItem];
                    });

                    if (item.allocation_object.hasOwnProperty('instrument_type_object')) {
                        var instrumentBalanceTypeObjectKeys = Object.keys(item.allocation_object.instrument_type_object);

                        instrumentBalanceTypeObjectKeys.forEach(function (instrumentObjectKeyItem) {
                            item['allocation_type_object_' + instrumentObjectKeyItem] = item.allocation_object.instrument_type_object[instrumentObjectKeyItem];
                        })
                    }

                }

                //if (item.hasOwnProperty('allocation_balance_object') && item.allocation_balance_object) {
                //
                //    var instrumentBalanceObjectKeys = Object.keys(item.allocation_balance_object);
                //
                //    instrumentBalanceObjectKeys.forEach(function (instrumentObjectKeyItem) {
                //        item['allocation_balance_object_' + instrumentObjectKeyItem] = item.allocation_balance_object[instrumentObjectKeyItem];
                //    });
                //
                //    if (item.allocation_balance_object.hasOwnProperty('instrument_type_object')) {
                //        var instrumentBalanceTypeObjectKeys = Object.keys(item.allocation_balance_object.instrument_type_object);
                //
                //        instrumentBalanceTypeObjectKeys.forEach(function (instrumentObjectKeyItem) {
                //            item['allocation_balance_type_object_' + instrumentObjectKeyItem] = item.allocation_balance_object.instrument_type_object[instrumentObjectKeyItem];
                //        })
                //    }
                //
                //}
                //
                //if (item.hasOwnProperty('allocation_pl_object') && item.allocation_pl_object) {
                //
                //    var instrumentPlObjectKeys = Object.keys(item.allocation_pl_object);
                //
                //    instrumentPlObjectKeys.forEach(function (instrumentObjectKeyItem) {
                //        item['allocation_pl_object_' + instrumentObjectKeyItem] = item.allocation_pl_object[instrumentObjectKeyItem];
                //    });
                //
                //    if (item.allocation_pl_object.hasOwnProperty('instrument_type_object')) {
                //        var instrumentPlTypeObjectKeys = Object.keys(item.allocation_pl_object.instrument_type_object);
                //
                //        instrumentPlTypeObjectKeys.forEach(function (instrumentObjectKeyItem) {
                //            item['allocation_pl_type_object_' + instrumentObjectKeyItem] = item.allocation_pl_object.instrument_type_object[instrumentObjectKeyItem];
                //        })
                //    }
                //
                //}

                if (item.hasOwnProperty('linked_instrument_object') && item.linked_instrument_object) {

                    var linkedInstrumentObjectKeys = Object.keys(item.linked_instrument_object);

                    linkedInstrumentObjectKeys.forEach(function (instrumentObjectKeyItem) {
                        item['linked_instrument_object_' + instrumentObjectKeyItem] = item.linked_instrument_object[instrumentObjectKeyItem];
                    });

                    if (item.linked_instrument_object.hasOwnProperty('instrument_type_object')) {
                        var linkedInstrumentTypeObjectKeys = Object.keys(item.linked_instrument_object.instrument_type_object);

                        linkedInstrumentTypeObjectKeys.forEach(function (instrumentObjectKeyItem) {
                            item['linked_instrument_object_type_object_' + instrumentObjectKeyItem] = item.linked_instrument_object.instrument_type_object[instrumentObjectKeyItem];
                        })
                    }

                }

                if (item.hasOwnProperty('responsible_object') && item.responsible_object) {

                    var responsibleObjectKeys = Object.keys(item.responsible_object);

                    responsibleObjectKeys.forEach(function (responsibleObjectKeyItem) {
                        item['responsible_object_' + responsibleObjectKeyItem] = item.responsible_object[responsibleObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('counterparty_object') && item.counterparty_object) {

                    var counterpartyObjectKeys = Object.keys(item.counterparty_object);

                    counterpartyObjectKeys.forEach(function (counterPartyObjectKeyItem) {
                        item['counterparty_object_' + counterPartyObjectKeyItem] = item.counterparty_object[counterPartyObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('account_object') && item.account_object) {

                    var accountObjectKeys = Object.keys(item.account_object);

                    accountObjectKeys.forEach(function (accountObjectKeyItem) {
                        item['account_object_' + accountObjectKeyItem] = item.account_object[accountObjectKeyItem];
                    });

                    if (item.account_object.hasOwnProperty('type_object')) {
                        var accountTypeObjectKeys = Object.keys(item.account_object.type_object);

                        accountTypeObjectKeys.forEach(function (accountTypeObjectKeyItem) {
                            item['account_type_object_' + accountTypeObjectKeyItem] = item.account_object.type_object[accountTypeObjectKeyItem];
                        })
                    }

                }

                if (item.hasOwnProperty('account_position_object') && item.account_position_object) {

                    var accountPositionObjectKeys = Object.keys(item.account_position_object);

                    accountPositionObjectKeys.forEach(function (accountObjectKeyItem) {
                        item['account_position_object_' + accountObjectKeyItem] = item.account_position_object[accountObjectKeyItem];
                    });

                    if (item.account_position_object.hasOwnProperty('type_object')) {
                        var accountPositionTypeObjectKeys = Object.keys(item.account_position_object.type_object);

                        accountPositionTypeObjectKeys.forEach(function (accountTypeObjectKeyItem) {
                            item['account_position_type_object_' + accountTypeObjectKeyItem] = item.account_position_object.type_object[accountTypeObjectKeyItem];
                        })
                    }

                }

                if (item.hasOwnProperty('account_cash_object') && item.account_cash_object) {

                    var accountCashObjectKeys = Object.keys(item.account_cash_object);

                    accountCashObjectKeys.forEach(function (accountObjectKeyItem) {
                        item['account_cash_object_' + accountObjectKeyItem] = item.account_cash_object[accountObjectKeyItem];
                    });

                    if (item.account_cash_object.hasOwnProperty('type_object')) {
                        var accountCashTypeObjectKeys = Object.keys(item.account_cash_object.type_object);

                        accountCashTypeObjectKeys.forEach(function (accountTypeObjectKeyItem) {
                            item['account_cash_type_object_' + accountTypeObjectKeyItem] = item.account_cash_object.type_object[accountTypeObjectKeyItem];
                        })
                    }

                }

                if (item.hasOwnProperty('account_interim_object') && item.account_interim_object) {

                    var accountInterimObjectKeys = Object.keys(item.account_interim_object);

                    accountInterimObjectKeys.forEach(function (accountObjectKeyItem) {
                        item['account_interim_object_' + accountObjectKeyItem] = item.account_interim_object[accountObjectKeyItem];
                    });

                    if (item.account_interim_object.hasOwnProperty('type_object')) {
                        var accountInterimTypeObjectKeys = Object.keys(item.account_interim_object.type_object);

                        accountInterimTypeObjectKeys.forEach(function (accountTypeObjectKeyItem) {
                            item['account_interim_type_object_' + accountTypeObjectKeyItem] = item.account_interim_object.type_object[accountTypeObjectKeyItem];
                        })
                    }

                }

                if (item.hasOwnProperty('portfolio_object') && item.portfolio_object) {

                    var portfolioObjectKeys = Object.keys(item.portfolio_object);

                    portfolioObjectKeys.forEach(function (portfolioObjectKeyItem) {
                        item['portfolio_object_' + portfolioObjectKeyItem] = item.portfolio_object[portfolioObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('transaction_currency_object') && item.transaction_currency_object) {

                    var transactionCurrencyObjectKeys = Object.keys(item.transaction_currency_object);

                    transactionCurrencyObjectKeys.forEach(function (transactionCurrencyObjectKeyItem) {
                        item['transaction_currency_object_' + transactionCurrencyObjectKeyItem] = item.transaction_currency_object[transactionCurrencyObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('settlement_currency_object') && item.settlement_currency_object) {

                    var settlementCurrencyObjectKeys = Object.keys(item.settlement_currency_object);

                    settlementCurrencyObjectKeys.forEach(function (settlementCurrencyObjectKeyItem) {
                        item['settlement_currency_object_' + settlementCurrencyObjectKeyItem] = item.settlement_currency_object[settlementCurrencyObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('strategy1_object') && item.strategy1_object) {

                    var strategy1ObjectKeys = Object.keys(item.strategy1_object);

                    strategy1ObjectKeys.forEach(function (strategy1ObjectKeyItem) {
                        item['strategy1_object_' + strategy1ObjectKeyItem] = item.strategy1_object[strategy1ObjectKeyItem];
                    });

                    if (item.strategy1_object.hasOwnProperty('subgroup_object')) {
                        var strategy1subgroupObjectKeys = Object.keys(item.strategy1_object.subgroup_object);

                        strategy1subgroupObjectKeys.forEach(function (strategy1subgroupObjectKeyItem) {
                            item['strategy1_subgroup_object_' + strategy1subgroupObjectKeyItem] = item.strategy1_object.subgroup_object[strategy1subgroupObjectKeyItem];
                        });

                        if (item.strategy1_object.subgroup_object.hasOwnProperty('group_object')) {
                            var strategy1groupObjectKeys = Object.keys(item.strategy1_object.subgroup_object.group_object);

                            strategy1groupObjectKeys.forEach(function (strategy1groupObjectKeyItem) {
                                item['strategy1_group_object_' + strategy1groupObjectKeyItem] = item.strategy1_object.subgroup_object.group_object[strategy1groupObjectKeyItem];
                            })
                        }

                    }

                }

                if (item.hasOwnProperty('strategy1_cash_object') && item.strategy1_cash_object) {

                    var strategy1cashObjectKeys = Object.keys(item.strategy1_cash_object);

                    strategy1cashObjectKeys.forEach(function (strategy1ObjectKeyItem) {
                        item['strategy1_cash_object_' + strategy1ObjectKeyItem] = item.strategy1_cash_object[strategy1ObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('strategy1_position_object') && item.strategy1_position_object) {

                    var strategy1positionObjectKeys = Object.keys(item.strategy1_position_object);

                    strategy1positionObjectKeys.forEach(function (strategy1ObjectKeyItem) {
                        item['strategy1_position_object_' + strategy1ObjectKeyItem] = item.strategy1_position_object[strategy1ObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('strategy2_object') && item.strategy2_object) {

                    var strategy2ObjectKeys = Object.keys(item.strategy2_object);

                    strategy2ObjectKeys.forEach(function (strategy2ObjectKeyItem) {
                        item['strategy2_object_' + strategy2ObjectKeyItem] = item.strategy2_object[strategy2ObjectKeyItem];
                    });

                    if (item.strategy2_object.hasOwnProperty('subgroup_object')) {
                        var strategy2subgroupObjectKeys = Object.keys(item.strategy2_object.subgroup_object);

                        strategy2subgroupObjectKeys.forEach(function (strategy2subgroupObjectKeyItem) {
                            item['strategy2_subgroup_object_' + strategy2subgroupObjectKeyItem] = item.strategy2_object.subgroup_object[strategy2subgroupObjectKeyItem];
                        });

                        if (item.strategy2_object.subgroup_object.hasOwnProperty('group_object')) {
                            var strategy2groupObjectKeys = Object.keys(item.strategy2_object.subgroup_object.group_object);

                            strategy2groupObjectKeys.forEach(function (strategy2groupObjectKeyItem) {
                                item['strategy2_group_object_' + strategy2groupObjectKeyItem] = item.strategy2_object.subgroup_object.group_object[strategy2groupObjectKeyItem];
                            })
                        }
                    }

                }

                if (item.hasOwnProperty('strategy2_cash_object') && item.strategy2_cash_object) {

                    var strategy2cashObjectKeys = Object.keys(item.strategy2_cash_object);

                    strategy2cashObjectKeys.forEach(function (strategy2ObjectKeyItem) {
                        item['strategy2_cash_object_' + strategy2ObjectKeyItem] = item.strategy2_cash_object[strategy2ObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('strategy2_position_object') && item.strategy2_position_object) {

                    var strategy2positionObjectKeys = Object.keys(item.strategy2_position_object);

                    strategy2positionObjectKeys.forEach(function (strategy2ObjectKeyItem) {
                        item['strategy2_position_object_' + strategy2ObjectKeyItem] = item.strategy2_position_object[strategy2ObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('strategy3_object') && item.strategy3_object) {

                    var strategy3ObjectKeys = Object.keys(item.strategy3_object);

                    strategy3ObjectKeys.forEach(function (strategy3ObjectKeyItem) {
                        item['strategy3_object_' + strategy3ObjectKeyItem] = item.strategy3_object[strategy3ObjectKeyItem];
                    });

                    if (item.strategy3_object.hasOwnProperty('subgroup_object')) {
                        var strategy3subgroupObjectKeys = Object.keys(item.strategy3_object.subgroup_object);

                        strategy3subgroupObjectKeys.forEach(function (strategy3subgroupObjectKeyItem) {
                            item['strategy3_subgroup_object_' + strategy3subgroupObjectKeyItem] = item.strategy3_object.subgroup_object[strategy3subgroupObjectKeyItem];
                        });

                        if (item.strategy3_object.subgroup_object.hasOwnProperty('group_object')) {
                            var strategy3groupObjectKeys = Object.keys(item.strategy3_object.subgroup_object.group_object);

                            strategy3groupObjectKeys.forEach(function (strategy3groupObjectKeyItem) {
                                item['strategy3_group_object_' + strategy3groupObjectKeyItem] = item.strategy3_object.subgroup_object.group_object[strategy3groupObjectKeyItem];
                            })
                        }
                    }

                }

                if (item.hasOwnProperty('strategy3_cash_object') && item.strategy3_cash_object) {

                    var strategy3cashObjectKeys = Object.keys(item.strategy3_cash_object);

                    strategy3cashObjectKeys.forEach(function (strategy3ObjectKeyItem) {
                        item['strategy3_cash_object_' + strategy3ObjectKeyItem] = item.strategy3_cash_object[strategy3ObjectKeyItem];
                    });

                }

                if (item.hasOwnProperty('strategy3_position_object') && item.strategy3_cash_object) {

                    var strategy3positionObjectKeys = Object.keys(item.strategy3_position_object);

                    strategy3positionObjectKeys.forEach(function (strategy3ObjectKeyItem) {
                        item['strategy3_position_object_' + strategy3ObjectKeyItem] = item.strategy3_position_object[strategy3ObjectKeyItem];
                    });

                }

                // custom fields

                if (item.hasOwnProperty('custom_fields_object')) {
                    item.custom_fields_object.forEach(function (customField) {

                        var _customField = {value: ''};

                        item.custom_fields.forEach(function(itemCustomField){

                            if(itemCustomField.custom_field == customField.id) {
                                _customField = itemCustomField;
                            }
                        });

                        item[customField.name] = _customField.value;
                    })
                }

                // extract dynamic attributes

                if (item.hasOwnProperty('instrument_object') && item.instrument_object) {

                    if (item.instrument_object.hasOwnProperty('attributes')) {
                        if (item.instrument_object.attributes.length) {

                            item.instrument_object.attributes.forEach(function (attribute) {

                                if (attribute.hasOwnProperty('attribute_type_object')) {

                                    if (attribute.attribute_type_object.value_type == 10) {
                                        item['Instrument.' + attribute.attribute_type_object.display_name] = attribute.value_string;
                                    }
                                    if (attribute.attribute_type_object.value_type == 20) {
                                        item['Instrument.' + attribute.attribute_type_object.display_name] = attribute.value_float;
                                    }
                                    if (attribute.attribute_type_object.value_type == 40) {
                                        item['Instrument.' + attribute.attribute_type_object.display_name] = attribute.value_date;
                                    }
                                    if (attribute.attribute_type_object.value_type == 30) {
                                        if (attribute.classifier_object) {
                                            item['Instrument.' + attribute.attribute_type_object.display_name] = attribute.classifier_object.name;
                                        }
                                    }
                                }

                            })

                        }
                    }

                }

                if (item.hasOwnProperty('account_object') && item.account_object) {

                    if (item.account_object.hasOwnProperty('attributes')) {

                        if (item.account_object.attributes.length) {

                            item.account_object.attributes.forEach(function (attribute) {

                                if (attribute.hasOwnProperty('attribute_type_object')) {

                                    if (attribute.attribute_type_object.value_type == 10) {
                                        item['Account.' + attribute.attribute_type_object.display_name] = attribute.value_string;
                                    }
                                    if (attribute.attribute_type_object.value_type == 20) {
                                        item['Account.' + attribute.attribute_type_object.display_name] = attribute.value_float;
                                    }
                                    if (attribute.attribute_type_object.value_type == 40) {
                                        item['Account.' + attribute.attribute_type_object.display_name] = attribute.value_date;
                                    }
                                    if (attribute.attribute_type_object.value_type == 30) {
                                        if (attribute.classifier_object) {
                                            item['Account.' + attribute.attribute_type_object.display_name] = attribute.classifier_object.name;
                                        }
                                    }
                                }

                            })

                        }
                    }

                }

                if (item.hasOwnProperty('account_position_object') && item.account_position_object) {

                    if (item.account_position_object.hasOwnProperty('attributes')) {

                        if (item.account_position_object.attributes.length) {

                            item.account_position_object.attributes.forEach(function (attribute) {

                                if (attribute.hasOwnProperty('attribute_type_object')) {

                                    if (attribute.attribute_type_object.value_type == 10) {
                                        item['Account Position.' + attribute.attribute_type_object.display_name] = attribute.value_string;
                                    }
                                    if (attribute.attribute_type_object.value_type == 20) {
                                        item['Account Position.' + attribute.attribute_type_object.display_name] = attribute.value_float;
                                    }
                                    if (attribute.attribute_type_object.value_type == 40) {
                                        item['Account Position.' + attribute.attribute_type_object.display_name] = attribute.value_date;
                                    }
                                    if (attribute.attribute_type_object.value_type == 30) {
                                        if (attribute.classifier_object) {
                                            item['Account Position.' + attribute.attribute_type_object.display_name] = attribute.classifier_object.name;
                                        }
                                    }
                                }

                            })

                        }

                    }

                }

                if (item.hasOwnProperty('account_cash_object') && item.account_cash_object) {

                    if (item.account_cash_object.hasOwnProperty('attributes')) {

                        if (item.account_cash_object.attributes.length) {

                            item.account_cash_object.attributes.forEach(function (attribute) {

                                if (attribute.hasOwnProperty('attribute_type_object')) {

                                    if (attribute.attribute_type_object.value_type == 10) {
                                        item['Account Cash.' + attribute.attribute_type_object.display_name] = attribute.value_string;
                                    }
                                    if (attribute.attribute_type_object.value_type == 20) {
                                        item['Account Cash.' + attribute.attribute_type_object.display_name] = attribute.value_float;
                                    }
                                    if (attribute.attribute_type_object.value_type == 40) {
                                        item['Account Cash.' + attribute.attribute_type_object.display_name] = attribute.value_date;
                                    }
                                    if (attribute.attribute_type_object.value_type == 30) {
                                        if (attribute.classifier_object) {
                                            item['Account Cash.' + attribute.attribute_type_object.display_name] = attribute.classifier_object.name;
                                        }
                                    }
                                }

                            })

                        }

                    }

                }

                if (item.hasOwnProperty('account_interim_object') && item.account_interim_object) {

                    if (item.account_interim_object.hasOwnProperty('attributes')) {

                        if (item.account_interim_object.attributes.length) {

                            item.account_interim_object.attributes.forEach(function (attribute) {

                                if (attribute.hasOwnProperty('attribute_type_object')) {

                                    if (attribute.attribute_type_object.value_type == 10) {
                                        item['Account interim.' + attribute.attribute_type_object.display_name] = attribute.value_string;
                                    }
                                    if (attribute.attribute_type_object.value_type == 20) {
                                        item['Account interim.' + attribute.attribute_type_object.display_name] = attribute.value_float;
                                    }
                                    if (attribute.attribute_type_object.value_type == 40) {
                                        item['Account interim.' + attribute.attribute_type_object.display_name] = attribute.value_date;
                                    }
                                    if (attribute.attribute_type_object.value_type == 30) {
                                        if (attribute.classifier_object) {
                                            item['Account interim.' + attribute.attribute_type_object.display_name] = attribute.classifier_object.name;
                                        }
                                    }
                                }

                            })

                        }

                    }

                }

                if (item.hasOwnProperty('portfolio_object') && item.portfolio_object) {

                    if (item.portfolio_object.hasOwnProperty('attributes')) {

                        if (item.portfolio_object.attributes.length) {

                            item.portfolio_object.attributes.forEach(function (attribute) {

                                if (attribute.hasOwnProperty('attribute_type_object')) {

                                    if (attribute.attribute_type_object.value_type == 10) {
                                        item['Portfolio.' + attribute.attribute_type_object.display_name] = attribute.value_string;
                                    }
                                    if (attribute.attribute_type_object.value_type == 20) {
                                        item['Portfolio.' + attribute.attribute_type_object.display_name] = attribute.value_float;
                                    }
                                    if (attribute.attribute_type_object.value_type == 40) {
                                        item['Portfolio.' + attribute.attribute_type_object.display_name] = attribute.value_date;
                                    }
                                    if (attribute.attribute_type_object.value_type == 30) {

                                        if (attribute.classifier_object) {
                                            //if (item['Portfolio.' + attribute.attribute_type_object.display_name] = attribute.classifier_object) {
                                                item['Portfolio.' + attribute.attribute_type_object.display_name] = attribute.classifier_object.name;
                                            //}
                                        }
                                    }
                                }

                            })

                        }

                    }

                }

                item['instrument_accrual_object_accrual_size'] = undefined;
                item['instrument_accrual_object_periodicity_object_name'] = undefined;
                item['instrument_accrual_object_periodicity_n'] = undefined;
                if (item.instrument_accrual_object) {

                    item['instrument_accrual_object_accrual_size'] = item.instrument_accrual_object.accrual_size;

                    if (item.instrument_accrual_object.periodicity_object) {
                        item['instrument_accrual_object_periodicity_object_name'] = item.instrument_accrual_object.periodicity_object.name;
                    }
                    item['instrument_accrual_object_periodicity_n'] = item.instrument_accrual_object.periodicity_n;

                }

            });
        }

        return entity;

    };


    module.exports = {
        releaseEntityObjects: releaseEntityObjects
    }

}());
},{}],185:[function(require,module,exports){
/**
 * Created by szhitenev on 03.03.2017.
 */
(function () {

    'use strict';

    var transactionClassService = require('../services/transaction/transactionClassService');

    function findEntityObject(report, propertyName, id) {

        var result = null;

        if (report[propertyName]) {
            report[propertyName].forEach(function (item) {

                if (propertyName == 'transaction_classes') {
                    if (item.value == id) {
                        result = item;
                    }
                } else {

                    if (item.id == id) {
                        result = item;
                    }
                }
            });
        }

        //console.error(report);
        //console.error(propertyName);
        //console.error("id ", id);
        //console.error(result);

        return result

    }

    function injectAttributeTypes(report, propertyName, attrs) {

        if (report.hasOwnProperty(propertyName)) {

            report[propertyName].forEach(function (attributeTypeObject) {
                attrs.forEach(function (attr) {

                    if (attr.attribute_type == attributeTypeObject.id) {
                        attr.attribute_type_object = attributeTypeObject;

                        //console.log('attr', attr);

                        if (attr.attribute_type_object.classifiers_flat.length > 0) {
                            attr.attribute_type_object.classifiers_flat.forEach(function (classif) {
                                if (classif.id == attr.classifier) {
                                    attr.classifier_object = classif;
                                }
                            })
                        }

                    }

                })
            })

        }

    }


    var injectIntoItems = function (items, report) {

        items.forEach(function (item) {

            //console.error('item', item);

            if (item.instrument) {
                item.instrument_object = findEntityObject(report, 'item_instruments', item.instrument);
            }
            if (item.linked_instrument) {
                item.linked_instrument_object = findEntityObject(report, 'item_instruments', item.linked_instrument);
            }
            if (item.allocation_balance) {
                item.allocation_balance_object = findEntityObject(report, 'item_instruments', item.allocation_balance);
            }
            if (item.allocation) {
                item.allocation_object = findEntityObject(report, 'item_instruments', item.allocation);
            }
            if (item.allocation_pl) {
                item.allocation_pl_object = findEntityObject(report, 'item_instruments', item.allocation_pl);
            }

            //item.instrument_pricing_currency_history_object = findEntityObject(report, 'item_currencies');
            //item.instrument_price_history_object = findEntityObject(report, 'item_currencies');

            if (item.account) {
                item.account_object = findEntityObject(report, 'item_accounts', item.account);
            }
            if (item.account_cash) {
                item.account_cash_object = findEntityObject(report, 'item_accounts', item.account_cash);
            }
            if (item.account_interim) {
                item.account_interim_object = findEntityObject(report, 'item_accounts', item.account_interim);
            }
            if (item.account_position) {
                item.account_position_object = findEntityObject(report, 'item_accounts', item.account_position);
            }
            if (item.counterparty) {
                item.counterparty_object = findEntityObject(report, 'item_counterparties', item.counterparty);
            }
            if (item.responsible) {
                item.responsible_object = findEntityObject(report, 'item_responsibles', item.responsible);
            }
            if (item.complex_transaction) {
                item.complex_transaction_object = findEntityObject(report, 'item_complex_transactions', item.complex_transaction);
            }

            if (item.transaction_class) {
                item.transaction_class_object = findEntityObject({transaction_classes: transactionClassService.getListSync()}, 'transaction_classes', item.transaction_class);
            }

            if (item.portfolio) {
                item.portfolio_object = findEntityObject(report, 'item_portfolios', item.portfolio);
            }

            if (item.transaction_currency) {
                item.transaction_currency_object = findEntityObject(report, 'item_currencies', item.transaction_currency);
            }
            if (item.settlement_currency) {
                item.settlement_currency_object = findEntityObject(report, 'item_currencies', item.settlement_currency);
            }

            if (item.currency) {
                item.currency_object = findEntityObject(report, 'item_currencies', item.currency);
            }

            if (item.pricing_currency) {
                item.pricing_currency_object = findEntityObject(report, 'item_currencies', item.pricing_currency);
            }

            //item.pricing_currency_object = findEntityObject(report, 'item_currencies');
            //item.pricing_currency_history_object = findEntityObject(report, 'item_currencies');
            //item.report_currency_history_object = findEntityObject(report, 'item_currencies');

            if (item.strategy1) {
                item.strategy1_object = findEntityObject(report, 'item_strategies1');
            }
            if (item.strategy2) {
                item.strategy2_object = findEntityObject(report, 'item_strategies2');
            }
            if (item.strategy3) {
                item.strategy3_object = findEntityObject(report, 'item_strategies3');
            }
            if (item.strategy1_cash) {
                item.strategy1_cash_object = findEntityObject(report, 'item_strategies1', item.strategy1_cash);
            }
            if (item.strategy1_position) {
                item.strategy1_position_object = findEntityObject(report, 'item_strategies1', item.strategy1_position);
            }
            if (item.strategy2_cash) {
                item.strategy2_cash_object = findEntityObject(report, 'item_strategies1', item.strategy2_cash);
            }
            if (item.strategy2_position) {
                item.strategy2_position_object = findEntityObject(report, 'item_strategies1', item.strategy2_position);
            }
            if (item.strategy3_cash) {
                item.strategy3_cash_object = findEntityObject(report, 'item_strategies1', item.strategy3_cash);
            }
            if (item.strategy3_position) {
                item.strategy3_position_object = findEntityObject(report, 'item_strategies1', item.strategy3_position);
            }

            if(item.custom_fields) {
                item.custom_fields_object = [];

                item.custom_fields.forEach(function(localCustomField){
                    report.custom_fields_object.forEach(function(reportCustomField){

                        if(reportCustomField.id == localCustomField.custom_field) {

                            item.custom_fields_object.push(reportCustomField);

                        }

                    })
                })

            }

            //item.transaction_currency_object = findEntityObject(report, 'item_currencies', item.transaction_currency);
            //item.settlement_currency_object = findEntityObject(report, 'item_currencies', item.settlement_currency);

            //if (item.account_cash_object) {
            //    injectAttributeTypes(report, 'item_account_attribute_types', item.account_cash_object.attributes);
            //}
            //if (item.account_interim_object) {
            //    injectAttributeTypes(report, 'item_account_attribute_types', item.account_interim_object.attributes);
            //}
            //if (item.account_position_object) {
            //    injectAttributeTypes(report, 'item_account_attribute_types', item.account_position_object.attributes);
            //}
            //
            //if (item.counterparty_object) {
            //    injectAttributeTypes(report, 'item_counterparty_attribute_types', item.counterparty_object.attributes);
            //}
            //if (item.responsible_object) {
            //    injectAttributeTypes(report, 'item_responsible_attribute_types', item.responsible_object.attributes);
            //}
            //
            //if (item.transaction_currency_object) {
            //    injectAttributeTypes(report, 'item_currency_attribute_types', item.transaction_currency_object.attributes);
            //}
            //if (item.settlement_currency_object) {
            //    injectAttributeTypes(report, 'item_currency_attribute_types', item.settlement_currency_object.attributes);
            //}

            //if (item.instrument_object) {
            //    injectAttributeTypes(report, 'item_instrument_attribute_types', item.instrument_object.attributes);
            //}
            //
            //if (item.linked_instrument_object) {
            //    injectAttributeTypes(report, 'item_instrument_attribute_types', item.linked_instrument_object.attributes);
            //}
            //
            //if (item.hasOwnProperty('allocation_balance_object')) {
            //
            //    console.log('item.allocation_balance_object', item.allocation_balance_object);
            //
            //    injectAttributeTypes(report, 'item_instrument_attribute_types', item.allocation_balance_object.attributes);
            //}

            ////if (item.hasOwnProperty('allocation_balance_object')) {
            ////
            ////    console.log('item.allocation_balance_object', item.allocation_balance_object);
            ////
            ////    injectAttributeTypes(report, 'item_instrument_attribute_types', item.allocation_balance_object.attributes);
            ////}
            ////if (item.hasOwnProperty('allocation_pl_object')) {
            ////    injectAttributeTypes(report, 'item_instrument_attribute_types', item.allocation_pl_object.attributes);
            ////}
            //
            //if (item.portfolio_object) {
            //    injectAttributeTypes(report, 'item_portfolio_attribute_types', item.portfolio_object.attributes);
            //}
            //
            //if (item.complex_transaction_object) {
            //    injectAttributeTypes(report, 'item_complex_transaction_attribute_types', item.complex_transaction_object.attributes);
            //}

            injectAttributeTypes(report, 'item_transaction_attribute_types', item.attributes);

        });

        console.log('INJECTED', items);

        return items;
    };

    module.exports = {
        injectIntoItems: injectIntoItems
    }

}());
},{"../services/transaction/transactionClassService":395}],186:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "portfolios",
                "name": "Portfolios",
                "value_type": "mc_field"

            },
            {
                "key": "type",
                "name": "Type",
                "value_type": "field"
            },
            {
                "key": "public_name",
                "name": "Public name",
                "value_type": 10
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],187:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "public_name",
                "name": "Public name",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "show_transaction_details",
                "name": "Show transaction details",
                "value_type": "boolean"
            },
            {
                "key": "transaction_details_expr",
                "name": "Transaction details expr",
                "value_type": 10
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],188:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "date_formatted",
                "name": "Date",
                "value_type": 10
            },
            {
                "key": "username",
                "name": "Member",
                "value_type": 10
            },
            {
                "key": "field_name",
                "name": "Field",
                "value_type": 10
            },
            {
                "key": "old_value",
                "name": "Old value",
                "value_type": 10
            },
            {
                "key": "value",
                "name": "New value",
                "value_type": 10
            },
            {
                "key": "message",
                "name": "Message",
                "value_type": 10
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],189:[function(require,module,exports){
arguments[4][188][0].apply(exports,arguments)
},{"dup":188}],190:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            //{
            //    "key": "last_notes",
            //    "name": "Last notes",
            //    "value_type": 10
            //},
            //{
            //    "key": "account",
            //    "name": "Account",
            //    "value_type": "field"
            //},
            //{
            //    "key": "instrument",
            //    "name": "Instrument",
            //    "value_type": "field"
            //},
            //{
            //    "key": "currency",
            //    "name": "Currency",
            //    "value_type": "field"
            //},
            //{
            //    "key": "portfolio",
            //    "name": "Portfolio",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy-1",
            //    "name": "Strategy 1",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy-2",
            //    "name": "Strategy 2",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy-3",
            //    "name": "Strategy 3",
            //    "value_type": "field"
            //},
            {
                "key": "item_type_name",
                "name": "Item Type",
                "value_type": 10
            },
            {
                "key": "position_size",
                "name": "Position size",
                "value_type": "float"
            },
            {
                "key": "pricing_currency",
                "name": "Pricing Currency",
                "value_type": "field"
            },
            //{
            //    "key": "instrument_principal",
            //    "name": "Current Price",
            //    "value_type": "float"
            //},
            //{
            //    "key": "instrument_accrued",
            //    "name": "Current Accrued",
            //    "value_type": "float"
            //},
            {
                "key": "instrument_pricing_currency_fx_rate",
                "name": "Pricing currency fx rate",
                "value_type": "float"
            },
            {
                "key": "instrument_accrued_currency_fx_rate",
                "name": "Accrued currency FX rate",
                "value_type": "float"
            },

            {
                "key": "instrument_accrual_object_accrual_size",
                "name": "Current Payment Size",
                "value_type": "float"
            },
            {
                "key": "instrument_accrual_object_periodicity_object_name",
                "name": "Current Payment Frequency",
                "value_type": "float"
            },
            {
                "key": "instrument_accrual_object_periodicity_n",
                "name": "Current Payment Periodicity N",
                "value_type": "float"
            },


            //{
            //    "key": "report_currency_fx_rate",
            //    "name": "Report currency fx rate",
            //    "value_type": "float"
            //},
            //{
            //    "key": "instrument_price_history_principal_price",
            //    "name": "Instrument price history principal price",
            //    "value_type": "float"
            //},
            //{
            //    "key": "instrument_price_history_accrued_price",
            //    "name": "Instrument price history accrued price",
            //    "value_type": "float"
            //},
            //{
            //    "key": "instrument_pricing_currency_fx_rate",
            //    "name": "Instrument pricing currency fx rate",
            //    "value_type": "float"
            //},
            //{
            //    "key": "instrument_accrued_currency_fx_rate",
            //    "name": "Instrument accrued currency fx rate",
            //    "value_type": "float"
            //},
            //{
            //    "key": "currency_fx_rate",
            //    "name": "Currency fx rate",
            //    "value_type": "float"
            //},


            {
                "key": "date",
                "name": "Date",
                "value_type": 40
            },
            {
                "key": "ytm",
                "name": "YTM",
                "value_type": "float"
            },
            {
                "key": "modified_duration",
                "name": "Modified duration",
                "value_type": "float"
            },

            {
                "key": "last_notes",
                "name": "Last notes",
                "value_type": 10
            },
            //{
            //    "key": "gross_cost_price",
            //    "name": "Gross cost price",
            //    "value_type": "float"
            //},
            {
                "key": "gross_cost_price_loc",
                "name": "Gross cost price (LOC)",
                "value_type": "float"
            },
            {
                "key": "ytm_at_cost",
                "name": "YTM at cost",
                "value_type": "float"
            },
            {
                "key": "time_invested",
                "name": "Time invested",
                "value_type": "float"
            },
            //{
            //    "key": "net_cost_price",
            //    "name": "Net cost price",
            //    "value_type": "float"
            //},
            {
                "key": "net_cost_price_loc",
                "name": "Net cost price (LOC)",
                "value_type": "float"
            },
            {
                "key": "currency",
                "name": "Currency",
                "value_type": "field"
            },
            //{
            //    "key": "report_currency_history",
            //    "name": "Report currency history",
            //    "value_type": "field"
            //},
            //{
            //    "key": "instrument_price_history",
            //    "name": "Instrument price history",
            //    "value_type": "field"
            //},
            //{
            //    "key": "instrument_pricing_currency_history",
            //    "name": "Instrument pricing currency history",
            //    "value_type": "field"
            //},
            //{
            //    "key": "instrument_accrued_currency_history",
            //    "name": "Instrument accrued currency history",
            //    "value_type": "field"
            //},
            //{
            //    "key": "currency_history",
            //    "name": "Currency history",
            //    "value_type": "field"
            //},
            //{
            //    "key": "pricing_currency_history",
            //    "name": "Pricing currency history",
            //    "value_type": "field"
            //},
            //{
            //    "key": "instrument_accrual",
            //    "name": "Instrument accrual",
            //    "value_type": "field"
            //},
            //{
            //    "key": "instrument_accrual_accrued_price",
            //    "name": "Instrument accrual accrued price",
            //    "value_type": "field"
            //},

            {
                "key": "principal_invested",
                "name": "Principal invested",
                "value_type": "float"
            },
            {
                "key": "principal_invested_loc",
                "name": "Principal invested (LOC)",
                "value_type": "float"
            },
            {
                "key": "amount_invested",
                "name": "Amount invested",
                "value_type": "float"
            },
            {
                "key": "amount_invested_loc",
                "name": "Amount invested (LOC)",
                "value_type": "float"
            },

            {
                "key": "market_value",
                "name": "Market value",
                "value_type": "float"
            },
            {
                "key": "market_value_loc",
                "name": "Market value (LOC)",
                "value_type": "float"
            },
            {
                "key": "market_value_percent",
                "name": "Market value %",
                "value_type": "float"
            },
            {
                "key": "exposure",
                "name": "Exposure",
                "value_type": "float"
            },
            {
                "key": "exposure_percent",
                "name": "Exposure %",
                "value_type": "float"
            },
            {
                "key": "exposure_loc",
                "name": "Exposure (LOC)",
                "value_type": "float"
            },
            {
                "key": "instrument_principal_price",
                "name": "Current Price",
                "value_type": "float"
            },
            {
                "key": "instrument_accrued_price",
                "name": "Current Accrued",
                "value_type": "float"
            },
            {
                "key": "pricing_currency_fx_rate",
                "name": "Pricing Ccy FX rate",
                "value_type": "float"
            },
            {
                "key": "instrument_accrued_currency_fx_rate",
                "name": "Accrued currency FX rate",
                "value_type": "float"
            }
            //{
            //    "key": "allocation_balance",
            //    "name": "Allocation Balance",
            //    "value_type": "field"
            //}
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],191:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            //{
            //    "key": "account_cash",
            //    "name": "Account cash",
            //    "value_type": "field"
            //},
            //{
            //    "key": "account_interim",
            //    "name": "Account interim",
            //    "value_type": "field"
            //},
            //{
            //    "key": "account_position",
            //    "name": "Account position",
            //    "value_type": "field"
            //},
            //{
            //    "key": "allocation_balance",
            //    "name": "Allocation balance", // link to instrument
            //    "value_type": "field"
            //},
            //{
            //    "key": "allocation_pl",
            //    "name": "Allocation pl", // link to instrument
            //    "value_type": "field"
            //},
            //{
            //    "key": "carry_with_sign",
            //    "name": "Carry with sign",
            //    "value_type": "float"
            //},
            {
                "key": "item_type_name",
                "name": "Item Type",
                "value_type": 10
            },
            {
                "key": "cash_consideration",
                "name": "Cash consideration",
                "value_type": "float"
            },
            {
                "key": "cash_consideration_after",
                "name": "Cash consideration after",
                "value_type": "float"
            },
            {
                "key": "cash_consideration_before",
                "name": "Cash consideration before",
                "value_type": "float"
            }
            //{
            //    "key": "cash_date",
            //    "name": "Cash date",
            //    "value_type": 40
            //},
            //{
            //    "key": "complex-transaction",
            //    "name": "Complex transaction",
            //    "value_type": "field"
            //},
            //{
            //    "key": "counterparty",
            //    "name": "Counterparty",
            //    "value_type": "field"
            //},
            //{
            //    "key": "instrument",
            //    "name": "Instrument",
            //    "value_type": "field"
            //},
            //{
            //    "key": "linked_instrument",
            //    "name": "Linked Instrument",
            //    "value_type": "field"
            //},
            //{
            //    "key": "overheads_with_sign",
            //    "name": "Overheads with sign",
            //    "value_type": "float"
            //},
            //{
            //    "key": "portfolio",
            //    "name": "Portfolio",
            //    "value_type": "field"
            //},
            //{
            //    "key": "reference_fx_rate",
            //    "name": "Reference fx rate",
            //    "value_type": "float"
            //},
            //{
            //    "key": "responsible",
            //    "name": "Responsible",
            //    "value_type": "field"
            //},
            //{
            //    "key": "settlement_currency",
            //    "name": "Settlement currency",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy1_cash",
            //    "name": "Strategy 1 cash",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy1_position",
            //    "name": "Strategy 1 position",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy2_cash",
            //    "name": "Strategy 2 cash",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy2_position",
            //    "name": "Strategy 2 position",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy3_cash",
            //    "name": "Strategy 3 cash",
            //    "value_type": "field"
            //},
            //{
            //    "key": "strategy3_position",
            //    "name": "Strategy 3 position",
            //    "value_type": "field"
            //},
            //{
            //    "key": "transaction_class",
            //    "name": "Transaction class",
            //    "value_type": "field"
            //},
            //{
            //    "key": "transaction_code",
            //    "name": "Transaction code",
            //    "value_type": "float"
            //},
            //{
            //    "key": "transaction_currency",
            //    "name": "Transaction currency",
            //    "value_type": "field"
            //},
            //{
            //    "key": "transaction_date",
            //    "name": "Transaction date",
            //    "value_type": 40
            //}
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],192:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "code",
                "name": "Code",
                "value_type": "float"
            },
            {
                "key": "date",
                "name": "Date",
                "value_type": 40
            },
            {
                "key": "status",
                "name": "Status",
                "value_type": 10 // actually field
            },
            {
                "key": "text",
                "name": "Description",
                "value_type": 10
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],193:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "public_name",
                "name": "Public name",
                "value_type": 10
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],194:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "group",
                "name": "Group",
                "value_type": "field"
            },
            {
                "key": "portfolios",
                "name": "Portfolios",
                "value_type": "mc_field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],195:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            //{
            //    "key": "name",
            //    "name": "Name",
            //    "value_type": 10
            //},
            //{
            //    "key": "short_name",
            //    "name": "Short name",
            //    "value_type": 10
            //},
            //{
            //    "key": "notes",
            //    "name": "Notes",
            //    "value_type": 10
            //},
            {
                "key": "currency",
                "name": "Currency",
                "value_type": "field"
            },
            {
                "key": "date",
                "name": "Date",
                "value_type": 40
            },
            {
                "key": "fx_rate",
                "name": "Fx rate",
                "value_type": "float"
            },
            {
                "key": "pricing_policy",
                "name": "Pricing policy",
                "value_type": "field"
            }
            //{
            //    "key": "fx_rate_expr",
            //    "name": "fx_rate_expr",
            //    "value_type": 10
            //}
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],196:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "reference_for_pricing",
                "name": "Reference for pricing",
                "value_type": 10
            },
            {
                "key": "daily_pricing_model",
                "name": "Daily pricing model",
                "value_type": "field"
            },
            {
                "key": "price_download_scheme",
                "name": "Price download scheme",
                "value_type": "field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],197:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "instrument_type",
                "name": "Instrument type",
                "value_type": "field"
            },
            {
                "key": "is_active",
                "name": "Is active",
                "value_type": "boolean"
            },
            {
                "key": "reference_for_pricing",
                "name": "Reference for pricing",
                "value_type": 10
            },
            {
                "key": "price_download_scheme",
                "name": "Price download scheme",
                "value_type": "field"
            },
            {
                "key": "pricing_currency",
                "name": "Pricing currency",
                "value_type": "field"
            },
            {
                "key": "price_multiplier",
                "name": "Price multiplier",
                "value_type": "float"
            },
            {
                "key": "accrued_currency",
                "name": "Accrued currency",
                "value_type": "field"
            },
            {
                "key": "maturity_date",
                "name": "Maturity date",
                "value_type": 40
            },
            {
                "key": "maturity_price",
                "name": "Maturity price",
                "value_type": "float"
            },
            {
                "key": "accrued_multiplier",
                "name": "Accrued multiplier",
                "value_type": "float"
            },
            {
                "key": "daily_pricing_model",
                "name": "Daily pricing model",
                "value_type": "field"
            },
            {
                "key": "payment_size_detail",
                "name": "Payment size detail",
                "value_type": "field"
            },
            {
                "key": "default_price",
                "name": "Default price",
                "value_type": "float"
            },
            {
                "key": "default_accrued",
                "name": "Default accrued",
                "value_type": "float"
            },
            {
                "key": "user_text_1",
                "name": "User text 1",
                "value_type": 10
            },
            {
                "key": "user_text_2",
                "name": "User text 2",
                "value_type": 10
            },
            {
                "key": "user_text_3",
                "name": "User text 3",
                "value_type": 10
            },
            {
                "key": "object_permissions_user",
                "name": "Users permissions",
                "value_type": "mc_field"
            },
            {
                "key": "object_permissions_group",
                "name": "Groups permissions",
                "value_type": "mc_field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],198:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                key: 'reference_for_pricing',
                name: 'Reference for pricing',
                "value_type": 10
            },
            {
                key: 'factor_schedule_method',
                name: 'Factor schedule method',
                type: 'field'
            },
            {
                key: 'accrual_calculation_schedule_method',
                name: 'Accrual calculation schedule method',
                type: 'field'
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "public_name",
                "name": "Public name",
                "value_type": 10
            },
            {
                "key": "instrument_type",
                "name": "Instrument type",
                "value_type": 10
            },
            {
                "key": "pricing_currency",
                "name": "Pricing currency",
                "value_type": 10
            },
            {
                "key": "price_multiplier",
                "name": "Price multiplier",
                "value_type": 10
            },
            {
                "key": "accrued_currency",
                "name": "Accrued currency",
                "value_type": 10
            },
            {
                "key": "accrued_multiplier",
                "name": "Accrued multiplier",
                "value_type": 10
            },
            {
                "key": "user_text_1",
                "name": "User text 1",
                "value_type": 10
            },
            {
                "key": "user_text_2",
                "name": "User text 2",
                "value_type": 10
            },
            {
                "key": "user_text_3",
                "name": "User text 3",
                "value_type": 10
            },
            {
                "key": "maturity_date",
                "name": "Maturity date",
                "value_type": 10
            },
            {
                "key": "payment_size_detail",
                "name": "Payment size detail",
                "value_type": 'field'
            },
            {
                "key": "daily_pricing_model",
                "name": "Daily pricing model",
                "value_type": 'field'
            },
            {
                "key": "price_download_scheme",
                "name": "Price download scheme",
                "value_type": 'field'
            },
            {
                "key": "default_price",
                "name": "Default price",
                "value_type": 10
            },
            {
                "key": "default_accrued",
                "name": "Default accrued",
                "value_type": 10
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],199:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "public_name",
                "name": "Public name",
                "value_type": 10
            },
            {
                "key": "is_active",
                "name": "Is active",
                "value_type": "boolean"
            },
            {
                "key": "instrument_class",
                "name": "Instrument class",
                "value_type": "field"
            },
            {
                "key": "one_off_event",
                "name": "One off event",
                "value_type": "field"
            },
            {
                "key": "regular_event",
                "name": "Regular event",
                "value_type": "field"
            },
            {
                "key": "factor_same",
                "name": "Factor same",
                "value_type": "field"
            },
            {
                "key": "factor_up",
                "name": "Factor up",
                "value_type": "field"
            },
            {
                "key": "factor_down",
                "name": "Factor down",
                "value_type": "field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],200:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "account",
                "name": "Account",
                "value_type": "field"
            },
            {
                "key": "instrument",
                "name": "Instrument",
                "value_type": "field"
            },
            {
                "key": "currency",
                "name": "Currency",
                "value_type": "field"
            },
            {
                "key": "portfolio",
                "name": "Portfolio",
                "value_type": "field"
            },
            {
                "key": "strategy-1",
                "name": "Strategy 1",
                "value_type": "field"
            },
            {
                "key": "strategy-2",
                "name": "Strategy 2",
                "value_type": "field"
            },
            {
                "key": "strategy-3",
                "name": "Strategy 3",
                "value_type": "field"
            },
            {
                "key": "position_size",
                "name": "Position size",
                "value_type": "float"
            },
            {
                "key": "market_value",
                "name": "Market value",
                "value_type": "float"
            },
            {
                "key": "exposure",
                "name": "Exposure",
                "value_type": "float"
            },
            {
                "key": "market_value_percent",
                "name": "Market value %",
                "value_type": "float"
            },
            {
                "key": "exposure_percent",
                "name": "Exposure %",
                "value_type": "float"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],201:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short Name",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "account",
                "name": "Account",
                "value_type": "field"
            },
            {
                "key": "instrument",
                "name": "Instrument",
                "value_type": "field"
            },
            {
                "key": "currency",
                "name": "Currency",
                "value_type": "field"
            },
            {
                "key": "portfolio",
                "name": "Portfolio",
                "value_type": "field"
            },
            {
                "key": "strategy-1",
                "name": "Strategy 1",
                "value_type": "field"
            },
            {
                "key": "strategy-2",
                "name": "Strategy 2",
                "value_type": "field"
            },
            {
                "key": "strategy-3",
                "name": "Strategy 3",
                "value_type": "field"
            },
            {
                "key": "carry",
                "name": "Carry",
                "value_type": "float"
            },
            {
                "key": "carry_loc",
                "name": "Carry (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "carry_closed",
            //    "name": "Carry closed",
            //    "value_type": "float"
            //},
            {
                "key": "carry_fixed",
                "name": "Carry fixed",
                "value_type": "float"
            },
            {
                "key": "carry_fixed_loc",
                "name": "Carry fixed (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "carry_fixed_closed",
            //    "name": "Carry fixed closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "carry_fixed_opened",
            //    "name": "Carry fixed opened",
            //    "value_type": "float"
            //},
            {
                "key": "carry_fx",
                "name": "Carry FX",
                "value_type": "float"
            },
            {
                "key": "carry_fx_loc",
                "name": "Carry FX (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "carry_fx_closed",
            //    "name": "Carry FX closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "carry_fx_opened",
            //    "name": "Carry FX opened",
            //    "value_type": "float"
            //},
            //{
            //    "key": "carry_opened",
            //    "name": "Carry opened",
            //    "value_type": "float"
            //},
            {
                "key": "overheads",
                "name": "Overheads",
                "value_type": "float"
            },
            {
                "key": "overheads_loc",
                "name": "Overheads (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "overheads_closed",
            //    "name": "Overheads closed",
            //    "value_type": "float"
            //},
            {
                "key": "overheads_fixed",
                "name": "Overheads fixed",
                "value_type": "float"
            },
            {
                "key": "overheads_fixed_loc",
                "name": "Overheads fixed (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "overheads_fixed_closed",
            //    "name": "Overheads fixed closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "overheads_fixed_opened",
            //    "name": "Overheads fixed opened",
            //    "value_type": "float"
            //},
            {
                "key": "overheads_fx",
                "name": "Overheads FX",
                "value_type": "float"
            },
            {
                "key": "overheads_fx_loc",
                "name": "Overheads FX (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "overheads_fx_closed",
            //    "name": "Overheads FX closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "overheads_fx_opened",
            //    "name": "Overheads FX opened",
            //    "value_type": "float"
            //},
            //{
            //    "key": "overheads_opened",
            //    "name": "Overheads opened",
            //    "value_type": "float"
            //},
            {
                "key": "principal",
                "name": "Principal",
                "value_type": "float"
            },
            {
                "key": "principal_loc",
                "name": "Principal (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "principal_closed",
            //    "name": "Principal closed",
            //    "value_type": "float"
            //},
            {
                "key": "principal_fixed",
                "name": "Principal fixed",
                "value_type": "float"
            },
            {
                "key": "principal_fixed_loc",
                "name": "Principal fixed (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "principal_fixed_closed",
            //    "name": "Principal fixed closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "principal_fixed_opened",
            //    "name": "Principal fixed opened",
            //    "value_type": "float"
            //},
            {
                "key": "principal_fx",
                "name": "Principal FX",
                "value_type": "float"
            },
            {
                "key": "principal_fx_loc",
                "name": "Principal FX (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "principal_fx_closed",
            //    "name": "Principal FX closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "principal_fx_opened",
            //    "name": "Principal FX opened",
            //    "value_type": "float"
            //},
            //{
            //    "key": "principal_opened",
            //    "name": "Principal opened",
            //    "value_type": "float"
            //},
            {
                "key": "total",
                "name": "Total",
                "value_type": "float"
            },
            {
                "key": "total_loc",
                "name": "Total (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "total_closed",
            //    "name": "Total closed",
            //    "value_type": "float"
            //},
            {
                "key": "total_fixed",
                "name": "Total fixed",
                "value_type": "float"
            },
            {
                "key": "total_fixed_loc",
                "name": "Total fixed (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "total_fixed_closed",
            //    "name": "Total fixed closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "total_fixed_opened",
            //    "name": "Total fixed opened",
            //    "value_type": "float"
            //},
            {
                "key": "total_fx",
                "name": "Total FX",
                "value_type": "float"
            },
            {
                "key": "total_fx_loc",
                "name": "Total FX (LOC)",
                "value_type": "float"
            },
            //{
            //    "key": "total_fx_closed",
            //    "name": "Total FX closed",
            //    "value_type": "float"
            //},
            //{
            //    "key": "total_fx_opened",
            //    "name": "Total FX opened",
            //    "value_type": "float"
            //},
            //{
            //    "key": "total_opened",
            //    "name": "Total opened",
            //    "value_type": "float"
            //},
            {
                "key": "total_real",
                "name": "Total real",
                "value_type": "float"
            },
            {
                "key": "total_unreal",
                "name": "Total unreal",
                "value_type": "float"
            },
            {
                "key": "market_value",
                "name": "Market value",
                "value_type": "float"
            },
            {
                "key": "exposure",
                "name": "Exposure",
                "value_type": "float"
            },
            {
                "key": "market_value_percent",
                "name": "Market value %",
                "value_type": "float"
            },
            {
                "key": "exposure_percent",
                "name": "Exposure %",
                "value_type": "float"
            },


            {
                "key": "exposure_percent",
                "name": "Exposure %",
                "value_type": "float"
            },
            {
                "key": "exposure_percent",
                "name": "Exposure %",
                "value_type": "float"
            },
            {
                "key": "item_subtype",
                "name": "Item subtype",
                "value_type": 10
            },
            {
                "key": "item_subtype_code",
                "name": "Item subtype code",
                "value_type": 10
            },
            {
                "key": "item_subtype_name",
                "name": "Item subtype name",
                "value_type": 10
            },
            {
                "key": "item_group",
                "name": "Item group",
                "value_type": 10
            },
            {
                "key": "item_group_code",
                "name": "Item group code",
                "value_type": 10
            },
            {
                "key": "item_group_name",
                "name": "Item group name",
                "value_type": 10
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],202:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "accounts",
                "name": "Accounts",
                "value_type": "mc_field"

            },
            {
                "key": "responsibles",
                "name": "Responsibles",
                "value_type": "mc_field"
            },
            {
                "key": "counterparties",
                "name": "Counterparties",
                "value_type": "mc_field"
            },
            {
                "key": "transaction_types",
                "name": "Transaction types",
                "value_type": "mc_field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],203:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "instrument",
                "name": "Instrument",
                "value_type": "field"
            },
            {
                "key": "date",
                "name": "Date",
                "value_type": 40
            },
            {
                "key": "pricing_policy",
                "name": "Pricing policy",
                "value_type": "field"
            },
            {
                "key": "principal_price",
                "name": "Principal price",
                "value_type": "float"
            },
            {
                "key": "accrued_price",
                "name": "Accrued price",
                "value_type": "float"
            }
            //{
            //    "key": "factor",
            //    "name": "Factor",
            //    "value_type": "float"
            //}
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],204:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "expr",
                "name": "Expression",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],205:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            //{
            //    "key": "instrument_principal",
            //    "name": "Opened Principal",
            //    "value_type": "float"
            //},
            //{
            //    "key": "instrument_accrued",
            //    "name": "Opened Carry",
            //    "value_type": "float"
            //},
            {
                "key": "net_position_return",
                "name": "Net position return",
                "value_type": "float"
            },
            {
                "key": "net_position_return_loc",
                "name": "Net position return (LOC)",
                "value_type": "float"
            },
            {
                "key": "position_return",
                "name": "Position return",
                "value_type": "float"
            },
            {
                "key": "position_return_loc",
                "name": "Position return (LOC)",
                "value_type": "float"
            },
            {
                "key": "daily_price_change",
                "name": "Daily price change",
                "value_type": "float"
            },
            {
                "key": "mtd_price_change",
                "name": "MTD price change",
                "value_type": "float"
            },
            {
                "key": "principal_fx",
                "name": "Principal FX",
                "value_type": "float"
            },
            {
                "key": "principal_fx_loc",
                "name": "Principal FX (LOC)",
                "value_type": "float"
            },
            {
                "key": "principal_fx_opened",
                "name": "Principal FX opened",
                "value_type": "float"
            },
            {
                "key": "principal_fx_opened_loc",
                "name": "Principal FX opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "principal_fixed",
                "name": "Principal fixed",
                "value_type": "float"
            },
            {
                "key": "principal_fixed_loc",
                "name": "Principal fixed (LOC)",
                "value_type": "float"
            },
            {
                "key": "principal_fixed_opened",
                "name": "Principal fixed opened",
                "value_type": "float"
            },
            {
                "key": "principal_fixed_opened_loc",
                "name": "Principal fixed opened (LOC)",
                "value_type": "float"
            },

            {
                "key": "carry_fx",
                "name": "Carry FX",
                "value_type": "float"
            },
            {
                "key": "carry_fx_loc",
                "name": "Carry FX (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_fx_opened",
                "name": "Carry FX opened",
                "value_type": "float"
            },
            {
                "key": "carry_fx_opened_loc",
                "name": "Carry FX opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_fixed",
                "name": "Carry fixed",
                "value_type": "float"
            },
            {
                "key": "carry_fixed_loc",
                "name": "Carry fixed (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_fixed_opened",
                "name": "Carry fixed opened",
                "value_type": "float"
            },
            {
                "key": "carry_fixed_opened_loc",
                "name": "Carry fixed opened (LOC)",
                "value_type": "float"
            },

            {
                "key": "overheads_fx",
                "name": "Overheads FX",
                "value_type": "float"
            },
            {
                "key": "overheads_fx_loc",
                "name": "Overheads FX (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_fx_opened",
                "name": "Overheads FX opened",
                "value_type": "float"
            },
            {
                "key": "overheads_fx_opened_loc",
                "name": "Overheads FX opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_fixed",
                "name": "Overheads fixed",
                "value_type": "float"
            },
            {
                "key": "overheads_fixed_loc",
                "name": "Overheads fixed (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_fixed_opened",
                "name": "Overheads fixed opened",
                "value_type": "float"
            },
            {
                "key": "overheads_fixed_opened_loc",
                "name": "Overheads fixed opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "principal",
                "name": "Principal",
                "value_type": "float"
            },
            {
                "key": "carry",
                "name": "Carry",
                "value_type": "float"
            },
            {
                "key": "overheads",
                "name": "Overheads",
                "value_type": "float"
            },
            {
                "key": "total",
                "name": "Total",
                "value_type": "float"
            },
            {
                "key": "principal_loc",
                "name": "Pricnipal (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_loc",
                "name": "Carry (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_loc",
                "name": "Overheads (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_loc",
                "name": "Total (LOC)",
                "value_type": "float"
            },
            {
                "key": "principal_closed",
                "name": "Principal closed",
                "value_type": "float"
            },
            {
                "key": "carry_closed",
                "name": "Carry closed",
                "value_type": "float"
            },
            {
                "key": "overheads_closed",
                "name": "Overheads closed",
                "value_type": "float"
            },
            {
                "key": "total_closed",
                "name": "Total closed",
                "value_type": "float"
            },
            {
                "key": "principal_closed_loc",
                "name": "Principal closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_closed_loc",
                "name": "Carry closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_closed_loc",
                "name": "Overheads closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_closed_loc",
                "name": "Total closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "principal_opened",
                "name": "Principal opened",
                "value_type": "float"
            },
            {
                "key": "carry_opened",
                "name": "Carry opened",
                "value_type": "float"
            },
            {
                "key": "overheads_opened",
                "name": "Overheads opened",
                "value_type": "float"
            },
            {
                "key": "total_opened",
                "name": "Total opened",
                "value_type": "float"
            },
            {
                "key": "principal_opened_loc",
                "name": "Principal opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_opened_loc",
                "name": "Carry opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_opened_loc",
                "name": "Overheads opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_opened_loc",
                "name": "Total opened (LOC)",
                "value_type": "float"
            },

            {
                "key": "total_fx",
                "name": "Total FX",
                "value_type": "float"
            },
            {
                "key": "total_fx_loc",
                "name": "Total FX (LOC)",
                "value_type": "float"
            },

            {
                "key": "principal_fx_closed",
                "name": "Principal FX closed",
                "value_type": "float"
            },
            {
                "key": "carry_fx_closed",
                "name": "Carry FX closed",
                "value_type": "float"
            },
            {
                "key": "overheads_fx_closed",
                "name": "Overheads FX closed",
                "value_type": "float"
            },
            {
                "key": "total_fx_closed",
                "name": "Total FX closed",
                "value_type": "float"
            },
            {
                "key": "principal_fx_closed_loc",
                "name": "Principal FX closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_fx_closed_loc",
                "name": "Carry FX closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_fx_closed_loc",
                "name": "Overheads FX closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_fx_closed_loc",
                "name": "Total FX closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_fx_opened",
                "name": "Total FX opened",
                "value_type": "float"
            },
            {
                "key": "total_fx_opened_loc",
                "name": "Total FX opened (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_fixed",
                "name": "Total fixed",
                "value_type": "float"
            },
            {
                "key": "total_fixed_loc",
                "name": "Total fixed (LOC)",
                "value_type": "float"
            },
            {
                "key": "principal_fixed_closed",
                "name": "Principal fixed closed",
                "value_type": "float"
            },
            {
                "key": "carry_fixed_closed",
                "name": "Carry fixed closed",
                "value_type": "float"
            },
            {
                "key": "overheads_fixed_closed",
                "name": "Overheads fixed closed",
                "value_type": "float"
            },
            {
                "key": "total_fixed_closed",
                "name": "Total fixed closed",
                "value_type": "float"
            },
            {
                "key": "principal_fixed_closed_loc",
                "name": "Principal fixed closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "carry_fixed_closed_loc",
                "name": "Carry fixed closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "overheads_fixed_closed_loc",
                "name": "Overheads fixed closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_fixed_closed_loc",
                "name": "Total fixed closed (LOC)",
                "value_type": "float"
            },
            {
                "key": "total_fixed_opened",
                "name": "Total fixed opened",
                "value_type": "float"
            },
            {
                "key": "total_fixed_opened_loc",
                "name": "Total fixed opened (LOC)",
                "value_type": "float"
            }

        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],206:[function(require,module,exports){
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "mismatch",
                "name": "Mismatch",
                "value_type": "float"
            },
            {
                "key": "mismatch_portfolio",
                "name": "Mismatch Portfolio",
                "value_type": "field"
            },
            {
                "key": "mismatch_account",
                "name": "Mismatch Account",
                "value_type": "field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }

}());
},{}],207:[function(require,module,exports){
arguments[4][193][0].apply(exports,arguments)
},{"dup":193}],208:[function(require,module,exports){
arguments[4][194][0].apply(exports,arguments)
},{"dup":194}],209:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "subgroup",
                "name": "Sub Group",
                "value_type": "field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],210:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],211:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "group",
                "name": "Group",
                "value_type": "field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],212:[function(require,module,exports){
arguments[4][209][0].apply(exports,arguments)
},{"dup":209}],213:[function(require,module,exports){
arguments[4][210][0].apply(exports,arguments)
},{"dup":210}],214:[function(require,module,exports){
arguments[4][211][0].apply(exports,arguments)
},{"dup":211}],215:[function(require,module,exports){
arguments[4][209][0].apply(exports,arguments)
},{"dup":209}],216:[function(require,module,exports){
arguments[4][210][0].apply(exports,arguments)
},{"dup":210}],217:[function(require,module,exports){
arguments[4][211][0].apply(exports,arguments)
},{"dup":211}],218:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "public_name",
                "name": "Public name",
                "value_type": 10
            },
            {
                "key": "content_types",
                "name": "Content Types",
                "value_type": 'mc_field'
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],219:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "transaction_code",
                "name": "Transaction Code",
                "value_type": 20
            },
            {
                "key": "transaction_class",
                "name": "Transaction class",
                "value_type": "field"
            },
            {
                "key": "portfolio",
                "name": "Portfolio",
                "value_type": "field"
            },
            {
                "key": "transaction_currency",
                "name": "Transaction currency",
                "value_type": "field"
            },
            {
                "key": "instrument",
                "name": "Instrument",
                "value_type": "field"
            },
            {
                "key": "position_size_with_sign",
                "name": "Position Size with sign",
                "value_type": "float"
            },
            {
                "key": "settlement_currency",
                "name": "Settlement currency",
                "value_type": "field"
            },
            {
                "key": "cash_consideration",
                "name": "Cash consideration",
                "value_type": "float"
            },
            {
                "key": "principal_with_sign",
                "name": "Principal with sign",
                "value_type": "float"
            },
            {
                "key": "carry_with_sign",
                "name": "Carry with sign",
                "value_type": "float"
            },
            {
                "key": "overheads_with_sign",
                "name": "Overheads with sign",
                "value_type": "float"
            },
            {
                "key": "accounting_date",
                "name": "Accounting date",
                "value_type": 40
            },
            {
                "key": "cash_date",
                "name": "Cash date",
                "value_type": 40
            },
            //{
            //    "key": "transaction_date",
            //    "name": "Transaction date",
            //    "value_type": 40
            //},
            {
                "key": "account_cash",
                "name": "Account cash",
                "value_type": 'field'
            },
            {
                "key": "account_position",
                "name": "Account position",
                "value_type": 'field'
            },
            {
                "key": "account_interim",
                "name": "Account interim",
                "value_type": 'field'
            },
            {
                "key": "strategy1_position",
                "name": "Strategy1 position",
                "value_type": 'field'
            },
            {
                "key": "strategy1_cash",
                "name": "Strategy1 cash",
                "value_type": 'field'
            },
            {
                "key": "strategy2_position",
                "name": "Strategy2 position",
                "value_type": 'field'
            },
            {
                "key": "strategy2_cash",
                "name": "Strategy2 cash",
                "value_type": 'field'
            },
            {
                "key": "strategy3_position",
                "name": "Strategy3 position",
                "value_type": 'field'
            },
            {
                "key": "strategy3_cash",
                "name": "Strategy3 cash",
                "value_type": 'field'
            },
            {
                "key": "reference_fx_rate",
                "name": "Reference fx rate",
                "value_type": 'float'
            },
            {
                "key": "is_locked",
                "name": "Is locked",
                "value_type": 'boolean'
            },
            {
                "key": "is_canceled",
                "name": "Is canceled",
                "value_type": 'boolean'
            },
            {
                "key": "factor",
                "name": "Factor",
                "value_type": 'float'
            },
            {
                "key": "principal_amount",
                "name": "Principal amount",
                "value_type": 'float'
            },
            {
                "key": "carry_amount",
                "name": "Carry amount",
                "value_type": 'float'
            },
            {
                "key": "overheads",
                "name": "overheads",
                "value_type": 'float'
            },
            {
                "key": "responsible",
                "name": "Responsible",
                "value_type": 'field'
            },
            {
                "key": "counterparty",
                "name": "Counterparty",
                "value_type": 'field'
            },
            {
                "key": "trade_price",
                "name": "Trade price",
                "value_type": 'float'
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],220:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "transaction_code",
                "name": "Transaction Code",
                "value_type": 20
            },
            {
                "key": "transaction_class",
                "name": "Transaction class",
                "value_type": "field"
            },
            {
                "key": "position_size_with_sign",
                "name": "Position Size with sign",
                "value_type": "float"
            },
            {
                "key": "cash_consideration",
                "name": "Cash consideration",
                "value_type": "float"
            },
            {
                "key": "principal_with_sign",
                "name": "Principal with sign",
                "value_type": "float"
            },
            {
                "key": "carry_with_sign",
                "name": "Carry with sign",
                "value_type": "float"
            },
            {
                "key": "overheads_with_sign",
                "name": "Overheads with sign",
                "value_type": "float"
            },
            {
                "key": "accounting_date",
                "name": "Accounting date",
                "value_type": 40
            },
            {
                "key": "cash_date",
                "name": "Cash date",
                "value_type": 40
            },
            //{
            //    "key": "transaction_date",
            //    "name": "Transaction date",
            //    "value_type": 40
            //},
            {
                "key": "reference_fx_rate",
                "name": "Reference fx rate",
                "value_type": 'float'
            },
            {
                "key": "is_locked",
                "name": "Is locked",
                "value_type": 'boolean'
            },
            {
                "key": "is_canceled",
                "name": "Is canceled",
                "value_type": 'boolean'
            },
            {
                "key": "factor",
                "name": "Factor",
                "value_type": 'float'
            },
            {
                "key": "principal_amount",
                "name": "Principal amount",
                "value_type": 'float'
            },
            {
                "key": "carry_amount",
                "name": "Carry amount",
                "value_type": 'float'
            },
            {
                "key": "overheads",
                "name": "overheads",
                "value_type": 'float'
            },
            {
                "key": "trade_price",
                "name": "Trade price",
                "value_type": 'float'
            }
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],221:[function(require,module,exports){
arguments[4][193][0].apply(exports,arguments)
},{"dup":193}],222:[function(require,module,exports){
/**
 * Created by szhitenev on 03.04.2017.
 */
(function () {

    'use strict';

    var getAttributes = function () {
        return [
            {
                "key": "name",
                "name": "Name",
                "value_type": 10
            },
            {
                "key": "short_name",
                "name": "Short name",
                "value_type": 10
            },
            {
                "key": "notes",
                "name": "Notes",
                "value_type": 10
            },
            {
                "key": "user_code",
                "name": "User code",
                "value_type": 10
            },
            {
                "key": "group",
                "name": "Group",
                "value_type": "field"
            },
            {
                "key": "display_expr",
                "name": "Display Expression",
                "value_type": 10
            },
            {
                "key": "instrument_types",
                "name": "Instrument types",
                "value_type": "mc_field"
            },
            {
                "key": "portfolios",
                "name": "Portfolios",
                "value_type": "mc_field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            },
            {
                "key": "tags",
                "name": "Tags",
                "value_type": "mc_field"
            },
            //{
            //    "key": "book_transaction_layout",
            //    "name": "Book transaction Layout",
            //    "value_type": 10
            //}
        ]
    };

    module.exports = {

        getAttributes: getAttributes

    }


}())
},{}],223:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getTypeList = function () {
        return window.fetch(baseUrl + 'accounts/account-type/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'accounts/account/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'accounts/account/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'accounts/account/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        });
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'accounts/account/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var updateBulk = function (accounts) {
        return window.fetch(baseUrl + 'accounts/account/bulk-update/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(accounts)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'accounts/account/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {

        getTypeList: getTypeList,

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],224:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();


    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'accounts/account-type/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'accounts/account-type/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'accounts/account-type/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        });
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'accounts/account-type/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var updateBulk = function (accountTypes) {
        return window.fetch(baseUrl + 'accounts/account-type/bulk-update/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(accountTypes)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'accounts/account-type/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],225:[function(require,module,exports){
/**
 * Created by szhitenev on 26.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'instruments/accrual-calculation-model/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList
    };

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],226:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */

(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');

    var metaRestrictionsService = require('../services/metaRestrictionsService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    function endPointResolver(entity) {
        switch (entity) {
            case 'counterparty':
                return 'counterparties/' + entity + '-attribute-type/';
                break;
            case 'responsible':
                return 'counterparties/' + entity + '-attribute-type/';
                break;
            case 'currency':
                return 'currencies/' + entity + '-attribute-type/';
                break;
            case 'complex-transaction':
                return '/transactions/' + entity + '-attribute-type/';
                break;
            default:
                return entity + 's/' + entity + '-attribute-type/';
        }
    }

    var getList = function (entity) {

        if (metaRestrictionsService.getEntitiesWithoutDynamicAttrsList().indexOf(entity) !== -1) {
            return new Promise(function (resolve) {
                resolve({results: []})
            })
        }

        return window.fetch(baseUrl + endPointResolver(entity),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (entity, id) {
        return window.fetch(baseUrl + endPointResolver(entity) + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (entity, attributeType) {
        return window.fetch(baseUrl + endPointResolver(entity),
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(attributeType)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (entity, id, attributeType) {
        return window.fetch(baseUrl + endPointResolver(entity) + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(attributeType)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (entity, id) {
        return window.fetch(baseUrl + endPointResolver(entity) + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                console.log('data', data);
                if (data.status === 409) {
                    resolve({status: 'conflict'});
                }
                resolve({status: 'success'});

            });
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }
}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309,"../services/metaRestrictionsService":374}],227:[function(require,module,exports){
/**
 * Created by szhitenev on 22.07.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'audit/history/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'audit/history/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'audit/history/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'audit/history/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'audit/history/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],228:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'ui/bookmark/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'ui/bookmark/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (bookmark) {
        return window.fetch(baseUrl + 'ui/bookmark/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(bookmark)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, bookmark) {
        return window.fetch(baseUrl + 'ui/bookmark/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(bookmark)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };


    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'ui/bookmark/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],229:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'counterparties/counterparty-group/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/counterparty-group/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (counterparty) {
        return window.fetch(baseUrl + 'counterparties/counterparty-group/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(counterparty)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, counterparty) {
        return window.fetch(baseUrl + 'counterparties/counterparty-group/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(counterparty)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/counterparty-group/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],230:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'counterparties/counterparty/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/counterparty/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (counterparty) {
        return window.fetch(baseUrl + 'counterparties/counterparty/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(counterparty)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, counterparty) {
        return window.fetch(baseUrl + 'counterparties/counterparty/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(counterparty)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var updateBulk = function (counterparties) {
        return window.fetch(baseUrl + 'counterparties/counterparty/bulk-update/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(counterparties)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/counterparty/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],231:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'currencies/currency-history/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'currencies/currency-history/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (currency) {
        return window.fetch(baseUrl + 'currencies/currency-history/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(currency)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, currency) {
        return window.fetch(baseUrl + 'currencies/currency-history/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(currency)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'currencies/currency-history/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],232:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var baseUrlService = require('../services/baseUrlService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {

        if (!options) {
            options = {};
        }
        
        options.pageSize = options.pageSize || 200;

        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'currencies/currency/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'currencies/currency/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (currency) {
        return window.fetch(baseUrl + 'currencies/currency/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(currency)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, currency) {
        return window.fetch(baseUrl + 'currencies/currency/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(currency)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'currencies/currency/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],233:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */

(function(){

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');

    var metaRestrictionsService = require('../services/metaRestrictionsService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    function endPointResolver(entity) {
        switch (entity){
            case 'counterparty':
                return 'counterparties/' + entity + '-classifier/';
                break;
            case 'responsible':
                return 'counterparties/' + entity + '-classifier/';
                break;
            default:
                return entity + 's/' + entity + '-classifier/';
        }
    }

    var getList = function (entity) {

        if(metaRestrictionsService.getEntitiesWithoutDynamicAttrsList().indexOf(entity) !== -1) {
            return new Promise(function(resolve){resolve({results: []})})
        }

        return window.fetch(baseUrl + endPointResolver(entity),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (entity, id) {

        return window.fetch(baseUrl + endPointResolver(entity) + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (entity, attributeType) {
        return window.fetch(baseUrl + endPointResolver(entity),
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(attributeType)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (entity, id, attributeType) {
        return window.fetch(baseUrl + endPointResolver(entity) + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(attributeType)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (entity, id) {
        return window.fetch(baseUrl + endPointResolver(entity) + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                console.log('data', data);
                if(data.status === 409) {
                    resolve({status: 'conflict'});
                }
                resolve({status: 'success'});

            });
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }
}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309,"../services/metaRestrictionsService":374}],234:[function(require,module,exports){
/**
 * Created by szhitenev on 17.06.2016.
 */
(function () {

    'use strict';
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getDailyPricingModelChoices = function () {
        return window.fetch(baseUrl + 'instruments/daily-pricing-model/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getPaymentSizeDetailChoices = function () {
        return window.fetch(baseUrl + 'instruments/payment-size-detail/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getTransactionClassList = function() {
        return new Promise(function(resolve, reject) {
            resolve([
                {
                    "value": "1",
                    "name": "Buy"
                },
                {
                    "value": "2",
                    "name": "Sell"
                },
                {
                    "value": "3",
                    "name": "FX Trade"
                },
                {
                    "value": "4",
                    "name": "Instrument PL"
                },
                {
                    "value": "5",
                    "name": "Transaction PL"
                },
                {
                    "value": "6",
                    "name": "Transfer"
                },
                {
                    "value": "7",
                    "name": "FX Transfer"
                },
                {
                    "value": "8",
                    "name": "Cash-Inflow"
                },
                {
                    "value": "9",
                    "name": "Cash-Outflow"
                }
            ])
        })
    };

    module.exports = {
        getDailyPricingModelChoices: getDailyPricingModelChoices,
        getPaymentSizeDetailChoices: getPaymentSizeDetailChoices,
        getTransactionClassList: getTransactionClassList
    }

}());
},{"../services/baseUrlService":306}],235:[function(require,module,exports){
(function () {
    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var baseUrlService = require('../services/baseUrlService');
    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'instruments/generated-event/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    // var eventAction = function (eventId, options) {
    // 	return window.fetch(baseUrl + 'instruments/generated-event/' + eventId + '/',
    // 	{
    // 		method: 'PUT',
    // 		credentials: 'include',
    // 		headers: {
    // 			'X-CSRFToken': cookieService.getCookie('csrftoken'),
    // 			Accept: 'application/json',
    // 			'Content-type': 'application/json'
    // 		},
    // 		body: JSON.stringify(options)
    // 	}).then(function (data) {
    // 		return data.json();
    // 	});
    // }
    var getEventAction = function (url) {
        return window.fetch(baseUrl + 'instruments/generated-event/' + url.eventId + '/book/?action=' + url.actionId,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var putEventAction = function (url, data) {
        return window.fetch(baseUrl + 'instruments/generated-event/' + url.eventId + '/book/?action=' + url.actionId,
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(data)
            }).then(function (data) {
            return data.json();
        });
    };

    var ignoreEventAction = function (id) {

        return window.fetch(baseUrl + 'instruments/generated-event/' + id + '/ignore/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        });

    };

    var generateEvents = function () {
        return window.fetch(baseUrl + 'instruments/instrument/generate-events/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        });
    };

    module.exports = {
        getList: getList,
        getEventAction: getEventAction,
        putEventAction: putEventAction,
        ignoreEventAction: ignoreEventAction,
        generateEvents: generateEvents
    }
}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306}],236:[function(require,module,exports){
/**
 * Created by szhitenev on 13.01.2017.
 */
(function () {

    'use strict';

    var getFunctionsHelp = function () {
        return window.fetch('portal/content/json/functions_help.json').then(function(data){
            return data.json();
        })
    };

    module.exports = {
        getFunctionsHelp: getFunctionsHelp
    }

}());
},{}],237:[function(require,module,exports){
/**
 * Created by szhitenev on 04.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getInstrumentMappingList = function () {
        return window.fetch(baseUrl + 'import/instruments/instrument/mapping/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };


    module.exports = {
        getInstrumentMappingList: getInstrumentMappingList
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],238:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/account-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/account-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/account-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/account-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/account-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],239:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/accrual-calculation-model-mapping/?page_size=10000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/accrual-calculation-model-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/accrual-calculation-model-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/accrual-calculation-model-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/accrual-calculation-model-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],240:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/counterparty-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/counterparty-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/counterparty-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/counterparty-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/counterparty-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],241:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/currency-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/currency-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/currency-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/currency-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/currency-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],242:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/daily-pricing-model-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/daily-pricing-model-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/daily-pricing-model-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/daily-pricing-model-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/daily-pricing-model-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],243:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/provider/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getConfig = function (providerId) {
        return window.fetch(baseUrl + 'import/config/?provider=' + providerId,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var setConfig = function(providerId, provider) {

        return window.fetch(baseUrl + 'import/config/' + providerId + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken')
                },
                body: provider
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })


    };

    module.exports = {
        getList: getList,
        getConfig: getConfig,
        setConfig: setConfig
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],244:[function(require,module,exports){
/**
 * Created by szhitenev on 22.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var startImport = function (config) {
        return window.fetch(baseUrl + 'import/instrument/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(config)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    module.exports = {
        startImport: startImport
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],245:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'import/price-download-scheme/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/price-download-scheme/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'import/price-download-scheme/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'import/price-download-scheme/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/price-download-scheme/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],246:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var create = function (price) {
        return window.fetch(baseUrl + 'import/pricing/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(price)
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        create: create
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],247:[function(require,module,exports){
/**
 * Created by szhitenev on 22.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var startImport = function (config) {
        return window.fetch(baseUrl + 'import/complex-transaction-csv-file-import/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken')
                },
                body: config
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    module.exports = {
        startImport: startImport
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],248:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/instrument-attribute-value-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/instrument-attribute-value-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-attribute-value-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/instrument-attribute-value-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-attribute-value-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],249:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/instrument-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/instrument-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/instrument-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],250:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/periodicity-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/periodicity-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/periodicity-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/periodicity-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/periodicity-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],251:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (providerId) {
        return window.fetch(baseUrl + 'import/instrument-scheme/?provider' + providerId,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (scheme) {
        return window.fetch(baseUrl + 'import/instrument-scheme/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(scheme)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-scheme/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, scheme) {
        return window.fetch(baseUrl + 'import/instrument-scheme/' + id + '/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(scheme)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-scheme/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        create: create,
        getByKey: getByKey,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],252:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/instrument-type-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/instrument-type-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-type-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/instrument-type-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/instrument-type-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],253:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/payment-size-detail-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/payment-size-detail-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/payment-size-detail-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/payment-size-detail-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/payment-size-detail-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],254:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/portfolio-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/portfolio-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/portfolio-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/portfolio-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/portfolio-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],255:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/price-download-scheme-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/price-download-scheme-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/price-download-scheme-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/price-download-scheme-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/price-download-scheme-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],256:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/price-download-scheme/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/price-download-scheme/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/price-download-scheme/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/price-download-scheme/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/price-download-scheme/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],257:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function(){

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var updateSchedule = function(schedule){
        return window.fetch(baseUrl + 'import/pricing-automated-schedule/0/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(schedule)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var getSchedule = function(){
        return window.fetch(baseUrl + 'import/pricing-automated-schedule/0/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        updateSchedule: updateSchedule,
        getSchedule: getSchedule
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],258:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/responsible-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/responsible-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/responsible-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/responsible-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/responsible-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],259:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getAccrualScheduleDownloadMethodList = function () {
        return window.fetch(baseUrl + 'import/accrual-schedule-download-method/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getFactorScheduleDownloadMethodList = function () {
        return window.fetch(baseUrl + 'import/factor-schedule-download-method/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getAccrualScheduleDownloadMethodList: getAccrualScheduleDownloadMethodList,
        getFactorScheduleDownloadMethodList: getFactorScheduleDownloadMethodList
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],260:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/strategy1-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/strategy1-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/strategy1-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/strategy1-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/strategy1-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],261:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/strategy2-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/strategy2-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/strategy2-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/strategy2-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/strategy2-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],262:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/strategy3-mapping/?page_size=1000',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };
    var create = function (map) {
        return window.fetch(baseUrl + 'import/strategy3-mapping/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/strategy3-mapping/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, map) {
        return window.fetch(baseUrl + 'import/strategy3-mapping/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(map)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/strategy3-mapping/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],263:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'import/complex-transaction-import-scheme/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (scheme) {
        return window.fetch(baseUrl + 'import/complex-transaction-import-scheme/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(scheme)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'import/complex-transaction-import-scheme/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, scheme) {
        return window.fetch(baseUrl + 'import/complex-transaction-import-scheme/' + id + '/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(scheme)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'import/complex-transaction-import-scheme/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        create: create,
        getByKey: getByKey,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],264:[function(require,module,exports){
/**
 * Created by szhitenev on 26.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'instruments/periodicity/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            })
            .then(function (data) {
                return data.json();
            })
    };

    module.exports = {
        getList: getList
    };

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],265:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/instrument/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (instrument) {
        return window.fetch(baseUrl + 'instruments/instrument/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(instrument)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, instrument) {
        return window.fetch(baseUrl + 'instruments/instrument/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(instrument)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var updateBulk = function (instruments) {
        return window.fetch(baseUrl + 'instruments/instrument/bulk-update/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(instruments)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],266:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();
    var getList = function () {
        return window.fetch(baseUrl + 'instruments/instrument-type/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument-type/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (instrument) {
        return window.fetch(baseUrl + 'instruments/instrument-type/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(instrument)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, instrument) {
        return window.fetch(baseUrl + 'instruments/instrument-type/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(instrument)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument-type/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306}],267:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/instrument-attribute-type/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getListByAttributeType = function (options) {

        var filters = '?value_type=' + options[0];

        return window.fetch(baseUrl + 'instruments/instrument-attribute-type/' + filters + '&show_classifiers=1',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument-attribute-type/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'instruments/instrument-attribute-type/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'instruments/instrument-attribute-type/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument-attribute-type/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getListByAttributeType: getListByAttributeType,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],268:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/instrument-class/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument-class/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'instruments/instrument-class/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'instruments/instrument-class/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/instrument-class/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],269:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/daily-pricing-model/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/daily-pricing-model/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'instruments/daily-pricing-model/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'instruments/daily-pricing-model/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/daily-pricing-model/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],270:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/event-schedule-config/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/event-schedule-config/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'instruments/event-schedule-config/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return data.json();
        })
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'instruments/event-schedule-config/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/event-schedule-config/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],271:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/payment-size-detail/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],272:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var recalculate = function (dateFrom, dateTo) {
        return window.fetch(baseUrl + 'instruments/instrument/recalculate-prices-accrued-price/?date_0=' + dateFrom + '&date_1=' + dateTo,
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };


    module.exports = {
        recalculate: recalculate
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306}],273:[function(require,module,exports){
(function() {
	'use strict';

	var cookieService = require('../../../../core/services/cookieService');
	var baseUrlService = require('../services/baseUrlService');

	var baseUrl = baseUrlService.resolve();

	var getList = function (type) {
		var fetchUrl = '';
		type === 'members' ? fetchUrl = 'users/member/' : fetchUrl = 'users/group/';
		return window.fetch(baseUrl + fetchUrl,
			{
				method: 'GET',
				credentials: 'include',
				headers: {
					Accept: 'application/json',
					'Content-type': 'application/json'
				}
			}).then(function (data) {
			return data.json();
		})
	};

	var getMemberOrGroupByKey = function (type, id) {
		var fetchUrl = '';
		type === 'members' ? fetchUrl = 'users/member/' : fetchUrl = 'users/group/';
		return window.fetch(baseUrl + fetchUrl + id + '/', 
			{
				method: 'GET',
				credentials: 'include',
				headers: {
					Accept: 'application/json',
					'Content-type': 'application/json'
				}
			}).then(function (data) {
				return data.json();
			});
	}

	var create = function (type, data) {
		var fetchUrl = '';
		type === 'members' ? fetchUrl = 'users/member/' : fetchUrl = 'users/group/';
		console.log('url is', baseUrl + fetchUrl);
		return window.fetch(baseUrl + fetchUrl,
			{
				method: 'POST',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				},
				body: JSON.stringify(data)
			}).then(function (data) {
			return new Promise(function (resolve, reject) {
				data.json().then(function (result) {
					resolve({
						response: result,
						status: data.status
					})
				})
			});
		});
	};

	var update = function (type, id, data) {
		var fetchUrl = '';
		type === 'members' ? fetchUrl = 'users/member/' : fetchUrl = 'users/group/';
		return window.fetch(baseUrl + fetchUrl + id + '/',
			{
				method: 'PUT',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				},
				body: JSON.stringify(data)
			}).then(function (data) {
			return new Promise(function (resolve, reject) {
				data.json().then(function (result) {
					resolve({
						response: result,
						status: data.status
					})
				})
			});
		})
	};

	var deleteByKey = function (type, id) {
		var fetchUrl = '';
		type === 'members' ? fetchUrl = 'users/member/' : fetchUrl = 'users/group/';
		return window.fetch(baseUrl + fetchUrl + id + '/',
			{
				method: 'DELETE',
				credentials: 'include',
				headers: {
					'X-CSRFToken': cookieService.getCookie('csrftoken'),
					Accept: 'application/json',
					'Content-type': 'application/json'
				}
			}).then(function (data) {
			return new Promise(function (resolve, reject) {
				resolve({status: 'deleted'});
			});
			//return data.json();
		})
	};

	module.exports = {
		getList: getList,
		getMemberOrGroupByKey: getMemberOrGroupByKey,
		create: create,
		update: update,
		deleteByKey: deleteByKey
	}
}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306}],274:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    "use strict";

    var getListForTransactionTypeInputs = function () {
        return [
            {
                name: "Account",
                entity: 'account',
                key: "accounts.account"
            },
            {
                name: "Counterparty",
                entity: 'counterparty',
                key: "counterparties.counterparty"
            },
            {
                name: "Responsible",
                entity: 'responsible',
                key: "counterparties.responsible"
            },
            {
                name: "Currency",
                entity: 'currency',
                key: "currencies.currency"
            },
            {
                name: "Instrument",
                entity: 'instrument',
                key: "instruments.instrument"
            },
            {
                name: "Portfolio",
                entity: 'portfolio',
                key: "portfolios.portfolio"
            },
            {
                name: "Instrument Type",
                entity: 'instrument-type',
                key: "instruments.instrumenttype"
            },
            {
                name: "Strategy 1",
                entity: 'strategy-1',
                key: "strategies.strategy1"
            },
            {
                name: "Strategy 2",
                entity: 'strategy-2',
                key: "strategies.strategy2"
            },
            {
                name: "Strategy 3",
                entity: 'strategy-3',
                key: "strategies.strategy3"
            },
            {
                name: 'Daily pricing model',
                entity: 'daily-pricing-model',
                key: 'instruments.dailypricingmodel'
            },
            {
                name: 'Payment size detail',
                entity: 'payment-size-detail',
                key: 'instruments.paymentsizedetail'
            },
            {
                name: 'Price download scheme',
                entity: 'price-download-scheme',
                key: 'integrations.pricedownloadscheme'
            }
        ]
    };

    var getListForTags = function () {

        return [
            {
                name: "Account Type",
                entity: 'account-type',
                key: "accounts.accounttype"
            },
            {
                name: "Account",
                entity: 'account',
                key: "accounts.account"
            },
            {
                name: "Counterparty",
                entity: 'counterparty',
                key: "counterparties.counterparty"
            },
            {
                name: "Responsible",
                entity: 'responsible',
                key: "counterparties.responsible"
            },
            {
                name: "Currency",
                entity: 'currency',
                key: "currencies.currency"
            },
            {
                name: "Instrument",
                entity: 'instrument',
                key: "instruments.instrument"
            },
            {
                name: "Portfolio",
                entity: 'portfolio',
                key: "portfolios.portfolio"
            },
            {
                name: "Thread",
                entity: 'thread',
                key: "chats.thread"
            },
            {
                name: "Instrument Type",
                entity: 'instrument-type',
                key: "instruments.instrumenttype"
            },
            //{
            //    name: "Instrument Type",
            //    entity: 'instrument-types',
            //    key: "instruments.instrumenttype"
            //},
            {
                name: "Transaction Type",
                entity: 'transaction-type',
                key: "transactions.transactiontype"
            },
            {
                name: "Transaction Type Group",
                entity: 'transaction-type-group',
                key: "transactions.transactiontypegroup"
            },
            {
                name: "Strategy 1",
                entity: 'strategy-1',
                key: "strategies.strategy1"
            },
            {
                name: "Strategy 2",
                entity: 'strategy-2',
                key: "strategies.strategy2"
            },
            {
                name: "Strategy 3",
                entity: 'strategy-3',
                key: "strategies.strategy3"
            },
            {
                name: "Thread group",
                entity: 'thread-group',
                key: "chats.threadgroup"
            },
            {
                name: "Counterparty group",
                entity: 'counterparty-group',
                key: "counterparties.counterpartygroup"
            },
            {
                name: "Responsible group",
                entity: 'responsible-group',
                key: "counterparties.responsiblegroup"
            },
            {
                name: "Strategy 1 group",
                entity: 'strategy-1-group',
                key: "strategies.strategy1group"
            },
            {
                name: "Strategy 2 group",
                entity: 'strategy-2-group',
                key: "strategies.strategy2group"
            },
            {
                name: "Strategy 3 group",
                entity: 'strategy-3-group',
                key: "strategies.strategy3group"
            },
            {
                name: "Strategy 1 subgroup",
                entity: 'strategy-1-subgroup',
                key: "strategies.strategy1subgroup"
            },
            {
                name: "Strategy 2 subgroup",
                entity: 'strategy-2-subgroup',
                key: "strategies.strategy2subgroup"
            },
            {
                name: "Strategy 3 subgroup",
                entity: 'strategy-3-subgroup',
                key: "strategies.strategy3subgroup"
            }
        ]

    };

    var getListForUi = function () {
        return [
            {
                name: "Dashboard",
                entity: 'dashboard',
                key: "ui.dashboard"
            },
            {
                name: "Account Type",
                entity: 'account-type',
                key: "accounts.accounttype"
            },
            {
                name: "Account",
                entity: 'account',
                key: "accounts.account"
            },
            {
                name: "Counterparty",
                entity: 'counterparty',
                key: "counterparties.counterparty"
            },
            {
                name: "Responsible",
                entity: 'responsible',
                key: "counterparties.responsible"
            },
            {
                name: "Currency",
                entity: 'currency',
                key: "currencies.currency"
            },
            {
                name: "Currency history",
                entity: 'currency-history',
                key: "currencies.currencyhistory"
            },
            {
                name: "Instrument",
                entity: 'instrument',
                key: "instruments.instrument"
            },
            {
                name: 'Pricing Policy',
                entity: 'pricing-policy',
                key: 'instruments.pricingpolicy'
            },
            {
                name: 'Price History',
                entity: 'price-history',
                key: 'instruments.pricehistory'
            },
            {
                name: "Portfolio",
                entity: 'portfolio',
                key: "portfolios.portfolio"
            },
            {
                name: "Instrument Type",
                entity: 'instrument-type',
                key: "instruments.instrumenttype"
            },
            {
                name: "Transaction",
                entity: 'transaction',
                key: "transactions.transaction"
            },
            {
                name: "Transaction Type",
                entity: 'transaction-type',
                key: "transactions.transactiontype"
            },
            {
                name: "Transaction Type Group",
                entity: 'transaction-type-group',
                key: "transactions.transactiontypegroup"
            },
            {
                name: "Counterparty group",
                entity: 'counterparty-group',
                key: "counterparties.counterpartygroup"
            },
            {
                name: "Responsible group",
                entity: 'responsible-group',
                key: "counterparties.responsiblegroup"
            },
            {
                name: "Strategy 1",
                entity: 'strategy-1',
                key: "strategies.strategy1"
            },
            {
                name: "Strategy 2",
                entity: 'strategy-2',
                key: "strategies.strategy2"
            },
            {
                name: "Strategy 3",
                entity: 'strategy-3',
                key: "strategies.strategy3"
            },
            {
                name: "Strategy 1 group",
                entity: 'strategy-1-group',
                key: "strategies.strategy1group"
            },
            {
                name: "Strategy 2 group",
                entity: 'strategy-2-group',
                key: "strategies.strategy2group"
            },
            {
                name: "Strategy 3 group",
                entity: 'strategy-3-group',
                key: "strategies.strategy3group"
            },
            {
                name: "Strategy 1 subgroup",
                entity: 'strategy-1-subgroup',
                key: "strategies.strategy1subgroup"
            },
            {
                name: "Strategy 2 subgroup",
                entity: 'strategy-2-subgroup',
                key: "strategies.strategy1subgroup"
            },
            {
                name: "Strategy 3 subgroup",
                entity: 'strategy-3-subgroup',
                key: "strategies.strategy1subgroup"
            },
            {
                name: "Tag",
                entity: 'tag',
                key: "tags.tag"
            },
            {
                name: "Balance report",
                entity: 'balance-report',
                key: "reports.balancereport"
            },
            {
                name: "P&L report",
                entity: 'pnl-report',
                key: "reports.plreport"
            },
            {
                name: "Transaction report",
                entity: 'transaction-report',
                key: "reports.transactionreport"
            },
            {
                name: "Cash flow projection report",
                entity: 'cash-flow-projection-report',
                key: "reports.cashflowreport"
            },
            {
                name: "Performance report",
                entity: 'performance-report',
                key: "reports.performancereport"
            },
            {
                name: "Transaction",
                entity: 'complex-transaction',
                key: "transactions.complextransaction"
            }
        ]
    };

    module.exports = {
        getListForTags: getListForTags,
        getListForUi: getListForUi,
        getListForTransactionTypeInputs: getListForTransactionTypeInputs
    }


}());
},{}],275:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'transactions/event-class/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],276:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function () {
        return window.fetch(baseUrl + 'transactions/notification-class/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],277:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function () {

    'use strict';

    var getEntitiesWithDisabledPermissions = function () {
        return ["transaction", "price-history", "currency-history", 'currency',
            'complex-transaction',
            'counterparty-group', 'responsible-group'];
    };

    module.exports = {
        getEntitiesWithDisabledPermissions: getEntitiesWithDisabledPermissions
    }

}());
},{}],278:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    "use strict";

    var getMenu = function () {
        return window.fetch("portal/content/json/menu.json").then(function (data) {
            return data.json();
        });
    };

    var getBaseAttrs = function () {
        return [
            //{
            //    "key": "name",
            //    "name": "Name",
            //    "value_type": 10
            //},
            //{
            //    "key": "short_name",
            //    "name": "Short name",
            //    "value_type": 10
            //},
            //{
            //    "key": "notes",
            //    "name": "Notes",
            //    "value_type": 10
            //}
        ];
    };


    // DEPRECATED start look at metaRestrictionRepository

    var getEntitiesWithoutBaseAttrsList = function () {
        return ['price-history', 'currency-history', 'transaction',
            'complex-transaction', 'transaction-report', 'cash-flow-projection-report', 'performance-report',
            'balance-report', 'pnl-report', 'audit-transaction', 'audit-instrument'];
    };

    // DEPRECATED end look at metaRestrictionRepository

    var getEntitiesWithoutDynAttrsList = function () {
        return ['price-history', 'currency-history', 'transaction', 'pricing-policy', 'strategy-1', 'strategy-2', 'strategy-3',
            'strategy-1-group', 'strategy-2-group', 'strategy-3-group',
            'strategy-1-subgroup', 'strategy-2-subgroup', 'strategy-3-subgroup',
            'audit-transaction', 'audit-instrument'];
    };

    var getEntityAttrs = function (entity) {
        var entityAttrs = {
            "portfolio": require('../models/portfolioPropsModel').getAttributes(),
            "audit-transaction": require('../models/auditTransactionPropsModel').getAttributes(),
            "audit-instrument": require('../models/auditInstrumentPropsModel').getAttributes(),
            "account": require('../models/accountPropsModel').getAttributes(),
            "tag": require('../models/tagPropsModel').getAttributes(),
            "account-type": require('../models/accountTypePropsModel').getAttributes(),
            "counterparty": require('../models/counterpartyPropsModel').getAttributes(),
            "counterparty-group": require('../models/counterpartyGroupPropsModel').getAttributes(),
            "responsible": require('../models/responsiblePropsModel').getAttributes(),
            "responsible-group": require('../models/responsibleGroupPropsModel').getAttributes(),
            "pricing-policy": require('../models/pricingPolicyPropsModel').getAttributes(),
            "instrument-type": require('../models/instrumentTypePropsModel').getAttributes(),
            "instrument": require('../models/instrumentPropsModel').getAttributes(),
            "transaction": require('../models/transactionPropsModel').getAttributes(),
            "transaction-type-group": require('../models/transactionTypeGroupPropsModel').getAttributes(),
            "transaction-type": require('../models/transactionTypePropsModel').getAttributes(),
            "currency": require('../models/currencyPropsModel').getAttributes(),
            "currency-history": require('../models/currencyHistoryPropsModel').getAttributes(),
            "price-history": require('../models/priceHistoryPropsModel').getAttributes(),
            "strategy-1": require('../models/strategy1PropsModel').getAttributes(),
            "strategy-2": require('../models/strategy2PropsModel').getAttributes(),
            "strategy-3": require('../models/strategy3PropsModel').getAttributes(),
            "strategy-1-subgroup": require('../models/strategy1subgroupPropsModel').getAttributes(),
            "strategy-2-subgroup": require('../models/strategy2subgroupPropsModel').getAttributes(),
            "strategy-3-subgroup": require('../models/strategy3subgroupPropsModel').getAttributes(),
            "strategy-1-group": require('../models/strategy1groupPropsModel').getAttributes(),
            "strategy-2-group": require('../models/strategy2groupPropsModel').getAttributes(),
            "strategy-3-group": require('../models/strategy3groupPropsModel').getAttributes(),
            "balance-report": require('../models/balanceReportPropsModel').getAttributes(),
            'report-addon-performance': require('../models/reportAddonPerformancePropsModel').getAttributes(),
            'report-mismatch': require('../models/reportMismatchPropsModel').getAttributes(),
            "pnl-report": require('../models/pnlReportPropsModel').getAttributes(),
            "transaction-report": require('../models/transactionReportPropsModel').getAttributes(),
            "cash-flow-projection-report": require('../models/cashFlowProjectionReportPropsModel').getAttributes(),
            "performance-report": require('../models/performanceReportPropsModel').getAttributes(),
            "complex-transaction": require('../models/complexTransactionPropsModel').getAttributes(),
            "instrument-scheme": require('../models/instrumentSchemePropsModel').getAttributes()
        };

        return entityAttrs[entity];
    };

    var getValueTypes = function () {
        return [{
            "value": 20,
            "display_name": "Number"
        }, {
            "value": 10,
            "display_name": "String"
        }, {
            "value": 40,
            "display_name": "Date"
        }, {
            "value": 30,
            "display_name": "Classifier"
        }, {
            "value": "decoration",
            "display_name": "Decoration"
        }, {
            "value": "field",
            "display_name": "Field"
        }, {
            "value": "mc_field",
            "display_name": "Multiple choice field"
        }, {
            "value": "boolean",
            "display_name": "Boolean"
        }, {
            "value": "float",
            "display_name": "Float"
        }
        ];
    };

    var getDynamicAttrsValueTypes = function () {
        return [
            {
                "value": 20,
                "display_name": "Number"
            }, {
                "value": 10,
                "display_name": "String"
            }, {
                "value": 40,
                "display_name": "Date"
            }, {
                "value": 30,
                "display_name": "Classifier"
            }
        ]
    };

    var getRestrictedEntitiesWithTypeField = function () {
        return ['daily_pricing_model', 'payment_size_detail', 'accrued_currency', 'pricing_currency'];
    };

    var getEntityTabs = function (entityType) {
        switch (entityType) {
            case 'instrument':
                return [
                    {
                        label: 'Accruals',
                        templateUrl: 'views/tabs/instrument/accrual-calculation-schedules-view.html'
                    },
                    {
                        label: 'Events',
                        templateUrl: 'views/tabs/instrument/events-view.html'
                    },
                    {
                        label: 'Pricing',
                        templateUrl: 'views/tabs/instrument/manual-pricing-formulas-view.html'
                    },
                    {
                        label: 'Factors',
                        templateUrl: 'views/tabs/instrument/factor-schedule-view.html'
                    }
                ];
                break;
            case 'complex-transaction':
                return [
                    {
                        label: 'Actions',
                        templateUrl: 'views/tabs/complex-transaction/book-transaction-actions-tab-view.html'
                    },
                    {
                        enabled: ['update'],
                        label: 'Transactions',
                        templateUrl: 'views/tabs/complex-transaction/book-transaction-transactions-tab-view.html'
                    }
                ];

                break;
            case 'transaction-type':
                return [
                    {
                        label: 'General',
                        templateUrl: 'views/tabs/transaction-type/transaction-type-general-tab-view.html'
                    },
                    {
                        label: 'Inputs',
                        templateUrl: 'views/tabs/transaction-type/transaction-type-inputs-tab-view.html'
                    },
                    {
                        label: 'Actions',
                        templateUrl: 'views/tabs/transaction-type/transaction-type-actions-tab-view.html'
                    }
                ];
                break;
        }
    };

    var getEntitiesWithSimpleFields = function () {
        // e.g. both of responsible-group, counterparty group
        // have save property group, so its hard to resolve proper service
        return ["responsible", 'counterparty',
            'strategy-1', 'strategy-2', 'strategy-3',
            'transaction-type', 'transaction-type-group',
            'strategy-1-group', 'strategy-2-group', 'strategy-3-group',
            'strategy-1-subgroup', 'strategy-2-subgroup', 'strategy-3-subgroup']
    };

    var getFieldsWithTagGrouping = function () {
        return ['instrument_type', 'type', 'transaction_type', 'instrument_types', 'transaction_types', 'account_types'];
    };

    module.exports = {
        getMenu: getMenu,
        getBaseAttrs: getBaseAttrs,
        getEntityAttrs: getEntityAttrs,
        getValueTypes: getValueTypes,
        getDynamicAttrsValueTypes: getDynamicAttrsValueTypes,
        getEntitiesWithoutDynAttrsList: getEntitiesWithoutDynAttrsList,
        getEntityTabs: getEntityTabs,
        getEntitiesWithoutBaseAttrsList: getEntitiesWithoutBaseAttrsList,
        getRestrictedEntitiesWithTypeField: getRestrictedEntitiesWithTypeField,
        getEntitiesWithSimpleFields: getEntitiesWithSimpleFields,
        getFieldsWithTagGrouping: getFieldsWithTagGrouping
    }


}());
},{"../models/accountPropsModel":186,"../models/accountTypePropsModel":187,"../models/auditInstrumentPropsModel":188,"../models/auditTransactionPropsModel":189,"../models/balanceReportPropsModel":190,"../models/cashFlowProjectionReportPropsModel":191,"../models/complexTransactionPropsModel":192,"../models/counterpartyGroupPropsModel":193,"../models/counterpartyPropsModel":194,"../models/currencyHistoryPropsModel":195,"../models/currencyPropsModel":196,"../models/instrumentPropsModel":197,"../models/instrumentSchemePropsModel":198,"../models/instrumentTypePropsModel":199,"../models/performanceReportPropsModel":200,"../models/pnlReportPropsModel":201,"../models/portfolioPropsModel":202,"../models/priceHistoryPropsModel":203,"../models/pricingPolicyPropsModel":204,"../models/reportAddonPerformancePropsModel":205,"../models/reportMismatchPropsModel":206,"../models/responsibleGroupPropsModel":207,"../models/responsiblePropsModel":208,"../models/strategy1PropsModel":209,"../models/strategy1groupPropsModel":210,"../models/strategy1subgroupPropsModel":211,"../models/strategy2PropsModel":212,"../models/strategy2groupPropsModel":213,"../models/strategy2subgroupPropsModel":214,"../models/strategy3PropsModel":215,"../models/strategy3groupPropsModel":216,"../models/strategy3subgroupPropsModel":217,"../models/tagPropsModel":218,"../models/transactionPropsModel":219,"../models/transactionReportPropsModel":220,"../models/transactionTypeGroupPropsModel":221,"../models/transactionTypePropsModel":222}],279:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    "use strict";

    //

    var getEntitiesWithoutBaseAttrsList = function () {
        return ['price-history', 'currency-history', 'complex-transaction'
            , 'transaction', 'balance-report', 'pnl-report',
            'transaction-report', 'cash-flow-projection-report',
            'performance-report',
            'audit-transaction', 'audit-instrument'];
    };

    var getEntitiesWithoutDynamicAttrsList = function () {
        return ['price-history', 'currency-history',
            'instrument-type', 'account-type', 'pricing-policy',
            'strategy-1', 'strategy-2', 'strategy-3', 'transaction-type',
            'strategy-1-group', 'strategy-2-group', 'strategy-3-group',
            'balance-report', 'pnl-report',
            'transaction-report', 'cash-flow-projection-report',
            'performance-report',
            'counterparty-group', 'responsible-group', 'tag', 'transaction-type-group',
            'strategy-1-subgroup', 'strategy-2-subgroup', 'strategy-3-subgroup',
            'audit-transaction', 'audit-instrument']
    };

    var getRestrictedEntitiesWithTypeField = function () {
        return ['daily_pricing_model', 'payment_size_detail', 'accrued_currency', 'pricing_currency'];
    };


    module.exports = {
        getEntitiesWithoutDynamicAttrsList: getEntitiesWithoutDynamicAttrsList,
        getEntitiesWithoutBaseAttrsList: getEntitiesWithoutBaseAttrsList,
        getRestrictedEntitiesWithTypeField: getRestrictedEntitiesWithTypeField
    }


}());
},{}],280:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function(){

	'use strict';
	var baseUrlService = require('../services/baseUrlService');

	var baseUrl = baseUrlService.resolve();
	var cookieService = require('../../../../core/services/cookieService');
	
	var getList = function(page, type){
		var listUrl = '';
		switch (type) {
			case 'unreaded':
				listUrl = '?all=false&page=' + page
				break;
			default:
				listUrl = '?all=true&page=' + page
		}
		console.log('notification list url is', listUrl);
		return window.fetch(baseUrl + 'notifications/notification/' + listUrl,
			{
				method: 'GET',
				credentials: 'include',
				headers: {
					Accept: 'application/json',
					'Content-type': 'application/json'
				}
			}).then(function (data) {
			return data.json();
		})
	};

	var markAsReaded = function (url, data) {
		var markUrl;
		return window.fetch(baseUrl + 'notifications/notification/' + url + '/mark-as-read/',
			{
			    method: 'POST',
			    credentials: 'include',
			    headers: {
			        'X-CSRFToken': cookieService.getCookie('csrftoken'),
			        Accept: 'application/json',
			        'Content-type': 'application/json'
			    },
			    body: JSON.stringify(data)
			}).then(function (data) {
				return data.json();
			});
	}

	var markAllAsReaded = function () {
		var markUrl;
		return window.fetch(baseUrl + 'notifications/notification/mark-as-read/',
			{
			    method: 'POST',
			    credentials: 'include',
			    headers: {
			        'X-CSRFToken': cookieService.getCookie('csrftoken'),
			        Accept: 'application/json',
			        'Content-type': 'application/json'
			    },
			    body: JSON.stringify({})
			}).then(function (data) {
				return data.json();
			});
	}

	module.exports = {
		getList: getList,
		markAsReaded: markAsReaded,
		markAllAsReaded: markAllAsReaded
	}

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306}],281:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');

    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getClassifierNodeList = function () {
        return window.fetch(baseUrl + 'portfolios/portfolio-classifier/node/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getClassifierNodeByKey = function (id) {
        return window.fetch(baseUrl + 'portfolios/portfolio-classifier/node/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getClassifierList = function () {
        return window.fetch(baseUrl + 'portfolios/portfolio-classifier/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
                return data.json();
            })
    };

    var getClassifierByKey = function (id) {
        return window.fetch(baseUrl + 'portfolios/portfolio-classifier/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'portfolios/portfolio/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'portfolios/portfolio/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (portfolio) {
        return window.fetch(baseUrl + 'portfolios/portfolio/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(portfolio)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, portfolio) {
        return window.fetch(baseUrl + 'portfolios/portfolio/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(portfolio)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var updateBulk = function (portfolios) {
        return window.fetch(baseUrl + 'portfolios/portfolio/bulk-update/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(portfolios)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'portfolios/portfolio/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getClassifierNodeList: getClassifierNodeList,
        getClassifierNodeByKey: getClassifierNodeByKey,

        getClassifierList: getClassifierList,
        getClassifierByKey: getClassifierByKey,

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],282:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/price-history/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/price-history/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (price) {
        return window.fetch(baseUrl + 'instruments/price-history/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(price)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, price) {
        return window.fetch(baseUrl + 'instruments/price-history/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(price)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/price-history/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],283:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'instruments/pricing-policy/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/pricing-policy/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (policy) {
        return window.fetch(baseUrl + 'instruments/pricing-policy/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(policy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, policy) {
        return window.fetch(baseUrl + 'instruments/pricing-policy/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(policy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'instruments/pricing-policy/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
        })
    };


    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],284:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(baseUrl + 'reports/report/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(options)
            }).then(function (data) {
            return data.json();
        })
    };

    var getBalanceReport = function (options) {
        return window.fetch(baseUrl + 'reports/balance-report/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(options)
            }).then(function (data) {
            return data.json();
        })
    };

    var getPnlReport = function (options) {
        return window.fetch(baseUrl + 'reports/pl-report/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(options)
            }).then(function (data) {
            return data.json();
        })
    };

    var getTransactionReport = function (options) {
        return window.fetch(baseUrl + 'reports/transaction-report/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(options)
            }).then(function (data) {
            return data.json();
        })
    };

    var getCashFlowProjectionReport = function (options) {
        return window.fetch(baseUrl + 'reports/cash-flow-projection-report/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(options)
            }).then(function (data) {
            return data.json();
        })
    };

    var getPerformanceReport = function (options) {
        return window.fetch(baseUrl + 'reports/performance-report/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(options)
            }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        getList: getList,
        getBalanceReport: getBalanceReport,
        getPnlReport: getPnlReport,
        getTransactionReport: getTransactionReport,
        getCashFlowProjectionReport: getCashFlowProjectionReport,
        getPerformanceReport: getPerformanceReport
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306}],285:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */

(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    // var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();
    baseUrl = baseUrl + 'reports/custom-field/';

    var getList = function () {

        return window.fetch(baseUrl,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (attribute) {
        return window.fetch(baseUrl,
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(attribute)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, attribute) {
        return window.fetch(baseUrl + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(attribute)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                console.log('data', data);
                if (data.status === 409) {
                    resolve({status: 'conflict'});
                }
                resolve({status: 'success'});

            });
        })
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }
}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306}],286:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'counterparties/responsible-group/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/responsible-group/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (responsible) {
        return window.fetch(baseUrl + 'counterparties/responsible-group/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(responsible)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, responsible) {
        return window.fetch(baseUrl + 'counterparties/responsible-group/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(responsible)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/responsible-group/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],287:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'counterparties/responsible/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/responsible/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (responsible) {
        return window.fetch(baseUrl + 'counterparties/responsible/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(responsible)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        });
    };

    var update = function (id, responsible) {
        return window.fetch(baseUrl + 'counterparties/responsible/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(responsible)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var updateBulk = function (responsibles) {
        return window.fetch(baseUrl + 'counterparties/responsible/bulk-update/',
            {
                method: 'PATCH',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(responsibles)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'counterparties/responsible/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        
        updateBulk: updateBulk
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],288:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (strategyNumber, options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'strategies/' + strategyNumber + '/group/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (strategyNumber, id) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/group/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (strategyNumber, strategy) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/group/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(strategy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (strategyNumber, id, strategy) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/group/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(strategy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (strategyNumber, id) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/group/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };

    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey

    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],289:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (strategyNumber, options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'strategies/' + strategyNumber + '/strategy/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (strategyNumber, id) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/strategy/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (strategyNumber, strategy) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/strategy/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(strategy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (strategyNumber, id, strategy) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/strategy/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(strategy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (strategyNumber, id) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/strategy/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };

    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey

    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],290:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (strategyNumber, options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'strategies/' + strategyNumber + '/subgroup/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (strategyNumber, id) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/subgroup/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (strategyNumber, strategy) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/subgroup/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(strategy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (strategyNumber, id, strategy) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/subgroup/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(strategy)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (strategyNumber, id) {
        return window.fetch(baseUrl + 'strategies/' + strategyNumber + '/subgroup/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };

    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey

    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],291:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var metaContentTypesService = require('../services/metaContentTypesService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {

        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'tags/tag/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })

    };

    var getListByContentType = function (entity) {
        var contentType = metaContentTypesService.findContentTypeByEntity(entity, 'tag');
        console.log('content type is', contentType);
        return window.fetch(baseUrl + 'tags/tag/?content_type=' + contentType,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'tags/tag/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (tag) {
        return window.fetch(baseUrl + 'tags/tag/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(tag)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        });
    };

    var update = function (id, tag) {
        return window.fetch(baseUrl + 'tags/tag/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(tag)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'tags/tag/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {

        getList: getList,
        getListByContentType: getListByContentType,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309,"../services/metaContentTypesService":370}],292:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'transactions/transaction/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/transaction/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (transaction) {
        return window.fetch(baseUrl + 'transactions/transaction/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, transaction) {
        return window.fetch(baseUrl + 'transactions/transaction/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/transaction/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],293:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'transactions/transaction-type/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/transaction-type/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (transaction) {
        return window.fetch(baseUrl + 'transactions/transaction-type/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, transaction) {
        return window.fetch(baseUrl + 'transactions/transaction-type/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/transaction-type/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };

    // TODO bookTransaction GET BOOK

    var getBookTransaction = function (id) {
        return window.fetch(baseUrl + 'transactions/transaction-type/' + id + '/book/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var bookTransaction = function (id, transaction) {
        return window.fetch(baseUrl + 'transactions/transaction-type/' + id + '/book/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        getBookTransaction: getBookTransaction,
        bookTransaction: bookTransaction
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],294:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'transactions/complex-transaction/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/complex-transaction/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (transaction) {
        return window.fetch(baseUrl + 'transactions/complex-transaction/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var update = function (id, transaction) {
        return window.fetch(baseUrl + 'transactions/complex-transaction/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/complex-transaction/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };

    var getBookComplexTransaction = function (id, transaction) {
        return window.fetch(baseUrl + 'transactions/complex-transaction/' + id + '/book/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var bookComplexTransaction = function (id, transaction) {
        return window.fetch(baseUrl + 'transactions/complex-transaction/' + id + '/book/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(transaction)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        getBookComplexTransaction: getBookComplexTransaction,
        bookComplexTransaction: bookComplexTransaction
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],295:[function(require,module,exports){
/**
 * Created by szhitenev on 29.09.2016.
 */
(function () {

    'use strict';

    var transactionClasses = [
        {
            "value": "1",
            "name": "Buy"
        },
        {
            "value": "2",
            "name": "Sell"
        },
        {
            "value": "3",
            "name": "FX Trade"
        },
        {
            "value": "4",
            "name": "Instrument PL"
        },
        {
            "value": "5",
            "name": "Transaction PL"
        },
        {
            "value": "6",
            "name": "Transfer"
        },
        {
            "value": "7",
            "name": "FX Transfer"
        },
        {
            "value": "8",
            "name": "Cash-Inflow"
        },
        {
            "value": "9",
            "name": "Cash-Outflow"
        }
    ];

    var getList = function () {
        return new Promise(function (resolve, reject) {
            resolve(transactionClasses)
        })
    };

    var getListSync = function () {
        return transactionClasses;
    };

    module.exports = {
        getList: getList,
        getListSync: getListSync
    }

}());
},{}],296:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../../services/configureRepositoryUrlService');
    var baseUrlService = require('../../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'transactions/transaction-type-group/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/transaction-type-group/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (account) {
        return window.fetch(baseUrl + 'transactions/transaction-type-group/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        });
    };

    var update = function (id, account) {
        return window.fetch(baseUrl + 'transactions/transaction-type-group/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(account)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'transactions/transaction-type-group/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../../core/services/cookieService":1,"../../services/baseUrlService":306,"../../services/configureRepositoryUrlService":309}],297:[function(require,module,exports){
/**
 * Created by szhitenev on 16.06.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var metaContentTypesService = require('../services/metaContentTypesService');
    var metaRestrictionsRepository = require('./metaRestrictionsRepository');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getEditLayout = function (entity) {

        var contentType = metaContentTypesService.findContentTypeByEntity(entity, 'ui');

        return window.fetch(baseUrl + 'ui/edit-layout/?content_type=' + contentType,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var createEditLayout = function (entity, ui) {

        ui.content_type = metaContentTypesService.findContentTypeByEntity(entity, 'ui');

        return window.fetch(baseUrl + 'ui/edit-layout/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(ui)
            }).then(function (data) {
            return data.json();
        })
    };

    var updateEditLayout = function (id, ui) {
        return window.fetch(baseUrl + 'ui/edit-layout/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(ui)
            }).then(function (data) {
            return data.json();
        })
    };


    var getListLayout = function (entity) {

        if (entity == 'all') {
            return window.fetch(baseUrl + 'ui/list-layout/',
                {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        Accept: 'application/json',
                        'Content-type': 'application/json'
                    }
                }).then(function (data) {
                return data.json();
            })
        } else {

            var contentType = metaContentTypesService.findContentTypeByEntity(entity, 'ui');

            return window.fetch(baseUrl + 'ui/list-layout/?content_type=' + contentType,
                {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'X-CSRFToken': cookieService.getCookie('csrftoken'),
                        Accept: 'application/json',
                        'Content-type': 'application/json'
                    }
                }).then(function (data) {
                return data.json();
            })
        }
    };

    var getListLayoutByKey = function (uiLayoutId) {
        return window.fetch(baseUrl + 'ui/list-layout/' + uiLayoutId + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getActiveListLayout = function (entity) {

        var contentType = metaContentTypesService.findContentTypeByEntity(entity, 'ui');

        return window.fetch(baseUrl + 'ui/list-layout/?is_default=2&content_type=' + contentType,
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            console.log('ui repository data', data);
            return data.json();
        })
    };

    var createListLayout = function (entity, ui) {

        ui.content_type = metaContentTypesService.findContentTypeByEntity(entity, 'ui');

        return window.fetch(baseUrl + 'ui/list-layout/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(ui)
            }).then(function (data) {
            return data.json();
        })
    };

    var updateListLayout = function (id, ui) {
        return window.fetch(baseUrl + 'ui/list-layout/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(ui)
            }).then(function (data) {
            return data.json();
        })
    };

    var deleteListLayoutByKey = function (id) {
        return new Promise(function (resolve, reject) {
            window.fetch(baseUrl + 'ui/list-layout/' + id + '/',
                {
                    method: 'DELETE',
                    credentials: 'include',
                    headers: {
                        'X-CSRFToken': cookieService.getCookie('csrftoken'),
                        Accept: 'application/json',
                        'Content-type': 'application/json'
                    }
                }).then(function (data) {
                resolve(undefined);
            })
        })
    };

    var getDefaultEditLayout = function (entityType) {

        var fields;

        if (metaRestrictionsRepository.getEntitiesWithoutBaseAttrsList().indexOf(entityType) !== -1) {
            fields = []
        } else {
            fields = [
                {
                    "row": 1,
                    "colspan": "1",
                    "column": 1,
                    "editMode": false,
                    "id": null,
                    "name": "Name",
                    "disabled": false,
                    "options": {
                        "notNull": true
                    },
                    "attribute": {
                        "value_type": 10,
                        "name": "Name",
                        "key": "name",
                        "disabled": true
                    },
                    "type": "field",
                    "key": null
                }
            ];
        }

        return [
            {
                data: [
                    {
                        "name": "General",
                        "id": 1,
                        "layout": {
                            "fields": fields,
                            "rows": 1,
                            "columns": 1
                        }
                    }
                ]
            }
        ]
    };

    var getDefaultListLayout = function () {
        return [{
            "name": "default",
            "data": {
                "tableAdditions": {
                    "foreignEntityId": null,
                    "table": {
                        "sorting": {
                            "column": {
                                "sort": null,
                                "key": null
                            }
                        },
                        "columns": [],
                        "filters": []
                    },
                    "additionsType": "",
                    "entityType": null
                },
                "table": {
                    "folding": false,
                    "sorting": {
                        "group": {
                            "id": null,
                            "sort": "DESC",
                            "key": null
                        },
                        "column": {
                            "id": null,
                            "sort": "ASC",
                            "key": null
                        }
                    },
                    "grouping": [],
                    "columns": [
                        {
                            "value_type": 10,
                            "name": "Name",
                            "key": "name"
                        }
                    ],
                    "filters": [],
                    "columnsWidth": [
                        238
                    ]
                },
                "additionsType": ""
            }
        }]
    };

    var getEditLayoutByInstanceId = function (entityType, id) {
        if (entityType == 'complex-transaction') {
            return window.fetch(baseUrl + 'transactions/transaction-type/' + id + '/',
                {
                    method: 'GET',
                    credentials: 'include',
                    headers: {
                        'X-CSRFToken': cookieService.getCookie('csrftoken'),
                        Accept: 'application/json',
                        'Content-type': 'application/json'
                    }
                }).then(function (data) {
                return data.json();
            })
        }
    };

    var updateEditLayoutByInstanceId = function (entityType, id, editLayout) {

        if (entityType == 'complex-transaction') {
            return window.fetch(baseUrl + 'transactions/transaction-type/' + id + '/',
                {
                    method: 'PATCH',
                    credentials: 'include',
                    headers: {
                        'X-CSRFToken': cookieService.getCookie('csrftoken'),
                        Accept: 'application/json',
                        'Content-type': 'application/json'
                    },
                    body: JSON.stringify(editLayout)
                }).then(function (data) {
                return data.json();
            })
        }
    };

    module.exports = {

        getDefaultEditLayout: getDefaultEditLayout,
        getDefaultListLayout: getDefaultListLayout,

        getEditLayout: getEditLayout,
        createEditLayout: createEditLayout,
        updateEditLayout: updateEditLayout,

        getListLayout: getListLayout,
        getListLayoutByKey: getListLayoutByKey,
        createListLayout: createListLayout,
        updateListLayout: updateListLayout,
        deleteListLayoutByKey: deleteListLayoutByKey,

        getEditLayoutByInstanceId: getEditLayoutByInstanceId,
        updateEditLayoutByInstanceId: updateEditLayoutByInstanceId,

        getActiveListLayout: getActiveListLayout

    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/metaContentTypesService":370,"./metaRestrictionsRepository":279}],298:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var configureRepositoryUrlService = require('../services/configureRepositoryUrlService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var getList = function (options) {
        return window.fetch(configureRepositoryUrlService.configureUrl(baseUrl + 'users/group/', options),
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'users/group/' + id + '/',
            {
                method: 'GET',
                credentials: 'include',
                headers: {
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return data.json();
        })
    };

    var create = function (group) {
        return window.fetch(baseUrl + 'users/group/',
            {
                method: 'POST',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(group)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        });
    };

    var update = function (id, group) {
        return window.fetch(baseUrl + 'users/group/' + id + '/',
            {
                method: 'PUT',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                },
                body: JSON.stringify(group)
            }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'users/group/' + id + '/',
            {
                method: 'DELETE',
                credentials: 'include',
                headers: {
                    'X-CSRFToken': cookieService.getCookie('csrftoken'),
                    Accept: 'application/json',
                    'Content-type': 'application/json'
                }
            }).then(function (data) {
            return new Promise(function(resolve,reject) {
                resolve({status: 'deleted'});
            });
            //return data.json();
        })
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306,"../services/configureRepositoryUrlService":309}],299:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */

(function () {

    'use strict';

    var cookieService = require('../../../../core/services/cookieService');
    var baseUrlService = require('../services/baseUrlService');

    var baseUrl = baseUrlService.resolve();

    var handleError = function (methodName) {
        console.log('Method: ' + methodName + '. Cannot get data from server');
    };

    var login = function (login, password) {
        return window.fetch(baseUrl + 'users/login/', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'X-CSRFToken': cookieService.getCookie('csrftoken'),
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify({username: login, password: password})
        }).then(function (data) {
            return data.json();
        }).catch(function () {
            handleError('login');
            return [];
        })
    };

    var logout = function () {
        return window.fetch(baseUrl + 'users/logout/', {
            method: 'POST',
            credentials: 'include',
            headers: {
                'X-CSRFToken': cookieService.getCookie('csrftoken'),
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify({})
        }).then(function (data) {
            return data.json();
        })
    };

    var ping = function () {
        return window.fetch(baseUrl + 'users/ping/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {


            return data.json();
        })
    };

    var protectedPing = function () {
        return window.fetch(baseUrl + 'users/protected-ping/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getList = function () {
        return window.fetch(baseUrl + 'users/user/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getByKey = function (id) {
        return window.fetch(baseUrl + 'users/user/' + id + '/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getMe = function () {
        return window.fetch(baseUrl + 'users/user/0/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var changePassword = function (id, user) {
        return window.fetch(baseUrl + 'users/user/' + id + '/set-password/', {
            method: 'PUT',
            credentials: 'include',
            headers: {
                'X-CSRFToken': cookieService.getCookie('csrftoken'),
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(user)
        }).then(function (data) {
            return new Promise(function (resolve, reject) {

                if (data.status == 400) {
                    data.json().then(function (result) {
                        resolve({
                            response: result,
                            status: data.status
                        })
                    })
                } else {
                    resolve({
                        response: {success: true},
                        status: 200
                    })
                }

            });
        })
    };

    var update = function (id, user) {
        return window.fetch(baseUrl + 'users/user/' + id + '/', {
            method: 'PUT',
            credentials: 'include',
            headers: {
                'X-CSRFToken': cookieService.getCookie('csrftoken'),
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(user)
        }).then(function (data) {
            return new Promise(function (resolve, reject) {
                data.json().then(function (result) {
                    resolve({
                        response: result,
                        status: data.status
                    })
                })
            });
        })
    };

    var patch = function (id, user) {
        return window.fetch(baseUrl + 'users/user/' + id + '/', {
            method: 'PATCH',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(user)
        }).then(function (data) {
            return data.json();
        })
    };

    var deleteByKey = function (id) {
        return window.fetch(baseUrl + 'users/user/' + id + '/', {
            method: 'DELETE',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getMasterList = function () {
        return window.fetch(baseUrl + 'users/master-user/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getMasterByKey = function (id) {
        return window.fetch(baseUrl + 'users/master-user/' + id, {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var updateMaster = function (id, user) {
        return window.fetch(baseUrl + 'users/master-user/' + id, {
            method: 'PUT',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(user)
        }).then(function (data) {
            return data.json();
        })
    };

    var patchMaster = function (id, user) {
        return window.fetch(baseUrl + 'users/master-user/' + id, {
            method: 'PATCH',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(user)
        }).then(function (data) {
            return data.json();
        })
    };

    var deleteMasterByKey = function (id) {
        return window.fetch(baseUrl + 'users/master-user/' + id, {
            method: 'DELETE',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var setMasterUser = function (id) {
        return window.fetch(baseUrl + 'users/master-user/' + id + '/set-current/', {
            method: 'PATCH',
            credentials: 'include',
            headers: {
                'X-CSRFToken': cookieService.getCookie('csrftoken'),
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getMemberList = function () {
        return window.fetch(baseUrl + 'users/member/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getMemberByKey = function (id) {
        return window.fetch(baseUrl + 'users/member/' + id, {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var updateMember = function (id, user) {
        return window.fetch(baseUrl + 'users/member/' + id, {
            method: 'PUT',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(user)
        }).then(function (data) {
            return data.json();
        })
    };

    var patchMember = function (id, user) {
        return window.fetch(baseUrl + 'users/member/' + id, {
            method: 'PATCH',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            },
            body: JSON.stringify(user)
        }).then(function (data) {
            return data.json();
        })
    };

    var deleteMemberByKey = function (id) {
        return window.fetch(baseUrl + 'users/member/' + id, {
            method: 'DELETE',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    var getGroupList = function () {
        return window.fetch(baseUrl + 'users/group/', {
            method: 'GET',
            credentials: 'include',
            headers: {
                Accept: 'application/json',
                'Content-type': 'application/json'
            }
        }).then(function (data) {
            return data.json();
        })
    };

    module.exports = {
        login: login,
        logout: logout,

        ping: ping,
        protectedPing: protectedPing,

        getList: getList,
        getByKey: getByKey,
        getMe: getMe,
        changePassword: changePassword,
        update: update,
        patch: patch,
        deleteByKey: deleteByKey,

        getMasterList: getMasterList,
        getMasterByKey: getMasterByKey,
        updateMaster: updateMaster,
        patchMaster: patchMaster,
        deleteMasterByKey: deleteMasterByKey,
        setMasterUser: setMasterUser,

        getMemberList: getMemberList,
        getMemberByKey: getMemberByKey,
        updateMember: updateMember,
        patchMember: patchMember,
        deleteMemberByKey: deleteMemberByKey,

        getGroupList: getGroupList

    }

}());
},{"../../../../core/services/cookieService":1,"../services/baseUrlService":306}],300:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    module.exports = function ($stateProvider, $urlRouterProvider) {

        $urlRouterProvider.otherwise('/');

        $stateProvider.state('app', {
            url: '',
            abstract: true,
            templateUrl: 'views/shell-view.html',
            controller: 'ShellController as vm'
        }).state('app.attributesManager', {
            url: '/attributes/:entityType',
            templateUrl: 'views/attributes-manager-view.html',
            controller: 'AttributesManagerController as vm',
            params: {
                prevState: ''
            }
        });

        $stateProvider.state('app.dashboard', {
            url: '/',
            templateUrl: 'views/dashboard-view.html',
            controller: 'DashboardController as vm'
        });

        $stateProvider.state('app.actions', {
            url: '/actions',
            templateUrl: 'views/actions-view.html',
            controller: 'ActionsController as vm'
        });

        $stateProvider.state('app.data-constructor', {
            url: '/layout/:entityType/:instanceId',
            params: {
                instanceId: null
            },
            templateUrl: 'views/entity-data-constructor-view.html',
            controller: 'EntityDataConstructorController as vm'
        });

        $stateProvider
            .state('app.data', {
                url: '/data',
                abstract: true,
                template: '<div data-ui-view></div>'
            })
            .state('app.data.portfolio', {
                url: '/portfolios',
                templateUrl: 'views/data/data-portfolio-view.html',
                controller: 'DataPortfolioController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.tag', {
                url: '/tags',
                templateUrl: 'views/data/data-tag-view.html',
                controller: 'DataTagController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.account', {
                url: '/accounts',
                templateUrl: 'views/data/data-account-view.html',
                controller: 'DataAccountController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.account-type', {
                url: '/account-types',
                templateUrl: 'views/data/data-account-type-view.html',
                controller: 'DataAccountTypeController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.counterparty-group', {
                url: '/counterparty-group',
                templateUrl: 'views/data/data-counterparty-group-view.html',
                controller: 'DataCounterpartyGroupController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.counterparty', {
                url: '/counterparties',
                templateUrl: 'views/data/data-counterparty-view.html',
                controller: 'DataCounterpartyController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.responsible-group', {
                url: '/responsible-group',
                templateUrl: 'views/data/data-responsible-group-view.html',
                controller: 'DataResponsibleGroupController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.responsible', {
                url: '/responsibles',
                templateUrl: 'views/data/data-responsible-view.html',
                controller: 'DataResponsibleController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.instrument', {
                url: '/instruments',
                templateUrl: 'views/data/data-instrument-view.html',
                controller: 'DataInstrumentController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.instrument-type', {
                url: '/instrument-types',
                templateUrl: 'views/data/data-instrument-type-view.html',
                controller: 'DataInstrumentTypeController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.pricing-policy', {
                url: '/pricing-policy',
                templateUrl: 'views/data/data-pricing-policy-view.html',
                controller: 'DataPricingPolicyController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.complex-transaction', {
                url: '/complex-transactions',
                templateUrl: 'views/data/data-complex-transaction-view.html',
                controller: 'DataComplexTransactionController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.transaction', {
                url: '/transactions',
                templateUrl: 'views/data/data-transaction-view.html',
                controller: 'DataTransactionController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.transaction-type', {
                url: '/transaction-types',
                templateUrl: 'views/data/data-transaction-type-view.html',
                controller: 'DataTransactionTypeController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.transaction-type-group', {
                url: '/transaction-type-group',
                templateUrl: 'views/data/data-transaction-type-group-view.html',
                controller: 'DataTransactionTypeGroupController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.currency-history', {
                url: '/currencies',
                templateUrl: 'views/data/data-currency-history-view.html',
                controller: 'DataCurrencyHistoryController as vm'
            })
            .state('app.data.price-history', {
                url: '/pricing',
                templateUrl: 'views/data/data-price-history-view.html',
                controller: 'DataPriceHistoryController as vm',
                params: {
                    listLayout: null
                }
            })
            //.state('app.data.pricing', {
            //    url: '/pricing',
            //    templateUrl: 'views/data/data-pricing-view.html',
            //    controller: 'DataPortfolioController as vm'
            //})
            .state('app.data.currency', {
                url: '/currency',
                templateUrl: 'views/data/data-currency-view.html',
                controller: 'DataCurrencyController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.strategy-group', {
                url: '/strategy/:strategyNumber/group',
                templateUrl: 'views/data/data-strategy-group-view.html',
                controller: 'DataStrategyGroupController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.strategy-subgroup', {
                url: '/strategy/:strategyNumber/subgroup',
                templateUrl: 'views/data/data-strategy-subgroup-view.html',
                controller: 'DataStrategySubgroupController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.data.strategy', {
                url: '/strategy/:strategyNumber',
                templateUrl: 'views/data/data-strategy-view.html',
                controller: 'DataStrategyController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.reports', {
                url: '/reports',
                abstract: true,
                template: '<div data-ui-view></div>'
            })
            .state('app.reports.balance-report', {
                url: '/balance',
                templateUrl: 'views/reports/reports-balance-view.html',
                controller: 'BalanceReportController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.reports.customAttributesManager', {
                url: '/:entityType/customAttributes',
                templateUrl: 'views/reports/reports-custom-attr-view.html',
                controller: 'ReportCustomAttrController as vm',
                params: {
                    prevState: ''
                }
            })
            .state('app.reports.pnl-report', {
                url: '/profit-and-lost',
                templateUrl: 'views/reports/reports-profit-and-lost-view.html',
                controller: 'ProfitAndLostReportController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.reports.transaction-report', {
                url: '/transaction',
                templateUrl: 'views/reports/reports-transaction-view.html',
                controller: 'TransactionReportController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.reports.cash-flow-projection-report', {
                url: '/cash-flow-projection',
                templateUrl: 'views/reports/reports-cash-flow-projection-view.html',
                controller: 'CashFlowProjectionReportController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.reports.performance-report', {
                url: '/performance',
                templateUrl: 'views/reports/reports-performance-view.html',
                controller: 'PerformanceReportController as vm',
                params: {
                    listLayout: null
                }
            })
            .state('app.settings', {
                abstract: true,
                url: '/settings',
                template: '<div data-ui-view></div>'
            })
            .state('app.settings.general', {
                abstract: true,
                url: '/general',
                templateUrl: 'views/settings/general-view.html',
                controller: 'SettingsGeneralController as vm'
            })
            .state('app.settings.general.profile', {
                url: '/profile',
                views: {
                    profile: {
                        templateUrl: 'views/settings/profile-settings-view.html',
                        controller: 'SettingsGeneralProfileController as vm'
                    }
                }
            })
            .state('app.settings.general.change-password', {
                url: '/change-password',
                views: {
                    'change-password': {
                        templateUrl: 'views/settings/change-password-settings-view.html',
                        controller: 'SettingsGeneralChangePasswordController as vm'
                    }
                }
            })
            .state('app.settings.general.data-providers', {
                url: '/data-providers',
                views: {
                    'data-providers': {
                        templateUrl: 'views/settings/data-providers-settings-view.html',
                        controller: 'SettingsGeneralDataProvidersController as vm'
                    }
                }
            })
            .state('app.settings.general.data-providers-config', {
                url: '/data-providers/:dataProviderId',
                views: {
                    'data-providers': {
                        templateUrl: 'views/settings/data-providers-config-settings-view.html',
                        controller: 'SettingsGeneralDataProvidersConfigController as vm'
                    }
                }
            })
            .state('app.settings.general.instrument-import', {
                url: '/instrument-import',
                views: {
                    'instrument-import': {
                        templateUrl: 'views/settings/instrument-import-settings-view.html',
                        controller: 'SettingsGeneralInstrumentImportController as vm'
                    }
                }
            })
            .state('app.settings.general.transaction-import', {
                url: '/transaction-import',
                views: {
                    'transaction-import': {
                        templateUrl: 'views/settings/transaction-import-settings-view.html',
                        controller: 'SettingsGeneralTransactionImportController as vm'
                    }
                }
            })
            .state('app.settings.form-design', {
                url: '/form',
                templateUrl: 'views/settings/form-design-view.html',
                controller: 'SettingsFormDesignController as vm'
            })
            .state('app.settings.users-groups', {
                url: '/users-and-groups',
                templateUrl: 'views/settings/users-and-groups-view.html',
                controller: 'SettingsMembersAndGroupsController as vm'
            })
            .state('app.system', {
                abstract: true,
                url: '/system',
                template: '<div data-ui-view></div>'
            })
            .state('app.system.notifications', {
                url: '/notifications',
                templateUrl: 'views/system/notifications-view.html',
                controller: 'NotificationsController as vm',
                params: {
                    notificationsListType: 'all'
                }
            })
            .state('app.system.transactions', {
                url: '/audit/transactions',
                templateUrl: 'views/system/audit-transactions-view.html',
                controller: 'TransactionsAuditController as vm'
            })
            .state('app.system.instruments', {
                url: '/audit/instruments',
                templateUrl: 'views/system/audit-instruments-view.html',
                controller: 'InstrumentsAuditController as vm'
            })
            .state('app.system.audit', {
                url: '/audit',
                templateUrl: 'views/system/audit-view.html',
                controller: 'AuditController as vm'
            });
    }

}());
},{}],301:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var accountRepository = require('../repositories/accountRepository');

    var getList = function (options) {
        return accountRepository.getList(options);
    };

    var getByKey = function (id) {
        return accountRepository.getByKey(id);
    };

    var create = function(account) {
        return accountRepository.create(account);
    };

    var update = function(id, account) {
        return accountRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return accountRepository.deleteByKey(id);
    };

    var updateBulk = function(accounts) {
        return accountRepository.updateBulk(accounts);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }


}());
},{"../repositories/accountRepository":223}],302:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var accountRepository = require('../repositories/accountTypeRepository');

    var getList = function (options) {
        return accountRepository.getList(options);
    };

    var getByKey = function (id) {
        return accountRepository.getByKey(id);
    };

    var create = function(account) {
        return accountRepository.create(account);
    };

    var update = function(id, account) {
        return accountRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return accountRepository.deleteByKey(id);
    };

    var updateBulk = function(accountTypes) {
        return accountRepository.updateBulk(accountTypes);
    }

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        updateBulk: updateBulk
    }


}());
},{"../repositories/accountTypeRepository":224}],303:[function(require,module,exports){
/**
 * Created by szhitenev on 26.08.2016.
 */
(function () {

    'use strict';

    var accrualCalculationModelRepository = require('../repositories/accrualCalculationModelRepository');

    var getList = function () {
        return accrualCalculationModelRepository.getList();
    };

    module.exports = {
        getList: getList
    }

}());
},{"../repositories/accrualCalculationModelRepository":225}],304:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var attributeTypeRepository = require('../repositories/attributeTypeRepository');

    var getList = function (entity) {
        return attributeTypeRepository.getList(entity);
    };

    var getByKey = function (entity, id) {
        return attributeTypeRepository.getByKey(entity, id);
    };

    var create = function (entity, attributeType) {
        return attributeTypeRepository.create(entity, attributeType);
    };

    var update = function (entity, id, attributeType) {
        return attributeTypeRepository.update(entity, id, attributeType);
    };

    var deleteByKey = function (entity, id) {
        return attributeTypeRepository.deleteByKey(entity, id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../repositories/attributeTypeRepository":226}],305:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var auditRepository = require('../repositories/auditRepository');

    var getList = function (options) {
        return auditRepository.getList(options);
    };

    var getByKey = function (id) {
        return auditRepository.getByKey(id);
    };

    var create = function(account) {
        return auditRepository.create(account);
    };

    var update = function(id, account) {
        return auditRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return auditRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/auditRepository":227}],306:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"dup":18}],307:[function(require,module,exports){
/**
 * Created by szhitenev on 24.06.2016.
 */
(function () {

    'use strict';

    var instrumentRepository = require('../repositories/instrumentRepository');
    var pricingPolicyRepository = require('../repositories/pricingPolicyRepository');
    var currencyRepository = require('../repositories/currencyRepository');
    var accountRepository = require('../repositories/accountRepository');
    var accountTypeRepository = require('../repositories/accountTypeRepository');
    var portfolioRepository = require('../repositories/portfolioRepository');
    var counterpartyRepository = require('../repositories/counterpartyRepository');
    var counterpartyGroupRepository = require('../repositories/counterpartyGroupRepository');
    var responsibleRepository = require('../repositories/responsibleRepository');
    var responsibleGroupRepository = require('../repositories/responsibleGroupRepository');
    var instrumentTypeRepository = require('../repositories/instrumentTypeRepository');
    var strategyRepository = require('../repositories/strategyRepository');
    var instrumentDailyPricingModelRepository = require('../repositories/instrument/instrumentDailyPricingModelRepository');
    var instrumentPaymentSizeDetailRepository = require('../repositories/instrument/instrumentPaymentSizeDetailRepository');
    var transactionTypeRepository = require('../repositories/transactionTypeRepository');
    var importPriceDownloadSchemeRepository = require('../repositories/import/importPriceDownloadSchemeRepository');

    var strategyService = require('./strategyService');
    var strategyGroupService = require('./strategyGroupService');
    var strategySubgroupService = require('./strategySubgroupService');

    var entities = {};
    var entitiesGetByKey = {};

    var findEntities = function (entity, options) {
        return new Promise(function (resolve) {

            if (!entities[entity]) {

                if (options.entityType.indexOf('strategy') !== -1) {

                    var entityTypePieces = options.entityType.split('-');

                    var strategyNumber = entityTypePieces[1];

                    if (entity === 'group') {
                        return strategyGroupService.getList(strategyNumber).then(function (data) {
                            entities[entity] = data.results;
                            resolve({key: entity, data: entities[entity]});
                        });
                    }
                    if (entity === 'subgroup') {
                        return strategySubgroupService.getList(strategyNumber).then(function (data) {
                            entities[entity] = data.results;
                            resolve({key: entity, data: entities[entity]});
                        });
                    }

                    return strategyService.getList(strategyNumber).then(function (data) {
                        entities[entity] = data.results;
                        resolve({key: entity, data: entities[entity]});
                    });

                } else {
                    if (options.entityType.indexOf('responsible') !== -1) {
                        if (entity === 'group') {
                            return responsibleGroupRepository.getList().then(function (data) {
                                entities[entity] = data.results;
                                resolve({key: entity, data: entities[entity]});
                            });
                        }
                    } else {
                        if (options.entityType.indexOf('counterparty') !== -1) {
                            if (entity === 'group') {
                                return counterpartyGroupRepository.getList().then(function (data) {
                                    entities[entity] = data.results;
                                    resolve({key: entity, data: entities[entity]});
                                });
                            }
                        } else {
                            switch (entity) {
                                case 'instrument':
                                    return instrumentRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'portfolio':
                                    return portfolioRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'account':
                                    return accountRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'pricing_policy':
                                    return pricingPolicyRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'currency':
                                    return currencyRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'pricing_currency':
                                    return currencyRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'accrued_currency':
                                    return currencyRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'instrument_type':
                                    return instrumentTypeRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'daily_pricing_model':
                                    return instrumentDailyPricingModelRepository.getList().then(function (data) {
                                        entities[entity] = data;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'price_download_scheme':
                                    return importPriceDownloadSchemeRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'transaction_types':
                                    return transactionTypeRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'type':
                                    return accountTypeRepository.getList().then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'strategy-1':
                                    return strategyRepository.getList(1).then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'strategy-2':
                                    return strategyRepository.getList(2).then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                                case 'strategy-3':
                                    return strategyRepository.getList(3).then(function (data) {
                                        entities[entity] = data.results;
                                        resolve({key: entity, data: entities[entity]});
                                    });
                                    break;
                            }
                        }
                    }
                }

            }
            resolve({key: entity, data: entities[entity]});
        })

    };

    var getByKey = function (entity, id, options) {
        return new Promise(function (resolve) {

            if (!entitiesGetByKey[entity]) {

                console.log('ENTITY', entity);

                if (options && options.hasOwnProperty('entityType')) {
                    if (options.entityType == 'responsible') {
                        return responsibleGroupRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                    }
                    if (options.entityType == 'counterparty') {
                        return counterpartyGroupRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                    }
                }

                switch (entity) {
                    case 'instrument':
                        return instrumentRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'portfolio':
                        return portfolioRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'counterparty':
                        return counterpartyRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'responsible':
                        return responsibleRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'account_cash':
                        return accountRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'account_position':
                        return accountRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'account_interim':
                        return accountRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'strategy1_position':
                        return strategyService.getByKey(1, id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'strategy1_cash':
                        return strategyService.getByKey(1, id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'strategy2_position':
                        return strategyService.getByKey(2, id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'strategy2_cash':
                        return strategyService.getByKey(2, id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'strategy3_position':
                        return strategyService.getByKey(3, id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'strategy3_cash':
                        return strategyService.getByKey(3, id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'pricing_policy':
                        return pricingPolicyRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'currency':
                        return currencyRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'transaction_currency':
                        return currencyRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'settlement_currency':
                        return currencyRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'pricing_currency':
                        return currencyRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'accrued_currency':
                        return currencyRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'instrument_type':
                        return instrumentTypeRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'transaction_types':
                        return transactionTypeRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'daily_pricing_model':
                        return instrumentDailyPricingModelRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'payment_size_detail':
                        return instrumentPaymentSizeDetailRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'type':
                        return accountTypeRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                    case 'price_download_scheme':
                        return importPriceDownloadSchemeRepository.getByKey(id).then(function (data) {
                            entitiesGetByKey[entity] = data;
                            resolve({key: entity, data: entitiesGetByKey[entity]});
                        });
                        break;
                }

            }
            resolve({key: entity, data: entitiesGetByKey[entity]});
        })

    };
    
    module.exports = {
        findEntities: findEntities,
        getByKey: getByKey
    }

}());
},{"../repositories/accountRepository":223,"../repositories/accountTypeRepository":224,"../repositories/counterpartyGroupRepository":229,"../repositories/counterpartyRepository":230,"../repositories/currencyRepository":232,"../repositories/import/importPriceDownloadSchemeRepository":245,"../repositories/instrument/instrumentDailyPricingModelRepository":269,"../repositories/instrument/instrumentPaymentSizeDetailRepository":271,"../repositories/instrumentRepository":265,"../repositories/instrumentTypeRepository":266,"../repositories/portfolioRepository":281,"../repositories/pricingPolicyRepository":283,"../repositories/responsibleGroupRepository":286,"../repositories/responsibleRepository":287,"../repositories/strategyRepository":289,"../repositories/transactionTypeRepository":293,"./strategyGroupService":387,"./strategyService":388,"./strategySubgroupService":389}],308:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var bookmarkRepository = require('../repositories/bookmarkRepository');

    var getList = function (options) {
        return bookmarkRepository.getList(options);
    };

    var getByKey = function (id) {
        return bookmarkRepository.getByKey(id);
    };

    var create = function(bookmark) {
        return bookmarkRepository.create(bookmark);
    };

    var update = function(id, bookmark) {
        return bookmarkRepository.update(id, bookmark);
    };

    var deleteByKey = function (id) {
        return bookmarkRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
    }


}());
},{"../repositories/bookmarkRepository":228}],309:[function(require,module,exports){
arguments[4][19][0].apply(exports,arguments)
},{"dup":19}],310:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var counterpartyGroupRepository = require('../repositories/counterpartyGroupRepository');

    var getList = function (options) {
        return counterpartyGroupRepository.getList(options);
    };

    var getByKey = function (id) {
        return counterpartyGroupRepository.getByKey(id);
    };

    var create = function(counterparty) {
        return counterpartyGroupRepository.create(counterparty);
    };

    var update = function(id, counterparty) {
        return counterpartyGroupRepository.update(id, counterparty);
    };

    var deleteByKey = function (id) {
        return counterpartyGroupRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/counterpartyGroupRepository":229}],311:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var counterpartyRepository = require('../repositories/counterpartyRepository');

    var getList = function (options) {
        return counterpartyRepository.getList(options);
    };

    var getByKey = function (id) {
        return counterpartyRepository.getByKey(id);
    };

    var create = function(counterparty) {
        return counterpartyRepository.create(counterparty);
    };

    var update = function(id, counterparty) {
        return counterpartyRepository.update(id, counterparty);
    };

    var deleteByKey = function (id) {
        return counterpartyRepository.deleteByKey(id);
    };

    var updateBulk = function(counterparties) {
        return counterpartyRepository.updateBulk(counterparties);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        updateBulk: updateBulk
    }


}());
},{"../repositories/counterpartyRepository":230}],312:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var currencyHistoryRepository = require('../repositories/currencyHistoryRepository');

    var getList = function(options) {
        return currencyHistoryRepository.getList(options);
    };

    var getByKey = function (id) {
        return currencyHistoryRepository.getByKey(id);
    };

    var create = function(account) {
        return currencyHistoryRepository.create(account);
    };

    var update = function(id, account) {
        return currencyHistoryRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return currencyHistoryRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/currencyHistoryRepository":231}],313:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var currencyRepository = require('../repositories/currencyRepository');

    var getList = function (options) {
        return currencyRepository.getList(options);
    };

    var getByKey = function (id) {
        return currencyRepository.getByKey(id);
    };

    var create = function(account) {
        return currencyRepository.create(account);
    };

    var update = function(id, account) {
        return currencyRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return currencyRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/currencyRepository":232}],314:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function(){

    'use strict';

    var entityClassifierRepository = require('../repositories/entityClassifierRepository');

    var getList = function (entity) {
        return entityClassifierRepository.getList(entity);
    };

    var getByKey = function (entity, id) {
        return entityClassifierRepository.getByKey(entity, id);
    };

    var create = function (entity, attributeType) {
        return entityClassifierRepository.create(entity, attributeType);
    };

    var update = function (entity, id, attributeType) {
        return entityClassifierRepository.update(entity, id, attributeType);
    };

    var deleteByKey = function (entity, id) {
        return entityClassifierRepository.deleteByKey(entity, id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../repositories/entityClassifierRepository":233}],315:[function(require,module,exports){
/**
 * Created by szhitenev on 15.06.2016.
 */
(function () {

    'use strict';

    var entityClassifierService = require('./entityClassifierService');

    var entitiesByKey = {};

    var getList = function (entity) {
        return entityClassifierService.getList(entity);
    };

    var getByKey = function (entity, id) {
        return new Promise(function (resolve) {

            //console.log('///////', entity + '_' + id);

            if (!entitiesByKey[entity + '_' + id]) {
                entitiesByKey[entity + '_' + id] = {};
                entityClassifierService.getByKey(entity, id).then(function (data) {
                    entitiesByKey[entity + '_' + id] = data;
                    resolve({key: entity + '_' + id, data: entitiesByKey[entity + '_' + id]});
                })
            } else {
                resolve({key: entity + '_' + id, data: entitiesByKey[entity + '_' + id]});
            }
        })
    };

    var create = function (entity, attributeType) {
        return entityClassifierService.create(entity, attributeType);
    };

    var update = function (entity, id, attributeType) {
        return entityClassifierService.update(entity, id, attributeType);
    };

    var deleteByKey = function (entity, id) {
        return entityClassifierService.deleteByKey(entity, id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"./entityClassifierService":314}],316:[function(require,module,exports){
/**
 * Created by szhitenev on 16.06.2016.
 */
(function () {

    'use strict';

    var portfolioService = require('./portfolioService');
    var accountService = require('./accountService');
    var accountTypeService = require('./accountTypeService');
    var responsibleService = require('./responsibleService');
    var responsibleGroupService = require('./responsibleGroupService');
    var counterpartyService = require('./counterpartyService');
    var counterpartyGroupService = require('./counterpartyGroupService');
    var instrumentService = require('./instrumentService');
    var currencyService = require('./currencyService');
    var priceHistoryService = require('./priceHistoryService');
    var currencyHistoryService = require('./currencyHistoryService');
    var transactionService = require('./transactionService');
    var transactionTypeService = require('./transactionTypeService');
    var transactionClassService = require('./transaction/transactionClassService');
    var transactionTypeGroupService = require('./transaction/transactionTypeGroupService');
    var complexTransactionService = require('./transaction/complexTransactionService');

    var pricingPolicyService = require('./pricingPolicyService');
    var instrumentTypeService = require('./instrumentTypeService');
    var accrualCalculationModelService = require('./accrualCalculationModelService');
    var instrumentPeriodicityService = require('./instrumentPeriodicityService');
    var tagService = require('./tagService');

    var strategyService = require('./strategyService');
    var strategyGroupService = require('./strategyGroupService');
    var strategySubgroupService = require('./strategySubgroupService');

    var instrumentDailyPricingModelService = require('./instrument/instrumentDailyPricingModelService');
    var instrumentPaymentSizeDetailService = require('./instrument/instrumentPaymentSizeDetailService');
    var priceDownloadSchemeService = require('./import/priceDownloadSchemeService');

    var getList = function (entityType) {

        switch (entityType) {
            case 'portfolio':
                return portfolioService.getList();
                break;
            case 'account':
                return accountService.getList();
                break;
            case 'responsible':
                return responsibleService.getList();
                break;
            case 'counterparty':
                return counterpartyService.getList();
                break;
            case 'currency':
                return currencyService.getList();
                break;
            case 'instrument':
                return instrumentService.getList();
                break;
            case 'instrument-type':
                return instrumentTypeService.getList();
                break;
            case 'periodicity':
                return instrumentPeriodicityService.getList();
                break;
            case 'accrual-calculation-model':
                return accrualCalculationModelService.getList();
                break;
            case 'daily-pricing-model':
                return instrumentDailyPricingModelService.getList();
                break;
            case 'payment-size-detail':
                return instrumentPaymentSizeDetailService.getList();
                break;
            case 'price-download-scheme':
                return priceDownloadSchemeService.getList();
                break;
            case 'strategy-1':
                return strategyService.getList(1);
                break;
            case 'strategy-2':
                return strategyService.getList(2);
                break;
            case 'strategy-3':
                return strategyService.getList(3);
                break;
        }
    };

    var getByKey = function (entityType, id) {
        switch (entityType) {
            case 'portfolio':
                return portfolioService.getByKey(id);
                break;
            case 'account':
                return accountService.getByKey(id);
                break;
            case 'account-type':
                return accountTypeService.getByKey(id);
                break;
            case 'responsible':
                return responsibleService.getByKey(id);
                break;
            case 'responsible-group':
                return responsibleGroupService.getByKey(id);
                break;
            case 'counterparty':
                return counterpartyService.getByKey(id);
                break;
            case 'counterparty-group':
                return counterpartyGroupService.getByKey(id);
                break;
            case 'instrument':
                return instrumentService.getByKey(id);
                break;
            case 'instrument-type':
                return instrumentTypeService.getByKey(id);
                break;
            case 'currency':
                return currencyService.getByKey(id);
                break;
            case 'complex-transaction':
                return complexTransactionService.getBookComplexTransaction(id);
                break;
            case 'pricing-policy':
                return pricingPolicyService.getByKey(id);
                break;
            case 'transaction':
                return transactionService.getByKey(id);
                break;
            case 'transaction-type':
                return transactionTypeService.getByKey(id);
                break;
            case 'transaction-type-book':
                return transactionTypeService.getBookTransaction(id);
                break;
            case 'transaction-type-group':
                return transactionTypeGroupService.getByKey(id);
                break;
            case 'price-history':
                return priceHistoryService.getByKey(id);
                break;
            case 'currency-history':
                return currencyHistoryService.getByKey(id);
                break;
            case 'strategy-1':
                return strategyService.getByKey(1, id);
                break;
            case 'strategy-2':
                return strategyService.getByKey(2, id);
                break;
            case 'strategy-3':
                return strategyService.getByKey(3, id);
                break;
            case 'strategy-1-group':
                return strategyGroupService.getByKey(1, id);
                break;
            case 'strategy-2-group':
                return strategyGroupService.getByKey(2, id);
                break;
            case 'strategy-3-group':
                return strategyGroupService.getByKey(3, id);
                break;
            case 'strategy-1-subgroup':
                return strategySubgroupService.getByKey(1, id);
                break;
            case 'strategy-2-subgroup':
                return strategySubgroupService.getByKey(2, id);
                break;
            case 'strategy-3-subgroup':
                return strategySubgroupService.getByKey(3, id);
                break;
            case 'tag':
                return tagService.getByKey(id);
                break;
        }
    };

    var create = function (entityType, entity) {
        switch (entityType) {
            case 'portfolio':
                entity.counterparties = entity.counterparties || [];
                entity.accounts = entity.accounts || [];
                entity.responsibles = entity.responsibles || [];
                entity.transaction_types = entity.transaction_types || [];
                return portfolioService.create(entity);
                break;
            case 'account':
                entity.portfolios = entity.portfolios || [];
                return accountService.create(entity);
                break;
            case 'account-type':
                return accountTypeService.create(entity);
                break;
            case 'responsible':
                return responsibleService.create(entity);
                break;
            case 'responsible-group':
                return responsibleGroupService.create(entity);
                break;
            case 'counterparty':
                return counterpartyService.create(entity);
                break;
            case 'counterparty-group':
                return counterpartyGroupService.create(entity);
                break;
            case 'instrument':
                return instrumentService.create(entity);
                break;
            case 'instrument-type':
                return instrumentTypeService.create(entity);
                break;
            case 'currency':
                return currencyService.create(entity);
                break;
            case 'pricing-policy':
                return pricingPolicyService.create(entity);
                break;
            case 'transaction':
                return transactionService.create(entity);
                break;
            case 'transaction-type':
                return transactionTypeService.create(entity);
                break;
            case 'transaction-type-group':
                return transactionTypeGroupService.create(entity);
                break;
            case 'price-history':
                return priceHistoryService.create(entity);
                break;
            case 'currency-history':
                return currencyHistoryService.create(entity);
                break;
            case 'strategy-1':
                return strategyService.create(1, entity);
                break;
            case 'strategy-2':
                return strategyService.create(2, entity);
                break;
            case 'strategy-3':
                return strategyService.create(3, entity);
                break;
            case 'strategy-1-group':
                return strategyGroupService.create(1, entity);
                break;
            case 'strategy-2-group':
                return strategyGroupService.create(2, entity);
                break;
            case 'strategy-3-group':
                return strategyGroupService.create(3, entity);
                break;
            case 'strategy-1-subgroup':
                return strategySubgroupService.create(1, entity);
                break;
            case 'strategy-2-subgroup':
                return strategySubgroupService.create(2, entity);
                break;
            case 'strategy-3-subgroup':
                return strategySubgroupService.create(3, entity);
                break;
            case 'complex-transaction':
                return transactionTypeService.bookTransaction(entity.transaction_type, entity);
            //console.log('entity', entity);
            //
            //return new Promise(function (resolve, reject) {
            //    transactionTypeService.getBookTransaction(entity._transaction_type_id).then(function (data) {
            //
            //        var res = Object.assign(data, entity);
            //
            //        console.log('res------------------', res);
            //
            //        var i;
            //
            //        transactionTypeService.bookTransaction(entity._transaction_type_id, res).then(function (data) {
            //            resolve(data);
            //        });
            //    });
            //});
            case 'tag':
                return tagService.create(entity);
                break;

        }
    };

    var update = function (entityType, id, entity) {
        switch (entityType) {
            case 'portfolio':
                return portfolioService.update(id, entity);
                break;
            case 'currency':
                return currencyService.update(id, entity);
                break;
            case 'account':
                return accountService.update(id, entity);
                break;
            case 'account-type':
                return accountTypeService.update(id, entity);
                break;
            case 'responsible':
                return responsibleService.update(id, entity);
                break;
            case 'responsible-group':
                return responsibleGroupService.update(id, entity);
                break;
            case 'counterparty':
                return counterpartyService.update(id, entity);
                break;
            case 'counterparty-group':
                return counterpartyGroupService.update(id, entity);
                break;
            case 'instrument':
                return instrumentService.update(id, entity);
                break;
            case 'instrument-type':
                return instrumentTypeService.update(id, entity);
                break;
            case 'transaction':
                return transactionService.update(id, entity);
                break;
            case 'complex-transaction-default':
                return complexTransactionService.update(entity.id, entity);
            case 'complex-transaction':
                return complexTransactionService.bookComplexTransaction(entity.id, entity);
            //return new Promise(function (resolve, reject) {
            //    transactionTypeService.getBookTransaction(entity.transaction_type).then(function (data) {
            //
            //        var originValues = JSON.parse(JSON.stringify(entity.values))
            //
            //        var res = entity;
            //
            //        var i;
            //
            //
            //        res.transactions = data.transactions;
            //        res.values = data.values;
            //
            //        var originValuesKeys = Object.keys(originValues);
            //        var defaultValuesKeys = Object.keys(res.values);
            //
            //        originValuesKeys.forEach(function (originVal) {
            //            defaultValuesKeys.forEach(function (defaultVal) {
            //
            //                if (originVal == defaultVal) {
            //                    res.values[defaultVal] = originValues[originVal];
            //                }
            //
            //            })
            //        });
            //
            //        transactionTypeService.bookTransaction(entity.transaction_type, res).then(function (data) {
            //            resolve(data);
            //        });
            //    });
            //});
            //break;
            case 'transaction-type':

                return transactionTypeService.update(id, entity);
                //return new Promise(function (resolve, reject) {
                //    transactionTypeService.getBookTransaction(id).then(function (data) {
                //
                //        var res = Object.assign(data, entity);
                //
                //        console.log('res------------------', res);
                //
                //        var i;
                //
                //        transactionTypeService.bookTransaction(id, res).then(function (data) {
                //            resolve(data);
                //        });
                //    });
                //});
                break;
            case 'transaction-type-group':
                return transactionTypeGroupService.update(id, entity);
                break;
            case 'price-history':
                return priceHistoryService.update(id, entity);
                break;
            case 'pricing-policy':
                return pricingPolicyService.update(id, entity);
                break;
            case 'currency-history':
                return currencyHistoryService.update(id, entity);
                break;
            case 'strategy-1':
                return strategyService.update(1, id, entity);
                break;
            case 'strategy-2':
                return strategyService.update(2, id, entity);
                break;
            case 'strategy-3':
                return strategyService.update(3, id, entity);
                break;
            case 'strategy-1-group':
                return strategyGroupService.update(1, id, entity);
                break;
            case 'strategy-2-group':
                return strategyGroupService.update(2, id, entity);
                break;
            case 'strategy-3-group':
                return strategyGroupService.update(3, id, entity);
                break;
            case 'strategy-1-subgroup':
                return strategySubgroupService.update(1, id, entity);
                break;
            case 'strategy-2-subgroup':
                return strategySubgroupService.update(2, id, entity);
                break;
            case 'strategy-3-subgroup':
                return strategySubgroupService.update(3, id, entity);
                break;
            case 'tag':
                return tagService.update(id, entity);
                break;
        }
    };

    var updateBulk = function (entityType, entities) {
        switch (entityType) {
            case 'portfolio':
                return portfolioService.updateBulk(entities);
                break;
            case 'currency':
                //return currencyService.update(id, entity);
                break;
            case 'account':
                return accountService.updateBulk(entities);
                break;
            case 'account-type':
                return accountTypeService.updateBulk(entities);
                break;
            case 'responsible':
                return responsibleService.updateBulk(entities);
                break;
            case 'responsible-group':
                //return responsibleGroupService.update(id, entity);
                break;
            case 'counterparty':
                return counterpartyService.updateBulk(entities);
                break;
            case 'counterparty-group':
                //return counterpartyGroupService.update(id, entity);
                break;
            case 'instrument':
                return instrumentService.updateBulk(entities);
                break;
            case 'instrument-type':
                //return instrumentTypeService.update(id, entity);
                break;
            case 'transaction':
                //return transactionService.update(id, entity);
                break;
            case 'complex-transaction':
                //return complexTransactionService.update(id, entity);
                break;
            case 'transaction-type':

                //return transactionTypeService.bookComplexTransaction(id, entity);
                break;
            case 'transaction-type-group':
                //return transactionTypeGroupService.update(id, entity);
                break;
            case 'price-history':
                //return priceHistoryService.update(id, entity);
                break;
            case 'pricing-policy':
                //return pricingPolicyService.update(id, entity);
                break;
            case 'currency-history':
                //return currencyHistoryService.update(id, entity);
                break;
            case 'strategy-1':
                //return strategyService.update(1, id, entity);
                break;
            case 'strategy-2':
                //return strategyService.update(2, id, entity);
                break;
            case 'strategy-3':
                //return strategyService.update(3, id, entity);
                break;
            case 'strategy-1-group':
                //return strategyGroupService.update(1, id, entity);
                break;
            case 'strategy-2-group':
                //return strategyGroupService.update(2, id, entity);
                break;
            case 'strategy-3-group':
                //return strategyGroupService.update(3, id, entity);
                break;
            case 'strategy-1-subgroup':
                //return strategySubgroupService.update(1, id, entity);
                break;
            case 'strategy-2-subgroup':
                //return strategySubgroupService.update(2, id, entity);
                break;
            case 'strategy-3-subgroup':
                //return strategySubgroupService.update(3, id, entity);
                break;
            case 'tag':
                //return tagService.update(id, entity);
                break;
        }
    };

    var deleteByKey = function (entityType, id) {
        switch (entityType) {
            case 'portfolio':
                return portfolioService.deleteByKey(id);
                break;
            case 'account':
                return accountService.deleteByKey(id);
                break;
            case 'account-type':
                return accountTypeService.deleteByKey(id);
                break;
            case 'responsible':
                return responsibleService.deleteByKey(id);
                break;
            case 'responsible-group':
                return responsibleGroupService.deleteByKey(id);
                break;
            case 'counterparty':
                return counterpartyService.deleteByKey(id);
                break;
            case 'counterparty-group':
                return counterpartyGroupService.deleteByKey(id);
                break;
            case 'instrument':
                return instrumentService.deleteByKey(id);
                break;
            case 'instrument-type':
                return instrumentTypeService.deleteByKey(id);
                break;
            case 'complex-transaction':
                return complexTransactionService.deleteByKey(id);
                break;
            case 'transaction':
                return transactionService.deleteByKey(id);
                break;
            case 'transaction-type':
                return transactionTypeService.deleteByKey(id);
                break;
            case 'transaction-type-group':
                return transactionTypeGroupService.deleteByKey(id);
                break;
            case 'price-history':
                return priceHistoryService.deleteByKey(id);
                break;
            case 'pricing-policy':
                return pricingPolicyService.deleteByKey(id);
                break;
            case 'currency-history':
                return currencyHistoryService.deleteByKey(id);
                break;
            case 'strategy-1':
                return strategyService.deleteByKey(1, id);
                break;
            case 'strategy-2':
                return strategyService.deleteByKey(2, id);
                break;
            case 'strategy-3':
                return strategyService.deleteByKey(3, id);
                break;
            case 'strategy-1-group':
                return strategyGroupService.deleteByKey(1, id);
                break;
            case 'strategy-2-group':
                return strategyGroupService.deleteByKey(2, id);
                break;
            case 'strategy-3-group':
                return strategyGroupService.deleteByKey(3, id);
                break;
            case 'strategy-1-subgroup':
                return strategySubgroupService.deleteByKey(1, id);
                break;
            case 'strategy-2-subgroup':
                return strategySubgroupService.deleteByKey(2, id);
                break;
            case 'strategy-3-subgroup':
                return strategySubgroupService.deleteByKey(3, id);
                break;
            case 'tag':
                return tagService.deleteByKey(id);
                break;
        }
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        updateBulk: updateBulk
    }

}());
},{"./accountService":301,"./accountTypeService":302,"./accrualCalculationModelService":303,"./counterpartyGroupService":310,"./counterpartyService":311,"./currencyHistoryService":312,"./currencyService":313,"./import/priceDownloadSchemeService":352,"./instrument/instrumentDailyPricingModelService":364,"./instrument/instrumentPaymentSizeDetailService":366,"./instrumentPeriodicityService":360,"./instrumentService":361,"./instrumentTypeService":362,"./portfolioService":377,"./priceHistoryService":378,"./pricingPolicyService":379,"./responsibleGroupService":384,"./responsibleService":385,"./strategyGroupService":387,"./strategyService":388,"./strategySubgroupService":389,"./tagService":390,"./transaction/complexTransactionService":394,"./transaction/transactionClassService":395,"./transaction/transactionTypeGroupService":396,"./transactionService":392,"./transactionTypeService":393}],317:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var currencyMappingService = require('./import/currencyMappingService');
    var instrumentTypeMappingService = require('./import/instrumentTypeMappingService');
    var accrualCalculationModelService = require('./import/accrualCalculationModelMappingService');
    var instrumentPeriodicityService = require('./import/instrumentPeriodicityMappingService');
    var instrumentAttributeTypeService = require('./import/instrumentAttributeTypeMappingService');

    var accountMappingService = require('./import/accountMappingService');
    var instrumentMappingService = require('./import/instrumentMappingService');
    var counterpartyMappingService = require('./import/counterpartyMappingService');
    var responsibleMappingService = require('./import/responsibleMappingService');
    var portfolioMappingService = require('./import/portfolioMappingService');

    var strategy1MappingService = require('./import/strategy1MappingService');
    var strategy2MappingService = require('./import/strategy2MappingService');
    var strategy3MappingService = require('./import/strategy3MappingService');

    var dailyPricingModelMappingService = require('./import/dailyPricingModelMappingService');
    var paymentSizeDetailMappingService = require('./import/paymentSizeDetailMappingService');
    var priceDownloadSchemeMappingService = require('./import/priceDownloadSchemeMappingService');

    var getList = function (entityType) {

        console.log('getList entityType', entityType);

        switch (entityType) {
            case 'currency':
                return currencyMappingService.getList();
                break;
            case 'instrument_type':
                return instrumentTypeMappingService.getList();
                break;
            case 'accrual_calculation_model':
                return accrualCalculationModelService.getList();
                break;
            case 'periodicity':
                return instrumentPeriodicityService.getList();
                break;
            case 'classifier':
                return instrumentAttributeTypeService.getList();
                break;
            case 'account':
                return accountMappingService.getList();
                break;
            case 'instrument':
                return instrumentMappingService.getList();
                break;
            case 'counterparty':
                return counterpartyMappingService.getList();
                break;
            case 'responsible':
                return responsibleMappingService.getList();
                break;
            case 'portfolio':
                return portfolioMappingService.getList();
                break;
            case 'strategy_1':
                return strategy1MappingService.getList();
                break;
            case 'strategy_2':
                return strategy2MappingService.getList();
                break;
            case 'strategy_3':
                return strategy3MappingService.getList();
                break;
            case 'daily_pricing_model':
                return dailyPricingModelMappingService.getList();
                break;
            case 'payment_size_detail':
                return paymentSizeDetailMappingService.getList();
                break;
            case 'price_download_scheme':
                return priceDownloadSchemeMappingService.getList();
                break;
        }

    };

    var getByKey = function (entityType, id) {
        switch (entityType) {
            case 'currency':
                return currencyMappingService.getByKey(id);
                break;
            case 'instrument_type':
                return instrumentTypeMappingService.getByKey(id);
                break;
            case 'accrual_calculation_model':
                return accrualCalculationModelService.getByKey(id);
                break;
            case 'periodicity':
                return instrumentPeriodicityService.getByKey(id);
                break;
            case 'classifier':
                return instrumentAttributeTypeService.getByKey(id);
                break;
            case 'account':
                return accountMappingService.getByKey(id);
                break;
            case 'instrument':
                return instrumentMappingService.getByKey(id);
                break;
            case 'counterparty':
                return counterpartyMappingService.getByKey(id);
                break;
            case 'responsible':
                return responsibleMappingService.getByKey(id);
                break;
            case 'portfolio':
                return portfolioMappingService.getByKey(id);
                break;
            case 'strategy_1':
                return strategy1MappingService.getByKey(id);
                break;
            case 'strategy_2':
                return strategy2MappingService.getByKey(id);
                break;
            case 'strategy_3':
                return strategy3MappingService.getByKey(id);
                break;
            case 'daily_pricing_model':
                return dailyPricingModelMappingService.getByKey(id);
                break;
            case 'payment_size_detail':
                return paymentSizeDetailMappingService.getByKey(id);
                break;
            case 'price_download_scheme':
                return priceDownloadSchemeMappingService.getByKey(id);
                break;
        }

    };

    var create = function (entityType, map) {
        switch (entityType) {
            case 'currency':
                return currencyMappingService.create(map);
                break;
            case 'instrument_type':
                return instrumentTypeMappingService.create(map);
                break;
            case 'accrual_calculation_model':
                return accrualCalculationModelService.create(map);
                break;
            case 'periodicity':
                return instrumentPeriodicityService.create(map);
                break;
            case 'classifier':
                return instrumentAttributeTypeService.create(map);
                break;
            case 'account':
                return accountMappingService.create(map);
                break;
            case 'instrument':
                return instrumentMappingService.create(map);
                break;
            case 'counterparty':
                return counterpartyMappingService.create(map);
                break;
            case 'responsible':
                return responsibleMappingService.create(map);
                break;
            case 'portfolio':
                return portfolioMappingService.create(map);
                break;
            case 'strategy_1':
                return strategy1MappingService.create(map);
                break;
            case 'strategy_2':
                return strategy2MappingService.create(map);
                break;
            case 'strategy_3':
                return strategy3MappingService.create(map);
                break;
            case 'daily_pricing_model':
                return dailyPricingModelMappingService.create(map);
                break;
            case 'payment_size_detail':
                return paymentSizeDetailMappingService.create(map);
                break;
            case 'price_download_scheme':
                return priceDownloadSchemeMappingService.create(map);
                break;
        }

    };

    var update = function (entityType, id, map) {
        switch (entityType) {
            case 'currency':
                return currencyMappingService.update(id, map);
                break;
            case 'instrument_type':
                return instrumentTypeMappingService.update(id, map);
                break;
            case 'accrual_calculation_model':
                return accrualCalculationModelService.update(id, map);
                break;
            case 'periodicity':
                return instrumentPeriodicityService.update(id, map);
                break;
            case 'classifier':
                return instrumentAttributeTypeService.update(id, map);
                break;
            case 'account':
                return accountMappingService.update(id, map);
                break;
            case 'instrument':
                return instrumentMappingService.update(id, map);
                break;
            case 'counterparty':
                return counterpartyMappingService.update(id, map);
                break;
            case 'responsible':
                return responsibleMappingService.update(id, map);
                break;
            case 'portfolio':
                return portfolioMappingService.update(id, map);
                break;
            case 'strategy_1':
                return strategy1MappingService.update(id, map);
                break;
            case 'strategy_2':
                return strategy2MappingService.update(id, map);
                break;
            case 'strategy_3':
                return strategy3MappingService.update(id, map);
                break;
            case 'daily_pricing_model':
                return dailyPricingModelMappingService.update(id, map);
                break;
            case 'payment_size_detail':
                return paymentSizeDetailMappingService.update(id, map);
                break;
            case 'price_download_scheme':
                return priceDownloadSchemeMappingService.update(id, map);
                break;
        }

    };

    var deleteByKey = function (entityType, id) {
        switch (entityType) {
            case 'currency':
                return currencyMappingService.deleteByKey(id);
                break;
            case 'instrument_type':
                return instrumentTypeMappingService.deleteByKey(id);
                break;
            case 'accrual_calculation_model':
                return accrualCalculationModelService.deleteByKey(id);
                break;
            case 'periodicity':
                return instrumentPeriodicityService.deleteByKey(id);
                break;
            case 'classifier':
                return instrumentAttributeTypeService.deleteByKey(id);
                break;
            case 'account':
                return accountMappingService.deleteByKey(id);
                break;
            case 'instrument':
                return instrumentMappingService.deleteByKey(id);
                break;
            case 'counterparty':
                return counterpartyMappingService.deleteByKey(id);
                break;
            case 'responsible':
                return responsibleMappingService.deleteByKey(id);
                break;
            case 'portfolio':
                return portfolioMappingService.deleteByKey(id);
                break;
            case 'strategy_1':
                return strategy1MappingService.deleteByKey(id);
                break;
            case 'strategy_2':
                return strategy2MappingService.deleteByKey(id);
                break;
            case 'strategy_3':
                return strategy3MappingService.deleteByKey(id);
                break;
            case 'daily_pricing_model':
                return dailyPricingModelMappingService.deleteByKey(id);
                break;
            case 'payment_size_detail':
                return paymentSizeDetailMappingService.deleteByKey(id);
                break;
            case 'price_download_scheme':
                return priceDownloadSchemeMappingService.deleteByKey(id);
                break;
        }

    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"./import/accountMappingService":334,"./import/accrualCalculationModelMappingService":335,"./import/counterpartyMappingService":336,"./import/currencyMappingService":337,"./import/dailyPricingModelMappingService":338,"./import/instrumentAttributeTypeMappingService":344,"./import/instrumentMappingService":345,"./import/instrumentPeriodicityMappingService":346,"./import/instrumentTypeMappingService":348,"./import/paymentSizeDetailMappingService":349,"./import/portfolioMappingService":350,"./import/priceDownloadSchemeMappingService":351,"./import/responsibleMappingService":354,"./import/strategy1MappingService":356,"./import/strategy2MappingService":357,"./import/strategy3MappingService":358}],318:[function(require,module,exports){
/**
 * Created by szhitenev on 21.12.2016.
 */
(function () {

    var portfolioService = require('./portfolioService');
    var accountService = require('./accountService');
    var accountTypeService = require('./accountTypeService');
    var responsibleService = require('./responsibleService');
    var responsibleGroupService = require('./responsibleGroupService');
    var counterpartyService = require('./counterpartyService');
    var counterpartyGroupService = require('./counterpartyGroupService');
    var instrumentService = require('./instrumentService');
    var currencyService = require('./currencyService');
    var priceHistoryService = require('./priceHistoryService');
    var currencyHistoryService = require('./currencyHistoryService');
    var transactionService = require('./transactionService');
    var transactionTypeService = require('./transactionTypeService');
    var transactionClassService = require('./transaction/transactionClassService');
    var transactionTypeGroupService = require('./transaction/transactionTypeGroupService');
    var complexTransactionService = require('./transaction/complexTransactionService');

    var pricingPolicyService = require('./pricingPolicyService');
    var instrumentTypeService = require('./instrumentTypeService');
    var accrualCalculationModelService = require('./accrualCalculationModelService');
    var instrumentPeriodicityService = require('./instrumentPeriodicityService');
    var tagService = require('./tagService');

    var strategyService = require('./strategyService');
    var strategyGroupService = require('./strategyGroupService');
    var strategySubgroupService = require('./strategySubgroupService');
    var auditService = require('./auditService');
    var reportService = require('./reportService');


    var getList = function (entityType, options) {

        //console.log('entityType', entityType);

        switch (entityType) {
            case 'account':
                return accountService.getList(options);
                break;
            case 'account-type':
                return accountTypeService.getList(options);
                break;
            case 'counterparty':
                return counterpartyService.getList(options);
                break;
            case 'counterparty-group':
                return counterpartyGroupService.getList(options);
                break;
            case 'currency':
                return currencyService.getList(options);
                break;
            case 'currency-history':
                return currencyHistoryService.getList(options);
                break;
            case 'instrument':
                return instrumentService.getList(options);
                break;
            case 'instrument-type':
                return instrumentTypeService.getList(options);
                break;
            case 'portfolio':
                return portfolioService.getList(options);
                break;
            case 'price-history':
                return priceHistoryService.getList(options);
                break;
            case 'pricing-policy':
                return pricingPolicyService.getList(options);
                break;
            case 'responsible':
                return responsibleService.getList(options);
                break;
            case 'responsible-group':
                return responsibleGroupService.getList(options);
                break;
            case 'strategy-1':
                return strategyService.getList(1, options);
                break;
            case 'strategy-2':
                return strategyService.getList(2, options);
                break;
            case 'strategy-3':
                return strategyService.getList(3, options);
                break;
            case 'strategy-1-group':
                return strategyGroupService.getList(1, options);
                break;
            case 'strategy-2-group':
                return strategyGroupService.getList(2, options);
                break;
            case 'strategy-3-group':
                return strategyGroupService.getList(3, options);
                break;
            case 'strategy-1-subgroup':
                return strategySubgroupService.getList(1, options);
                break;
            case 'strategy-2-subgroup':
                return strategySubgroupService.getList(2, options);
                break;
            case 'strategy-3-subgroup':
                return strategySubgroupService.getList(3, options);
                break;
            case 'tag':
                return tagService.getList(options);
                break;
            case 'audit-transaction':
                return auditService.getList(options);
                break;
            case 'audit-instrument':
                return auditService.getList(options);
                break;
            case 'transaction':
                return transactionService.getList(options);
                break;
            case 'complex-transaction':
                return complexTransactionService.getList(options);
                break;
            case 'transaction-type':
                return transactionTypeService.getList(options);
                break;
            case 'transaction-type-group':
                return transactionTypeGroupService.getList(options);
                break;
            case 'balance-report':
                return reportService.getBalanceReport(options);
                break;
            case 'pnl-report':
                return reportService.getPnlReport(options);
                break;
            case 'transaction-report':
                return reportService.getTransactionReport(options);
                break;
            case 'cash-flow-projection-report':
                return reportService.getCashFlowProjectionReport(options);
                break;
            case 'performance-report':
                return reportService.getPerformanceReport(options);
                break;
        }
    };

    module.exports = {
        getList: getList
    }

}());
},{"./accountService":301,"./accountTypeService":302,"./accrualCalculationModelService":303,"./auditService":305,"./counterpartyGroupService":310,"./counterpartyService":311,"./currencyHistoryService":312,"./currencyService":313,"./instrumentPeriodicityService":360,"./instrumentService":361,"./instrumentTypeService":362,"./portfolioService":377,"./priceHistoryService":378,"./pricingPolicyService":379,"./reportService":381,"./responsibleGroupService":384,"./responsibleService":385,"./strategyGroupService":387,"./strategyService":388,"./strategySubgroupService":389,"./tagService":390,"./transaction/complexTransactionService":394,"./transaction/transactionClassService":395,"./transaction/transactionTypeGroupService":396,"./transactionService":392,"./transactionTypeService":393}],319:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

	'use strict';

	var transformItems = function (items, attrs) {
		return new Promise(function (resolve, reject) {
			var transformedItems = [];
			var i, x;
			//console.log('attrs', attrs);
			if (items && items.length) {
				transformedItems = items.map(function (item) {
					for (i = 0; i < attrs.length; i = i + 1) {
						for (x = 0; x < item.attributes.length; x = x + 1) {
							if (item.attributes[x]['attribute_type'] === attrs[i].id) {
								item.attributes[x]['attribute_name'] = attrs[i].name;
								if (item.attributes[x]['attribute_type_object'].value_type == 30) {
									item[attrs[i].name] = item.attributes[x]['classifier'];
									//console.log('item!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', item);
								} else {
									if (item.attributes[x]['attribute_type_object'].value_type == 40) {
										item[attrs[i].name] = item.attributes[x]['value_date'];
									} else {
										if (item.attributes[x]['attribute_type_object'].value_type == 20) {
											item[attrs[i].name] = item.attributes[x]['value_float'];
										} else {
											item[attrs[i].name] = item.attributes[x]['value_string'];
										}
									}

								}

							}
						}
					}
					return item;
				});
			};
			// console.log('Items transformed', transformedItems);
			resolve(transformedItems);

		});

	};

	module.exports = {
		transformItems: transformItems
	}

}());
},{}],320:[function(require,module,exports){
(function () {

    var eventsRepository = require('../repositories/eventsRepository');

    var getList = function () {
        return eventsRepository.getList();
    };

    var getEventAction = function (url) {
        return eventsRepository.getEventAction(url);
    };

    var putEventAction = function (url, data) {
        return eventsRepository.putEventAction(url, data);
    };

    var ignoreEventAction = function (id) {
        return eventsRepository.ignoreEventAction(id);
    };

    var generateEvents = function () {
        return eventsRepository.generateEvents();
    };

    module.exports = {
        getList: getList,
        getEventAction: getEventAction,
        putEventAction: putEventAction,
        ignoreEventAction: ignoreEventAction,
        generateEvents: generateEvents
    }


}());
},{"../repositories/eventsRepository":235}],321:[function(require,module,exports){
/**
 * Created by szhitenev on 17.06.2016.
 */
(function () {

    'use strict';

    var entityFieldsRepository = require('../repositories/entityFieldsRepository');
    var accountRepository = require('../repositories/accountRepository');
    var accountTypeRepository = require('../repositories/accountTypeRepository');
    var instrumentRepository = require('../repositories/instrumentRepository');
    var instrumentTypeRepository = require('../repositories/instrumentTypeRepository');
    var importPriceDownloadSchemeRepository = require('../repositories/import/importPriceDownloadSchemeRepository');
    var instrumentClassRepository = require('../repositories/instrument/instrumentClassRepository');
    var pricingPolicyRepository = require('../repositories/pricingPolicyRepository');
    var currencyRepository = require('../repositories/currencyRepository');
    var portfolioRepository = require('../repositories/portfolioRepository');
    var counterpartyRepository = require('../repositories/counterpartyRepository');
    var counterpartyGroupRepository = require('../repositories/counterpartyGroupRepository');
    var responsibleRepository = require('../repositories/responsibleRepository');
    var responsibleGroupRepository = require('../repositories/responsibleGroupRepository');
    var transactionTypeRepository = require('../repositories/transactionTypeRepository');
    var transactionTypeGroupRepository = require('../repositories/transaction/transactionTypeGroupRepository');
    var tagRepository = require('../repositories/tagRepository');
    var metaContentTypesRepository = require('../repositories/metaContentTypesRepository');

    var strategyRepository = require('../repositories/strategyRepository');
    var strategyGroupRepository = require('../repositories/strategyGroupRepository');
    var strategySubgroupRepository = require('../repositories/strategySubgroupRepository');

    var getFields = function (fieldKey, options) {

        return new Promise(function (resolve, reject) {

            console.log('options', options);
            console.log('fieldKey', fieldKey);

            if (options && options.hasOwnProperty('entityType')) {

                var entityTypePieces = options.entityType.split('-');

                var entity = entityTypePieces[0];

                if (entity === 'transaction') {

                    if (options.key === 'group') {
                        transactionTypeGroupRepository.getList().then(function (data) {
                            resolve({type: 'id', key: 'group', data: data.results});
                        });
                    }
                }

                if (entity === 'strategy') {

                    var strategyNumber = entityTypePieces[1];

                    console.log('strategyNumber', strategyNumber);

                    if (options.key === 'group') {
                        strategyGroupRepository.getList(strategyNumber).then(function (data) {
                            resolve({type: 'id', key: 'group', data: data.results});
                        });
                    }

                    if (options.key === 'subgroup') {
                        strategySubgroupRepository.getList(strategyNumber).then(function (data) {
                            resolve({type: 'id', key: 'subgroup', data: data.results});
                        });
                    }
                }

                if (entity === 'counterparty') {
                    if (options.key === 'group') {
                        counterpartyGroupRepository.getList().then(function (data) {
                            resolve({type: 'id', key: 'group', data: data.results});
                        });
                    }
                }

                if (entity === 'responsible') {
                    if (options.key === 'group') {
                        responsibleGroupRepository.getList().then(function (data) {
                            resolve({type: 'id', key: 'group', data: data.results});
                        });
                    }
                }

                if (fieldKey == 'tags') {
                    tagRepository.getListByContentType(options.entityType).then(function (data) {
                        resolve({type: 'multiple-ids', key: 'tags', data: data.results});
                    });
                }
            }

            switch (fieldKey) {
                case 'daily_pricing_model':
                    entityFieldsRepository.getDailyPricingModelChoices().then(function (data) {
                        resolve({type: 'id', key: 'daily_pricing_model', data: data});
                    });
                    break;
                case 'payment_size_detail':
                    entityFieldsRepository.getPaymentSizeDetailChoices().then(function (data) {
                        resolve({type: 'id', key: 'payment_size_detail', data: data});
                    });
                    break;
                case 'transaction_class':
                    entityFieldsRepository.getTransactionClassList().then(function (data) {
                        resolve({type: 'key-value', key: 'transaction_class', data: data});
                    });
                    break;
                case 'instrument':
                    instrumentRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'instrument', data: data.results});
                    });
                    break;
                case 'pricing_policy':
                    pricingPolicyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'pricing_policy', data: data.results});
                    });
                    break;
                case 'price_download_scheme':
                    importPriceDownloadSchemeRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'price_download_scheme', data: data.results});
                    });
                    break;
                case 'instrument_type':
                    instrumentTypeRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'instrument_type', data: data.results});
                    });
                    break;
                case 'instrument_class':
                    instrumentClassRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'instrument_class', data: data}); // system-wide list
                    });
                    break;
                case 'accrued_currency':
                    currencyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'accrued_currency', data: data.results});
                    });
                    break;
                case 'pricing_currency':
                    currencyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'pricing_currency', data: data.results});
                    });
                    break;
                case 'transaction_currency':
                    currencyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'transaction_currency', data: data.results});
                    });
                    break;
                case 'settlement_currency':
                    currencyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'settlement_currency', data: data.results});
                    });
                    break;
                case 'currency':
                    currencyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'currency', data: data.results});
                    });
                    break;
                case 'portfolio':
                    portfolioRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'portfolio', data: data.results});
                    });
                    break;
                case 'account':
                    accountRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'account', data: data.results});
                    });
                    break;
                case 'counterparty':
                    counterpartyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'counterparty', data: data.results});
                    });
                    break;
                case 'responsible':
                    responsibleRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'responsible', data: data.results});
                    });
                    break;
                case 'type':
                    accountTypeRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'type', data: data.results});
                    });
                    break;
                case 'account_cash':
                    accountRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'account_cash', data: data.results});
                    });
                    break;
                case 'account_position':
                    accountRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'account_position', data: data.results});
                    });
                    break;
                case 'account_interim':
                    accountRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'account_interim', data: data.results});
                    });
                    break;
                case 'strategy1':
                    strategyRepository.getList(1).then(function (data) {
                        resolve({type: 'id', key: 'strategy1', data: data.results});
                    });
                    break;
                case 'strategy1_position':
                    strategyRepository.getList(1).then(function (data) {
                        resolve({type: 'id', key: 'strategy1_position', data: data.results});
                    });
                    break;
                case 'strategy1_cash':
                    strategyRepository.getList(1).then(function (data) {
                        resolve({type: 'id', key: 'strategy1_cash', data: data.results});
                    });
                    break;
                case 'strategy2':
                    strategyRepository.getList(2).then(function (data) {
                        resolve({type: 'id', key: 'strategy1', data: data.results});
                    });
                    break;
                case 'strategy2_position':
                    strategyRepository.getList(2).then(function (data) {
                        resolve({type: 'id', key: 'strategy2_position', data: data.results});
                    });
                    break;
                case 'strategy2_cash':
                    strategyRepository.getList(2).then(function (data) {
                        resolve({type: 'id', key: 'strategy2_cash', data: data.results});
                    });
                    break;
                case 'strategy3':
                    strategyRepository.getList(3).then(function (data) {
                        resolve({type: 'id', key: 'strategy1', data: data.results});
                    });
                    break;
                case 'strategy3_position':
                    strategyRepository.getList(3).then(function (data) {
                        resolve({type: 'id', key: 'strategy3_position', data: data.results});
                    });
                    break;
                case 'strategy3_cash':
                    strategyRepository.getList(3).then(function (data) {
                        resolve({type: 'id', key: 'strategy3_cash', data: data.results});
                    });
                    break;
                case 'portfolios':
                    portfolioRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'portfolios', data: data.results});
                    });
                    break;
                case 'account_types':
                    accountTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'account_types', data: data.results});
                    });
                    break;
                case 'transaction_types':
                    transactionTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'transaction_types', data: data.results});
                    });
                    break;
                case 'one_off_event':
                    transactionTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'transaction_types', data: data.results});
                    });
                    break;
                case 'regular_event':
                    transactionTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'transaction_types', data: data.results});
                    });
                    break;
                case 'factor_same':
                    transactionTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'transaction_types', data: data.results});
                    });
                    break;
                case 'factor_down':
                    transactionTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'transaction_types', data: data.results});
                    });
                    break;
                case 'factor_up':
                    transactionTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'transaction_types', data: data.results});
                    });
                    break;
                case 'instrument_types':
                    instrumentTypeRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'instrument_types', data: data.results});
                    });
                    break;
                case 'counterparties':
                    counterpartyRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'counterparties', data: data.results});
                    });
                    break;
                case 'accounts':
                    accountRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'accounts', data: data.results});
                    });
                    break;
                case 'content_types':
                    resolve({
                        type: 'multiple-ids',
                        key: 'content_types',
                        data: metaContentTypesRepository.getListForTags()
                    });
                    break;
                case 'responsibles':
                    responsibleRepository.getList().then(function (data) {
                        resolve({type: 'multiple-ids', key: 'responsibles', data: data.results});
                    });
                    break;
            }

        });

    };

    var getFieldsByContentType = function (contentType, options) {
        return new Promise(function (resolve, reject) {
            switch (contentType) {
                case 'instruments.dailypricingmodel':
                    entityFieldsRepository.getDailyPricingModelChoices().then(function (data) {
                        resolve({type: 'id', key: 'instruments.dailypricingmodel', data: data});
                    });
                    break;
                case 'instruments.paymentsizedetail':
                    entityFieldsRepository.getPaymentSizeDetailChoices().then(function (data) {
                        resolve({type: 'id', key: 'instruments.paymentsizedetail', data: data});
                    });
                    break;
                case 'instruments.instrument':
                    instrumentRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'instruments.instrument', data: data.results});
                    });
                    break;
                case 'integrations.pricedownloadscheme':
                    importPriceDownloadSchemeRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'integrations.pricedownloadscheme', data: data.results});
                    });
                    break;
                case 'instruments.instrumenttype':
                    instrumentTypeRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'instruments.instrumenttype', data: data});
                    });
                    break;
                case 'currencies.currency':
                    currencyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'currencies.currency', data: data.results});
                    });
                    break;
                case 'portfolios.portfolio':
                    portfolioRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'portfolios.portfolio', data: data.results});
                    });
                    break;
                case 'counterparties.counterparty':
                    counterpartyRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'counterparties.counterparty', data: data.results});
                    });
                    break;
                case 'counterparties.responsible':
                    responsibleRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'counterparties.responsible', data: data.results});
                    });
                    break;
                case 'accounts.account':
                    accountRepository.getList().then(function (data) {
                        resolve({type: 'id', key: 'accounts.account', data: data.results});
                    });
                    break;
                case 'strategies.strategy1':
                    strategyRepository.getList(1).then(function (data) {
                        resolve({type: 'id', key: 'strategies.strategy1', data: data.results});
                    });
                    break;
                case 'strategies.strategy2':
                    strategyRepository.getList(2).then(function (data) {
                        resolve({type: 'id', key: 'strategies.strategy2', data: data.results});
                    });
                    break;
                case 'strategies.strategy3':
                    strategyRepository.getList(3).then(function (data) {
                        resolve({type: 'id', key: 'strategies.strategy3', data: data.results});
                    });
                    break;
            }
        });
    };

    module.exports = {
        getFields: getFields,
        getFieldsByContentType: getFieldsByContentType
    }

}());
},{"../repositories/accountRepository":223,"../repositories/accountTypeRepository":224,"../repositories/counterpartyGroupRepository":229,"../repositories/counterpartyRepository":230,"../repositories/currencyRepository":232,"../repositories/entityFieldsRepository":234,"../repositories/import/importPriceDownloadSchemeRepository":245,"../repositories/instrument/instrumentClassRepository":268,"../repositories/instrumentRepository":265,"../repositories/instrumentTypeRepository":266,"../repositories/metaContentTypesRepository":274,"../repositories/portfolioRepository":281,"../repositories/pricingPolicyRepository":283,"../repositories/responsibleGroupRepository":286,"../repositories/responsibleRepository":287,"../repositories/strategyGroupRepository":288,"../repositories/strategyRepository":289,"../repositories/strategySubgroupRepository":290,"../repositories/tagRepository":291,"../repositories/transaction/transactionTypeGroupRepository":296,"../repositories/transactionTypeRepository":293}],322:[function(require,module,exports){
/**
 * Created by szhitenev on 30.05.2016.
 */

(function () {

    'use strict';

    var range = function (count) {
        var i;
        var numbers = [];
        for (i = 1; i <= count; i = i + 1) {
            numbers.push(i);
        }
        return numbers;
    };

    module.exports = {
        range: range
    }

}());
},{}],323:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var reservedProps = ['id', 'url', 'tags', 'user_code'];

    var setColumns = function (items, columns) {
        // console.log('items in set columns is ', items);
        //var itemsColumned = items.map(function(item){
        //    var i, x, z;
        //    var keys = Object.keys(item);
        //    var saved;
        //    for(i = 0; i < keys.length; i = i + 1) {
        //        saved = false;
        //        for(x = 0; x < columns.length; x = x + 1) {
        //            for(z = 0; z < reservedProps.length; z = z + 1) {
        //                if(keys[i] === columns[x] || keys[i] == reservedProps[z]) {
        //                    saved = true
        //                }
        //            }
        //        }
        //        if(!saved) {
        //            delete item[keys[i]];
        //        }
        //    }
        //    return item;
        //});
        //return itemsColumned;
        return items;
    };

    module.exports = {
        setColumns: setColumns
    }

}());
},{}],324:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var attributeTypeService = require('../attributeTypeService');

    var getDynamicAttributes = function (items, filters) {
        console.log();
        var promises = [];
        var attr = [];
        var reportAttrs = {};

        promises.push(attributeTypeService.getList('portfolio'));
        promises.push(attributeTypeService.getList('account'));
        promises.push(attributeTypeService.getList('instrument'));
        promises.push(attributeTypeService.getList('currency'));

        return Promise.all(promises).then(function (data) {

            console.log('attributes in report', data);

            reportAttrs['portfolio'] = data[0].results.map(function(item){
                item.source_name = item.name;
                item.attribute_entity = 'portfolio';
                item.name = 'Portfolio.' + item.name;
                return item;
            });

            reportAttrs['account'] = data[1].results.map(function(item){
                item.source_name = item.name;
                item.attribute_entity = 'account';
                item.name = 'Account.' + item.name;
                return item;
            });

            reportAttrs['instrument'] = data[2].results.map(function(item){
                item.source_name = item.name;
                item.attribute_entity = 'instrument';
                item.name = 'Instrument.' + item.name;
                return item;
            });

            return reportAttrs;
        });
    };

    module.exports = {
        getDynamicAttributes: getDynamicAttributes
    }

}());
},{"../attributeTypeService":304}],325:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var setFilters = function (items, filters) {

        if (filters.length) {
            var itemsFiltered = [];

            var i, f, item, filter, accepted = true;

            for (i = 0; i < items.length; i = i + 1) {
                item = items[i];
                accepted = true;
                for (f = 0; f < filters.length; f = f + 1) {
                    filter = filters[f];
                    if(!filter.options) {
                        filter.options = {enabled: true, query: ''};
                    }
                    if (filter.options.enabled) {
                        if(filter.options.query) {
                            if(filter.key) {
                                if (item[filter.key].toLocaleLowerCase().indexOf(filter.options.query.toLocaleLowerCase()) == -1) {
                                    accepted = false;
                                }
                            } else {
                                if (item[filter.name].toLocaleLowerCase().indexOf(filter.options.query.toLocaleLowerCase()) == -1) {
                                    accepted = false;
                                }
                            }
                        }
                    }
                }
                if(accepted) {
                    itemsFiltered.push(item);
                }
            }
            return itemsFiltered;
        } else {
            return items;
        }
    };

    module.exports = {
        setFilters: setFilters
    }

}());
},{}],326:[function(require,module,exports){
/**
 * Created by szhitenev on 08.06.2016.
 */
(function () {

    'use strict';

    var setFolds = function (items, folding) {
        var i;
        for (i = 0; i < items.length; i = i + 1) {
            items[i].isFolded = folding;
        }
        //console.log('FOLDED', items);
        return items;
    };

    module.exports = {
        setFolds: setFolds
    }

}());
},{}],327:[function(require,module,exports){
/**
 * Created by szhitenev on 02.11.2016.
 */
(function () {

    'use strict';

    function Row(options) {
        this.type = options.type || 'normal'; // header row, subtotal row, normal row, breadcrumbs, init, preinit
        this.cellsCaptions = options.cellsCaptions || []; // captions for groups
        this.value = options.value; // casual val, or subtotal
        this.subTotal = options.subTotal || {};
        this.isRootBootGroup = options.isRootBootGroup || false;
        this.value_options = options.value_options || {};
    }

    function findPreviousGroupsByAncestor(item) {

        var groups = [];

        function findDataInAncestor(ancestorItem) {

            groups.push({
                groups: ancestorItem.groups,
                items: ancestorItem.items,
                level: ancestorItem.level
            });

            if (ancestorItem.hasOwnProperty('_ancestor')) {
                findDataInAncestor(ancestorItem._ancestor);
            }

        }

        if (item.hasOwnProperty('_ancestor')) {
            findDataInAncestor(item._ancestor);
        }

        return groups;

    }

    function findCellCaptions(item, level, type, options) {

        var rowType = type || 'normal';

        var cellCaptions = [];
        var i;
        var cellObj;
        var previousGroups = [];

        if (rowType == 'subtotal') {

            if (options.reportSettingsType == 'area') {

                previousGroups = findPreviousGroupsByAncestor(item);


                //console.log('previousGroups', previousGroups);
                //console.log('item', item);
                if (item.groups.length) {

                    var cellObjType = 'area';

                    if (item.groups.length && item.groups[0].report_settings.subtotal_type) {
                        cellObjType = item.groups[0].report_settings.subtotal_type;
                    }


                    for (i = 0; i < level; i = i + 1) {

                        if (i == level - 1) {
                            cellObj = JSON.parse(JSON.stringify(item.groups[0]));
                            //cellObj._group = item.groups[0];
                            cellObj.comparePattern = item.groups[0].comparePattern;
                            cellObj.type = cellObjType;
                            cellObj.level = level;
                            cellObj.value = '<b>Subtotal</b>';
                        } else {
                            for (g = 0; g < previousGroups.length; g = g + 1) {

                                if (previousGroups[g].level == i) {

                                    cellObj = {};

                                    //console.log('previousGroups[g].items[0]', previousGroups[g].items[0]);
                                    //console.log('item.', item);

                                    if (previousGroups[g].items[0]._lid == item.items[0]._lid) {
                                        cellObj = JSON.parse(JSON.stringify(previousGroups[g].groups[0]));
                                    }


                                    //cellObj._group = previousGroups[g].groups[0];
                                    cellObj.comparePattern = previousGroups[g].groups[0].comparePattern;
                                    cellObj.type = cellObjType;
                                    cellObj.level = i + 1;
                                    cellObj.value = '';
                                }
                            }

                        }

                        cellCaptions.push(cellObj);

                    }

                }

                //for (i = 1; i <= level; i = i + 1) {
                //
                //
                //    cellObj = {
                //        value: '',
                //        //_group: item.groups[0],
                //        comparePattern: item.groups[0].comparePattern,
                //        type: item.groups[0].report_settings.subtotal_type,
                //        level: i
                //    };
                //
                //
                //    if (i == level) {
                //        cellObj.value = 'Subtotal';
                //        cellObj.level = level;
                //    }
                //
                //
                //    cellCaptions.push(cellObj);
                //
                //}
            } else {

                if (options.reportSettingsType == 'line') {
                    level = level - 1;

                    if (level > 0) {
                        for (i = 0; i <= level; i = i + 1) {

                            cellObj = {
                                value: '',
                                //_group: item.groups[0],
                                comparePattern: item.groups[0].comparePattern,
                                type: item.groups[0].report_settings.subtotal_type
                            };

                            if (i == level) {
                                cellObj.level = level + 1;
                            }

                            cellCaptions.push(cellObj);

                        }
                    }
                }
            }

        }

        if (rowType == 'breadcrumb') {


            previousGroups = findPreviousGroupsByAncestor(item);

            //console.log('BREACRUMB', item);

            var g;

            for (i = 0; i < level; i = i + 1) {

                if (i == level - 1) {
                    cellObj = item.groups[0];
                    cellObj.comparePattern = item.groups[0].comparePattern;
                    cellObj.type = 'area';
                    if (item.groups[0].report_settings) {
                        cellObj.type = item.groups[0].report_settings.subtotal_type;
                    }
                    cellObj.level = level;
                } else {
                    if (previousGroups.length) {
                        for (g = 0; g < previousGroups.length; g = g + 1) {

                            if (previousGroups[g].level == i) {
                                cellObj = previousGroups[g].groups[0];
                                cellObj.comparePattern = previousGroups[g].groups[0].comparePattern;
                                cellObj.type = previousGroups[g].groups[0].report_settings.subtotal_type;
                                cellObj.level = i + 1;
                            }
                        }
                    }

                }


                cellCaptions.push(cellObj);

                //console.log('cellCaptions', cellCaptions);

            }
        }

        if (rowType == 'normal') {

            //console.log('item', item);

            if (item.hasOwnProperty('breadcrumbs_level_0') && item.breadcrumbs_level_0.length && item.breadcrumbs_level_0[0].hasOwnProperty('groups')) {

                for (i = 1; i <= level; i = i + 1) {

                    var type = 'area';

                    if (item.groups[0].report_settings) {
                        type = item.groups[0].report_settings.subtotal_type;
                    }

                    cellObj = {
                        value: '',
                        comparePattern: item.groups[0].comparePattern,
                        //_group: item.groups[0],
                        subTotal: item.subTotal,
                        type: type,
                        level: i
                    };


                    if (i == level) {
                        cellObj.level = level;
                    }


                    cellCaptions.push(cellObj);

                }

            } else {

                previousGroups = findPreviousGroupsByAncestor(item);

                //console.log('previousGroups', previousGroups);
                //console.log('item', item);
                //console.log('options', options);
                if (item.groups.length) {

                    var cellObjType = 'area';

                    if (item.groups.length && item.groups[0].report_settings && item.groups[0].report_settings.subtotal_type) {
                        cellObjType = item.groups[0].report_settings.subtotal_type;
                    }


                    for (i = 0; i < level; i = i + 1) {

                        if (i == level - 1) {
                            cellObj = JSON.parse(JSON.stringify(item.groups[0]));
                            //cellObj._group = item.groups[0];
                            cellObj.comparePattern = item.groups[0].comparePattern;
                            cellObj.type = cellObjType;
                            cellObj.subTotal = item.groups[0].subTotal;
                            cellObj.level = level;
                            if (options.itemIndex != 0) {
                                cellObj.value = '';
                            }
                        } else {
                            for (g = 0; g < previousGroups.length; g = g + 1) {

                                if (previousGroups[g].level == i) {

                                    cellObj = {};

                                    //console.log('previousGroups[g].items[0]', previousGroups[g].items[0]);
                                    //console.log('item.', item);

                                    if (previousGroups[g].items[0]._lid == item.items[0]._lid) {
                                        cellObj = JSON.parse(JSON.stringify(previousGroups[g].groups[0]));
                                    }

                                    //console.log('previousGroups[g]', previousGroups[g]);

                                    //cellObj._group = previousGroups[g].groups[0];
                                    cellObj.comparePattern = previousGroups[g].groups[0].comparePattern;
                                    cellObj.type = cellObjType;
                                    cellObj.subTotal = previousGroups[g].groups[0].subTotal;
                                    cellObj.level = i + 1;
                                    //cellObj.itemIndex = options.itemIndex;

                                    if (options.itemIndex != 0) {
                                        cellObj.value = '';
                                    }
                                }
                            }

                        }

                        cellCaptions.push(cellObj);

                    }

                }
            }
        }

        return cellCaptions;

    }

    function findItemRecursive(items, level, resultItems) {

        //console.log('items', items);

        items.forEach(function (item) {

            var cellCaptions, obj;


            // If we don't have boot_level_0, so we are on the boot_level_0
            // and we don't have preInit breadcrumbs

            if (!item.hasOwnProperty('boot_level_' + level)) {
                if (level == 0) {
                    level = level + 1;
                }
            }

            // if item have top-line group subtotal start,

            if (item.hasOwnProperty('groups') && item.groups.length) {
                if (item.groups[0].report_settings && item.groups[0].report_settings.subtotal_type == 'line' && level !== 0) {

                    cellCaptions = findCellCaptions(item, level, 'subtotal', {reportSettingsType: 'line'});

                    obj = {
                        cellsCaptions: cellCaptions,
                        value: item.subTotal,
                        type: 'subtotal-line',
                        value_options: {
                            type: item.groups[0].report_settings.subtotal_type,
                            level: level
                        }
                    };

                    resultItems.push(new Row(obj));
                }
            }


            // if item have top-line group subtotal start end


            if (level == 0) {

                cellCaptions = findCellCaptions(item, level);

                obj = {
                    cellsCaptions: cellCaptions,
                    value: item.groups,
                    type: 'preinit',
                    value_options: {
                        level: level
                    }
                };

                resultItems.push(new Row(obj));
            }

            // if we have preInit groups end

            // go deeper

            if (item.hasOwnProperty('boot_level_' + level)) {

                findItemRecursive(item['boot_level_' + level], level + 1, resultItems);

            } else {

                // or if bootGroups.length == 1, bring just breadcrumbs lines

                //console.log('item', item);

                // TODO refactor breadcrumbs level?

                if (item.hasOwnProperty('breadcrumbs_level_0') && item['breadcrumbs_level_0'][0].items) {

                    //console.log("item['breadcrumbs_level_0']", item['breadcrumbs_level_0']);

                    item['breadcrumbs_level_0'].forEach(function (breadCrumbItem, breadcrumbIndex) {

                        var cellCaptions = findCellCaptions(item, level, 'breadcrumb', {inGroupIndex: breadcrumbIndex});

                        var breadcrumbObj = {
                            cellsCaptions: cellCaptions,
                            value: breadCrumbItem.groups,
                            type: 'breadcrumbs',
                            value_options: {
                                level: level
                            }
                        };

                        resultItems.push(new Row(breadcrumbObj));

                        breadCrumbItem.items.forEach(function (rowItem) {

                            var cellCaptions = findCellCaptions(item, level, 'normal');

                            var obj = {
                                cellsCaptions: cellCaptions,
                                value: rowItem,
                                subTotal: item.subTotal,
                                value_options: {
                                    level: level
                                }
                            };

                            resultItems.push(new Row(obj));

                        });
                    })

                } else {

                    if (item.hasOwnProperty('items') && item.items.length) {

                        item.items.forEach(function (rowItem, $itemIndex) {

                            var cellCaptions = findCellCaptions(item, level, 'normal', {itemIndex: $itemIndex});

                            var obj = {
                                cellsCaptions: cellCaptions,
                                value: rowItem,
                                subTotal: item.subTotal,
                                value_options: {
                                    level: level
                                }
                            };

                            resultItems.push(new Row(obj));

                        });
                    }
                }
            }

            // if group have area subtotal, do it, start

            //console.log('-------------------------------------------------------', item.groups[0]);

            if (item.hasOwnProperty('groups') && item.groups.length) {
                if (item.groups[0].report_settings && item.groups[0].report_settings.subtotal_type == 'area' && level !== 0) {

                    cellCaptions = findCellCaptions(item, level, 'subtotal', {reportSettingsType: 'area'});

                    obj = {
                        cellsCaptions: cellCaptions,
                        value: item.subTotal,
                        type: 'subtotal',
                        value_options: {
                            type: item.groups[0].report_settings.subtotal_type,
                            level: level
                        }
                    };

                    //console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', obj);

                    resultItems.push(new Row(obj));
                }
            }

            // if group have area subtotal, do it, end

        })

    }

    var transformItems = function (items) {

        //console.trace();

        var level = 0;
        var resultItems = [];

        findItemRecursive(items, level, resultItems);

        //console.log('result transformed', resultItems);

        return resultItems;
    };

    module.exports = {
        transformItems: transformItems
    }

}());
},{}],328:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    var groupingService = require('./groupingService');
    var filteringService = require('./filteringService');
    var sortingService = require('./sortingService');
    var columnsService = require('./columnsService');
    var foldingService = require('./foldingService');

    var columnsServiceExt = {
        setColumns: function (columns) {
            //console.log('setColumns', this.items);
            this.items = columnsService.setColumns(this.items, columns)
        }
    };

    var groupingServiceExt = {
        setGroups: function (groups, entityType) {
            this.items = groupingService.setGroups(this.items, groups, entityType);
        },
        setGroupsWithColumns: function (groups, columns, entityType) {
            this.items = groupingService.setGroupsWithColumns(this.items, groups, columns, entityType);
        }
    };

    var foldingServiceExt = {
        setFolds: function (folding) {
            this.items = foldingService.setFolds(this.items, folding);
        }
    };

    var filteringServiceExt = {
        setFilters: function (filters) {
            this.items = filteringService.setFilters(this.items, filters);
        }
    };

    var sortingServiceExt = {
        group: {
            sort: function (sort) {
                this.items = sortingService.group.sort(this.items, sort);
            }
        },
        column: {
            sort: function (sort) {
                this.items = sortingService.column.sort(this.items, sort);
            }
        }
    };


    // THAT IS AWFUL! // TODO make refactor someday

    function GroupTableService() {
        //console.log('instance created');
        var _this = this;
        this.setItems = function (itemsSource) {
            this.items = itemsSource;
        };
        this.extractDynamicAttributes = groupingService.extractDynamicAttributes;
        this.columns = {
            setColumns: function (columns) {
                //console.log('setColumns', this.items);
                _this.items = columnsService.setColumns(_this.items, columns)
            }
        };
        this.grouping = {
            setGroups: function (groups, entityType) {
                console.log('this', _this);
                _this.items = groupingService.setGroups(_this.items, groups, entityType);
            },
            setGroupsWithColumns: function (groups, columns, entityType) {
                _this.items = groupingService.setGroupsWithColumns(_this.items, groups, columns, entityType);
            }
        };
        this.filtering = {
            setFilters: function (filters) {
                _this.items = filteringService.setFilters(_this.items, filters);
            }
        };
        this.folding = {
            setFolds: function (folding) {
                _this.items = foldingService.setFolds(_this.items, folding);
            }
        };
        this.sorting = {
            group: {
                sort: function (sort) {
                    _this.items = sortingService.group.sort(_this.items, sort);
                }
            },
            column: {
                sort: function (sort) {
                    _this.items = sortingService.column.sort(_this.items, sort);
                }
            }
        };
        this.projection = function () {
            return this.items;
        };

    }


    var getInstance = function (recreate) {
        return new GroupTableService();
    };

    module.exports = {
        getInstance: getInstance
    }

}());
},{"./columnsService":323,"./filteringService":325,"./foldingService":326,"./groupingService":329,"./sortingService":330}],329:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    var metaService = require('../metaService');
    var reportSubtotalService = require('../reportSubtotalService');

    'use strict';

    function returnValue(attribute) {

        if (attribute['attribute_type_object'].value_type == 30) {
            return attribute['classifier']
        } else {
            if (attribute['attribute_type_object'].value_type == 40) {
                return attribute['value_date'];
            } else {
                if (attribute['attribute_type_object'].value_type == 20) {
                    return attribute['value_float'];
                } else {
                    if (attribute['attribute_type_object'].value_type == 10 && attribute['value_string'] !== '') {
                        return attribute['value_string'];
                    } else {
                        return null;
                    }
                }
            }
        }
    }

    function setAncestors(item, level, groupType, options) {

        if (groupType == 'boot') {

            item["boot_level_" + level].forEach(function (childItem) {

                var ancestor = JSON.parse(JSON.stringify(item));
                if (level > 0) {
                    ancestor.level = level - 1;
                } else {
                    ancestor.level = level;
                }

                delete ancestor["boot_level_" + level];

                childItem._ancestor = ancestor;

            })

        }

        if (groupType == 'breadcrumb') {

            item["breadcrumbs_level_" + level].forEach(function (childItem) {

                var ancestor = JSON.parse(JSON.stringify(item));

                delete ancestor["breadcrumbs_level_" + level];
                ancestor.level = options.bootLevel;

                childItem._ancestor = ancestor;

            })


        }

    };

    function returnValueType(attribute) {

        if (attribute['attribute_type_object'].value_type == 30) {
            return 'classifier'
        } else {
            if (attribute['attribute_type_object'].value_type == 40) {
                return 'value_date';
            } else {
                if (attribute['attribute_type_object'].value_type == 20) {
                    return 'value_float';
                } else {
                    if (attribute['attribute_type_object'].value_type == 10) {
                        return 'value_string';
                    } else {
                        return null;
                    }
                }
            }
        }
    }

    var transformToArray = function (groupedObject) {

        //console.log('groupedObject', groupedObject);
        var items = [];
        var i;
        var keys = Object.keys(groupedObject);
        for (i = 0; i < keys.length; i = i + 1) {
            items.push(groupedObject[keys[i]]);
        }
        //console.log('grooouping', items);
        return items;
    };

    function addEntityObjectsToGroups(itemsGroupedArray) {

        itemsGroupedArray.forEach(function (itemsGroup) {


            itemsGroup.groups.forEach(function (group) {

                if (group.value_type == 'field') {

                    itemsGroup.items.forEach(function (item) {

                        if (item.hasOwnProperty(group.key)) {
                            group[group.key + '_object'] = item[group.key + '_object'];
                        }

                    })
                }
            });

            if (itemsGroup.hasOwnProperty('breadcrumbs_level_0')) {
                itemsGroup.breadcrumbs_level_0 = addEntityObjectsToGroups(itemsGroup.breadcrumbs_level_0);
            }
        });


        return itemsGroupedArray;

    }


    function checkIfEmptyString(item) {
        if (item == '') {
            return null
        }
        return item;
    }

    function findGroupsForResult(group, item, attribute, groupsForResult, keywords) {

        var resGroupItem;
        if (group.hasOwnProperty('id')) {

            if (group.hasOwnProperty('r_entityType')) {
                if (group.id == attribute.attribute_type_object.id) {

                    if (returnValue(attribute) !== null) {

                        var _name = group.r_entityType + '_attribute_' + group.source_name;

                        resGroupItem = {
                            comparePattern: '&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']',
                            key: _name,
                            value: returnValue(attribute),
                            value_type: returnValueType(attribute)
                        };

                        if (group.hasOwnProperty('report_settings')) {
                            resGroupItem.report_settings = group.report_settings;
                        }


                        groupsForResult.push(resGroupItem);
                    }
                }
            } else {


                if (group.hasOwnProperty('columnType') && group.columnType == 'custom-field') {

                    resGroupItem = {
                        comparePattern: '&[' + group.name + '}-{' + checkIfEmptyString(item[group.name]) + ']',
                        key: group.name.replace(' ', '_'),
                        value: checkIfEmptyString(item[group.name]),
                        value_type: 10
                    };

                    if (group.hasOwnProperty('report_settings')) {
                        resGroupItem.report_settings = group.report_settings;
                    }

                    groupsForResult.push(resGroupItem);

                } else {

                    if (group.id === attribute['attribute_type']) {

                        //console.log('group.id', group);

                        for (n = 0; n < groupsForResult.length; n = n + 1) {
                            //console.log('groupsForResult[n]', groupsForResult[n]);
                            if (groupsForResult[n].comparePattern.indexOf('&[' + attribute['attribute_type'] + '}-{' + returnValue(attribute) + ']') !== -1) {
                                nExist = true;
                            }
                        }
                        if (!nExist) {

                            if (returnValue(attribute) !== null) {
                                resGroupItem = {
                                    comparePattern: '&[' + attribute['attribute_type'] + '}-{' + returnValue(attribute) + ']',
                                    //key: attribute['attribute_name'].replace(' ', '_'),
                                    key: attribute.attribute_type_object['user_code'].replace(' ', '_'),
                                    //key: '',
                                    value: returnValue(attribute),
                                    value_type: returnValueType(attribute)
                                };

                                if (group.hasOwnProperty('report_settings')) {
                                    resGroupItem.report_settings = group.report_settings;
                                }


                                groupsForResult.push(resGroupItem);
                            }
                        }
                    }
                }
            }
        } else {
            //console.log('keywords', keywords);
            var k;
            for (k = 0; k < keywords.length; k = k + 1) {
                var n, nExist = false;
                //console.log('keywords[k]', keywords[k]);
                if (group.key === keywords[k].key) {

                    //console.log('groupsForResult', groupsForResult);
                    for (n = 0; n < groupsForResult.length; n = n + 1) {
                        //console.log('groupsForResult[n]', groupsForResult[n]);
                        if (groupsForResult[n].comparePattern.indexOf('&[' + keywords[k].key + '}-{' + checkIfEmptyString(item[keywords[k].key]) + ']') !== -1) {
                            nExist = true;
                        }
                    }
                    if (!nExist) {

                        resGroupItem = {
                            comparePattern: '&[' + keywords[k].key + '}-{' + checkIfEmptyString(item[keywords[k].key]) + ']',
                            key: keywords[k].key.replace(' ', '_'),
                            value: checkIfEmptyString(item[keywords[k].key]),
                            value_type: keywords[k].value_type
                        };

                        if (keywords[k].value_type == 'field') {
                            //console.log('keywords[k]', keywords[k]);
                            resGroupItem.value_entity = keywords[k].value_entity;
                        }

                        if (group.hasOwnProperty('report_settings')) {
                            resGroupItem.report_settings = group.report_settings;
                        }

                        groupsForResult.push(resGroupItem);
                    }
                }
            }
        }
    }

    var setGroups = function (items, groups, entityTypes, options) {

        //console.log('GROUPING SERVICE groups', groups);

        //console.log("items", items);

        var itemsGrouped = [];
        var itemsGroupedArray = [];
        var i, c, a, k;

        var baseAttrs = [];
        var entityAttrs = {};
        if (metaService) {

            entityTypes.forEach(function (entityType) {
                if (metaService.getEntitiesWithoutBaseAttrsList().indexOf(entityType) === -1) {
                    baseAttrs = metaService.getBaseAttrs();
                }
                entityAttrs[entityType] = metaService.getEntityAttrs(entityType).map(function (item) {

                    if (options != undefined) { // do if we have report type
                        //if (entityType !== 'balance-report' && entityType !== 'pnl-report' && entityType !== 'cash-flow-projection-repor') {
                        if (entityType !== 'balance-report' &&
                            entityType !== 'pnl-report' &&
                            entityType !== 'cash-flow-projection-report' &&
                            entityType !== 'transaction-report') {

                            if (entityType.indexOf('strategy') == 0) {

                                var pieces = entityType.split('-');

                                //console.log('entityType', JSON.stringify(entityType));

                                entityType = pieces[0] + pieces[1];

                                if (pieces.length > 2) {
                                    entityType = entityType + '_' + pieces[2];
                                }

                            } else {
                                entityType = entityType.split('-').join('_');
                            }

                            //console.log('entityType', JSON.stringify(entityType));
                            //console.log('entityType', JSON.stringify(item));


                            item.key = entityType + '_object_' + item.key;
                            item.value_entity = entityType;

                            if (entityType == 'transaction-report') {
                                item.name = 'Transaction.' + item.name;
                            } else if (entityType == 'instrument-type') {
                                item.name = 'Instrument.Instrument Type' + item.name;
                            } else if (entityType == 'account-type') {
                                item.name = 'Account.Account Type' + item.name;
                            } else if ('strategy-1-subgroup') {
                                item.name = 'Strategy1.Subgroup.' + item.name;
                            } else if ('strategy-2-subgroup') {
                                item.name = 'Strategy2.Subgroup.' + item.name;
                            } else if ('strategy-3-subgroup') {
                                item.name = 'Strategy3.Subgroup.' + item.name;
                            } else if ('strategy-1-group') {
                                item.name = 'Strategy1.Subgroup.Group.' + item.name;
                            } else if ('strategy-2-group') {
                                item.name = 'Strategy2.Subgroup.Group.' + item.name;
                            } else if ('strategy-3-group') {
                                item.name = 'Strategy3.Subgroup.Group.' + item.name;
                            } else {
                                item.name = entityType.capitalizeFirstLetter() + '.' + item.name;
                            }
                        }

                    }

                    return item;

                });
            })

        }

        var keywords = [];
        keywords = keywords.concat(baseAttrs);

        var entityAttrsKeys = Object.keys(entityAttrs);

        entityAttrsKeys.forEach(function (entityAttrsKey) {
            keywords = keywords.concat(entityAttrs[entityAttrsKey]);
        });

        var groupName = '';
        var groupsForResult = [];

        if (groups.length) {
            var group, item;
            for (i = 0; i < items.length; i = i + 1) {
                item = items[i];
                groupsForResult = [];
                groupName = ''; // create groupName of each item
                //console.log('groups111111111111111111111111', groups);
                for (c = 0; c < groups.length; c = c + 1) {
                    //console.log('items[i]', items[i]);

                    group = groups[c];
                    //console.log('group[c]', group);
                    if (group.hasOwnProperty('key')) {

                        findGroupsForResult(group, item, null, groupsForResult, keywords);
                        var keys = Object.keys(items[i]);
                        for (a = 0; a < keys.length; a = a + 1) {
                            if (groupName.indexOf('&[' + checkIfEmptyString(group.key) + '}-{' + checkIfEmptyString(item[group.key]) + ']') === -1) {
                                groupName = groupName + '&[' + checkIfEmptyString(group.key) + '}-{' + checkIfEmptyString(item[group.key]) + ']';
                            }
                        }

                    } else {

                        if (group.hasOwnProperty('r_entityType')) {

                            if (item.hasOwnProperty('account_object') && item.account_object !== null) {

                                for (a = 0; a < item.account_object.attributes.length; a = a + 1) {
                                    findGroupsForResult(group, item, item.account_object.attributes[a], groupsForResult, keywords);
                                    var keys = Object.keys(items[i]);

                                    var _name = group.r_entityType + '_attribute_' + group.source_name;

                                    for (a = 0; a < keys.length; a = a + 1) {
                                        if (groupName.indexOf('&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']') === -1) {
                                            groupName = groupName + '&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']';
                                        }
                                    }
                                }
                            }

                            if (item.hasOwnProperty('instrument_object') && item.instrument_object !== null) {

                                for (a = 0; a < item.instrument_object.attributes.length; a = a + 1) {
                                    findGroupsForResult(group, item, item.instrument_object.attributes[a], groupsForResult, keywords);
                                    var keys = Object.keys(items[i]);

                                    var _name = group.r_entityType + '_attribute_' + group.source_name;

                                    for (a = 0; a < keys.length; a = a + 1) {
                                        if (groupName.indexOf('&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']') === -1) {
                                            groupName = groupName + '&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']';
                                        }
                                    }
                                }
                            }

                            if (item.hasOwnProperty('portfolio_object') && item.portfolio_object !== null) {

                                for (a = 0; a < item.portfolio_object.attributes.length; a = a + 1) {
                                    findGroupsForResult(group, item, item.portfolio_object.attributes[a], groupsForResult, keywords);
                                    var keys = Object.keys(items[i]);

                                    var _name = group.r_entityType + '_attribute_' + group.source_name;

                                    for (a = 0; a < keys.length; a = a + 1) {
                                        if (groupName.indexOf('&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']') === -1) {
                                            groupName = groupName + '&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']';
                                        }
                                    }
                                }
                            }

                            if (item.hasOwnProperty('currency_object') && item.currency_object !== null) {

                                for (a = 0; a < item.currency_object.attributes.length; a = a + 1) {
                                    findGroupsForResult(group, item, item.currency_object.attributes[a], groupsForResult, keywords);
                                    var keys = Object.keys(items[i]);

                                    var _name = group.r_entityType + '_attribute_' + group.source_name;

                                    for (a = 0; a < keys.length; a = a + 1) {
                                        if (groupName.indexOf('&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']') === -1) {
                                            groupName = groupName + '&[' + checkIfEmptyString(_name) + '}-{' + checkIfEmptyString(item[_name]) + ']';
                                        }
                                    }
                                }
                            }

                        } else {

                            if (group.hasOwnProperty('columnType') && group.columnType == 'custom-field') {

                                if (item[group.name] !== null) {

                                    findGroupsForResult(group, item, null, groupsForResult, keywords);


                                    if (groupName.indexOf('&[' + checkIfEmptyString(group.name) + '}-{' + checkIfEmptyString(item[group.name]) + ']') === -1) {
                                        groupName = groupName + '&[' + checkIfEmptyString(group.name) + '}-{' + checkIfEmptyString(item[group.name]) + ']';
                                    }
                                }


                            } else {

                                if (item.hasOwnProperty('attributes')) {

                                    for (a = 0; a < item.attributes.length; a = a + 1) {
                                        findGroupsForResult(group, item, item['attributes'][a], groupsForResult, keywords);

                                        if (group.hasOwnProperty('r_entityType')) {

                                            if (item[group.r_entityType + '_attribute_' + group.source_name] !== null) {

                                                var name = group.r_entityType + '_attribute_' + group.source_name;

                                                if (groupName.indexOf('&[' + checkIfEmptyString(group.source_name) + '}-{' + checkIfEmptyString(item[name]) + ']') === -1) {
                                                    groupName = groupName + '&[' + checkIfEmptyString(group.source_name) + '}-{' + checkIfEmptyString(item[name]) + ']';
                                                }

                                            }

                                        } else {

                                            if (item[group.name] !== null) {
                                                if (groupName.indexOf('&[' + checkIfEmptyString(group.name) + '}-{' + checkIfEmptyString(item[group.name]) + ']') === -1) {
                                                    groupName = groupName + '&[' + checkIfEmptyString(group.name) + '}-{' + checkIfEmptyString(item[group.name]) + ']';
                                                }
                                            }
                                        }
                                    }
                                } else {
                                    if (group.hasOwnProperty('attribute_entity')) {
                                        if (item[group.attribute_entity + '_object_attributes']) {

                                            //console.log('item.attributes', item[group.attribute_entity + '_object_attributes']);

                                            for (a = 0; a < item[group.attribute_entity + '_object_attributes'].length; a = a + 1) {

                                                findGroupsForResult(group, item, item[group.attribute_entity + '_object_attributes'][a], groupsForResult, keywords);

                                                if (item[group.name] !== null) {
                                                    if (groupName.indexOf('&[' + checkIfEmptyString(group.name) + '}-{' + checkIfEmptyString(item[group.name]) + ']') === -1) {
                                                        groupName = groupName + '&[' + checkIfEmptyString(group.name) + '}-{' + checkIfEmptyString(item[group.name]) + ']';
                                                    }
                                                }

                                            }


                                        }
                                    }

                                }
                            }
                        }
                    }

                }

                if (!itemsGrouped[groupName]) {
                    itemsGrouped[groupName] = {
                        groups: groupsForResult,
                        items: []
                    }
                }

                console.log('itemsGrouped', itemsGrouped);

                itemsGrouped[groupName].items.push(item);
                //console.log('itemsGrouped[groupName]', itemsGrouped[groupName]);
                itemsGroupedArray = transformToArray(itemsGrouped);


                itemsGroupedArray = addEntityObjectsToGroups(itemsGroupedArray);


                //console.log('itemsGroupedArray', itemsGroupedArray);

            }

            //console.log('------------------------');

            //console.log('Items grouped', itemsGroupedArray);

            if (options) {

                itemsGroupedArray.forEach(function (group) {

                    //console.log('group122222', group);

                    if (group.groups.length) {
                        group.subTotal = reportSubtotalService.calcColumnSubTotal(group, options.columns);
                        group.groups[0].subTotal = group.subTotal;
                    }
                });
            }

            //console.log('Items grouped', itemsGroupedArray);


            return itemsGroupedArray;
        } else {
            //console.log('items', items);
            return items;
        }
    };

    function recursiveFillGroups(items, groups, entityTypes, options) {

        var level = 0;
        var results = [];

        function recursiveWalker(items, groups, entityTypes, level, options) {

            //console.log('options', options);
            //console.log('level', level);

            var setGroupOptions = {
                columns: options.columns
            };

            if (options.boot == true) {

                if (groups.bootsGroup[level]) {

                    if (!results.length) {

                        var tempResults = setGroups(items, [groups.bootsGroup[level]], entityTypes, setGroupOptions);

                        tempResults.forEach(function (item) {

                            results.push(item);
                        });

                        recursiveWalker(results, groups, entityTypes, level + 1, options)

                    } else {

                        items.forEach(function (resultItem) {


                            resultItem['boot_level_' + level] = setGroups(resultItem.items, [groups.bootsGroup[level]], entityTypes, setGroupOptions);

                            setAncestors(resultItem, level, 'boot');

                            if (groups.bootsGroup[level + 1]) {
                                recursiveWalker(resultItem['boot_level_' + level], groups, entityTypes, level + 1, options)
                            }
                        });

                        // TODO refactor breadcrumbs_level


                        if (!groups.bootsGroup[level + 1]) {
                            if (options.breadcrumbs == true) {

                                if (groups.linesGroup.length) {

                                    items.forEach(function (resultItem) {

                                        resultItem['boot_level_' + level].forEach(function (bootItem) {

                                            bootItem['breadcrumbs_level_0'] = setGroups(bootItem.items, groups.linesGroup, entityTypes, setGroupOptions);

                                            setAncestors(bootItem, 0, 'breadcrumb', {bootLevel: level});

                                        });


                                    });
                                }

                            }
                        }

                    }

                } else {

                    if (options.breadcrumbs == true) {

                        if (groups.linesGroup.length) {

                            items.forEach(function (resultItem) {

                                resultItem['breadcrumbs_level_0'] = setGroups(resultItem.items, groups.linesGroup, entityTypes, setGroupOptions);

                            });
                        }

                    }
                }
            }


        }

        recursiveWalker(items, groups, entityTypes, level, options);

        //console.log('results', results);

        return results;
    }

    function isAdded(needle, stack, property) {

        var exist = false;

        stack.forEach(function (item) {
            if (item[property] == needle[property]) {
                exist = true;
            }
        });

        return exist;
    }

    function filterByID(obj) {
        if (obj.attribute_type_object && 'id' in obj.attribute_type_object && typeof(obj.attribute_type_object.id) === 'number' && !isNaN(obj.attribute_type_object.id)) {
            return true;
        } else {
            return false;
        }
    }

    function extractDynamicAttributes(items) {

        var propsToMock = [];
        var attributesToMock = {instrument: [], account: [], currency: [], portfolio: []};

        var localItems = [];

        localItems = items.map(function (item) {

            if (item.hasOwnProperty('instrument_object') && item.instrument_object !== null) {

                if (item.instrument_object.hasOwnProperty('attributes')) {

                    attributesToMock.instrument = attributesToMock.instrument.concat(JSON.parse(JSON.stringify(item.instrument_object.attributes))).filter(filterByID);

                    item.instrument_object.attributes.forEach(function (attribute) {

                        var _name = 'instrument_attribute_' + attribute.attribute_type_object.name;

                        if (propsToMock.indexOf(_name) == -1) {
                            propsToMock.push(_name);
                        }

                        if (attribute.attribute_type_object.value_type == 10) {
                            item[_name] = attribute.value_string
                        }
                        if (attribute.attribute_type_object.value_type == 20) {
                            item[_name] = attribute.value_float
                        }
                        if (attribute.attribute_type_object.value_type == 30) {
                            item[_name] = attribute.classifier_object
                        }
                        if (attribute.attribute_type_object.value_type == 40) {
                            item[_name] = attribute.value_date
                        }

                    })
                }
            } else {
                //item.instrument_object = {
                //    attributes: [
                //        {
                //            attribute_type_object: {
                //                id: 1,
                //                name: 'Group1',
                //                value_type: 10
                //            },
                //            value_string: "__INTERNAL_NAME_UNSPECIFIED"
                //        }
                //    ]
                //}
            }

            if (item.hasOwnProperty('account_object') && item.account_object !== null) {

                if (item.account_object.hasOwnProperty('attributes')) {

                    attributesToMock.account = attributesToMock.account.concat(JSON.parse(JSON.stringify(item.account_object.attributes))).filter(filterByID);

                    item.account_object.attributes.forEach(function (attribute) {

                        var _name = 'account_attribute_' + attribute.attribute_type_object.name;

                        if (propsToMock.indexOf(_name) == -1) {
                            propsToMock.push(_name);
                        }

                        if (attribute.attribute_type_object.value_type == 10) {
                            item[_name] = attribute.value_string
                        }
                        if (attribute.attribute_type_object.value_type == 20) {
                            item[_name] = attribute.value_float
                        }
                        if (attribute.attribute_type_object.value_type == 30) {
                            item[_name] = attribute.classifier_object
                        }
                        if (attribute.attribute_type_object.value_type == 40) {
                            item[_name] = attribute.value_date
                        }

                    })

                }
            }

            if (item.hasOwnProperty('portfolio_object') && item.portfolio_object !== null) {

                if (item.portfolio_object.hasOwnProperty('attributes')) {

                    attributesToMock.portfolio = attributesToMock.portfolio.concat(JSON.parse(JSON.stringify(item.portfolio_object.attributes))).filter(filterByID);

                    item.portfolio_object.attributes.forEach(function (attribute) {

                        var _name = 'portfolio_attribute_' + attribute.attribute_type_object.name;

                        if (propsToMock.indexOf(_name) == -1) {
                            propsToMock.push(_name);
                        }

                        if (attribute.attribute_type_object.value_type == 10) {
                            item[_name] = attribute.value_string
                        }
                        if (attribute.attribute_type_object.value_type == 20) {
                            item[_name] = attribute.value_float
                        }
                        if (attribute.attribute_type_object.value_type == 30) {
                            item[_name] = attribute.classifier_object
                        }
                        if (attribute.attribute_type_object.value_type == 40) {
                            item[_name] = attribute.value_date
                        }

                    })
                }
            }

            if (item.hasOwnProperty('currency_object') && item.currency_object !== null) {

                if (item.currency_object.hasOwnProperty('attributes')) {

                    attributesToMock.currency = attributesToMock.currency.concat(JSON.parse(JSON.stringify(item.currency_object.attributes))).filter(filterByID);

                    item.currency_object.attributes.forEach(function (attribute) {

                        var _name = 'currency_attribute_' + attribute.attribute_type_object.name;

                        if (propsToMock.indexOf(_name) == -1) {
                            propsToMock.push(_name);
                        }

                        if (attribute.attribute_type_object.value_type == 10) {
                            item[_name] = attribute.value_string
                        }
                        if (attribute.attribute_type_object.value_type == 20) {
                            item[_name] = attribute.value_float
                        }
                        if (attribute.attribute_type_object.value_type == 30) {
                            item[_name] = attribute.classifier_object
                        }
                        if (attribute.attribute_type_object.value_type == 40) {
                            item[_name] = attribute.value_date
                        }

                    })

                }
            }

            return item;

        });

        Object.keys(attributesToMock).forEach(function (key) {
            attributesToMock[key].forEach(function (item) {
                item.value_string = 'Ungrouped';
            })

        });


        return localItems.map(function (item) {

            propsToMock.forEach(function (propKey) {
                if (!item.hasOwnProperty(propKey)) {
                    item[propKey] = '';
                }
            });


            if (item.hasOwnProperty('instrument_object') && item.instrument_object == null) {
                item.instrument_object = {attributes: attributesToMock.instrument};
            }
            if (item.hasOwnProperty('portfolio_object') && item.portfolio_object == null) {
                item.portfolio_object = {attributes: attributesToMock.portfolio};
            }
            if (item.hasOwnProperty('account_object') && item.account_object == null) {
                item.account_object = {attributes: attributesToMock.account};
            }
            if (item.hasOwnProperty('currency_object') && item.currency_object == null) {
                item.currency_object = {attributes: attributesToMock.currency};
            }


            return item;

        })

    }

    var setGroupsWithColumns = function (items, groups, columns, entityTypes) {

        var preInitGroups = [];
        var bootsGroup = [];
        var linesGroup = [];

        var results = [];

        var bootsGroupStartMatching = null;

        function findBootsGroup() {

            groups.forEach(function (group, $groupIndex) {

                //console.log('group', group);

                columns.forEach(function (column, $columnIndex) {

                    if (group.hasOwnProperty('id') && column.hasOwnProperty('id')) {
                        if (group.id == column.id) {

                            if (bootsGroupStartMatching == null) {
                                bootsGroupStartMatching = {
                                    groupIndex: $groupIndex,
                                    columnIndex: $columnIndex
                                };

                                bootsGroup.push(group);
                            } else {
                                if ($groupIndex - bootsGroupStartMatching.groupIndex == $columnIndex - bootsGroupStartMatching.columnIndex) {
                                    bootsGroup.push(group);
                                }
                            }

                        }
                    } else {
                        if (group.hasOwnProperty('key') && column.hasOwnProperty('key')) {
                            if (group.key == column.key) {

                                if (bootsGroupStartMatching == null) {
                                    bootsGroupStartMatching = {
                                        groupIndex: $groupIndex,
                                        columnIndex: $columnIndex
                                    };

                                    bootsGroup.push(group);
                                } else {

                                    if ($groupIndex - bootsGroupStartMatching.groupIndex == $columnIndex - bootsGroupStartMatching.columnIndex) {
                                        bootsGroup.push(group);
                                    }
                                }
                            }
                        }
                    }


                });

            });

            //console.log('bootsGroupStartMatching', bootsGroupStartMatching);

        }

        function findPreInitGroup() {
            groups.forEach(function (group, $groupIndex) {
                columns.forEach(function (column, $columnIndex) {

                        //console.log('$groupIndex', $groupIndex);
                        //console.log('group', group);
                        //console.log('$columnIndex', $columnIndex);
                        //console.log('column', column);

                        if ($groupIndex == $columnIndex) {
                            if (bootsGroupStartMatching) {
                                if ($groupIndex < bootsGroupStartMatching.groupIndex) {


                                    if (group.hasOwnProperty('id') && column.hasOwnProperty('id')) {
                                        if (group.id !== column.id) {
                                            preInitGroups.push(group);
                                        }
                                    } else {
                                        if (group.hasOwnProperty('key') && column.hasOwnProperty('key')) {
                                            if (group.key !== column.key) {
                                                preInitGroups.push(group);
                                            }
                                        } else {
                                            preInitGroups.push(group);
                                        }
                                    }
                                }
                            }
                        }

                    }
                )
            });
        }

        function findLinesGroup() {
            groups.forEach(function (group, $groupIndex) {
                columns.forEach(function (column, $columnIndex) {
                    if (bootsGroupStartMatching && bootsGroupStartMatching.groupIndex !== null) {
                        if ($groupIndex > bootsGroupStartMatching.groupIndex + bootsGroup.length - 1) {
                            if (group.hasOwnProperty('id')) {
                                if (!isAdded(group, linesGroup, 'id')) {
                                    linesGroup.push(group);
                                }
                            } else {
                                if (!isAdded(group, linesGroup, 'key')) {
                                    linesGroup.push(group);
                                }
                            }
                        }
                    }

                })
            });
        }


        //items = extractDynamicAttributes(items);

        //console.log('TRANSFORMIN ITEMS WITH DYNAMIC ATTR PROPS', items);

        if (groups.length) {

            items.forEach(function (item, $index) {
                item._lid = $index;
            });

            findBootsGroup();
            findPreInitGroup();
            findLinesGroup();

            //console.log('preInitGroups', preInitGroups);
            //console.log('bootsGroup', bootsGroup);
            //console.log('linesGroup', linesGroup);

            var groups = {};

            if (preInitGroups.length) {

                var options = {
                    columns: columns
                };

                results = setGroups(items, preInitGroups, entityTypes, options);

                results.forEach(function (preInitGroupsItem) {

                    groups = {
                        preInitGroups: preInitGroups,
                        bootsGroup: bootsGroup,
                        linesGroup: linesGroup
                    };

                    preInitGroupsItem["boot_level_0"] = recursiveFillGroups(preInitGroupsItem.items, groups, entityTypes, {
                        boot: true,
                        breadcrumbs: true,
                        columns: columns
                    });

                });

            } else {

                groups = {
                    preInitGroups: preInitGroups,
                    bootsGroup: bootsGroup,
                    linesGroup: linesGroup
                };

                results = recursiveFillGroups(items, groups, entityTypes, {
                    boot: true,
                    breadcrumbs: true,
                    columns: columns
                });
            }

            console.log('results', results);

            return results;


        } else {
            return items;
        }

    };

    module.exports = {
        setGroups: setGroups,
        setGroupsWithColumns: setGroupsWithColumns,
        extractDynamicAttributes: extractDynamicAttributes
    }

}());

},{"../metaService":375,"../reportSubtotalService":382}],330:[function(require,module,exports){
/**
 * Created by szhitenev on 06.05.2016.
 */
(function () {

    'use strict';

    /*
     sort: {
     column: "name",
     direction: "DESC"
     }
     */

    var groupSort = function (items, sort) {

        var i, g, valA, valB;
        if (items.length && items[0].groups) {
            //console.log('sort ID', sort);
            items = items.sort(function (a, b) {

                console.log('a', a);
                console.log('b', b);

                for (i = 0; i < b.groups.length; i = i + 1) {
                    for (g = 0; g < a.groups.length; g = g + 1) {
                        if (b.groups[i].key === sort.key || b.groups[i].key === sort.name
                            && a.groups[g].key === sort.key || a.groups[g].key === sort.name) {
                            if (!!b.groups[i].value && !!a.groups[g].value) {

                                console.log('a.groups[g]', a.groups[g]);
                                console.log('b.groups[i].value]', b.groups[i].value);

                                valA = a.groups[g].value + '';
                                valA = valA.toLowerCase();

                                valB = b.groups[i].value + '';
                                valB = valB.toLowerCase();

                                if (sort.sort === 'DESC') {
                                    if (valA < valB) {
                                        return -1;
                                    }
                                    if (valA > valB) {
                                        return 1;
                                    }

                                    // names must be equal
                                    return 0;
                                }

                                if (sort.sort === 'ASC') {
                                    if (valA > valB) {
                                        return -1;
                                    }
                                    if (valA < valB) {
                                        return 1;
                                    }

                                    // names must be equal
                                    return 0;
                                }
                            } else {
                                return 0;
                            }
                        }
                    }
                }
            });
        }

        console.log("SORTED GROUPS", items);
        return items;

    };

    /*
     sort: {
     column: "name",
     direction: "DESC"
     }

     */

    function sortBasedOnId(items, sort) {
        return items.sort(function (a, b) {
            var nameA = a[sort.name].toLowerCase();
            var nameB = b[sort.name].toLowerCase();

            if (sort.sort === 'DESC') {
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }
                return 0;
            }

            if (sort.sort === 'ASC') {
                if (nameA > nameB) {
                    return -1;
                }
                if (nameA < nameB) {
                    return 1;
                }
                return 0;
            }
        })

    }

    function sortBaseOnKey(items, sort) {
        return items.sort(function (a, b) {
            var nameA;
            var nameB;
            if (typeof a[sort.key] === 'number') {
                nameA = a[sort.key];
                nameB = b[sort.key];
            }
            if (typeof a[sort.key] === 'string') {
                //nameA = a[sort.key].toLowerCase();
                //nameB = b[sort.key].toLowerCase();
                nameA = a[sort.key];
                nameB = b[sort.key];
            }


            if (sort.sort === 'DESC') {
                if (nameA < nameB) {
                    return -1;
                }
                if (nameA > nameB) {
                    return 1;
                }

                // names must be equal
                return 0;
            }

            if (sort.sort === 'ASC') {
                if (nameA > nameB) {
                    return -1;
                }
                if (nameA < nameB) {
                    return 1;
                }

                // names must be equal
                return 0;
            }


        })
    }


    var columnAdditionsSort = function (items, sort) {
        var g;
        if (sort.id) {
            //console.log('sort ID', sort);
            items = sortBasedOnId(items, sort)
        }
        if (sort.key) {
            items = sortBaseOnKey(items, sort)
        }
        //console.log('items', items);
        //console.log('sort', sort);

        return items;
    };

    var columnSort = function (items, sort) {
        //console.log('columnSort items', items);
        var g;
        if (items.length && items[0].groups) {
            if (sort.id) {
                //console.log('sort ID', sort);
                for (g = 0; g < items.length; g = g + 1) {
                    items[g].items = sortBasedOnId(items[g].items, sort)
                }
            }
            if (sort.key) {

                for (g = 0; g < items.length; g = g + 1) {
                    items[g].items = sortBaseOnKey(items[g].items, sort)
                }
            }
        } else {
            if (sort.id) {
                //console.log('sort ID', sort);
                items = sortBasedOnId(items, sort)
            }
            if (sort.key) {
                items = sortBaseOnKey(items, sort)
            }
        }

        console.log('columnSort items', items);
        console.log('sort', sort);

        return items;
    };

    module.exports = {
        group: {
            sort: groupSort
        },
        column: {
            additions: {
                sort: columnAdditionsSort
            },
            sort: columnSort
        }
    }

}());
},{}],331:[function(require,module,exports){
(function () {

    'use strict';

    var tableParts = {
        addEntityBtn: true
    };
    var setTablePartsSettings = function (entityType) {
        if (["transaction"].indexOf(entityType) !== -1 ||
            entityType.indexOf("audit") !== -1) {
            tableParts.addEntityBtn = false;
        }
        else {
           tableParts.addEntityBtn = true; 
        };
        return tableParts;
    };

    module.exports = {
        setTablePartsSettings: setTablePartsSettings
    }

}());
},{}],332:[function(require,module,exports){
/**
 * Created by szhitenev on 13.01.2017.
 */
(function () {

    'use strict';

    var helpRepository = require('../repositories/helpRepository');

    var getFunctionsHelp = function(){
        return helpRepository.getFunctionsHelp();
    };

    module.exports = {
        getFunctionsHelp: getFunctionsHelp
    }

}());
},{"../repositories/helpRepository":236}],333:[function(require,module,exports){
/**
 * Created by szhitenev on 04.08.2016.
 */
(function(){

    'use strict';

    var importInstrumentRepository = require('../repositories/importInstrumentRepository');

    var getInstrumentMappingList = function(){
        return importInstrumentRepository.getInstrumentMappingList();
    };

    module.exports = {
        getInstrumentMappingList: getInstrumentMappingList
    }

}());
},{"../repositories/importInstrumentRepository":237}],334:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var accountMappingRepository = require('../../repositories/import/accountMappingRepository');

    var getList = function () {
        return accountMappingRepository.getList();
    };

    var getByKey = function (id) {
        return accountMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return accountMappingRepository.create(map);
    };

    var update = function (id, map) {
        return accountMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return accountMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/accountMappingRepository":238}],335:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var accrualCalculationModelMappingRepository = require('../../repositories/import/accrualCalculationModelMappingRepository');

    var getList = function () {
        return accrualCalculationModelMappingRepository.getList();
    };

    var getByKey = function (id) {
        return accrualCalculationModelMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return accrualCalculationModelMappingRepository.create(map);
    };

    var update = function (id, map) {
        return accrualCalculationModelMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return accrualCalculationModelMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/accrualCalculationModelMappingRepository":239}],336:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var counterpartyMappingRepository = require('../../repositories/import/counterpartyMappingRepository');

    var getList = function () {
        return counterpartyMappingRepository.getList();
    };

    var getByKey = function (id) {
        return counterpartyMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return counterpartyMappingRepository.create(map);
    };

    var update = function (id, map) {
        return counterpartyMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return counterpartyMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/counterpartyMappingRepository":240}],337:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var currencyMappingRepository = require('../../repositories/import/currencyMappingRepository');

    var getList = function () {
        return currencyMappingRepository.getList();
    };

    var getByKey = function (id) {
        return currencyMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return currencyMappingRepository.create(map);
    };

    var update = function (id, map) {
        return currencyMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return currencyMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/currencyMappingRepository":241}],338:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var dailyPricingModelMappingRepository = require('../../repositories/import/dailyPricingModelMappingRepository');

    var getList = function () {
        return dailyPricingModelMappingRepository.getList();
    };

    var getByKey = function (id) {
        return dailyPricingModelMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return dailyPricingModelMappingRepository.create(map);
    };

    var update = function (id, map) {
        return dailyPricingModelMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return dailyPricingModelMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/dailyPricingModelMappingRepository":242}],339:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var dataProvidersRepository = require('../../repositories/import/dataProvidersRepository');

    var getList = function () {
        return dataProvidersRepository.getList();
    };

    var getConfig = function (providerId) {
        return dataProvidersRepository.getConfig(providerId);
    };

    var setConfig = function (providerId, provider) {
        return dataProvidersRepository.setConfig(providerId, provider);
    };

    module.exports = {
        getList: getList,
        getConfig: getConfig,
        setConfig: setConfig
    }

}());
},{"../../repositories/import/dataProvidersRepository":243}],340:[function(require,module,exports){
/**
 * Created by szhitenev on 22.08.2016.
 */
(function(){

    'use strict';

    var importInstrumentRepository = require('../../repositories/import/importInstrumentRepository');

    var startImport = function(config){
        return importInstrumentRepository.startImport(config);
    };

    module.exports = {
        startImport: startImport
    }

}());
},{"../../repositories/import/importInstrumentRepository":244}],341:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var importPriceDownloadSchemeRepository = require('../../repositories/import/importPriceDownloadSchemeRepository');

    var getList = function (options) {
        return importPriceDownloadSchemeRepository.getList(options);
    };

    var getByKey = function (id) {
        return importPriceDownloadSchemeRepository.getByKey(id);
    };

    var create = function(account) {
        return importPriceDownloadSchemeRepository.create(account);
    };

    var update = function(id, account) {
        return importPriceDownloadSchemeRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return importPriceDownloadSchemeRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../../repositories/import/importPriceDownloadSchemeRepository":245}],342:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function(){

    'use strict';

    var importPricingRepository = require('../../repositories/import/importPricingRepository');

    var create = function(price){
        return importPricingRepository.create(price);
    };


    module.exports = {
        create: create
    }

}());
},{"../../repositories/import/importPricingRepository":246}],343:[function(require,module,exports){
/**
 * Created by szhitenev on 22.08.2016.
 */
(function(){

    'use strict';

    var importTransactionRepository = require('../../repositories/import/importTransactionRepository');

    var startImport = function(config){
        return importTransactionRepository.startImport(config);
    };

    module.exports = {
        startImport: startImport
    }

}());
},{"../../repositories/import/importTransactionRepository":247}],344:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var instrumentAttributeTypeMappingRepository = require('../../repositories/import/instrumentAttributeTypeMappingRepository');

    var getList = function () {
        return instrumentAttributeTypeMappingRepository.getList();
    };

    var getByKey = function (id) {
        return instrumentAttributeTypeMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return instrumentAttributeTypeMappingRepository.create(map);
    };

    var update = function (id, map) {
        return instrumentAttributeTypeMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return instrumentAttributeTypeMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/instrumentAttributeTypeMappingRepository":248}],345:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var instrumentMappingRepository = require('../../repositories/import/instrumentMappingRepository');

    var getList = function () {
        return instrumentMappingRepository.getList();
    };

    var getByKey = function (id) {
        return instrumentMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return instrumentMappingRepository.create(map);
    };

    var update = function (id, map) {
        return instrumentMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return instrumentMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/instrumentMappingRepository":249}],346:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var instrumentPeriodicityMappingRepository = require('../../repositories/import/instrumentPeriodicityMappingRepository');

    var getList = function () {
        return instrumentPeriodicityMappingRepository.getList();
    };

    var getByKey = function (id) {
        return instrumentPeriodicityMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return instrumentPeriodicityMappingRepository.create(map);
    };

    var update = function (id, map) {
        return instrumentPeriodicityMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return instrumentPeriodicityMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/instrumentPeriodicityMappingRepository":250}],347:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var instrumentSchemeRepository = require('../../repositories/import/instrumentSchemeRepository');

    var getList = function (providerId) {
        return instrumentSchemeRepository.getList(providerId);
    };

    var create = function (scheme) {
        return instrumentSchemeRepository.create(scheme);
    };

    var getByKey = function(id) {
        return instrumentSchemeRepository.getByKey(id);
    };

    var update = function(id, scheme) {
        return instrumentSchemeRepository.update(id, scheme);
    };

    var deleteByKey = function(id) {
        return instrumentSchemeRepository.deleteByKey(id)
    };

    module.exports = {
        getList: getList,
        create: create,
        getByKey: getByKey,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/instrumentSchemeRepository":251}],348:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var instrumentTypeMappingRepository = require('../../repositories/import/instrumentTypeMappingRepository');

    var getList = function () {
        return instrumentTypeMappingRepository.getList();
    };

    var getByKey = function (id) {
        return instrumentTypeMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return instrumentTypeMappingRepository.create(map);
    };

    var update = function (id, map) {
        return instrumentTypeMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return instrumentTypeMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/instrumentTypeMappingRepository":252}],349:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var paymentSizeDetailMappingRepository = require('../../repositories/import/paymentSizeDetailMappingRepository');

    var getList = function () {
        return paymentSizeDetailMappingRepository.getList();
    };

    var getByKey = function (id) {
        return paymentSizeDetailMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return paymentSizeDetailMappingRepository.create(map);
    };

    var update = function (id, map) {
        return paymentSizeDetailMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return paymentSizeDetailMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/paymentSizeDetailMappingRepository":253}],350:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var portfolioMappingRepository = require('../../repositories/import/portfolioMappingRepository');

    var getList = function () {
        return portfolioMappingRepository.getList();
    };

    var getByKey = function (id) {
        return portfolioMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return portfolioMappingRepository.create(map);
    };

    var update = function (id, map) {
        return portfolioMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return portfolioMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/portfolioMappingRepository":254}],351:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var priceDownloadSchemeMappingRepository = require('../../repositories/import/priceDownloadSchemeMappingRepository');

    var getList = function () {
        return priceDownloadSchemeMappingRepository.getList();
    };

    var getByKey = function (id) {
        return priceDownloadSchemeMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return priceDownloadSchemeMappingRepository.create(map);
    };

    var update = function (id, map) {
        return priceDownloadSchemeMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return priceDownloadSchemeMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/priceDownloadSchemeMappingRepository":255}],352:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var priceDownloadSchemeRepository = require('../../repositories/import/priceDownloadSchemeRepository');

    var getList = function () {
        return priceDownloadSchemeRepository.getList();
    };

    var getByKey = function (id) {
        return priceDownloadSchemeRepository.getByKey(id);
    };

    var create = function (map) {
        return priceDownloadSchemeRepository.create(map);
    };

    var update = function (id, map) {
        return priceDownloadSchemeRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return priceDownloadSchemeRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/priceDownloadSchemeRepository":256}],353:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function(){

    'use strict';

    var pricingAutomatedScheduleRepository = require('../../repositories/import/pricingAutomatedScheduleRepository');

    var updateSchedule = function(schedule){
        return pricingAutomatedScheduleRepository.updateSchedule(schedule);
    };

    var getSchedule = function(){
        return pricingAutomatedScheduleRepository.getSchedule();
    };

    module.exports = {
        getSchedule: getSchedule,
        updateSchedule: updateSchedule
    }

}());
},{"../../repositories/import/pricingAutomatedScheduleRepository":257}],354:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var responsibleMappingRepository = require('../../repositories/import/responsibleMappingRepository');

    var getList = function () {
        return responsibleMappingRepository.getList();
    };

    var getByKey = function (id) {
        return responsibleMappingRepository.getByKey(id);
    };

    var create = function (map) {
        return responsibleMappingRepository.create(map);
    };

    var update = function (id, map) {
        return responsibleMappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return responsibleMappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/responsibleMappingRepository":258}],355:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var scheduleRepository = require('../../repositories/import/scheduleRepository');

    var getAccrualScheduleDownloadMethodList = function () {
        return scheduleRepository.getAccrualScheduleDownloadMethodList();
    };

    var getFactorScheduleDownloadMethodList = function () {
        return scheduleRepository.getFactorScheduleDownloadMethodList();
    };

    module.exports = {
        getAccrualScheduleDownloadMethodList: getAccrualScheduleDownloadMethodList,
        getFactorScheduleDownloadMethodList: getFactorScheduleDownloadMethodList
    }

}());
},{"../../repositories/import/scheduleRepository":259}],356:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var strategy1MappingRepository = require('../../repositories/import/strategy1MappingRepository');

    var getList = function () {
        return strategy1MappingRepository.getList();
    };

    var getByKey = function (id) {
        return strategy1MappingRepository.getByKey(id);
    };

    var create = function (map) {
        return strategy1MappingRepository.create(map);
    };

    var update = function (id, map) {
        return strategy1MappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return strategy1MappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/strategy1MappingRepository":260}],357:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var strategy2MappingRepository = require('../../repositories/import/strategy2MappingRepository');

    var getList = function () {
        return strategy2MappingRepository.getList();
    };

    var getByKey = function (id) {
        return strategy2MappingRepository.getByKey(id);
    };

    var create = function (map) {
        return strategy2MappingRepository.create(map);
    };

    var update = function (id, map) {
        return strategy2MappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return strategy2MappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/strategy2MappingRepository":261}],358:[function(require,module,exports){
/**
 * Created by szhitenev on 19.08.2016.
 */
(function () {

    'use strict';

    var strategy3MappingRepository = require('../../repositories/import/strategy3MappingRepository');

    var getList = function () {
        return strategy3MappingRepository.getList();
    };

    var getByKey = function (id) {
        return strategy3MappingRepository.getByKey(id);
    };

    var create = function (map) {
        return strategy3MappingRepository.create(map);
    };

    var update = function (id, map) {
        return strategy3MappingRepository.update(id, map);
    };

    var deleteByKey = function (id) {
        return strategy3MappingRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/strategy3MappingRepository":262}],359:[function(require,module,exports){
/**
 * Created by szhitenev on 17.08.2016.
 */
(function () {

    'use strict';

    var transactionSchemeRepository = require('../../repositories/import/transactionSchemeRepository');

    var getList = function () {
        return transactionSchemeRepository.getList();
    };

    var create = function (scheme) {
        return transactionSchemeRepository.create(scheme);
    };

    var getByKey = function(id) {
        return transactionSchemeRepository.getByKey(id);
    };

    var update = function(id, scheme) {
        return transactionSchemeRepository.update(id, scheme);
    };

    var deleteByKey = function(id) {
        return transactionSchemeRepository.deleteByKey(id)
    };

    module.exports = {
        getList: getList,
        create: create,
        getByKey: getByKey,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../../repositories/import/transactionSchemeRepository":263}],360:[function(require,module,exports){
/**
 * Created by szhitenev on 26.08.2016.
 */
(function () {

    'use strict';

    var instrumentPeriodicityRepository = require('../repositories/instrumentPeriodicityRepository');

    var getList = function () {
        return instrumentPeriodicityRepository.getList();
    };

    module.exports = {
        getList: getList
    }

}());
},{"../repositories/instrumentPeriodicityRepository":264}],361:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var instrumentRepository = require('../repositories/instrumentRepository');

    var getList = function (options) {
        return instrumentRepository.getList(options);
    };

    var getByKey = function (id) {
        return instrumentRepository.getByKey(id);
    };

    var create = function(instrument) {
        return instrumentRepository.create(instrument);
    };

    var update = function(id, instrument) {
        return instrumentRepository.update(id, instrument);
    };

    var deleteByKey = function (id) {
        return instrumentRepository.deleteByKey(id);
    };

    var updateBulk = function(instruments) {
        return instrumentRepository.updateBulk(instruments);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }


}());
},{"../repositories/instrumentRepository":265}],362:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var instrumentTypeRepository = require('../repositories/instrumentTypeRepository');

    var getList = function (options) {
        return instrumentTypeRepository.getList(options);
    };

    var getByKey = function (id) {
        return instrumentTypeRepository.getByKey(id);
    };

    var create = function(account) {
        return instrumentTypeRepository.create(account);
    };

    var update = function(id, account) {
        return instrumentTypeRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return instrumentTypeRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/instrumentTypeRepository":266}],363:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var instrumentAttributeTypeRepository = require('../../repositories/instrument/instrumentAttributeTypeRepository');

    var getByKeyItems = {};

    var getList = function (options) {
        return instrumentAttributeTypeRepository.getList(options);
    };

    var getListByAttributeType = function (value_types) {
        return instrumentAttributeTypeRepository.getListByAttributeType(value_types);
    };

    var getByKey = function (id) {
        return instrumentAttributeTypeRepository.getByKey(id);
    };

    var getByKeyAttr = function (id) {
        if (!getByKeyItems['id_' + id]) {
            return instrumentAttributeTypeRepository.getByKey(id);
        } else {
            return Promise(function (resolve, reject) {
                resolve(getByKeyItems['id_' + id]);
            })
        }
    };

    var create = function (account) {
        return instrumentAttributeTypeRepository.create(account);
    };

    var update = function (id, account) {
        return instrumentAttributeTypeRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return instrumentAttributeTypeRepository.deleteByKey(id);
    };

    module.exports = {
        getList: getList,
        getListByAttributeType: getListByAttributeType,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        singleton: {
            getByKeyAttr: getByKeyAttr
        }
    }


}());
},{"../../repositories/instrument/instrumentAttributeTypeRepository":267}],364:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var instrumentDailyPricingModelRepository = require('../../repositories/instrument/instrumentDailyPricingModelRepository');

    var getList = function (options) {
        return instrumentDailyPricingModelRepository.getList(options);
    };

    var getByKey = function (id) {
        return instrumentDailyPricingModelRepository.getByKey(id);
    };

    var create = function(account) {
        return instrumentDailyPricingModelRepository.create(account);
    };

    var update = function(id, account) {
        return instrumentDailyPricingModelRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return instrumentDailyPricingModelRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../../repositories/instrument/instrumentDailyPricingModelRepository":269}],365:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var instrumentEventScheduleConfigRepository = require('../../repositories/instrument/instrumentEventScheduleConfigRepository');

    var getList = function (options) {
        return instrumentEventScheduleConfigRepository.getList(options);
    };

    var getByKey = function (id) {
        return instrumentEventScheduleConfigRepository.getByKey(id);
    };

    var create = function(account) {
        return instrumentEventScheduleConfigRepository.create(account);
    };

    var update = function(id, account) {
        return instrumentEventScheduleConfigRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return instrumentEventScheduleConfigRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../../repositories/instrument/instrumentEventScheduleConfigRepository":270}],366:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var instrumentPaymentSizeDetailRepository = require('../../repositories/instrument/instrumentPaymentSizeDetailRepository');

    var getList = function (options) {
        return instrumentPaymentSizeDetailRepository.getList(options);
    };

    module.exports = {
        getList: getList
    }


}());
},{"../../repositories/instrument/instrumentPaymentSizeDetailRepository":271}],367:[function(require,module,exports){
/**
 * Created by szhitenev on 20.09.2016.
 */
(function () {

    'use strict';

    var instrumentRecalculateAccruedPriceRepository = require('../../repositories/instrument/instrumentRecalculateAccruedPriceRepository');

    var recalculate = function (dateFrom, dateTo) {
        return instrumentRecalculateAccruedPriceRepository.recalculate(dateFrom, dateTo);
    };

    module.exports = {
        recalculate: recalculate
    }

}());
},{"../../repositories/instrument/instrumentRecalculateAccruedPriceRepository":272}],368:[function(require,module,exports){
/**
 * Created by szhitenev on 01.06.2016.
 */
(function(){

    'use strict';

    var getLayoutAttrs = function() {
        return [
            {
                key: 'layoutLine',
                name: 'Line',
                "value_type": 'decoration'
            },
            {
                key: 'layoutLineWithLabel',
                name: 'Labeled Line',
                "value_type": 'decoration'
            }
        ]
    };

    module.exports = {
        getLayoutAttrs: getLayoutAttrs
    }

}());
},{}],369:[function(require,module,exports){
(function() {
	'use strict';

	var membersAndGroupsRepository = require('../repositories/membersAndGroupsRepository');

	var getList = function (type) {
		return membersAndGroupsRepository.getList(type);
	};

	var getMemberOrGroupByKey = function (type, id) {
		return membersAndGroupsRepository.getMemberOrGroupByKey(type, id);
	}

	var create = function (type, data) {
		return membersAndGroupsRepository.create(type, data);
	}

	var update = function (type, id, data) {
		return membersAndGroupsRepository.update(type, id, data);
	};

	var deleteByKey = function (type, id) {
		return membersAndGroupsRepository.deleteByKey(type, id);
	};

	module.exports = {
		getList: getList,
		getMemberOrGroupByKey: getMemberOrGroupByKey,
		create: create,
		update: update,
		deleteByKey: deleteByKey
	}
}());
},{"../repositories/membersAndGroupsRepository":273}],370:[function(require,module,exports){
/**
 * Created by szhitenev on 12.09.2016.
 */
(function () {

    var metaContentTypesRepository = require('../repositories/metaContentTypesRepository');

    var getListForTags = function (entity) {
        return metaContentTypesRepository.getListForTags(entity);
    };

    var getListForUi = function () {
        return metaContentTypesRepository.getListForUi();
    };

    var findContentTypeByEntity = function (entity, type) {

        var contentTypes;
        if (type == 'tag') {
            contentTypes = getListForTags();
        } else {
            if (type == 'ui') {
                contentTypes = getListForUi();
            }
        }

        var contentType = null;

        contentTypes.forEach(function (item) {
            if (item.entity == entity) {
                contentType = item.key
            }
        });

        return contentType;
    };

    var findEntityByContentType = function (contentType, type) {

        var contentTypes;
        if (type == 'tag') {
            contentTypes = getListForTags();
        } else {
            if (type == 'ui') {
                contentTypes = getListForUi();
            }
        }

        var entity = null;

        contentTypes.forEach(function (item) {
            if (item.key == contentType) {
                entity = item.entity
            }
        });

        return entity;

    };

    var getListForTransactionTypeInputs = function () {
        return metaContentTypesRepository.getListForTransactionTypeInputs();
    };

    var getContentTypeUIByState = function (state) {

        var result = '';

        console.log('state', state);

        if (state.indexOf('app.data') !== -1 || state.indexOf('app.reports') !== -1) {

            result = state.split('.')[2];
        }

        if(state == 'app.dashboard') {
            result = state.split('.')[1];
        }


        console.log('result 3232', result);

        return result;

    };


    module.exports = {
        getListForTags: getListForTags,
        getListForUi: getListForUi,

        findContentTypeByEntity: findContentTypeByEntity,
        findEntityByContentType: findEntityByContentType,

        getListForTransactionTypeInputs: getListForTransactionTypeInputs,

        getContentTypeUIByState: getContentTypeUIByState
    }


}());
},{"../repositories/metaContentTypesRepository":274}],371:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function(){

    'use strict';

    var metaEventClassRepository = require('../repositories/metaEventClassRepository');

    var getList = function(){
        return metaEventClassRepository.getList();
    };

    module.exports = {
        getList: getList
    }

}());
},{"../repositories/metaEventClassRepository":275}],372:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function(){

    'use strict';

    var metaNotificationClassRepository = require('../repositories/metaNotificationClassRepository');

    var getList = function(){
        return metaNotificationClassRepository.getList();
    };

    module.exports = {
        getList: getList
    }

}());
},{"../repositories/metaNotificationClassRepository":276}],373:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function(){

    'use strict';

    var metaPermissionsRepository = require('../repositories/metaPermissionsRepository');

    var getEntitiesWithDisabledPermissions = function(){
        return metaPermissionsRepository.getEntitiesWithDisabledPermissions();
    };

    module.exports = {
        getEntitiesWithDisabledPermissions: getEntitiesWithDisabledPermissions
    }

}());
},{"../repositories/metaPermissionsRepository":277}],374:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function(){

    'use strict';

    var metaRestrictionsRepository = require('../repositories/metaRestrictionsRepository');

    var getEntitiesWithoutDynamicAttrsList = function () {
        return metaRestrictionsRepository.getEntitiesWithoutDynamicAttrsList();
    };

    var getEntitiesWithoutBaseAttrsList = function () {
        return metaRestrictionsRepository.getEntitiesWithoutBaseAttrsList();
    };

    var getRestrictedEntitiesWithTypeField = function () {
        return metaRestrictionsRepository.getEntitiesWithoutBaseAttrsList();
    };

    module.exports = {
        getEntitiesWithoutDynamicAttrsList: getEntitiesWithoutDynamicAttrsList,
        getEntitiesWithoutBaseAttrsList: getEntitiesWithoutBaseAttrsList,
        getRestrictedEntitiesWithTypeField: getRestrictedEntitiesWithTypeField
    }

}());
},{"../repositories/metaRestrictionsRepository":279}],375:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var metaRepository = require('../repositories/metaRepository');

    var getMenu = function () {
        return metaRepository.getMenu();
    };

    var getBaseAttrs = function () {
        return metaRepository.getBaseAttrs();
    };

    var getEntityAttrs = function (entity) {
        return metaRepository.getEntityAttrs(entity);
    };

    var getValueTypes = function () {
        return metaRepository.getValueTypes();
    };

    var getEntitiesWithoutBaseAttrsList = function () {
        return metaRepository.getEntitiesWithoutBaseAttrsList();
    };

    var getEntitiesWithoutDynAttrsList = function () {
        return metaRepository.getEntitiesWithoutDynAttrsList();
    };

    var getRestrictedEntitiesWithTypeField = function () {
        return metaRepository.getRestrictedEntitiesWithTypeField();
    };

    var getTypeCaptions = function () {
        var filteredValueTypes = getValueTypes();
        //var filteredValueTypes = getValueTypes().filter(function (item) {
        //	// return item.value !== 'field' && item.value !== 'decoration';
        //	return item.value !== 'field';
        //});
        var typeCaptions = filteredValueTypes.map(function (item) {
            switch (item['display_name']) {
                case 'Number':
                    // item['caption_name'] = 'Integer';
                    item['caption_name'] = 'Whole number';
                    break;
                case 'Float':
                    item['caption_name'] = 'Number with decimals';
                    break;
                case 'Classifier':
                    item['caption_name'] = 'Classification';
                    break;
                case 'Field':
                    item['caption_name'] = 'Reference';
                    break;
                case 'String':
                    item['caption_name'] = 'Text';
                    break;
                case 'Boolean':
                    item['caption_name'] = 'True/False';
                    break;
                case 'Decoration':
                    item['caption_name'] = 'Decoration';
                    break;
                default:
                    item['caption_name'] = item['display_name'];
                    break;
            }
            return item;
        });
        //console.log(typeCaptions);
        return typeCaptions;
    };

    var groups = {
        "groupOne": "400px",
        "groupTwo": "600px",
        "groupThree": "300px",
        "groupFour": "450px",
        "groupFive": "200px",
        "newColumnAdded": false
    };

    var getDynamicAttrsValueTypes = function () {
        return metaRepository.getDynamicAttrsValueTypes();
    };

    var getDynamicAttrsValueTypesCaptions = function () {
        var filteredValueTypes = getDynamicAttrsValueTypes();
        //var filteredValueTypes = getValueTypes().filter(function (item) {
        //	// return item.value !== 'field' && item.value !== 'decoration';
        //	return item.value !== 'field';
        //});
        var typeCaptions = filteredValueTypes.map(function (item) {
            switch (item['display_name']) {
                case 'Number':
                    item['caption_name'] = 'Number with decimals';
                    break;
                case 'Classifier':
                    item['caption_name'] = 'Classification';
                    break;
                case 'Date':
                    item['caption_name'] = 'Date';
                    break;
                case 'String':
                    item['caption_name'] = 'Text';
                    break;
            }
            return item;
        });
        //console.log(typeCaptions);
        return typeCaptions;
    };

    var columnsWidthGroups = function (newColumn) {

        if (typeof newColumn === "boolean") {
            groups["newColumnAdded"] = newColumn;
        }
        else {
            return groups;
        }
    };

    var checkRestrictedEntityTypesForAM = function (entityType) {
        switch (entityType) {
            case "portfolio":
            case "account":
            case "counterparty":
            case "responsible":
            case "instrument":
            case "transaction":
            case "complex-transaction":
            case "strategies":
                return true;
                break;
            default:
                return false;
        }
    };

    var getEntityTabs = function (entityType) {
        return metaRepository.getEntityTabs(entityType);
    };

    var getEntitiesWithSimpleFields = function () {
        return metaRepository.getEntitiesWithSimpleFields();
    };

    var getFieldsWithTagGrouping = function(){
        return metaRepository.getFieldsWithTagGrouping();
    };

    module.exports = {
        getMenu: getMenu,
        getBaseAttrs: getBaseAttrs,
        getEntityAttrs: getEntityAttrs,
        getValueTypes: getValueTypes,
        getDynamicAttrsValueTypes: getDynamicAttrsValueTypes,
        getDynamicAttrsValueTypesCaptions: getDynamicAttrsValueTypesCaptions,
        getEntitiesWithoutBaseAttrsList: getEntitiesWithoutBaseAttrsList,
        getEntitiesWithoutDynAttrsList: getEntitiesWithoutDynAttrsList,
        getRestrictedEntitiesWithTypeField: getRestrictedEntitiesWithTypeField,
        getTypeCaptions: getTypeCaptions,
        columnsWidthGroups: columnsWidthGroups,
        getEntityTabs: getEntityTabs,
        getEntitiesWithSimpleFields: getEntitiesWithSimpleFields,
        checkRestrictedEntityTypesForAM: checkRestrictedEntityTypesForAM,
        getFieldsWithTagGrouping: getFieldsWithTagGrouping
    }

}());
},{"../repositories/metaRepository":278}],376:[function(require,module,exports){
/**
 * Created by szhitenev on 14.06.2016.
 */
(function(){

    'use strict';

    var notificationsRepository = require('../repositories/notificationsRepository');

    var getList = function(page, type) {
        return notificationsRepository.getList(page, type);
    };

    var markAsReaded = function (url, data) {
    	return notificationsRepository.markAsReaded(url, data);
    }

    var markAllAsReaded = function () {
    	return notificationsRepository.markAllAsReaded();
    }

    module.exports = {
        getList: getList,
        markAsReaded: markAsReaded, 
        markAllAsReaded: markAllAsReaded
    }

}());
},{"../repositories/notificationsRepository":280}],377:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var portfolioRepository = require('../repositories/portfolioRepository');

    var getClassifierNodeList = function () {
        return portfolioRepository.getClassifierNodeList();
    };

    var getClassifierNodeByKey = function (id) {
        return portfolioRepository.getClassifierNodeByKey(id);
    };

    var getClassifierList = function () {
        return portfolioRepository.getClassifierList();
    };

    var getClassifierByKey = function (id) {
        return portfolioRepository.getClassifierByKey(id);
    };

    var getList = function (options) {
        return portfolioRepository.getList(options);
    };

    var getByKey = function (id) {
        return portfolioRepository.getByKey(id);
    };

    var create = function (portfolio) {
        return portfolioRepository.create(portfolio);
    };

    var update = function (id, portfolio) {
        return portfolioRepository.update(id, portfolio);
    };

    var deleteByKey = function (id) {
        return portfolioRepository.deleteByKey(id);
    };

    var updateBulk = function (portfolios) {
        return portfolioRepository.updateBulk(portfolios);
    };

    module.exports = {
        getClassifierNodeList: getClassifierNodeList,
        getClassifierNodeByKey: getClassifierNodeByKey,

        getClassifierList: getClassifierList,
        getClassifierByKey: getClassifierByKey,

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,

        updateBulk: updateBulk
    }


}());
},{"../repositories/portfolioRepository":281}],378:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var priceHistoryRepository = require('../repositories/priceHistoryRepository');

    var getList = function(options) {
        return priceHistoryRepository.getList(options);
    };

    var getByKey = function (id) {
        return priceHistoryRepository.getByKey(id);
    };

    var create = function(account) {
        return priceHistoryRepository.create(account);
    };

    var update = function(id, account) {
        return priceHistoryRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return priceHistoryRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/priceHistoryRepository":282}],379:[function(require,module,exports){
/**
 * Created by szhitenev on 25.08.2016.
 */
(function () {

    'use strict';

    var pricingPolicyRepository = require('../repositories/pricingPolicyRepository');

    var getList = function (options) {
        return pricingPolicyRepository.getList(options);
    };

    var getByKey = function (id) {
        return pricingPolicyRepository.getByKey(id);
    };

    var create = function (policy) {
        return pricingPolicyRepository.create(policy);
    };

    var update = function (id, policy) {
        return pricingPolicyRepository.update(id, policy);
    };

    var deleteByKey = function (id) {
        return pricingPolicyRepository.deleteByKey(id);
    };

    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }

}());
},{"../repositories/pricingPolicyRepository":283}],380:[function(require,module,exports){
(function () {

    'use strict';

    var events = {};

    var emit = function (eventName) {

        //console.log(' emit events', events);

        if (!events.hasOwnProperty(eventName)) {
            events[eventName] = {listeners: []};
        }

        if (events[eventName].listeners.length) {
            events[eventName].listeners.forEach(function (action) {
                action();
            })
        } else {
            console.warn('Event ' + eventName + ' is not listening');
        }


    };

    var on = function (eventName, action) {

        //console.log('on events', events);

        if (!events.hasOwnProperty(eventName)) {
            events[eventName] = {listeners: []};
        }

        events[eventName].listeners.push(action);

    };

    var destroy = function (eventName) {

        //console.log('events', events);

        delete events[eventName];
    };

    module.exports = {
        emit: emit,
        on: on,
        destroy: destroy
    }

}());
},{}],381:[function(require,module,exports){
/**
 * Created by szhitenev on 16.11.2016.
 */
(function () {

    'use strict';

    var reportRepository = require('../repositories/reportRepository');

    var getList = function (options) {
        return reportRepository.getList(options);
    };

    var getBalanceReport = function (options) {
        return reportRepository.getBalanceReport(options);
    };

    var getPnlReport = function (options) {
        return reportRepository.getPnlReport(options);
    };

    var getCashFlowProjectionReport = function (options) {
        return reportRepository.getCashFlowProjectionReport(options);
    };

    var getTransactionReport = function (options) {
        return reportRepository.getTransactionReport(options);
    };

    var getPerformanceReport = function (options) {
        return reportRepository.getPerformanceReport(options);
    };

    module.exports = {
        getList: getList,
        getBalanceReport: getBalanceReport,
        getPnlReport: getPnlReport,
        getCashFlowProjectionReport: getCashFlowProjectionReport,
        getTransactionReport: getTransactionReport,
        getPerformanceReport: getPerformanceReport
    }

}());
},{"../repositories/reportRepository":284}],382:[function(require,module,exports){
/**
 * Created by szhitenev on 23.11.2016.
 */
(function () {

    'use strict';

    function sum(calculatedColumns, column, group) {

        //console.log('calculatedColumns', calculatedColumns);
        //console.log('column', column);
        //console.log('group', group);

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            calculatedColumns[column.key] = calculatedColumns[column.key] + parseFloat(groupedItem[column.key]);

        });

    }

    function weightedMarketValue(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["market_value"]));
            }

        });

    }

    function weightedMarketValuePercent(calculatedColumns, column, group) {
        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value_percent"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["market_value_percent"]));
            }

        });
    }

    function weightedExposure(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["exposure"]));
            }

        });

    }

    function weightedExposurePercent(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure_percent"]) {

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * groupedItem["exposure_percent"]));
            }

        });

    }

    function weightedAverageMarketValue(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value"]) {
                total = total + groupedItem["market_value"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value"]) {

                var average = groupedItem["market_value"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });

    }

    function weightedAverageMarketValuePercent(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value_percent"]) {
                total = total + groupedItem["market_value_percent"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["market_value_percent"]) {

                var average = groupedItem["market_value_percent"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });


    }

    function weightedAverageExposure(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure"]) {
                total = total + groupedItem["exposure"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure"]) {

                var average = groupedItem["exposure"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });

    }

    function weightedAverageExposurePercent(calculatedColumns, column, group) {

        if (!calculatedColumns[column.key]) {
            calculatedColumns[column.key] = 0;
        }

        var total = 0;

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure_percent"]) {
                total = total + groupedItem["exposure_percent"];
            }

        });

        group.items.forEach(function (groupedItem) {

            if (groupedItem["exposure_percent"]) {

                var average = groupedItem["exposure_percent"] / total;

                calculatedColumns[column.key] = calculatedColumns[column.key] + (parseFloat(groupedItem[column.key] * average));
            }

        });

    }

    function resolveSubtotalFunction(calculatedColumns, column, group) {

        if (column.report_settings && column.report_settings.subtotal_formula_id) {

            switch (column.report_settings.subtotal_formula_id) {
                case 1:
                    sum(calculatedColumns, column, group);
                    break;
                case 2:
                    weightedMarketValue(calculatedColumns, column, group);
                    break;
                case 3:
                    weightedMarketValuePercent(calculatedColumns, column, group);
                    break;
                case 4:
                    weightedExposure(calculatedColumns, column, group);
                    break;
                case 5:
                    weightedExposurePercent(calculatedColumns, column, group);
                    break;
                case 6:
                    weightedAverageMarketValue(calculatedColumns, column, group);
                    break;
                case 7:
                    weightedAverageMarketValuePercent(calculatedColumns, column, group);
                    break;
                case 8:
                    weightedAverageExposure(calculatedColumns, column, group);
                    break;
                case 9:
                    weightedAverageExposurePercent(calculatedColumns, column, group);
                    break;
            }
        }


    }


    var calcColumnSubTotal = function (group, columns) {

        var calculatedColumns = {};

        columns.forEach(function (column) {

            if (column.value_type == 'float') {

                resolveSubtotalFunction(calculatedColumns, column, group);
            }
        });

        return calculatedColumns;
    };

    var groupByAndCalc = function (items, options) {

        var groups = [];

        if (options.calculationGroup) {

            items.forEach(function (item) {

                if (groups.length) {

                    var exist = false;

                    groups.forEach(function (groupItem) {
                        if (groupItem.name == options.calculationGroup + '_' + item[options.calculationGroup + '_object'].id) {
                            groupItem.items.push(item);
                            exist = true;
                        }
                    });

                    if (!exist) {
                        groups.push({
                            name: options.calculationGroup + '_' + item[options.calculationGroup + '_object'].id,
                            items: [item]
                        });
                    }

                } else {
                    groups.push({
                        name: options.calculationGroup + '_' + item[options.calculationGroup + '_object'].id,
                        items: [item]
                    });
                }

            });

        } else {
            groups.push({name: '', items: items});
        }

        groups.forEach(function (group) {

            var marketValueTotal = 0;
            var exposureValueTotal = 0;

            group.items.forEach(function (item) {
                marketValueTotal = marketValueTotal + item.market_value;
                exposureValueTotal = exposureValueTotal + item.exposure;
            });

            //console.log('marketValueTotal', marketValueTotal);
            //console.log('exposureValueTotal', exposureValueTotal);

            group.items.forEach(function (item) {

                if (marketValueTotal != 0) {
                    item.market_value_percent = item.market_value / marketValueTotal * 100;
                } else {
                    item.market_value_percent = 0;
                }
                if (exposureValueTotal != 0) {
                    item.exposure_percent = item.exposure / exposureValueTotal * 100;
                } else {
                    item.exposure_percent = 0;
                }
            })


        });


        return items;
    };

    module.exports = {
        calcColumnSubTotal: calcColumnSubTotal,
        groupByAndCalc: groupByAndCalc
    }

}());
},{}],383:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var balanceReportCustomAttrRepository = require('../../repositories/reports/balanceReportCustomAttrRepository');

    var getList = function (options) {
        return balanceReportCustomAttrRepository.getList(options);
    };

    var getByKey = function (id) {
        return balanceReportCustomAttrRepository.getByKey(id);
    };

    var create = function(account) {
        return balanceReportCustomAttrRepository.create(account);
    };

    var update = function(id, attribute) {
        return balanceReportCustomAttrRepository.update(id, attribute);
    };

    var deleteByKey = function (id) {
        return balanceReportCustomAttrRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../../repositories/reports/balanceReportCustomAttrRepository":285}],384:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var responsibleGroupRepository = require('../repositories/responsibleGroupRepository');

    var getList = function (options) {
        return responsibleGroupRepository.getList(options);
    };

    var getByKey = function (id) {
        return responsibleGroupRepository.getByKey(id);
    };

    var create = function(responsible) {
        return responsibleGroupRepository.create(responsible);
    };

    var update = function(id, responsible) {
        return responsibleGroupRepository.update(id, responsible);
    };

    var deleteByKey = function (id) {
        return responsibleGroupRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/responsibleGroupRepository":286}],385:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var responsibleRepository = require('../repositories/responsibleRepository');

    var getList = function (options) {
        return responsibleRepository.getList(options);
    };

    var getByKey = function (id) {
        return responsibleRepository.getByKey(id);
    };

    var create = function (responsible) {
        return responsibleRepository.create(responsible);
    };

    var update = function (id, responsible) {
        return responsibleRepository.update(id, responsible);
    };

    var deleteByKey = function (id) {
        return responsibleRepository.deleteByKey(id);
    };

    var updateBulk = function (responsibles) {
        return responsibleRepository.updateBulk(responsibles);
    };

    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        updateBulk: updateBulk
    }


}());
},{"../repositories/responsibleRepository":287}],386:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function () {

    'use strict';

    var findExistingState = function (basePath, entityType) {

        var state = '';
        var options = {};
        if (entityType.indexOf('strategy') !== -1) {

            var entityTypePieces = entityType.split('-');

            state = basePath + entityTypePieces[0] + '-' + entityTypePieces[2];
            options = {strategyNumber: entityTypePieces[1]};

        } else {
            state = basePath + entityType;
        }


        return {
            state: state,
            options: options
        };

    };

    module.exports = {
        findExistingState: findExistingState
    }

}());
},{}],387:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function(){

    'use strict';

    var strategyGroupRepository = require('../repositories/strategyGroupRepository');

    var getList = function(strategyNumber, options){
        return strategyGroupRepository.getList(strategyNumber, options);
    };

    var getByKey = function(strategyNumber, id){
        return strategyGroupRepository.getByKey(strategyNumber, id);
    };

    var create = function(strategyNumber, strategy){
        return strategyGroupRepository.create(strategyNumber, strategy);
    };

    var update = function(strategyNumber, id, strategy){
        return strategyGroupRepository.update(strategyNumber, id, strategy);
    };

    var deleteByKey = function(strategyNumber, id){
        return strategyGroupRepository.deleteByKey(strategyNumber, id);
    };
    
    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey

    }

}());
},{"../repositories/strategyGroupRepository":288}],388:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function(){

    'use strict';

    var strategyRepository = require('../repositories/strategyRepository');

    var getList = function(strategyNumber, options){
        return strategyRepository.getList(strategyNumber, options);
    };

    var getByKey = function(strategyNumber, id){
        return strategyRepository.getByKey(strategyNumber, id);
    };

    var create = function(strategyNumber, strategy){
        return strategyRepository.create(strategyNumber, strategy);
    };

    var update = function(strategyNumber, id, strategy){
        return strategyRepository.update(strategyNumber, id, strategy);
    };

    var deleteByKey = function(strategyNumber, id){
        return strategyRepository.deleteByKey(strategyNumber, id);
    };

    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey

    }

}());
},{"../repositories/strategyRepository":289}],389:[function(require,module,exports){
/**
 * Created by szhitenev on 09.08.2016.
 */
(function(){

    'use strict';

    var strategySubgroupRepository = require('../repositories/strategySubgroupRepository');

    var getList = function(strategyNumber, options){
        return strategySubgroupRepository.getList(strategyNumber, options);
    };

    var getByKey = function(strategyNumber, id){
        return strategySubgroupRepository.getByKey(strategyNumber, id);
    };

    var create = function(strategyNumber, strategy){
        return strategySubgroupRepository.create(strategyNumber, strategy);
    };

    var update = function(strategyNumber, id, strategy){
        return strategySubgroupRepository.update(strategyNumber, id, strategy);
    };

    var deleteByKey = function(strategyNumber, id){
        return strategySubgroupRepository.deleteByKey(strategyNumber, id);
    };
    
    module.exports = {

        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey

    }

}());
},{"../repositories/strategySubgroupRepository":290}],390:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var tagRepository = require('../repositories/tagRepository');

    var getList = function (options) {
        return tagRepository.getList(options);
    };

    var getListByContentType = function(entity) {
        return tagRepository.getListByContentType(entity);
    };

    var getByKey = function (id) {
        return tagRepository.getByKey(id);
    };

    var create = function(tag) {
        return tagRepository.create(tag);
    };

    var update = function(id, tag) {
        return tagRepository.update(id, tag);
    };

    var deleteByKey = function (id) {
        return tagRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getListByContentType: getListByContentType,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/tagRepository":291}],391:[function(require,module,exports){
/**
 * Created by szhitenev on 03.08.2016.
 */
(function () {

    'use strict';

    var getList = function () {
        return [{"id": "1", "cca2": "AD", "name": "Europe/Andorra"}, {
            "id": "2",
            "cca2": "AE",
            "name": "Asia/Dubai"
        }, {"id": "3", "cca2": "AF", "name": "Asia/Kabul"}, {
            "id": "4",
            "cca2": "AG",
            "name": "America/Antigua"
        }, {"id": "5", "cca2": "AI", "name": "America/Anguilla"}, {
            "id": "6",
            "cca2": "AL",
            "name": "Europe/Tirane"
        }, {"id": "7", "cca2": "AM", "name": "Asia/Yerevan"}, {
            "id": "8",
            "cca2": "AO",
            "name": "Africa/Luanda"
        }, {"id": "9", "cca2": "AQ", "name": "Antarctica/McMurdo"}, {
            "id": "10",
            "cca2": "AQ",
            "name": "Antarctica/Rothera"
        }, {"id": "11", "cca2": "AQ", "name": "Antarctica/Palmer"}, {
            "id": "12",
            "cca2": "AQ",
            "name": "Antarctica/Mawson"
        }, {"id": "13", "cca2": "AQ", "name": "Antarctica/Davis"}, {
            "id": "14",
            "cca2": "AQ",
            "name": "Antarctica/Casey"
        }, {"id": "15", "cca2": "AQ", "name": "Antarctica/Vostok"}, {
            "id": "16",
            "cca2": "AQ",
            "name": "Antarctica/DumontDUrville"
        }, {"id": "17", "cca2": "AQ", "name": "Antarctica/Syowa"}, {
            "id": "18",
            "cca2": "AQ",
            "name": "Antarctica/Troll"
        }, {"id": "19", "cca2": "AR", "name": "America/Argentina/Buenos_Aires"}, {
            "id": "20",
            "cca2": "AR",
            "name": "America/Argentina/Cordoba"
        }, {"id": "21", "cca2": "AR", "name": "America/Argentina/Salta"}, {
            "id": "22",
            "cca2": "AR",
            "name": "America/Argentina/Jujuy"
        }, {"id": "23", "cca2": "AR", "name": "America/Argentina/Tucuman"}, {
            "id": "24",
            "cca2": "AR",
            "name": "America/Argentina/Catamarca"
        }, {"id": "25", "cca2": "AR", "name": "America/Argentina/La_Rioja"}, {
            "id": "26",
            "cca2": "AR",
            "name": "America/Argentina/San_Juan"
        }, {"id": "27", "cca2": "AR", "name": "America/Argentina/Mendoza"}, {
            "id": "28",
            "cca2": "AR",
            "name": "America/Argentina/San_Luis"
        }, {"id": "29", "cca2": "AR", "name": "America/Argentina/Rio_Gallegos"}, {
            "id": "30",
            "cca2": "AR",
            "name": "America/Argentina/Ushuaia"
        }, {"id": "31", "cca2": "AS", "name": "Pacific/Pago_Pago"}, {
            "id": "32",
            "cca2": "AT",
            "name": "Europe/Vienna"
        }, {"id": "33", "cca2": "AU", "name": "Australia/Lord_Howe"}, {
            "id": "34",
            "cca2": "AU",
            "name": "Antarctica/Macquarie"
        }, {"id": "35", "cca2": "AU", "name": "Australia/Hobart"}, {
            "id": "36",
            "cca2": "AU",
            "name": "Australia/Currie"
        }, {"id": "37", "cca2": "AU", "name": "Australia/Melbourne"}, {
            "id": "38",
            "cca2": "AU",
            "name": "Australia/Sydney"
        }, {"id": "39", "cca2": "AU", "name": "Australia/Broken_Hill"}, {
            "id": "40",
            "cca2": "AU",
            "name": "Australia/Brisbane"
        }, {"id": "41", "cca2": "AU", "name": "Australia/Lindeman"}, {
            "id": "42",
            "cca2": "AU",
            "name": "Australia/Adelaide"
        }, {"id": "43", "cca2": "AU", "name": "Australia/Darwin"}, {
            "id": "44",
            "cca2": "AU",
            "name": "Australia/Perth"
        }, {"id": "45", "cca2": "AU", "name": "Australia/Eucla"}, {
            "id": "46",
            "cca2": "AW",
            "name": "America/Aruba"
        }, {"id": "47", "cca2": "AX", "name": "Europe/Mariehamn"}, {
            "id": "48",
            "cca2": "AZ",
            "name": "Asia/Baku"
        }, {"id": "49", "cca2": "BA", "name": "Europe/Sarajevo"}, {
            "id": "50",
            "cca2": "BB",
            "name": "America/Barbados"
        }, {"id": "51", "cca2": "BD", "name": "Asia/Dhaka"}, {
            "id": "52",
            "cca2": "BE",
            "name": "Europe/Brussels"
        }, {"id": "53", "cca2": "BF", "name": "Africa/Ouagadougou"}, {
            "id": "54",
            "cca2": "BG",
            "name": "Europe/Sofia"
        }, {"id": "55", "cca2": "BH", "name": "Asia/Bahrain"}, {
            "id": "56",
            "cca2": "BI",
            "name": "Africa/Bujumbura"
        }, {"id": "57", "cca2": "BJ", "name": "Africa/Porto-Novo"}, {
            "id": "58",
            "cca2": "BL",
            "name": "America/St_Barthelemy"
        }, {"id": "59", "cca2": "BM", "name": "Atlantic/Bermuda"}, {
            "id": "60",
            "cca2": "BN",
            "name": "Asia/Brunei"
        }, {"id": "61", "cca2": "BO", "name": "America/La_Paz"}, {
            "id": "62",
            "cca2": "BQ",
            "name": "America/Kralendijk"
        }, {"id": "63", "cca2": "BR", "name": "America/Noronha"}, {
            "id": "64",
            "cca2": "BR",
            "name": "America/Belem"
        }, {"id": "65", "cca2": "BR", "name": "America/Fortaleza"}, {
            "id": "66",
            "cca2": "BR",
            "name": "America/Recife"
        }, {"id": "67", "cca2": "BR", "name": "America/Araguaina"}, {
            "id": "68",
            "cca2": "BR",
            "name": "America/Maceio"
        }, {"id": "69", "cca2": "BR", "name": "America/Bahia"}, {
            "id": "70",
            "cca2": "BR",
            "name": "America/Sao_Paulo"
        }, {"id": "71", "cca2": "BR", "name": "America/Campo_Grande"}, {
            "id": "72",
            "cca2": "BR",
            "name": "America/Cuiaba"
        }, {"id": "73", "cca2": "BR", "name": "America/Santarem"}, {
            "id": "74",
            "cca2": "BR",
            "name": "America/Porto_Velho"
        }, {"id": "75", "cca2": "BR", "name": "America/Boa_Vista"}, {
            "id": "76",
            "cca2": "BR",
            "name": "America/Manaus"
        }, {"id": "77", "cca2": "BR", "name": "America/Eirunepe"}, {
            "id": "78",
            "cca2": "BR",
            "name": "America/Rio_Branco"
        }, {"id": "79", "cca2": "BS", "name": "America/Nassau"}, {
            "id": "80",
            "cca2": "BT",
            "name": "Asia/Thimphu"
        }, {"id": "81", "cca2": "BW", "name": "Africa/Gaborone"}, {
            "id": "82",
            "cca2": "BY",
            "name": "Europe/Minsk"
        }, {"id": "83", "cca2": "BZ", "name": "America/Belize"}, {
            "id": "84",
            "cca2": "CA",
            "name": "America/St_Johns"
        }, {"id": "85", "cca2": "CA", "name": "America/Halifax"}, {
            "id": "86",
            "cca2": "CA",
            "name": "America/Glace_Bay"
        }, {"id": "87", "cca2": "CA", "name": "America/Moncton"}, {
            "id": "88",
            "cca2": "CA",
            "name": "America/Goose_Bay"
        }, {"id": "89", "cca2": "CA", "name": "America/Blanc-Sablon"}, {
            "id": "90",
            "cca2": "CA",
            "name": "America/Toronto"
        }, {"id": "91", "cca2": "CA", "name": "America/Nipigon"}, {
            "id": "92",
            "cca2": "CA",
            "name": "America/Thunder_Bay"
        }, {"id": "93", "cca2": "CA", "name": "America/Iqaluit"}, {
            "id": "94",
            "cca2": "CA",
            "name": "America/Pangnirtung"
        }, {"id": "95", "cca2": "CA", "name": "America/Resolute"}, {
            "id": "96",
            "cca2": "CA",
            "name": "America/Atikokan"
        }, {"id": "97", "cca2": "CA", "name": "America/Rankin_Inlet"}, {
            "id": "98",
            "cca2": "CA",
            "name": "America/Winnipeg"
        }, {"id": "99", "cca2": "CA", "name": "America/Rainy_River"}, {
            "id": "100",
            "cca2": "CA",
            "name": "America/Regina"
        }, {"id": "101", "cca2": "CA", "name": "America/Swift_Current"}, {
            "id": "102",
            "cca2": "CA",
            "name": "America/Edmonton"
        }, {"id": "103", "cca2": "CA", "name": "America/Cambridge_Bay"}, {
            "id": "104",
            "cca2": "CA",
            "name": "America/Yellowknife"
        }, {"id": "105", "cca2": "CA", "name": "America/Inuvik"}, {
            "id": "106",
            "cca2": "CA",
            "name": "America/Creston"
        }, {"id": "107", "cca2": "CA", "name": "America/Dawson_Creek"}, {
            "id": "108",
            "cca2": "CA",
            "name": "America/Vancouver"
        }, {"id": "109", "cca2": "CA", "name": "America/Whitehorse"}, {
            "id": "110",
            "cca2": "CA",
            "name": "America/Dawson"
        }, {"id": "111", "cca2": "CC", "name": "Indian/Cocos"}, {
            "id": "112",
            "cca2": "CD",
            "name": "Africa/Kinshasa"
        }, {"id": "113", "cca2": "CD", "name": "Africa/Lubumbashi"}, {
            "id": "114",
            "cca2": "CF",
            "name": "Africa/Bangui"
        }, {"id": "115", "cca2": "CG", "name": "Africa/Brazzaville"}, {
            "id": "116",
            "cca2": "CH",
            "name": "Europe/Zurich"
        }, {"id": "117", "cca2": "CI", "name": "Africa/Abidjan"}, {
            "id": "118",
            "cca2": "CK",
            "name": "Pacific/Rarotonga"
        }, {"id": "119", "cca2": "CL", "name": "America/Santiago"}, {
            "id": "120",
            "cca2": "CL",
            "name": "Pacific/Easter"
        }, {"id": "121", "cca2": "CM", "name": "Africa/Douala"}, {
            "id": "122",
            "cca2": "CN",
            "name": "Asia/Shanghai"
        }, {"id": "123", "cca2": "CN", "name": "Asia/Harbin"}, {
            "id": "124",
            "cca2": "CN",
            "name": "Asia/Chongqing"
        }, {"id": "125", "cca2": "CN", "name": "Asia/Urumqi"}, {
            "id": "126",
            "cca2": "CN",
            "name": "Asia/Kashgar"
        }, {"id": "127", "cca2": "CO", "name": "America/Bogota"}, {
            "id": "128",
            "cca2": "CR",
            "name": "America/Costa_Rica"
        }, {"id": "129", "cca2": "CU", "name": "America/Havana"}, {
            "id": "130",
            "cca2": "CV",
            "name": "Atlantic/Cape_Verde"
        }, {"id": "131", "cca2": "CW", "name": "America/Curacao"}, {
            "id": "132",
            "cca2": "CX",
            "name": "Indian/Christmas"
        }, {"id": "133", "cca2": "CY", "name": "Asia/Nicosia"}, {
            "id": "134",
            "cca2": "CZ",
            "name": "Europe/Prague"
        }, {"id": "135", "cca2": "DE", "name": "Europe/Berlin"}, {
            "id": "136",
            "cca2": "DE",
            "name": "Europe/Busingen"
        }, {"id": "137", "cca2": "DJ", "name": "Africa/Djibouti"}, {
            "id": "138",
            "cca2": "DK",
            "name": "Europe/Copenhagen"
        }, {"id": "139", "cca2": "DM", "name": "America/Dominica"}, {
            "id": "140",
            "cca2": "DO",
            "name": "America/Santo_Domingo"
        }, {"id": "141", "cca2": "DZ", "name": "Africa/Algiers"}, {
            "id": "142",
            "cca2": "EC",
            "name": "America/Guayaquil"
        }, {"id": "143", "cca2": "EC", "name": "Pacific/Galapagos"}, {
            "id": "144",
            "cca2": "EE",
            "name": "Europe/Tallinn"
        }, {"id": "145", "cca2": "EG", "name": "Africa/Cairo"}, {
            "id": "146",
            "cca2": "EH",
            "name": "Africa/El_Aaiun"
        }, {"id": "147", "cca2": "ER", "name": "Africa/Asmara"}, {
            "id": "148",
            "cca2": "ES",
            "name": "Europe/Madrid"
        }, {"id": "149", "cca2": "ES", "name": "Africa/Ceuta"}, {
            "id": "150",
            "cca2": "ES",
            "name": "Atlantic/Canary"
        }, {"id": "151", "cca2": "ET", "name": "Africa/Addis_Ababa"}, {
            "id": "152",
            "cca2": "FI",
            "name": "Europe/Helsinki"
        }, {"id": "153", "cca2": "FJ", "name": "Pacific/Fiji"}, {
            "id": "154",
            "cca2": "FK",
            "name": "Atlantic/Stanley"
        }, {"id": "155", "cca2": "FM", "name": "Pacific/Chuuk"}, {
            "id": "156",
            "cca2": "FM",
            "name": "Pacific/Pohnpei"
        }, {"id": "157", "cca2": "FM", "name": "Pacific/Kosrae"}, {
            "id": "158",
            "cca2": "FO",
            "name": "Atlantic/Faroe"
        }, {"id": "159", "cca2": "FR", "name": "Europe/Paris"}, {
            "id": "160",
            "cca2": "GA",
            "name": "Africa/Libreville"
        }, {"id": "161", "cca2": "GB", "name": "Europe/London"}, {
            "id": "162",
            "cca2": "GD",
            "name": "America/Grenada"
        }, {"id": "163", "cca2": "GE", "name": "Asia/Tbilisi"}, {
            "id": "164",
            "cca2": "GF",
            "name": "America/Cayenne"
        }, {"id": "165", "cca2": "GG", "name": "Europe/Guernsey"}, {
            "id": "166",
            "cca2": "GH",
            "name": "Africa/Accra"
        }, {"id": "167", "cca2": "GI", "name": "Europe/Gibraltar"}, {
            "id": "168",
            "cca2": "GL",
            "name": "America/Godthab"
        }, {"id": "169", "cca2": "GL", "name": "America/Danmarkshavn"}, {
            "id": "170",
            "cca2": "GL",
            "name": "America/Scoresbysund"
        }, {"id": "171", "cca2": "GL", "name": "America/Thule"}, {
            "id": "172",
            "cca2": "GM",
            "name": "Africa/Banjul"
        }, {"id": "173", "cca2": "GN", "name": "Africa/Conakry"}, {
            "id": "174",
            "cca2": "GP",
            "name": "America/Guadeloupe"
        }, {"id": "175", "cca2": "GQ", "name": "Africa/Malabo"}, {
            "id": "176",
            "cca2": "GR",
            "name": "Europe/Athens"
        }, {"id": "177", "cca2": "GS", "name": "Atlantic/South_Georgia"}, {
            "id": "178",
            "cca2": "GT",
            "name": "America/Guatemala"
        }, {"id": "179", "cca2": "GU", "name": "Pacific/Guam"}, {
            "id": "180",
            "cca2": "GW",
            "name": "Africa/Bissau"
        }, {"id": "181", "cca2": "GY", "name": "America/Guyana"}, {
            "id": "182",
            "cca2": "HK",
            "name": "Asia/Hong_Kong"
        }, {"id": "183", "cca2": "HN", "name": "America/Tegucigalpa"}, {
            "id": "184",
            "cca2": "HR",
            "name": "Europe/Zagreb"
        }, {"id": "185", "cca2": "HT", "name": "America/Port-au-Prince"}, {
            "id": "186",
            "cca2": "HU",
            "name": "Europe/Budapest"
        }, {"id": "187", "cca2": "ID", "name": "Asia/Jakarta"}, {
            "id": "188",
            "cca2": "ID",
            "name": "Asia/Pontianak"
        }, {"id": "189", "cca2": "ID", "name": "Asia/Makassar"}, {
            "id": "190",
            "cca2": "ID",
            "name": "Asia/Jayapura"
        }, {"id": "191", "cca2": "IE", "name": "Europe/Dublin"}, {
            "id": "192",
            "cca2": "IL",
            "name": "Asia/Jerusalem"
        }, {"id": "193", "cca2": "IM", "name": "Europe/Isle_of_Man"}, {
            "id": "194",
            "cca2": "IN",
            "name": "Asia/Kolkata"
        }, {"id": "195", "cca2": "IO", "name": "Indian/Chagos"}, {
            "id": "196",
            "cca2": "IQ",
            "name": "Asia/Baghdad"
        }, {"id": "197", "cca2": "IR", "name": "Asia/Tehran"}, {
            "id": "198",
            "cca2": "IS",
            "name": "Atlantic/Reykjavik"
        }, {"id": "199", "cca2": "IT", "name": "Europe/Rome"}, {
            "id": "200",
            "cca2": "JE",
            "name": "Europe/Jersey"
        }, {"id": "201", "cca2": "JM", "name": "America/Jamaica"}, {
            "id": "202",
            "cca2": "JO",
            "name": "Asia/Amman"
        }, {"id": "203", "cca2": "JP", "name": "Asia/Tokyo"}, {
            "id": "204",
            "cca2": "KE",
            "name": "Africa/Nairobi"
        }, {"id": "205", "cca2": "KG", "name": "Asia/Bishkek"}, {
            "id": "206",
            "cca2": "KH",
            "name": "Asia/Phnom_Penh"
        }, {"id": "207", "cca2": "KI", "name": "Pacific/Tarawa"}, {
            "id": "208",
            "cca2": "KI",
            "name": "Pacific/Enderbury"
        }, {"id": "209", "cca2": "KI", "name": "Pacific/Kiritimati"}, {
            "id": "210",
            "cca2": "KM",
            "name": "Indian/Comoro"
        }, {"id": "211", "cca2": "KN", "name": "America/St_Kitts"}, {
            "id": "212",
            "cca2": "KP",
            "name": "Asia/Pyongyang"
        }, {"id": "213", "cca2": "KR", "name": "Asia/Seoul"}, {
            "id": "214",
            "cca2": "KW",
            "name": "Asia/Kuwait"
        }, {"id": "215", "cca2": "KY", "name": "America/Cayman"}, {
            "id": "216",
            "cca2": "KZ",
            "name": "Asia/Almaty"
        }, {"id": "217", "cca2": "KZ", "name": "Asia/Qyzylorda"}, {
            "id": "218",
            "cca2": "KZ",
            "name": "Asia/Aqtobe"
        }, {"id": "219", "cca2": "KZ", "name": "Asia/Aqtau"}, {
            "id": "220",
            "cca2": "KZ",
            "name": "Asia/Oral"
        }, {"id": "221", "cca2": "LA", "name": "Asia/Vientiane"}, {
            "id": "222",
            "cca2": "LB",
            "name": "Asia/Beirut"
        }, {"id": "223", "cca2": "LC", "name": "America/St_Lucia"}, {
            "id": "224",
            "cca2": "LI",
            "name": "Europe/Vaduz"
        }, {"id": "225", "cca2": "LK", "name": "Asia/Colombo"}, {
            "id": "226",
            "cca2": "LR",
            "name": "Africa/Monrovia"
        }, {"id": "227", "cca2": "LS", "name": "Africa/Maseru"}, {
            "id": "228",
            "cca2": "LT",
            "name": "Europe/Vilnius"
        }, {"id": "229", "cca2": "LU", "name": "Europe/Luxembourg"}, {
            "id": "230",
            "cca2": "LV",
            "name": "Europe/Riga"
        }, {"id": "231", "cca2": "LY", "name": "Africa/Tripoli"}, {
            "id": "232",
            "cca2": "MA",
            "name": "Africa/Casablanca"
        }, {"id": "233", "cca2": "MC", "name": "Europe/Monaco"}, {
            "id": "234",
            "cca2": "MD",
            "name": "Europe/Chisinau"
        }, {"id": "235", "cca2": "ME", "name": "Europe/Podgorica"}, {
            "id": "236",
            "cca2": "MF",
            "name": "America/Marigot"
        }, {"id": "237", "cca2": "MG", "name": "Indian/Antananarivo"}, {
            "id": "238",
            "cca2": "MH",
            "name": "Pacific/Majuro"
        }, {"id": "239", "cca2": "MH", "name": "Pacific/Kwajalein"}, {
            "id": "240",
            "cca2": "MK",
            "name": "Europe/Skopje"
        }, {"id": "241", "cca2": "ML", "name": "Africa/Bamako"}, {
            "id": "242",
            "cca2": "MM",
            "name": "Asia/Rangoon"
        }, {"id": "243", "cca2": "MN", "name": "Asia/Ulaanbaatar"}, {
            "id": "244",
            "cca2": "MN",
            "name": "Asia/Hovd"
        }, {"id": "245", "cca2": "MN", "name": "Asia/Choibalsan"}, {
            "id": "246",
            "cca2": "MO",
            "name": "Asia/Macau"
        }, {"id": "247", "cca2": "MP", "name": "Pacific/Saipan"}, {
            "id": "248",
            "cca2": "MQ",
            "name": "America/Martinique"
        }, {"id": "249", "cca2": "MR", "name": "Africa/Nouakchott"}, {
            "id": "250",
            "cca2": "MS",
            "name": "America/Montserrat"
        }, {"id": "251", "cca2": "MT", "name": "Europe/Malta"}, {
            "id": "252",
            "cca2": "MU",
            "name": "Indian/Mauritius"
        }, {"id": "253", "cca2": "MV", "name": "Indian/Maldives"}, {
            "id": "254",
            "cca2": "MW",
            "name": "Africa/Blantyre"
        }, {"id": "255", "cca2": "MX", "name": "America/Mexico_City"}, {
            "id": "256",
            "cca2": "MX",
            "name": "America/Cancun"
        }, {"id": "257", "cca2": "MX", "name": "America/Merida"}, {
            "id": "258",
            "cca2": "MX",
            "name": "America/Monterrey"
        }, {"id": "259", "cca2": "MX", "name": "America/Matamoros"}, {
            "id": "260",
            "cca2": "MX",
            "name": "America/Mazatlan"
        }, {"id": "261", "cca2": "MX", "name": "America/Chihuahua"}, {
            "id": "262",
            "cca2": "MX",
            "name": "America/Ojinaga"
        }, {"id": "263", "cca2": "MX", "name": "America/Hermosillo"}, {
            "id": "264",
            "cca2": "MX",
            "name": "America/Tijuana"
        }, {"id": "265", "cca2": "MX", "name": "America/Santa_Isabel"}, {
            "id": "266",
            "cca2": "MX",
            "name": "America/Bahia_Banderas"
        }, {"id": "267", "cca2": "MY", "name": "Asia/Kuala_Lumpur"}, {
            "id": "268",
            "cca2": "MY",
            "name": "Asia/Kuching"
        }, {"id": "269", "cca2": "MZ", "name": "Africa/Maputo"}, {
            "id": "270",
            "cca2": "NA",
            "name": "Africa/Windhoek"
        }, {"id": "271", "cca2": "NC", "name": "Pacific/Noumea"}, {
            "id": "272",
            "cca2": "NE",
            "name": "Africa/Niamey"
        }, {"id": "273", "cca2": "NF", "name": "Pacific/Norfolk"}, {
            "id": "274",
            "cca2": "NG",
            "name": "Africa/Lagos"
        }, {"id": "275", "cca2": "NI", "name": "America/Managua"}, {
            "id": "276",
            "cca2": "NL",
            "name": "Europe/Amsterdam"
        }, {"id": "277", "cca2": "NO", "name": "Europe/Oslo"}, {
            "id": "278",
            "cca2": "NP",
            "name": "Asia/Kathmandu"
        }, {"id": "279", "cca2": "NR", "name": "Pacific/Nauru"}, {
            "id": "280",
            "cca2": "NU",
            "name": "Pacific/Niue"
        }, {"id": "281", "cca2": "NZ", "name": "Pacific/Auckland"}, {
            "id": "282",
            "cca2": "NZ",
            "name": "Pacific/Chatham"
        }, {"id": "283", "cca2": "OM", "name": "Asia/Muscat"}, {
            "id": "284",
            "cca2": "PA",
            "name": "America/Panama"
        }, {"id": "285", "cca2": "PE", "name": "America/Lima"}, {
            "id": "286",
            "cca2": "PF",
            "name": "Pacific/Tahiti"
        }, {"id": "287", "cca2": "PF", "name": "Pacific/Marquesas"}, {
            "id": "288",
            "cca2": "PF",
            "name": "Pacific/Gambier"
        }, {"id": "289", "cca2": "PG", "name": "Pacific/Port_Moresby"}, {
            "id": "290",
            "cca2": "PH",
            "name": "Asia/Manila"
        }, {"id": "291", "cca2": "PK", "name": "Asia/Karachi"}, {
            "id": "292",
            "cca2": "PL",
            "name": "Europe/Warsaw"
        }, {"id": "293", "cca2": "PM", "name": "America/Miquelon"}, {
            "id": "294",
            "cca2": "PN",
            "name": "Pacific/Pitcairn"
        }, {"id": "295", "cca2": "PR", "name": "America/Puerto_Rico"}, {
            "id": "296",
            "cca2": "PS",
            "name": "Asia/Gaza"
        }, {"id": "297", "cca2": "PS", "name": "Asia/Hebron"}, {
            "id": "298",
            "cca2": "PT",
            "name": "Europe/Lisbon"
        }, {"id": "299", "cca2": "PT", "name": "Atlantic/Madeira"}, {
            "id": "300",
            "cca2": "PT",
            "name": "Atlantic/Azores"
        }, {"id": "301", "cca2": "PW", "name": "Pacific/Palau"}, {
            "id": "302",
            "cca2": "PY",
            "name": "America/Asuncion"
        }, {"id": "303", "cca2": "QA", "name": "Asia/Qatar"}, {
            "id": "304",
            "cca2": "RE",
            "name": "Indian/Reunion"
        }, {"id": "305", "cca2": "RO", "name": "Europe/Bucharest"}, {
            "id": "306",
            "cca2": "RS",
            "name": "Europe/Belgrade"
        }, {"id": "307", "cca2": "RU", "name": "Europe/Kaliningrad"}, {
            "id": "308",
            "cca2": "RU",
            "name": "Europe/Moscow"
        }, {"id": "309", "cca2": "RU", "name": "Europe/Volgograd"}, {
            "id": "310",
            "cca2": "RU",
            "name": "Europe/Samara"
        }, {"id": "311", "cca2": "RU", "name": "Europe/Simferopol"}, {
            "id": "312",
            "cca2": "RU",
            "name": "Asia/Yekaterinburg"
        }, {"id": "313", "cca2": "RU", "name": "Asia/Omsk"}, {
            "id": "314",
            "cca2": "RU",
            "name": "Asia/Novosibirsk"
        }, {"id": "315", "cca2": "RU", "name": "Asia/Novokuznetsk"}, {
            "id": "316",
            "cca2": "RU",
            "name": "Asia/Krasnoyarsk"
        }, {"id": "317", "cca2": "RU", "name": "Asia/Irkutsk"}, {
            "id": "318",
            "cca2": "RU",
            "name": "Asia/Yakutsk"
        }, {"id": "319", "cca2": "RU", "name": "Asia/Khandyga"}, {
            "id": "320",
            "cca2": "RU",
            "name": "Asia/Vladivostok"
        }, {"id": "321", "cca2": "RU", "name": "Asia/Sakhalin"}, {
            "id": "322",
            "cca2": "RU",
            "name": "Asia/Ust-Nera"
        }, {"id": "323", "cca2": "RU", "name": "Asia/Magadan"}, {
            "id": "324",
            "cca2": "RU",
            "name": "Asia/Kamchatka"
        }, {"id": "325", "cca2": "RU", "name": "Asia/Anadyr"}, {
            "id": "326",
            "cca2": "RW",
            "name": "Africa/Kigali"
        }, {"id": "327", "cca2": "SA", "name": "Asia/Riyadh"}, {
            "id": "328",
            "cca2": "SB",
            "name": "Pacific/Guadalcanal"
        }, {"id": "329", "cca2": "SC", "name": "Indian/Mahe"}, {
            "id": "330",
            "cca2": "SD",
            "name": "Africa/Khartoum"
        }, {"id": "331", "cca2": "SE", "name": "Europe/Stockholm"}, {
            "id": "332",
            "cca2": "SG",
            "name": "Asia/Singapore"
        }, {"id": "333", "cca2": "SH", "name": "Atlantic/St_Helena"}, {
            "id": "334",
            "cca2": "SI",
            "name": "Europe/Ljubljana"
        }, {"id": "335", "cca2": "SJ", "name": "Arctic/Longyearbyen"}, {
            "id": "336",
            "cca2": "SK",
            "name": "Europe/Bratislava"
        }, {"id": "337", "cca2": "SL", "name": "Africa/Freetown"}, {
            "id": "338",
            "cca2": "SM",
            "name": "Europe/San_Marino"
        }, {"id": "339", "cca2": "SN", "name": "Africa/Dakar"}, {
            "id": "340",
            "cca2": "SO",
            "name": "Africa/Mogadishu"
        }, {"id": "341", "cca2": "SR", "name": "America/Paramaribo"}, {
            "id": "342",
            "cca2": "SS",
            "name": "Africa/Juba"
        }, {"id": "343", "cca2": "ST", "name": "Africa/Sao_Tome"}, {
            "id": "344",
            "cca2": "SV",
            "name": "America/El_Salvador"
        }, {"id": "345", "cca2": "SX", "name": "America/Lower_Princes"}, {
            "id": "346",
            "cca2": "SY",
            "name": "Asia/Damascus"
        }, {"id": "347", "cca2": "SZ", "name": "Africa/Mbabane"}, {
            "id": "348",
            "cca2": "TC",
            "name": "America/Grand_Turk"
        }, {"id": "349", "cca2": "TD", "name": "Africa/Ndjamena"}, {
            "id": "350",
            "cca2": "TF",
            "name": "Indian/Kerguelen"
        }, {"id": "351", "cca2": "TG", "name": "Africa/Lome"}, {
            "id": "352",
            "cca2": "TH",
            "name": "Asia/Bangkok"
        }, {"id": "353", "cca2": "TJ", "name": "Asia/Dushanbe"}, {
            "id": "354",
            "cca2": "TK",
            "name": "Pacific/Fakaofo"
        }, {"id": "355", "cca2": "TL", "name": "Asia/Dili"}, {
            "id": "356",
            "cca2": "TM",
            "name": "Asia/Ashgabat"
        }, {"id": "357", "cca2": "TN", "name": "Africa/Tunis"}, {
            "id": "358",
            "cca2": "TO",
            "name": "Pacific/Tongatapu"
        }, {"id": "359", "cca2": "TR", "name": "Europe/Istanbul"}, {
            "id": "360",
            "cca2": "TT",
            "name": "America/Port_of_Spain"
        }, {"id": "361", "cca2": "TV", "name": "Pacific/Funafuti"}, {
            "id": "362",
            "cca2": "TW",
            "name": "Asia/Taipei"
        }, {"id": "363", "cca2": "TZ", "name": "Africa/Dar_es_Salaam"}, {
            "id": "364",
            "cca2": "UA",
            "name": "Europe/Kiev"
        }, {"id": "365", "cca2": "UA", "name": "Europe/Uzhgorod"}, {
            "id": "366",
            "cca2": "UA",
            "name": "Europe/Zaporozhye"
        }, {"id": "367", "cca2": "UG", "name": "Africa/Kampala"}, {
            "id": "368",
            "cca2": "UM",
            "name": "Pacific/Johnston"
        }, {"id": "369", "cca2": "UM", "name": "Pacific/Midway"}, {
            "id": "370",
            "cca2": "UM",
            "name": "Pacific/Wake"
        }, {"id": "371", "cca2": "US", "name": "America/New_York"}, {
            "id": "372",
            "cca2": "US",
            "name": "America/Detroit"
        }, {"id": "373", "cca2": "US", "name": "America/Kentucky/Louisville"}, {
            "id": "374",
            "cca2": "US",
            "name": "America/Kentucky/Monticello"
        }, {"id": "375", "cca2": "US", "name": "America/Indiana/Indianapolis"}, {
            "id": "376",
            "cca2": "US",
            "name": "America/Indiana/Vincennes"
        }, {"id": "377", "cca2": "US", "name": "America/Indiana/Winamac"}, {
            "id": "378",
            "cca2": "US",
            "name": "America/Indiana/Marengo"
        }, {"id": "379", "cca2": "US", "name": "America/Indiana/Petersburg"}, {
            "id": "380",
            "cca2": "US",
            "name": "America/Indiana/Vevay"
        }, {"id": "381", "cca2": "US", "name": "America/Chicago"}, {
            "id": "382",
            "cca2": "US",
            "name": "America/Indiana/Tell_City"
        }, {"id": "383", "cca2": "US", "name": "America/Indiana/Knox"}, {
            "id": "384",
            "cca2": "US",
            "name": "America/Menominee"
        }, {"id": "385", "cca2": "US", "name": "America/North_Dakota/Center"}, {
            "id": "386",
            "cca2": "US",
            "name": "America/North_Dakota/New_Salem"
        }, {"id": "387", "cca2": "US", "name": "America/North_Dakota/Beulah"}, {
            "id": "388",
            "cca2": "US",
            "name": "America/Denver"
        }, {"id": "389", "cca2": "US", "name": "America/Boise"}, {
            "id": "390",
            "cca2": "US",
            "name": "America/Phoenix"
        }, {"id": "391", "cca2": "US", "name": "America/Los_Angeles"}, {
            "id": "392",
            "cca2": "US",
            "name": "America/Anchorage"
        }, {"id": "393", "cca2": "US", "name": "America/Juneau"}, {
            "id": "394",
            "cca2": "US",
            "name": "America/Sitka"
        }, {"id": "395", "cca2": "US", "name": "America/Yakutat"}, {
            "id": "396",
            "cca2": "US",
            "name": "America/Nome"
        }, {"id": "397", "cca2": "US", "name": "America/Adak"}, {
            "id": "398",
            "cca2": "US",
            "name": "America/Metlakatla"
        }, {"id": "399", "cca2": "US", "name": "Pacific/Honolulu"}, {
            "id": "400",
            "cca2": "UY",
            "name": "America/Montevideo"
        }, {"id": "401", "cca2": "UZ", "name": "Asia/Samarkand"}, {
            "id": "402",
            "cca2": "UZ",
            "name": "Asia/Tashkent"
        }, {"id": "403", "cca2": "VA", "name": "Europe/Vatican"}, {
            "id": "404",
            "cca2": "VC",
            "name": "America/St_Vincent"
        }, {"id": "405", "cca2": "VE", "name": "America/Caracas"}, {
            "id": "406",
            "cca2": "VG",
            "name": "America/Tortola"
        }, {"id": "407", "cca2": "VI", "name": "America/St_Thomas"}, {
            "id": "408",
            "cca2": "VN",
            "name": "Asia/Ho_Chi_Minh"
        }, {"id": "409", "cca2": "VU", "name": "Pacific/Efate"}, {
            "id": "410",
            "cca2": "WF",
            "name": "Pacific/Wallis"
        }, {"id": "411", "cca2": "WS", "name": "Pacific/Apia"}, {
            "id": "412",
            "cca2": "YE",
            "name": "Asia/Aden"
        }, {"id": "413", "cca2": "YT", "name": "Indian/Mayotte"}, {
            "id": "414",
            "cca2": "ZA",
            "name": "Africa/Johannesburg"
        }, {"id": "415", "cca2": "ZM", "name": "Africa/Lusaka"}, {
            "id": "416",
            "cca2": "ZW",
            "name": "Africa/Harare"
        }, {"id": "417", "cca2": "CA", "name": "America/Montreal"}]
    };

    module.exports = {
        getList: getList
    }

}());
},{}],392:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var transactionRepository = require('../repositories/transactionRepository');

    var getList = function (options) {
        return transactionRepository.getList(options);
    };

    var getByKey = function (id) {
        return transactionRepository.getByKey(id);
    };

    var create = function(transaction) {
        return transactionRepository.create(transaction);
    };

    var update = function(id, transaction) {
        return transactionRepository.update(id, transaction);
    };

    var deleteByKey = function (id) {
        return transactionRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/transactionRepository":292}],393:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var transactionTypeRepository = require('../repositories/transactionTypeRepository');

    var getList = function (options) {
        return transactionTypeRepository.getList(options);
    };

    var getByKey = function (id) {
        return transactionTypeRepository.getByKey(id);
    };

    var create = function (transaction) {
        return transactionTypeRepository.create(transaction);
    };

    var update = function (id, transaction) {
        return transactionTypeRepository.update(id, transaction);
    };

    var deleteByKey = function (id) {
        return transactionTypeRepository.deleteByKey(id);
    };

    var getBookTransaction = function (id) {
        return transactionTypeRepository.getBookTransaction(id);
    };

    var bookTransaction = function (id, transaction) {
        return transactionTypeRepository.bookTransaction(id, transaction);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        getBookTransaction: getBookTransaction,
        bookTransaction: bookTransaction
    }


}());
},{"../repositories/transactionTypeRepository":293}],394:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var complexTransactionRepository = require('../../repositories/transaction/complexTransactionRepository');

    var getList = function (options) {
        return complexTransactionRepository.getList(options);
    };

    var getByKey = function (id) {
        return complexTransactionRepository.getByKey(id);
    };

    var create = function (transaction) {
        return complexTransactionRepository.create(transaction);
    };

    var update = function (id, transaction) {
        return complexTransactionRepository.update(id, transaction);
    };

    var deleteByKey = function (id) {
        return complexTransactionRepository.deleteByKey(id);
    };

    var getBookComplexTransaction = function (id) {
        return complexTransactionRepository.getBookComplexTransaction(id);
    };

    var bookComplexTransaction = function (id, transaction) {
        return complexTransactionRepository.bookComplexTransaction(id, transaction);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey,
        getBookComplexTransaction: getBookComplexTransaction,
        bookComplexTransaction: bookComplexTransaction
    }


}());
},{"../../repositories/transaction/complexTransactionRepository":294}],395:[function(require,module,exports){
/**
 * Created by szhitenev on 29.09.2016.
 */
(function () {

    'use strict';

    var transactionClassRepository = require('../../repositories/transaction/transactionClassRepository');

    var getList = function () {
        return transactionClassRepository.getList();
    };

    var getListSync = function(){
        return transactionClassRepository.getListSync();
    };

    module.exports = {
        getList: getList,
        getListSync: getListSync
    }

}());
},{"../../repositories/transaction/transactionClassRepository":295}],396:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var transactionTypeGroupRepository = require('../../repositories/transaction/transactionTypeGroupRepository');

    var getList = function (options) {
        return transactionTypeGroupRepository.getList(options);
    };

    var getByKey = function (id) {
        return transactionTypeGroupRepository.getByKey(id);
    };

    var create = function(account) {
        return transactionTypeGroupRepository.create(account);
    };

    var update = function(id, account) {
        return transactionTypeGroupRepository.update(id, account);
    };

    var deleteByKey = function (id) {
        return transactionTypeGroupRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../../repositories/transaction/transactionTypeGroupRepository":296}],397:[function(require,module,exports){
/**
 * Created by szhitenev on 16.06.2016.
 */
(function () {

    'use strict';

    var uiRepository = require('../repositories/uiRepository');

    var getEditLayout = function (entity) {
        return uiRepository.getEditLayout(entity);
    };

    var createEditLayout = function (entity, ui) {
        return uiRepository.createEditLayout(entity, ui);
    };

    var updateEditLayout = function (id, ui) {
        return uiRepository.updateEditLayout(id, ui);
    };

    var getListLayout = function (entity) {
        return uiRepository.getListLayout(entity);
    };

    var getListLayoutByKey = function (key) {
        return uiRepository.getListLayoutByKey(key);
    };

    var getActiveListLayout = function (entity) {
        return uiRepository.getActiveListLayout(entity);
    };

    var createListLayout = function (entity, ui) {
        return uiRepository.createListLayout(entity, ui);
    };

    var updateListLayout = function (id, ui) {
        return uiRepository.updateListLayout(id, ui)
    };

    var deleteListLayoutByKey = function (id) {
        return uiRepository.deleteListLayoutByKey(id);
    };

    var getDefaultListLayout = function () {
        return uiRepository.getDefaultListLayout();
    };

    var getDefaultEditLayout = function (entityType) {
        return uiRepository.getDefaultEditLayout(entityType);
    };

    var getEditLayoutByInstanceId = function (entityType, id) {
        return uiRepository.getEditLayoutByInstanceId(entityType, id).then(function (data) {
            if (entityType == 'complex-transaction') {
                return data.book_transaction_layout
            }
        });
    };

    var updateEditLayoutByInstanceId = function (entityType, id, editLayout) {

        if (entityType == 'complex-transaction') {
            return uiRepository.updateEditLayoutByInstanceId(entityType, id, {book_transaction_layout: editLayout})
        }

    };

    module.exports = {
        getDefaultListLayout: getDefaultListLayout,
        getDefaultEditLayout: getDefaultEditLayout,
        getEditLayout: getEditLayout,
        createEditLayout: createEditLayout,
        updateEditLayout: updateEditLayout,
        getListLayout: getListLayout,
        getListLayoutByKey: getListLayoutByKey,
        createListLayout: createListLayout,
        updateListLayout: updateListLayout,
        getEditLayoutByInstanceId: getEditLayoutByInstanceId,
        updateEditLayoutByInstanceId: updateEditLayoutByInstanceId,
        getActiveListLayout: getActiveListLayout,

        deleteListLayoutByKey: deleteListLayoutByKey
    }

}());
},{"../repositories/uiRepository":297}],398:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    var usersGroupRepository = require('../repositories/usersGroupRepository');

    var getList = function (options) {
        return usersGroupRepository.getList(options);
    };

    var getByKey = function (id) {
        return usersGroupRepository.getByKey(id);
    };

    var create = function (group) {
        return usersGroupRepository.create(group);
    };

    var update = function (id, group) {
        return usersGroupRepository.update(id, group);
    };

    var deleteByKey = function (id) {
        return usersGroupRepository.deleteByKey(id);
    };


    module.exports = {
        getList: getList,
        getByKey: getByKey,
        create: create,
        update: update,
        deleteByKey: deleteByKey
    }


}());
},{"../repositories/usersGroupRepository":298}],399:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
(function () {

    'use strict';

    var usersRepository = require('../repositories/usersRepository');

    var login = function (login, password) {
        return usersRepository.login(login, password);
    };

    var logout = function () {
        return usersRepository.logout();
    };

    var ping = function () {
        return usersRepository.ping();
    };

    var protectedPing = function () {
        return usersRepository.protectedPing();
    };

    var getList = function () {
        return usersRepository.getList();
    };

    var getByKey = function (id) {
        return usersRepository.getByKey(id)
    };

    var getMe = function () {
        return usersRepository.getMe();
    };

    var changePassword = function (id, user) {
        return usersRepository.changePassword(id, user);
    };

    var update = function (id, user) {
        return usersRepository.update(id, user);
    };

    var patch = function (id, user) {
        return usersRepository.patch(id, user);
    };

    var deleteByKey = function (id) {
        return usersRepository.deleteByKey(id);
    };

    var getMasterList = function () {
        return usersRepository.getMasterList();
    };

    var getMasterByKey = function (id) {
        return usersRepository.getMasterByKey(id)
    };

    var updateMaster = function (id, user) {
        return usersRepository.updateMaster(id, user);
    };

    var patchMaster = function (id, user) {
        return usersRepository.patchMaster(id, user);
    };

    var deleteMasterByKey = function (id) {
        return usersRepository.deleteMasterByKey(id);
    };

    var setMasterUser = function (id) {
        return usersRepository.setMasterUser(id);
    };


    var getMemberList = function () {
        return usersRepository.getMemberList();
    };

    var getMemberByKey = function (id) {
        return usersRepository.getMemberByKey(id)
    };

    var updateMember = function (id, user) {
        return usersRepository.updateMember(id, user);
    };

    var patchMember = function (id, user) {
        return usersRepository.patchMember(id, user);
    };

    var deleteMemberByKey = function (id) {
        return usersRepository.deleteMemberByKey(id);
    };

    var getGroupList = function () {
        return usersRepository.getGroupList();
    };

    module.exports = {
        login: login,
        logout: logout,

        ping: ping,
        protectedPing: protectedPing,

        getList: getList,
        getByKey: getByKey,
        getMe: getMe,
        changePassword: changePassword,
        update: update,
        patch: patch,
        deleteByKey: deleteByKey,

        getMasterList: getMasterList,
        getMasterByKey: getMasterByKey,
        updateMaster: updateMaster,
        patchMaster: patchMaster,
        deleteMasterByKey: deleteMasterByKey,
        setMasterUser: setMasterUser,

        getMemberList: getMemberList,
        getMemberByKey: getMemberByKey,
        updateMember: updateMember,
        patchMember: patchMember,
        deleteMemberByKey: deleteMemberByKey,

        getGroupList: getGroupList
    }

}());
},{"../repositories/usersRepository":299}],400:[function(require,module,exports){
/**
 * Created by szhitenev on 04.05.2016.
 */
'use strict';

require('../../forum/scripts/main.js');

var app = angular.module('portal', [
    'ngAria',
    'ngMaterial',
    'ngMessages',
    'ngMdIcons',
    'ngResource',
    'ngSanitize',
    'ui.router',
    'vAccordion',
    'mdPickers',
    'bw.paging',
    'ui.select',
    'io.dennis.contextmenu',
    angularDragula(angular),

    'forum'
]);


app.config(['$stateProvider', '$urlRouterProvider', require('./app/router.js')]);
app.config(['$mdDateLocaleProvider', function ($mdDateLocaleProvider) {
    $mdDateLocaleProvider.formatDate = function (date) {
        return moment(date).format('YYYY-MM-DD');
    };
}]);

app.run(['$rootScope', function ($rootScope) {
    console.log('App initialized');
    localStorage.setItem('entityIsChanged', false);

    var usersService = require('./app/services/usersService');

    $rootScope.$on('$stateChangeStart', function (event) {

        usersService.ping().then(function (data) {

            console.log('CHECK AUTH', data);

            if (data.is_authenticated == false) {
                event.preventDefault();
                window.location = '/';
            }

        });


        setTimeout(function () {
            $(window).trigger('resize');
        }, 300);
    })
}]);


app.controller('ShellController', ['$scope', '$state', '$rootScope', '$mdDialog', require('./app/controllers/shellController')]);
app.controller('SideNavController', ['$scope', '$mdDialog', require('./app/controllers/sideNavController')]);

app.controller('DashboardController', ['$scope', '$mdDialog', require('./app/controllers/dashboardController')]);
app.controller('ActionsController', ['$scope', '$mdDialog', require('./app/controllers/actionsController')]);
app.controller('ImportInstrumentDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/importInstrumentDialogController')]);
app.controller('ImportTransactionDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/importTransactionDialogController')]);
app.controller('ImportTransactionErrorsDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/importTransactionErrorsDialogController')]);
app.controller('AutomatedUploadsHistoryDialogController', ['$scope', '$mdDialog', '$mdpTimePicker', require('./app/controllers/dialogs/automatedUploadsHistoryDialogController')]);
app.controller('FillPriceHistoryDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/fillPriceHistoryDialogController')]);
app.controller('EventScheduleConfigDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/eventScheduleConfigDialogController')]);
app.controller('FillPriceManuallyInstrumentDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/fillPriceManuallyInstrumentDialogController')]);
app.controller('PriceDownloadSchemeAddDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/priceDownloadSchemeAddDialogController')]);
app.controller('EventDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/eventDialogController')]);

app.controller('AttributesManagerController', ['$scope', '$state', '$stateParams', '$mdDialog', require('./app/controllers/attributesManagerController')]);
app.controller('AttributesManagerEditDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/attributesManagerEditDialogController')]);
app.controller('AttributesManagerAddDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/attributesManagerAddDialogController')]);
app.controller('ClassificationEditorDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/classificationEditorDialogController')]);
app.controller('CustomFieldsConfigDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/customFieldsConfigDialogController')]);

app.controller('InstrumentMappingAddDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/instrumentMappingAddDialogController')]);
app.controller('InstrumentMappingEditDialogController', ['$scope', '$mdDialog', 'schemeId', require('./app/controllers/dialogs/instrumentMappingEditDialogController')]);
app.controller('EntityTypeMappingDialogController', ['$scope', '$mdDialog', 'mapItem', require('./app/controllers/dialogs/entityTypeMappingDialogController')]);

app.controller('TransactionMappingAddDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/transactionMappingAddDialogController')]);
app.controller('TransactionMappingEditDialogController', ['$scope', '$mdDialog', 'schemeId', require('./app/controllers/dialogs/transactionMappingEditDialogController')]);
app.controller('TransactionMappingInputMappingDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/transactionMappingInputMappingDialogController')]);


app.controller('EntityViewerController', ['$scope', '$mdDialog', require('./app/controllers/entityViewer/entityViewerController')]);
app.controller('EntityViewerAddDialogController', ['$scope', '$mdDialog', 'parentScope', '$state', require('./app/controllers/entityViewer/entityViewerAddDialogController')]);
app.controller('EntityViewerEditDialogController', ['$scope', '$mdDialog', 'parentScope', 'entityId', '$state', require('./app/controllers/entityViewer/entityViewerEditDialogController')]);
app.controller('EntityViewerDeleteDialogController', ['$scope', '$mdDialog', 'entity', 'entityType', require('./app/controllers/entityViewer/entityViewerDeleteDialogController')]);
app.controller('ReportWizardController', ['$scope', require('./app/controllers/entityViewer/onBeforeLoadActions/reportWizardController')]);

app.controller('EntityEditorController', ['$scope', '$state', require('./app/controllers/entityEditorController')]);
app.controller('EntityViewerPermissionEditorController', ['$scope', require('./app/controllers/entityViewer/entityViewerPermissionEditorController')]);

app.controller('ComplexTransactionSpecialRulesController', ['$scope', require('./app/controllers/special-rules/complexTransactionSpecialRulesController')]);

app.controller('BookTransactionActionsTabController', ['$scope', require('./app/controllers/tabs/complex-transaction/bookTransactionActionsTabController')]);
app.controller('BookTransactionTransactionsTabController', ['$scope', '$mdDialog', require('./app/controllers/tabs/complex-transaction/bookTransactionTransactionsTabController')]);
app.controller('ComplexTransactionsTransactionEditDialogController', ['$scope', '$mdDialog', 'entityId', require('./app/controllers/entityViewer/complexTransactionsTransactionEditDialogController')]);

app.controller('TransactionTypeActionsTabController', ['$scope', '$mdDialog', require('./app/controllers/tabs/transaction-type/transactionTypeActionsTabController')]);
app.controller('TransactionTypeGeneralTabController', ['$scope', '$mdDialog', require('./app/controllers/tabs/transaction-type/transactionTypeGeneralTabController')]);
app.controller('TransactionTypeInputsTabController', ['$scope', '$mdDialog', require('./app/controllers/tabs/transaction-type/transactionTypeInputsTabController')]);

app.controller('AccrualCalculationSchedulesTabController', ['$scope', require('./app/controllers/tabs/instrument/accrualCalculationSchedulesController')]);
app.controller('EventSchedulesTabController', ['$scope', require('./app/controllers/tabs/instrument/eventSchedulesController')]);
app.controller('FactorScheduleTabController', ['$scope', require('./app/controllers/tabs/instrument/factorScheduleTabController')]);
app.controller('ManualPricingFormulasTabController', ['$scope', require('./app/controllers/tabs/instrument/manualPricingFormulasTabController')]);
app.controller('InstrumentEventActionsDialogController', ['$scope', '$mdDialog', 'eventActions', require('./app/controllers/dialogs/instrumentEventActionsDialogController')]);

app.controller('DataPortfolioController', ['$scope', '$stateParams', require('./app/controllers/data/dataPortfolioController')]);
app.controller('DataTagController', ['$scope', '$stateParams', require('./app/controllers/data/dataTagController')]);
app.controller('DataAccountController', ['$scope', '$stateParams', require('./app/controllers/data/dataAccountController')]);
app.controller('DataAccountTypeController', ['$scope', '$stateParams', require('./app/controllers/data/dataAccountTypeController')]);
app.controller('DataCounterpartyController', ['$scope', '$stateParams', require('./app/controllers/data/dataCounterpartyController')]);
app.controller('DataCounterpartyGroupController', ['$scope', '$stateParams', require('./app/controllers/data/dataCounterpartyGroupController')]);
app.controller('DataResponsibleController', ['$scope', '$stateParams', require('./app/controllers/data/dataResponsibleController')]);
app.controller('DataResponsibleGroupController', ['$scope', '$stateParams', require('./app/controllers/data/dataResponsibleGroupController')]);
app.controller('DataInstrumentController', ['$scope', '$stateParams', require('./app/controllers/data/dataInstrumentController')]);
app.controller('DataInstrumentTypeController', ['$scope', '$stateParams', require('./app/controllers/data/dataInstrumentTypeController')]);
app.controller('DataPricingPolicyController', ['$scope', '$stateParams', require('./app/controllers/data/dataPricingPolicyController')]);
app.controller('DataTransactionController', ['$scope', '$stateParams', require('./app/controllers/data/dataTransactionController')]);
app.controller('DataComplexTransactionController', ['$scope', '$stateParams', require('./app/controllers/data/dataComplexTransactionController')]);
app.controller('DataTransactionTypeController', ['$scope', '$stateParams', require('./app/controllers/data/dataTransactionTypeController')]);
app.controller('DataTransactionTypeGroupController', ['$scope', '$stateParams', require('./app/controllers/data/dataTransactionTypeGroupController')]);
app.controller('DataPriceHistoryController', ['$scope', '$stateParams', require('./app/controllers/data/dataPriceHistoryController')]);
app.controller('DataCurrencyHistoryController', ['$scope', '$stateParams', require('./app/controllers/data/dataCurrencyHistoryController')]);
app.controller('DataCurrencyController', ['$scope', '$stateParams', require('./app/controllers/data/dataCurrencyController')]);
app.controller('DataStrategyController', ['$scope', '$stateParams', require('./app/controllers/data/dataStrategyController')]);
app.controller('DataStrategyGroupController', ['$scope', '$stateParams', require('./app/controllers/data/dataStrategyGroupController')]);
app.controller('DataStrategySubgroupController', ['$scope', '$stateParams', require('./app/controllers/data/dataStrategySubgroupController')]);
app.controller('TransactionsAuditController', ['$scope', '$stateParams', require('./app/controllers/system/auditTransactionsController')]);
app.controller('InstrumentsAuditController', ['$scope', '$stateParams', require('./app/controllers/system/auditInstrumentsController')]);

app.controller('BalanceReportController', ['$scope', '$stateParams', require('./app/controllers/reports/balanceReportController')]);
app.controller('ReportCustomAttrController', ['$scope', '$stateParams', '$mdDialog', require('./app/controllers/reports/reportCustomAttrController')]);
app.controller('BalanceReportDialogCustomAttrController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/balanceReportAddDialogCustomAttrController')]);

app.controller('ProfitAndLostReportController', ['$scope', '$stateParams', require('./app/controllers/reports/profitAndLostReportController')]);
app.controller('TransactionReportController', ['$scope', '$stateParams', require('./app/controllers/reports/transactionReportController')]);
app.controller('CashFlowProjectionReportController', ['$scope', '$stateParams', require('./app/controllers/reports/cashFlowProjectionReportController')]);
app.controller('PerformanceReportController', ['$scope', '$stateParams', require('./app/controllers/reports/performanceReportController')]);

app.controller('EntityDataConstructorController', ['$scope', '$stateParams', '$state', '$mdDialog', require('./app/controllers/entityDataConstructorController')]);

app.controller('AdditionsEditorEntityEditController', ['$scope', '$state', '$mdDialog', require('./app/controllers/additionsEditorEntityEditController')]);

app.controller('WarningDialogController', ['$scope', '$mdDialog', 'warning', require('./app/controllers/dialogs/warningDialogController')]);
app.controller('HelpDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/helpDialogController')]);
app.controller('SuccessDialogController', ['$scope', '$mdDialog', 'success', require('./app/controllers/dialogs/successDialogController')]);
app.controller('ValidationDialogController', ['$scope', '$mdDialog', 'validationData', require('./app/controllers/dialogs/validationDialogController')]);
app.controller('ExpressionEditorDialogController', ['$scope', '$mdDialog', 'item', require('./app/controllers/dialogs/expressionEditorDialogController')]);
app.controller('InfoDialogController', ['$scope', '$mdDialog', 'info', require('./app/controllers/dialogs/infoDialogController')]);
app.controller('InstrumentSelectDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/instrumentSelectDialogController')]);
app.controller('ClassifierSelectDialogController', ['$scope', '$mdDialog', 'data', require('./app/controllers/dialogs/classifierSelectDialogController')]);
app.controller('SaveLayoutDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/saveLayoutDialogController')]);

app.controller('AuditController', ['$scope', require('./app/controllers/system/auditController')]);
app.controller('NotificationsController', ['$scope', '$state', '$stateParams', require('./app/controllers/system/notificationsController')]);
app.controller('HeaderNotificationsDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/HeaderNotificationsDialogController')]);

app.controller('SettingsGeneralController', ['$scope', '$state', require('./app/controllers/settings/settingsGeneralController')]);
app.controller('SettingsGeneralProfileController', ['$scope', require('./app/controllers/settings/general/settingsGeneralProfileController')]);
app.controller('SettingsGeneralChangePasswordController', ['$scope', '$mdDialog', require('./app/controllers/settings/general/settingsGeneralChangePasswordController')]);
app.controller('SettingsGeneralDataProvidersController', ['$scope', require('./app/controllers/settings/general/settingsGeneralDataProvidersController')]);
app.controller('SettingsGeneralDataProvidersConfigController', ['$scope', '$stateParams', '$mdDialog', '$state', require('./app/controllers/settings/general/settingsGeneralDataProvidersConfigController')]);
app.controller('SettingsGeneralInstrumentImportController', ['$scope', '$mdDialog', require('./app/controllers/settings/general/settingsGeneralInstrumentImportController')]);
app.controller('SettingsGeneralTransactionImportController', ['$scope', '$mdDialog', require('./app/controllers/settings/general/settingsGeneralTransactionImportController')]);

app.controller('SettingsFormDesignController', ['$scope', '$state', require('./app/controllers/settings/settingsFormDesignController')]);
app.controller('SettingBloombergImportInstrumentController', ['$scope', '$state', require('./app/controllers/settings/settingBloombergImportInstrumentController')]);

app.controller('SettingsMembersAndGroupsController', ['$scope', '$mdDialog', require('./app/controllers/settings/settingsMembersAndGroupsController')]);
app.controller('CreateMemberDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/createMemberDialogController')]);
app.controller('ManageMemberDialogController', ['$scope', '$mdDialog', 'memberId', require('./app/controllers/dialogs/manageMemberDialogController')]);
app.controller('ManageGroupDialogController', ['$scope', '$mdDialog', 'groupId', require('./app/controllers/dialogs/manageGroupDialogController')]);
app.controller('CreateGroupDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/createGroupDialogController')]);

app.controller('UiLayoutListDialogController', ['$scope', '$mdDialog', 'options', require('./app/controllers/dialogs/ui/uiLayoutListDialogController')]);
app.controller('UiLayoutSaveAsDialogController', ['$scope', '$mdDialog', 'options', require('./app/controllers/dialogs/ui/uiLayoutSaveAsDialogController')]);

app.controller('BookmarksWizardDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/bookmarksWizardDialogController')]);
app.controller('BookmarksLayoutSelectDialogController', ['$scope', '$mdDialog', require('./app/controllers/dialogs/bookmarksLayoutSelectDialogController')]);


app.controller('FloatCustomFieldConstructorController', ['$scope', require('./app/controllers/floatCustomFieldConstructorController')]);
app.controller('DateCustomFieldConstructorController', ['$scope', require('./app/controllers/dateCustomFieldConstructorController')]);

app.component('floatRangeCustomFieldControl', require('./app/components/floatRangeCustomFieldControlComponent'));
app.component('dateRangeCustomFieldControl', require('./app/components/dateRangeCustomFieldControlComponent'));
app.component('dashboardEntityViewer', require('./app/components/dashboardEntityViewerComponent'));

app.directive('menuToggle', [require('./app/directives/menuToggleDirective')]);
app.directive('menuLink', [require('./app/directives/menuLinkDirective')]);

app.directive('bindFieldControl', [require('./app/directives/bindFieldControlDirective')]);
app.directive('layoutConstructorField', [require('./app/directives/layoutConstructorFieldDirective')]);
app.directive('addTabEc', ['$compile', require('./app/directives/addTabEcDirective')]);

app.directive('fileRead', [require('./app/directives/fileReadDirective')]);
app.directive('onFinishRender', [require('./app/directives/onFinishRenderDirective')]);

// GROUP TABLE START

app.directive('groupTable', [require('./app/directives/groupTable/gTableComponent')]);
app.directive('groupTableBody', ['$mdDialog', require('./app/directives/groupTable/gTableBodyComponent')]);
app.directive('groupSidebarFilter', ['$mdDialog', require('./app/directives/groupTable/gSidebarFilterComponent')]);
app.directive('groupReportSettings', [require('./app/directives/groupTable/gReportSettingsComponent')]);
app.directive('groupGrouping', ['$mdDialog', require('./app/directives/groupTable/gGroupingComponent')]);
app.directive('groupColumns', [require('./app/directives/groupTable/gColumnsComponent')]);
app.directive('groupClipboardHandler', [require('./app/directives/groupTable/gClipboardHandlerComponent')]);
app.directive('groupColumnResizer', [require('./app/directives/groupTable/gColumnResizerComponent')]);
app.directive('gDialogDraggable', [require('./app/directives/groupTable/gDialogDraggableComponent')]);
app.directive('groupHeightAligner', [require('./app/directives/groupTable/gHeightAlignerComponent')]);
app.directive('groupVerticalScroll', [require('./app/directives/groupTable/gVerticalScrollComponent')]);
app.directive('groupHorizontalScroll', [require('./app/directives/groupTable/gHorizontalScrollComponent')]);
app.directive('groupSecondVerticalScroll', [require('./app/directives/groupTable/gSecondVerticalScrollComponent')]);
app.directive('groupEditorBinder', ['$templateCache', '$compile', require('./app/directives/groupTable/groupEditorBinderComponent')]);
app.directive('groupColumnInitWidth', [require('./app/directives/groupTable/gColumnInitWidthComponent.js')]);

app.directive('groupBindReportRow', [require('./app/directives/groupTable/gBindReportRowDirective.js')]);

app.controller('GReportSettingsDialogController', ['$scope', '$mdDialog', 'reportOptions', require('./app/controllers/dialogs/gReportSettingsDialogController')]);


app.controller('gModalController', ['$scope', '$mdDialog', 'parentScope', 'callback', require('./app/directives/groupTable/gModalComponent')]);
app.controller('gModalReportController', ['$scope', '$mdDialog', 'parentScope', 'callback', require('./app/directives/groupTable/gModalReportComponent')]);
app.controller('gModalReportTransactionController', ['$scope', '$mdDialog', 'parentScope', 'callback', require('./app/directives/groupTable/gModalReportTransactionComponent')]);
app.controller('gModalReportPerformanceController', ['$scope', '$mdDialog', 'parentScope', 'callback', require('./app/directives/groupTable/gModalReportPerformanceComponent')]);
app.controller('gModalReportCashFlowProjectionController', ['$scope', '$mdDialog', 'parentScope', 'callback', require('./app/directives/groupTable/gModalReportCashFlowProjectionComponent')]);

// GROUP TABLE END


app.directive('evFieldResolver', [require('./app/directives/entityViewerFieldResolverDirective')]);
app.directive('ismFieldResolver', [require('./app/directives/instrumentSchemeManagerFieldResolverDirective')]);
app.directive('floatNumbers', [require('./app/directives/floatNumbersDirective')]);
app.directive('instrumentModalResolver', ['$mdDialog', require('./app/directives/instrumentModalResolverDirective')]);
app.directive('instrumentEventActionResolver', ['$mdDialog', require('./app/directives/instrumentEventActionResolverDirective')]);
app.directive('classifierModalResolver', ['$mdDialog', require('./app/directives/classifierModalResolverDirective')]);
app.directive('zhDatePicker', ['$mdDialog', require('./app/directives/zhDatePickerDirective')]);
app.directive('customScroll', [require('./app/directives/customScrollDirective')]);
app.directive('dragDialog', [require('./app/directives/dragDialogDirective')]);
app.directive('membersGroupsTable', [require('./app/directives/membersGroupsTableDirective')]);
app.directive('twoFieldsOptions', [require('./app/directives/twoFieldsOptionsDirective')]);
app.directive('inputFileDirective', [require('./app/directives/inputFileDirective')]);
app.directive('bookmarks', ['$mdDialog', require('./app/directives/bookmarksDirective')]);

app.filter('trustAsHtml', ['$sce', require('./app/filters/trustAsHtmlFilter')]);
app.filter('trustAsUrl', ['$sce', require('./app/filters/trustAsUrlFilter')]);
app.filter('strLimit', ['$filter', require('./app/filters/strLimitFilter')]);
app.filter('propsFilter', ['$filter', require('./app/filters/propsFilter')]);

app.directive('ngRightClick', ['$parse', function ($parse) {
    return function (scope, element, attrs) {
        var fn = $parse(attrs.ngRightClick);
        element.bind('contextmenu', function (event) {
            scope.$apply(function () {
                event.preventDefault();
                fn(scope, {$event: event});
            });
        });
    };
}]);

require('./templates.min.js');

String.prototype.capitalizeFirstLetter = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
}
},{"../../forum/scripts/main.js":23,"./app/components/dashboardEntityViewerComponent":25,"./app/components/dateRangeCustomFieldControlComponent":26,"./app/components/floatRangeCustomFieldControlComponent":27,"./app/controllers/actionsController":28,"./app/controllers/additionsEditorEntityEditController":29,"./app/controllers/attributesManagerController":30,"./app/controllers/dashboardController":31,"./app/controllers/data/dataAccountController":32,"./app/controllers/data/dataAccountTypeController":33,"./app/controllers/data/dataComplexTransactionController":34,"./app/controllers/data/dataCounterpartyController":35,"./app/controllers/data/dataCounterpartyGroupController":36,"./app/controllers/data/dataCurrencyController":37,"./app/controllers/data/dataCurrencyHistoryController":38,"./app/controllers/data/dataInstrumentController":39,"./app/controllers/data/dataInstrumentTypeController":40,"./app/controllers/data/dataPortfolioController":41,"./app/controllers/data/dataPriceHistoryController":42,"./app/controllers/data/dataPricingPolicyController":43,"./app/controllers/data/dataResponsibleController":44,"./app/controllers/data/dataResponsibleGroupController":45,"./app/controllers/data/dataStrategyController":46,"./app/controllers/data/dataStrategyGroupController":47,"./app/controllers/data/dataStrategySubgroupController":48,"./app/controllers/data/dataTagController":49,"./app/controllers/data/dataTransactionController":50,"./app/controllers/data/dataTransactionTypeController":51,"./app/controllers/data/dataTransactionTypeGroupController":52,"./app/controllers/dateCustomFieldConstructorController":53,"./app/controllers/dialogs/HeaderNotificationsDialogController":54,"./app/controllers/dialogs/attributesManagerAddDialogController":55,"./app/controllers/dialogs/attributesManagerEditDialogController":56,"./app/controllers/dialogs/automatedUploadsHistoryDialogController":57,"./app/controllers/dialogs/balanceReportAddDialogCustomAttrController":58,"./app/controllers/dialogs/bookmarksLayoutSelectDialogController":59,"./app/controllers/dialogs/bookmarksWizardDialogController":60,"./app/controllers/dialogs/classificationEditorDialogController":61,"./app/controllers/dialogs/classifierSelectDialogController":62,"./app/controllers/dialogs/createGroupDialogController":63,"./app/controllers/dialogs/createMemberDialogController":64,"./app/controllers/dialogs/customFieldsConfigDialogController":65,"./app/controllers/dialogs/entityTypeMappingDialogController":66,"./app/controllers/dialogs/eventDialogController":67,"./app/controllers/dialogs/eventScheduleConfigDialogController":68,"./app/controllers/dialogs/expressionEditorDialogController":69,"./app/controllers/dialogs/fillPriceHistoryDialogController":70,"./app/controllers/dialogs/fillPriceManuallyInstrumentDialogController":71,"./app/controllers/dialogs/gReportSettingsDialogController":72,"./app/controllers/dialogs/helpDialogController":73,"./app/controllers/dialogs/importInstrumentDialogController":74,"./app/controllers/dialogs/importTransactionDialogController":75,"./app/controllers/dialogs/importTransactionErrorsDialogController":76,"./app/controllers/dialogs/infoDialogController":77,"./app/controllers/dialogs/instrumentEventActionsDialogController":78,"./app/controllers/dialogs/instrumentMappingAddDialogController":79,"./app/controllers/dialogs/instrumentMappingEditDialogController":80,"./app/controllers/dialogs/instrumentSelectDialogController":81,"./app/controllers/dialogs/manageGroupDialogController":82,"./app/controllers/dialogs/manageMemberDialogController":83,"./app/controllers/dialogs/priceDownloadSchemeAddDialogController":84,"./app/controllers/dialogs/saveLayoutDialogController":85,"./app/controllers/dialogs/successDialogController":86,"./app/controllers/dialogs/transactionMappingAddDialogController":87,"./app/controllers/dialogs/transactionMappingEditDialogController":88,"./app/controllers/dialogs/transactionMappingInputMappingDialogController":89,"./app/controllers/dialogs/ui/uiLayoutListDialogController":90,"./app/controllers/dialogs/ui/uiLayoutSaveAsDialogController":91,"./app/controllers/dialogs/validationDialogController":92,"./app/controllers/dialogs/warningDialogController":93,"./app/controllers/entityDataConstructorController":94,"./app/controllers/entityEditorController":95,"./app/controllers/entityViewer/complexTransactionsTransactionEditDialogController":96,"./app/controllers/entityViewer/entityViewerAddDialogController":97,"./app/controllers/entityViewer/entityViewerController":98,"./app/controllers/entityViewer/entityViewerDeleteDialogController":99,"./app/controllers/entityViewer/entityViewerEditDialogController":100,"./app/controllers/entityViewer/entityViewerPermissionEditorController":101,"./app/controllers/entityViewer/onBeforeLoadActions/reportWizardController":102,"./app/controllers/floatCustomFieldConstructorController":103,"./app/controllers/reports/balanceReportController":104,"./app/controllers/reports/cashFlowProjectionReportController":105,"./app/controllers/reports/performanceReportController":106,"./app/controllers/reports/profitAndLostReportController":107,"./app/controllers/reports/reportCustomAttrController":108,"./app/controllers/reports/transactionReportController":109,"./app/controllers/settings/general/settingsGeneralChangePasswordController":110,"./app/controllers/settings/general/settingsGeneralDataProvidersConfigController":111,"./app/controllers/settings/general/settingsGeneralDataProvidersController":112,"./app/controllers/settings/general/settingsGeneralInstrumentImportController":113,"./app/controllers/settings/general/settingsGeneralProfileController":114,"./app/controllers/settings/general/settingsGeneralTransactionImportController":115,"./app/controllers/settings/settingBloombergImportInstrumentController":116,"./app/controllers/settings/settingsFormDesignController":117,"./app/controllers/settings/settingsGeneralController":118,"./app/controllers/settings/settingsMembersAndGroupsController":119,"./app/controllers/shellController":120,"./app/controllers/sideNavController":121,"./app/controllers/special-rules/complexTransactionSpecialRulesController":122,"./app/controllers/system/auditController":123,"./app/controllers/system/auditInstrumentsController":124,"./app/controllers/system/auditTransactionsController":125,"./app/controllers/system/notificationsController":126,"./app/controllers/tabs/complex-transaction/bookTransactionActionsTabController":127,"./app/controllers/tabs/complex-transaction/bookTransactionTransactionsTabController":128,"./app/controllers/tabs/instrument/accrualCalculationSchedulesController":129,"./app/controllers/tabs/instrument/eventSchedulesController":130,"./app/controllers/tabs/instrument/factorScheduleTabController":131,"./app/controllers/tabs/instrument/manualPricingFormulasTabController":132,"./app/controllers/tabs/transaction-type/transactionTypeActionsTabController":133,"./app/controllers/tabs/transaction-type/transactionTypeGeneralTabController":134,"./app/controllers/tabs/transaction-type/transactionTypeInputsTabController":135,"./app/directives/addTabEcDirective":136,"./app/directives/bindFieldControlDirective":137,"./app/directives/bookmarksDirective":138,"./app/directives/classifierModalResolverDirective":139,"./app/directives/customScrollDirective":140,"./app/directives/dragDialogDirective":141,"./app/directives/entityViewerFieldResolverDirective":142,"./app/directives/fileReadDirective":143,"./app/directives/floatNumbersDirective":144,"./app/directives/groupTable/gBindReportRowDirective.js":145,"./app/directives/groupTable/gClipboardHandlerComponent":146,"./app/directives/groupTable/gColumnInitWidthComponent.js":147,"./app/directives/groupTable/gColumnResizerComponent":148,"./app/directives/groupTable/gColumnsComponent":149,"./app/directives/groupTable/gDialogDraggableComponent":150,"./app/directives/groupTable/gGroupingComponent":151,"./app/directives/groupTable/gHeightAlignerComponent":152,"./app/directives/groupTable/gHorizontalScrollComponent":153,"./app/directives/groupTable/gModalComponent":154,"./app/directives/groupTable/gModalReportCashFlowProjectionComponent":155,"./app/directives/groupTable/gModalReportComponent":156,"./app/directives/groupTable/gModalReportPerformanceComponent":157,"./app/directives/groupTable/gModalReportTransactionComponent":158,"./app/directives/groupTable/gReportSettingsComponent":159,"./app/directives/groupTable/gSecondVerticalScrollComponent":160,"./app/directives/groupTable/gSidebarFilterComponent":161,"./app/directives/groupTable/gTableBodyComponent":162,"./app/directives/groupTable/gTableComponent":163,"./app/directives/groupTable/gVerticalScrollComponent":164,"./app/directives/groupTable/groupEditorBinderComponent":165,"./app/directives/inputFileDirective":166,"./app/directives/instrumentEventActionResolverDirective":167,"./app/directives/instrumentModalResolverDirective":168,"./app/directives/instrumentSchemeManagerFieldResolverDirective":169,"./app/directives/layoutConstructorFieldDirective":170,"./app/directives/membersGroupsTableDirective":171,"./app/directives/menuLinkDirective":172,"./app/directives/menuToggleDirective":173,"./app/directives/onFinishRenderDirective":174,"./app/directives/twoFieldsOptionsDirective":175,"./app/directives/zhDatePickerDirective":176,"./app/filters/propsFilter":177,"./app/filters/strLimitFilter":178,"./app/filters/trustAsHtmlFilter":179,"./app/filters/trustAsUrlFilter":180,"./app/router.js":300,"./app/services/usersService":399,"./templates.min.js":401}],401:[function(require,module,exports){
!function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/actions-view.html",'<div class="actions-view"><div layout="row" layout-align="space-between"><fieldset layout="column" class="fieldset-data-import"><legend>Data import actions</legend><div layout="row" layout-align="space-between"><div><md-button data-ng-click="vm.importInstrument($event)" class="md-primary md-raised">Import instrument</md-button></div><div><md-button data-ng-click="vm.importTransaction($event)" class="md-primary md-raised">Import transaction</md-button></div></div><div layout="row" layout-align="space-between"><div><md-button data-ng-click="vm.fillPriceHistory($event)" class="md-primary md-raised">Fill price history</md-button></div><div><md-button data-ng-click="vm.automatedUploads($event)" class="md-primary md-raised">Automated uploads</md-button></div></div></fieldset><fieldset class="fieldset-import-schemes"><legend>Import schemes</legend><div layout="row" layout-align="space-between"><div><md-button class="md-raised md-primary" data-ng-click="vm.addScheme($event)">Create instrument import scheme</md-button></div></div><div layout="row" layout-align="space-between"><div><md-button class="md-raised md-primary" data-ng-click="vm.addPriceDownloadScheme($event)">Create price download scheme</md-button></div></div></fieldset></div><div layout="row" layout-align="space-between"><fieldset class="fieldset-data-mapping"><legend>Data mappings</legend><div layout="row" layout-align="space-between"><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'periodicity\'})" class="md-primary md-raised">Periodicity mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'currency\'})" class="md-primary md-raised">Currency mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'instrument_type\'})" class="md-primary md-raised">Instrument type mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'instrument\'})" class="md-primary md-raised">Instrument mapping</md-button></div></div><div layout="row" layout-align="space-between"><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'account\'})" class="md-primary md-raised">Account mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'counterparty\'})" class="md-primary md-raised">Counterparty mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'responsible\'})" class="md-primary md-raised">Responsible mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'portfolio\'})" class="md-primary md-raised">Portfolio mapping</md-button></div></div><div layout="row" layout-align="space-between"><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity: \'accrual_calculation_model\'})" class="md-primary md-raised">Accrual calculation model mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity: \'daily_pricing_model\'})" class="md-primary md-raised">Daily pricing model mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity: \'payment_size_detail\'})" class="md-primary md-raised">Payment size detail mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity: \'price_download_scheme\'})" class="md-primary md-raised">Price download scheme mapping</md-button></div></div><div layout="row" layout-align="space-between"><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'strategy_1\'})" class="md-primary md-raised">Strategy 1 mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'strategy_2\'})" class="md-primary md-raised">Strategy 2 mapping</md-button></div><div><md-button data-ng-click="vm.openMapping($event, {complexExpressionEntity:\'strategy_3\'})" class="md-primary md-raised">Strategy 3 mapping</md-button></div><div>&nbsp;</div></div></fieldset></div><div layout="row" layout-align="space-between"><fieldset class="fieldset-event-settings"><legend>Event settings</legend><div layout="row"><md-button class="md-raised md-primary" data-ng-click="vm.generateEvents($event)">Generate events</md-button><md-button class="md-raised md-primary" data-ng-click="vm.checkForEvents($event)">Check for events</md-button><md-button class="md-raised md-primary" data-ng-click="vm.eventScheduleConfig()">Configure event schedule</md-button></div></fieldset></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/additions-editor-view.html",'<div data-ng-controller="AdditionsEditorEntityEditController as vm" class="min-height"><div data-custom-scroll class="custom-scrollbar"><div data-ng-if="vm.readyStatus.entityId" data-ng-include="\'views/entity-editor-view.html\'"></div><div layout="row" layout-align="space-between center"><div layout="row"><md-button ng-click="vm.editLayout()" class="md-raised md-primary" style="margin-left: 27px; height: 36px">Edit Form</md-button><md-button ng-click="vm.manageAttrs()" class="md-raised md-primary" style="height: 36px">Manage attributes</md-button><md-button data-ng-if="vm.evAction === \'update\'" class="md-raised" ng-click="vm.copy()" style="margin-right: 25px; height: 36px">Make a copy</md-button><md-button data-ng-if="vm.evAction === \'update\'" class="md-raised" ng-click="vm.cancel()" style="height: 36px">Cancel</md-button></div><div layout="row" style="height: 48px"><md-button class="md-raised" ng-click="vm.save()" style="margin-bottom: 80px; margin-right:20px"><span data-ng-if="vm.evAction === \'create\'">Add </span><span data-ng-if="vm.evAction === \'update\'">Save</span></md-button></div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attribute-manager-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="attribute-manager-dialog-view" style="width: 60%"><md-toolbar><div class="md-toolbar-tools"><h2>Attribute manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="row"><div data-ng-if="vm.readyStatus.attribute" style="width: 100%"><md-tabs md-dynamic-height md-border-bottom class="tabs-colored"><md-tab><md-tab-label>General</md-tab-label><md-tab-body><div class="a-m-tab-content"><md-input-container class="md-block" flex-gt-sm><label>Attribute name</label><input data-ng-model="vm.attribute.name"></md-input-container><div data-ng-if="vm.editRestriction" flex-gt-sm><md-input-container class="md-block"><label>Attribute type</label><md-select ng-model="vm.attribute[\'value_type\']" disabled="disabled"><md-option ng-repeat="valueType in vm.valueTypes" value="{{valueType.value}}">{{valueType[\'caption_name\']}}</md-option></md-select></md-input-container></div><div data-ng-if="!vm.editRestriction" flex-gt-sm><md-input-container class="md-block"><label>Attribute type</label><md-select ng-model="vm.attribute[\'value_type\']"><md-option ng-repeat="valueType in vm.valueTypes" value="{{valueType.value}}">{{valueType[\'caption_name\']}}</md-option></md-select></md-input-container></div><md-input-container class="md-block" flex-gt-sm style="margin-top: 10px"><md-checkbox data-ng-model="vm.attribute.is_hidden" aria-label="checkbox"><label style="width: 100%; position: relative">Is hidden</label></md-checkbox></md-input-container></div></md-tab-body></md-tab><md-tab data-ng-if="vm.checkPermissions()"><md-tab-label><span class="colored-tab">Permissions</span></md-tab-label><md-tab-body><md-content class="md-padding p-t-26"><md-content class="md-padding"><div data-ng-if="vm.readyStatus.permissions"><md-tabs md-dynamic-height md-border-bottom><md-tab label="User permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">User name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="member in vm.members" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ member["display_name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab><md-tab label="Group permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">Group name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="group in vm.groups" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ group["name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.permissions"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-content></md-content></md-tab-body></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.attribute" style="width: 100%"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attributes-manager-view.html",'<div class="attributes-manager-view" style="height: 100%"><md-content style="height: 100%"><!--<md-button class="md-fab md-fab-bottom-right" data-ng-click="vm.addAttribute($event)">--><!--<ng-md-icon icon="add"></ng-md-icon>--><!--</md-button>--><div><h2 class="am-header"><span data-ng-bind="vm.entityType"></span><ng-md-icon icon="keyboard_arrow_right"></ng-md-icon>MANAGE ATTRIBUTES<ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></h2></div><div layout="row"><div layout="row" flex="50" layout-align="start center"><md-button class="md-raised" data-ng-click="vm.addAttribute($event)">ADD NEW</md-button></div><div layout="row" flex="50" layout-align="end center"><md-button class="md-raised" data-ng-click="vm.toggleHidden($event)"><span data-ng-show="!vm.showHidden">SHOW HIDDEN ATTRIBUTES </span><span data-ng-show="vm.showHidden">HIDE ATTRIBUTES</span></md-button><md-button class="md-raised md-primary" data-ui-sref="app.data.{{vm.entityType}}">RETURN TO VIEW</md-button><md-button class="md-raised md-primary" data-ui-sref="app.data-constructor({entityType: vm.entityType})">RETURN TO FORM EDITOR</md-button></div></div><div data-ng-if="vm.attrs.length"><md-card data-ng-repeat="item in vm.attrs" class="am-attr-card" data-ng-if="vm.checkIsHidden(item)"><div><b data-ng-bind="item.name"></b> (<span data-ng-bind="vm.bindType(item)"></span>)<div class="am-attr-misc"><md-button data-ng-if="item[\'value_type\'] === 30" class="am-attr-btn" data-ng-click="vm.editTreeAttr(item, $event)"><ng-md-icon icon="format_align_right"></ng-md-icon></md-button><md-button class="am-attr-btn" data-ng-click="vm.editAttr(item, $event)"><ng-md-icon icon="edit"></ng-md-icon></md-button><md-button class="am-attr-btn" data-ng-click="vm.deleteAttr(item, $event)"><ng-md-icon icon="delete"></ng-md-icon></md-button></div></div></md-card></div><div data-ng-if="!vm.attrs.length"><!-- <div layout="row" layout-sm="column" layout-align="space-around">\n                <md-progress-circular md-mode="indeterminate"></md-progress-circular>\n            </div> --><div layout="row" class="add-more-tip" layout-sm="column" layout-align="center center"><h1>You could add new user attributes here</h1></div></div></md-content></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/classification-editor-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="classifier-editor-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Classifier editor</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="row"><md-button data-ng-click="vm.createNode()">Insert item</md-button><md-button data-ng-click="vm.renameNode()">Rename item</md-button><md-button data-ng-click="vm.deleteNode()">Delete item</md-button></div><div layout="row"><div id="jstree_demo" style="width: 100%; overflow: hidden"></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/classifier-select-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="classifier-select-dialog-view"><md-toolbar><div class="md-toolbar-tools"><h2>Select classifier</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="row"><div data-ng-show="vm.tree.length" class="js-tree-holder-dialog-select"><div id="js-tree-select-wrapper" class="js-tree-select" style="width: 100%; overflow: hidden"></div></div><div data-ng-if="!vm.tree.length" style="width: 100%"><p style="text-align: center; width: 100%">Press Edit to create Classification</p></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised md-primary" ng-click="vm.edit($event)">Edit</md-button><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dashboard-view.html",'<div><div class="row"><div class="dashboard-row-holder" data-ng-if="vm.readyStatus.uiLayouts && vm.readyStatus.entityListLayout"><div class="dashboard-row"><div class="dashboard-item-wrap"><div layout="row" layout-align="space-between center" class="dashboard-item-header"><p data-ng-if="vm.widget1._d_layout.name">{{vm.widget1._d_layout.name}} (<span data-ng-bind="vm.resolveEntity(vm.widget1._d_layout)"></span>)</p><p data-ng-if="!vm.widget1._d_layout.name">Default</p><div class="close-entity-viewer-btn" data-ng-if="vm.widget1._d_configured" data-ng-click="vm.closeWidget(vm.widget1)"><ng-md-icon icon="close"></ng-md-icon><md-tooltip class="tooltip_1" md-direction="bottom">Change layout</md-tooltip></div></div><div data-ng-if="vm.widget1._d_configured"><div class="dashboard-item"><div class="custom-scrollbar" data-custom-scroll data-scroll-sticky="true"><dashboard-entity-viewer options="vm.widget1"></dashboard-entity-viewer></div></div></div><div data-ng-if="!vm.widget1._d_configured" class="dashboard-widget-wizard"><div layout="row" layout-align="center center"><md-input-container><label for="">Select Layout</label><md-select data-ng-model="vm.widget1._d_layout" data-ng-change="vm.changeWidget(vm.widget1)"><md-option data-ng-repeat="item in vm.uiLayouts" data-ng-value="item">{{item.name}} (<span data-ng-bind="vm.resolveEntity(item)"></span>)</md-option></md-select></md-input-container></div></div></div><div class="dashboard-item-wrap"><div layout="row" layout-align="space-between center" class="dashboard-item-header"><p data-ng-if="vm.widget2._d_layout.name">{{vm.widget2._d_layout.name}} (<span data-ng-bind="vm.resolveEntity(vm.widget2._d_layout)"></span>)</p><p data-ng-if="!vm.widget2._d_layout.name">Default</p><div class="close-entity-viewer-btn" data-ng-if="vm.widget2._d_configured" data-ng-click="vm.closeWidget(vm.widget2)"><ng-md-icon icon="close"></ng-md-icon><md-tooltip class="tooltip_1" md-direction="bottom">Change layout</md-tooltip></div></div><div data-ng-if="vm.widget2._d_configured"><div class="dashboard-item"><div class="custom-scrollbar" data-custom-scroll data-scroll-sticky="true"><dashboard-entity-viewer options="vm.widget2"></dashboard-entity-viewer></div></div></div><div data-ng-if="!vm.widget2._d_configured" class="dashboard-widget-wizard"><div layout="row" layout-align="center center"><md-input-container><label for="">Select Layout</label><md-select data-ng-model="vm.widget2._d_layout" data-ng-change="vm.changeWidget(vm.widget2)"><md-option data-ng-repeat="item in vm.uiLayouts" data-ng-value="item">{{item.name}} (<span data-ng-bind="vm.resolveEntity(item)"></span>)</md-option></md-select></md-input-container></div></div></div></div><div class="dashboard-row"><div class="dashboard-item-wrap"><div layout="row" layout-align="space-between center" class="dashboard-item-header"><p data-ng-if="vm.widget3._d_layout.name">{{vm.widget3._d_layout.name}} (<span data-ng-bind="vm.resolveEntity(vm.widget3._d_layout)"></span>)</p><p data-ng-if="!vm.widget3._d_layout.name">Default</p><div class="close-entity-viewer-btn" data-ng-if="vm.widget3._d_configured" data-ng-click="vm.closeWidget(vm.widget3)"><ng-md-icon icon="close"></ng-md-icon><md-tooltip class="tooltip_1" md-direction="bottom">Change layout</md-tooltip></div></div><div data-ng-if="vm.widget3._d_configured"><div class="dashboard-item"><div class="custom-scrollbar" data-custom-scroll data-scroll-sticky="true"><dashboard-entity-viewer options="vm.widget3"></dashboard-entity-viewer></div></div></div><div data-ng-if="!vm.widget3._d_configured" class="dashboard-widget-wizard"><div layout="row" layout-align="center center"><md-input-container><label for="">Select Layout</label><md-select data-ng-model="vm.widget3._d_layout" data-ng-change="vm.changeWidget(vm.widget3)"><md-option data-ng-repeat="item in vm.uiLayouts" data-ng-value="item">{{item.name}} (<span data-ng-bind="vm.resolveEntity(item)"></span>)</md-option></md-select></md-input-container></div></div></div><div class="dashboard-item-wrap"><div layout="row" layout-align="space-between center" class="dashboard-item-header"><p data-ng-if="vm.widget4._d_layout.name">{{vm.widget4._d_layout.name}} (<span data-ng-bind="vm.resolveEntity(vm.widget4._d_layout)"></span>)</p><p data-ng-if="!vm.widget4._d_layout.name">Default</p><div class="close-entity-viewer-btn" data-ng-if="vm.widget4._d_configured" data-ng-click="vm.closeWidget(vm.widget4)"><ng-md-icon icon="close"></ng-md-icon><md-tooltip class="tooltip_1" md-direction="bottom">Change layout</md-tooltip></div></div><div data-ng-if="vm.widget4._d_configured"><div class="dashboard-item"><div class="custom-scrollbar" data-custom-scroll data-scroll-sticky="true"><dashboard-entity-viewer options="vm.widget4"></dashboard-entity-viewer></div></div></div><div data-ng-if="!vm.widget4._d_configured" class="dashboard-widget-wizard"><div layout="row" layout-align="center center"><md-input-container><label for="">Select Layout</label><md-select data-ng-model="vm.widget4._d_layout" data-ng-change="vm.changeWidget(vm.widget4)"><md-option data-ng-repeat="item in vm.uiLayouts" data-ng-value="item">{{item.name}} (<span data-ng-bind="vm.resolveEntity(item)"></span>)</md-option></md-select></md-input-container></div></div></div></div></div><div data-ng-if="!vm.readyStatus.uiLayouts && !vm.readyStatus.entityListLayout"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/date-custom-field-constructor-view.html",'<div data-ng-controller="DateCustomFieldConstructorController as vm" class="date-custom-field-constructor-view"><h4 class="text-center">Date range constructor</h4><date-range-custom-field-control items="vm.rangeItems" range="vm.dateRange"></date-range-custom-field-control></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-data-constructor-view.html",'<div class="entity-constructor"><div data-ng-if="vm.readyStatus.constructor" class="ec-tabs-holder" data-add-tab-ec data-tabs="vm.tabs"><h1 class="ec-breadcrumbs"><span class="ec-entity-type">{{vm.entityType}}<ng-md-icon icon="chevron_right" size="24" style="fill:#8B8B8B"></ng-md-icon></span>INPUT FORM EDITOR</h1><md-tabs md-border-bottom md-dynamic-height><md-tab data-ng-repeat="tab in vm.tabs"><md-tab-label><div data-ng-if="!tab.editState"><span class="ec-tab-item-name">{{tab.name}}</span><md-button class="ec-tab-btn" data-ng-click="vm.toggleEditTab(tab)"><ng-md-icon icon="edit"></ng-md-icon></md-button><md-button class="ec-tab-btn" data-ng-click="vm.deleteTab(tab)"><ng-md-icon icon="delete"></ng-md-icon></md-button></div><div data-ng-if="tab.editState"><md-input-container class="ec-tab-item-edit"><label>Tab name</label><input ng-model="tab.captionName"></md-input-container><md-button class="ec-tab-btn" data-ng-click="vm.saveEditedTab(tab)"><ng-md-icon icon="save"></ng-md-icon></md-button><md-button class="ec-tab-btn" data-ng-click="vm.toggleEditTab(tab, \'back\', $index)"><ng-md-icon icon="cancel"></ng-md-icon></md-button></div></md-tab-label><md-tab-body><div class="ec-md-content ec-layout-tab"><div class="ec-layout-box"><span class="select-layout-caption">Select layout</span><md-button class="{{tab.layout.columns === item ? \'active\' : \'\' }} ec-layout-btn" data-ng-click="vm.setLayoutColumns(tab, item, $event)" data-ng-repeat="item in vm.boxColumns"><ng-md-icon icon="stop" data-ng-repeat="icon in vm.range(item)"></ng-md-icon></md-button></div><div class="ec-layout"><div layout="row" data-ng-repeat="row in vm.range(tab.layout.rows)"><div data-ng-repeat="column in vm.range(tab.layout.columns)" flex="{{vm.bindFlex(tab, row, column)}}" data-ng-if="vm.checkColspan(tab, row, column)"><layout-constructor-field tab="tab" row="row" column="column"></layout-constructor-field></div></div></div></div></md-tab-body></md-tab></md-tabs><div layout="row" layout-align="space-between center"><div><md-button data-ng-if="vm.MABtnVisibility(vm.entityType)" class="md-raised md-primary manage-attrs-btn" data-ui-sref="app.attributesManager({entityType: vm.entityType})">Manage attributes</md-button></div><div style="padding-right: 10px"><md-button ng-click="vm.cancel()" class="md-raised">Cancel</md-button><md-button ng-click="vm.saveLayout()" class="md-raised">Save & Return</md-button></div></div></div><div data-ng-if="!vm.readyStatus.constructor"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="120"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-editor-view.html",'<div data-ng-controller="EntityEditorController as vm"><div class="entity-editor-special-rules-holder" data-ng-if="vm.entitySpecialRules"><div data-ng-include="vm.resolveSpecialRules()"></div></div><div data-ng-if="vm.specialRulesReady"><div data-ng-if="vm.checkReadyStatus()"><md-tabs md-dynamic-height md-border-bottom class="tabs-colored"><md-tab data-ng-repeat="tab in vm.tabs"><md-tab-label><span>{{tab.name}}</span></md-tab-label><md-tab-body><md-content class="md-padding p-t-26"><div layout="row" data-ng-repeat="row in vm.range(tab.layout.rows)"><div class="ev-data-field {{field.attribute[\'value_type\'] === \'decoration\' ? \'decoration-label-line\' : \'\'}}" data-ng-repeat="field in tab.layout.fields" flex="{{vm.bindFlex(tab, row, field)}}" data-ng-if="vm.checkFieldRender(tab, row, field)"><bind-field-control item="vm.bindField(tab, field)"></bind-field-control></div></div></md-content></md-tab-body></md-tab><md-tab data-ng-repeat="tab in vm.entityTabs" data-ng-if="vm.checkViewState(tab)"><md-tab-lable><span class="grey-tab">{{tab.label}}</span></md-tab-lable><md-tab-body><md-content class="md-padding p-t-26"><div data-ng-include="tab.templateUrl"></div></md-content></md-tab-body></md-tab><md-tab data-ng-if="vm.checkPermissions()"><md-tab-label><span class="colored-tab">Permissions</span></md-tab-label><md-tab-body><md-content class="md-padding p-t-26"><md-content class="md-padding"><div data-ng-if="vm.readyStatus.permissions"><md-tabs md-dynamic-height md-border-bottom><md-tab label="User permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">User name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="member in vm.members" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ member["display_name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab><md-tab label="Group permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">Group name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="group in vm.groups" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ group["name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.permissions"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-content></md-content></md-tab-body></md-tab></md-tabs></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/float-custom-field-constructor-view.html",'<div data-ng-controller="FloatCustomFieldConstructorController as vm" class="float-custom-field-constructor-view"><h4 class="text-center">Number range constructor</h4><float-range-custom-field-control items="vm.rangeItems"></float-range-custom-field-control></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/info-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="warning-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>{{vm.info.title}}</h2><span flex></span></div></md-toolbar><md-dialog-content><div class="warning-text"><p>{{vm.info.description}}</p></div></md-dialog-content><md-dialog-actions layout="row"><!--<md-button ng-click="vm.cancel()">--><!--Cancel--><!--</md-button>--><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/instrument-select-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="instrument-select-dialog-view"><md-toolbar><div class="md-toolbar-tools"><h2>Search instrument</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="column"><div><table class="bordered"><thead><tr><th><md-input-container class="md-block"><label>Name</label><input data-ng-model="vm.search[\'name\']" data-ng-model-options="{debounce: 1000}" data-ng-change="vm.updateTable()"></md-input-container></th><th><md-input-container class="md-block"><label>Short name</label><input data-ng-model="vm.search[\'short_name\']" data-ng-model-options="{debounce: 1000}" data-ng-change="vm.updateTable()"></md-input-container></th><th><md-input-container class="md-block"><label>User code</label><input data-ng-model="vm.search[\'user_code\']" data-ng-model-options="{debounce: 1000}" data-ng-change="vm.updateTable()"></md-input-container></th><th><md-input-container class="md-block bind-field-input"><label>User text 1</label><input data-ng-model="vm.search[\'user_text_1\']" data-ng-model-options="{debounce: 1000}" data-ng-change="vm.updateTable()"></md-input-container></th><th><md-input-container class="md-block bind-field-input"><label>User text 2</label><input data-ng-model="vm.search[\'user_text_2\']" data-ng-model-options="{debounce: 1000}" data-ng-change="vm.updateTable()"></md-input-container></th><th><md-input-container class="md-block bind-field-input"><label>User text 3</label><input data-ng-model="vm.search[\'user_text_3\']" data-ng-model-options="{debounce: 1000}" data-ng-change="vm.updateTable()"></md-input-container></th></tr></thead><tbody><tr data-ng-click="vm.selectRow(item)" ng-dblclick="vm.selectAndSave(item)" data-ng-repeat="item in vm.instruments" class="{{item.active ? \'active\' : \'\'}}" style="height: 40px"><td data-ng-bind="item[\'name\']"></td><td data-ng-bind="item[\'short_name\']"></td><td data-ng-bind="item[\'user_code\']"></td><td data-ng-bind="item[\'user_text_1\']"></td><td data-ng-bind="item[\'user_text_2\']"></td><td data-ng-bind="item[\'user_text_3\']"></td></tr></tbody></table></div><div data-ng-if="!vm.instruments.length" style="text-align: center; margin-top: 20px">No result found</div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised md-primary" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/save-layout-dialog-view.html",'<md-dialog aria-label=""><div layout="column" layout-align="center center"><h3>Page was saved.</h3><div><md-button class="md-raised" data-ng-click="vm.cancel()">Close</md-button></div></div></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/shell-view.html",'<div layout="row" class="min-height"><div layout="row" class="sidenav-wrapper" data-ng-controller="SideNavController as vm" data-ng-include="\'views/side-nav-view.html\'"></div><div layout="column" class="relative" layout-fill role="main"><md-toolbar ng-show="!showSearch" class="header" layout="columns"><div class="md-toolbar-tools" flex="70" layout="start center"><h2 data-ng-if="vm.currentLocation().length > 0" data-ng-bind="vm.currentLocation()"></h2><div data-ng-if="vm.currentLocationShowBtns" layout="row" style="margin-left: 20px"><md-menu><md-button class="md-button header-cloud-layout-btn" ng-click="$mdOpenMenu($event)"><ng-md-icon icon="cloud" size="36"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button data-ng-click="vm.openLayoutList($event)">Open layout</md-button></md-menu-item><md-menu-item><md-button class="save-layout-btn">Save</md-button></md-menu-item><md-menu-item><md-button class="save-layout-as-btn">Save as</md-button></md-menu-item></md-menu-content></md-menu><bookmarks></bookmarks></div><div layout="row"><md-button class="md-button header-help-btn" data-ng-click="vm.openHelp($event)" aria-label="Notifications"><ng-md-icon icon="help" size="36"></ng-md-icon></md-button><md-button data-ng-if="vm.isReport()" class="md-button header-help-btn" data-ng-click="vm.copyReport($event)" aria-label="Copy report"><ng-md-icon icon="content_copy" size="36"></ng-md-icon></md-button></div></div><div class="md-toolbar-tools" flex="30" layout-align="end end"><div class="header-misc" layout="row"><!--<md-button data-ui-sref="app.system.notifications" aria-label="Notifications">--><!--<ng-md-icon icon="mail_outline"></ng-md-icon>--><!--</md-button>--><md-button data-ui-sref="app.system.notifications({notificationsListType: \'unreaded\'})" aria-label="Notifications"><ng-md-icon icon="flag"></ng-md-icon><span data-ng-show="vm.unreadedNotificationsAmount" data-ng-bind="vm.unreadedNotificationsAmount" class="unreaded-notifications-number"></span></md-button><div class="header-profile"><md-menu><md-button class="md-button header-account-btn" ng-click="$mdOpenMenu($event)"><ng-md-icon icon="account_circle" size="48"></ng-md-icon><span class="header-profile-name" data-ng-bind="vm.user.username"></span></md-button><md-menu-content><md-menu-item data-ng-repeat="item in vm.masters"><md-button data-ng-click="vm.selectMaster(item)"><span data-ng-if="item.is_current"><b>{{item.name}}</b></span> <span data-ng-if="!item.is_current">{{item.name}}</span></md-button></md-menu-item><md-menu-item><md-button data-ng-click="vm.logOutMethod()">Log Out</md-button></md-menu-item></md-menu-content></md-menu></div></div><!--<a href="#" data-ng-click="vm.logout()">Log out</a>--></div></md-toolbar><md-content flex data-custom-scroll class="app-md-content custom-scrollbar"><div data-ui-view class="shell-view"></div></md-content></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/side-nav-view.html",'<md-sidenav class="md-sidenav-left md-whiteframe-z1" md-component-id="left" md-is-locked-open="true"><md-toolbar md-scroll-shrink><div class="md-toolbar-tools"><img src="portal/content/img/finmars_logo.png" alt="" height="40" class="sidenav-logo"><div class="side-nav-btn-resize-holder"><md-button data-ng-show="vm.sideNavStatus == \'expand\'" aria-label="resize" class="to-small-btn side-nav-btn fab md-raised" data-ng-click="vm.resizeSideNav(\'collapse\')"><ng-md-icon icon="chevron_left"></ng-md-icon></md-button><md-button data-ng-show="vm.sideNavStatus == \'collapse\'" aria-label="resize" class="to-small-btn side-nav-btn fab md-raised" data-ng-click="vm.resizeSideNav(\'expand\')"><ng-md-icon icon="chevron_right"></ng-md-icon></md-button></div></div></md-toolbar><md-content flex role="navigation"><div style="overflow: hidden; height: 100%; display: block"><div data-custom-scroll class="custom-scrollbar"><ul class="side-menu"><li data-ng-repeat="section in vm.sections" class="parent-list-item" data-ng-class="{\'parentActive\' : vm.isSectionSelected(section)}"><menu-link section="section" ng-if="section.type === \'link\'"></menu-link><menu-toggle section="section" ng-if="section.type === \'toggle\'"></menu-toggle></li><li><md-button ui-sref-active="active" class="sidemenu-btn" ng-click="vm.openHelp($event)"><span class="side-nav-icon"><ng-md-icon icon="local_library" size="24"></ng-md-icon></span><span class="side-nav-title">Help</span></md-button></li></ul></div></div></md-content></md-sidenav>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/warning-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="warning-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>{{vm.warning.title}}</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div class="warning-text"><p>{{vm.warning.description}}</p></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">Cancel</md-button><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attribute-options/date.html",'<div data-ng-if="item"><fieldset class="standard" style="padding-top: 15px"><legend>Add buttons</legend><md-checkbox data-ng-model="item.options.dateTodayMinus" aria-label="checkbox">T - 1</md-checkbox><md-checkbox data-ng-model="item.options.dateToday" aria-label="checkbox">T</md-checkbox><md-checkbox data-ng-model="item.options.dateTodayPlus" aria-label="checkbox">T + 1</md-checkbox></fieldset></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attribute-options/field.html","<div data-ng-if=\"item\"><md-input-container class=\"md-block\" data-ng-if=\"item.attribute.key !== 'instrument'\"><label>Display fields in list</label><md-select ng-model=\"item.options.fieldsList\"><md-option ng-selected=\"{{findSelected(item.options.fieldsList, ['name','short_name','user_code'])}}\" ng-value=\"['name','short_name','user_code']\">Long / Short / User code</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsList, ['short_name','user_code'])}}\" ng-value=\"['short_name','user_code']\">Short / User code</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsList, ['short_name'])}}\" ng-value=\"['short_name']\">Short</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsList, ['name'])}}\" ng-value=\"['name']\">Long</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsList, ['user_code'])}}\" ng-value=\"['user_code']\">User code</md-option></md-select></md-input-container><md-input-container class=\"md-block\"><label>Display fields on form</label><md-select ng-model=\"item.options.fieldsForm\"><md-option ng-selected=\"{{findSelected(item.options.fieldsForm, ['name','short_name','user_code'])}}\" ng-value=\"['name','short_name','user_code']\">Long / Short / User code</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsForm, ['short_name','user_code'])}}\" ng-value=\"['short_name','user_code']\">Short / User code</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsForm, ['short_name'])}}\" ng-value=\"['short_name']\">Short</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsForm, ['name'])}}\" ng-value=\"['name']\">Long</md-option><md-option ng-selected=\"{{findSelected(item.options.fieldsForm, ['user_code'])}}\" ng-value=\"['user_code']\">User code</md-option></md-select></md-input-container></div>")}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attribute-options/labeled-line.html",'<div><md-input-container class="md-block"><label>Label text</label><input data-ng-model="item.options.labelText"></md-input-container></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attribute-options/notes.html",'<div><md-input-container class="md-block"><label>Row count</label><input data-ng-model="item.options.rowCount" type="number"></md-input-container><!--<md-input-container class="md-block" flex-gt-sm>--><!--<label>Frame</label>--><!--<md-select ng-model="item.options.frame">--><!--<md-option value="0">--><!--No border--><!--</md-option>--><!--<md-option value="1">--><!--Border--><!--</md-option>--><!--</md-select>--><!--</md-input-container>--></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attribute-options/number.html",'<div><md-checkbox data-ng-model="item.options.onlyPositive" aria-label="checkbox">Only positive</md-checkbox></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/attribute-options/string.html",'<div><md-input-container class="md-block"><label>Copy text from</label><md-select ng-model="item.options.copyFrom"><md-option data-ng-repeat="attr in findStringAttributes()" ng-value="copyFromValue(attr)">{{attr.name}}</md-option></md-select></md-input-container><md-checkbox data-ng-model="item.options.notNull" aria-label="checkbox">Not null</md-checkbox></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/components/date-range-custom-field-control-component.html",'<div><div layout="column"><!--<div layout="row" class="drcf-before" layout-align="center center">--><!--<md-input-container flex="30">--><!--<label for="">Starting text</label>--><!--<input type="text" data-ng-model="$ctrl.range.before.date">--><!--</md-input-container>--><!--<md-input-container flex="30" style="height: 58px">--><!--<label for="">Earliest From Date format</label>--><!--<md-select data-ng-model="$ctrl.range.before.format">--><!--<md-option data-ng-value="item.value" data-ng-repeat="item in $ctrl.dateFormats track by item.id">--><!--{{item.caption}}--><!--</md-option>--><!--</md-select>--><!--</md-input-container>--><!--<md-input-container flex="30">--><!--<label for="">Ending text</label>--><!--<input type="text" data-ng-model="$ctrl.range.before.name">--><!--</md-input-container>--><!--</div>--><div class="drcf-item" data-ng-repeat="item in $ctrl.items" layout="row"><div class="column" flex="90"><div layout="row" class="drcf-item-top" layout-align="space-between center"><md-input-container><label for="">From date</label><input type="text" data-ng-model="item.begin" style="width: 60%"><!--<zh-date-picker ng-model="item.from"></zh-date-picker>--><md-button class="md-raised md-primary expr-btn" data-ng-click="$ctrl.openExpressionDialog($event, item, {key: \'begin\'})">...</md-button></md-input-container><md-input-container style="height: 58px"><label for="">Frequency</label><md-select data-ng-model="item.step"><md-option data-ng-value="item.step" data-ng-repeat="item in $ctrl.frequencies track by item.id">{{item.caption}}</md-option></md-select></md-input-container><md-input-container><label for="">To date</label><input type="text" data-ng-model="item.end" style="width: 60%"><!--<zh-date-picker ng-model="item.to"></zh-date-picker>--><md-button class="md-raised md-primary expr-btn" data-ng-click="$ctrl.openExpressionDialog($event, item, {key: \'end\'})">...</md-button></md-input-container></div><div layout="column" class="drcf-item-bottom" layout-align="center center"><div flex="60" layout="row" layout-align="center center"><div flex="30"><md-input-container><label for="">Starting text</label><input type="text" data-ng-model="item.str1"></md-input-container></div><md-input-container flex="30" style="height: 58px"><label for="">From Date format</label><md-select data-ng-model="item.begin_date_fmt"><md-option data-ng-value="item.value" data-ng-repeat="item in $ctrl.dateFormats track by item.id">{{item.caption}}</md-option></md-select></md-input-container><md-input-container flex="30"><label for="">Ending text</label><input type="text" data-ng-model="item.str3"></md-input-container></div><div flex="60" layout="row" layout-align="center center"><div flex="30"><md-input-container><label for="">Starting text</label><input type="text" data-ng-model="item.str4"></md-input-container></div><md-input-container flex="30" style="height: 58px"><label for="">To Date Format</label><md-select data-ng-model="item.end_date_fmt"><md-option data-ng-value="item.value" data-ng-repeat="item in $ctrl.dateFormats track by item.id">{{item.caption}}</md-option></md-select></md-input-container><md-input-container flex="30"><label for="">Ending text</label><input type="text" data-ng-model="item.str6"></md-input-container></div></div></div><div class="row" flex="10"><div><md-button class="md-icon-button md-raised {{$ctrl.inputIsFocused ? \'disabled-btn\' : \'\'}}" data-ng-click="$ctrl.addRange(item, $index)"><ng-md-icon icon="add"></ng-md-icon></md-button></div><div data-ng-if="$index !== 0"><md-button class="md-icon-button md-raised" data-ng-click="$ctrl.removeRange($index)"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></div></div><!--<div layout="row" class="drcf-after" layout-align="center center">--><!--<md-input-container flex="30">--><!--<label for="">Starting text</label>--><!--<input type="text" data-ng-model="$ctrl.range.after.date">--><!--</md-input-container>--><!--<md-input-container flex="30" style="height: 58px">--><!--<label for="">Latest To Date format</label>--><!--<md-select data-ng-model="$ctrl.range.after.format">--><!--<md-option data-ng-value="item.value" data-ng-repeat="item in $ctrl.dateFormats track by item.id">--><!--{{item.caption}}--><!--</md-option>--><!--</md-select>--><!--</md-input-container>--><!--<md-input-container flex="30">--><!--<label for="">Ending text</label>--><!--<input type="text" data-ng-model="$ctrl.range.after.name">--><!--</md-input-container>--><!--</div>--></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/components/float-range-custom-field-control-component.html",'<div><div data-ng-repeat="item in $ctrl.items" layout="column"><div layout="column"><div layout="row" layout-align="space-between center"><div flex="30" layout-align="center center" layout="row" style="height: 58px"><span data-ng-bind="item.value_left"></span></div><div flex="15" layout-align="center center" layout="row" style="height: 58px">&#60; X &#60;=</div><div flex="30" style="height: 58px" layout="row" layout-align="center center"><div data-ng-if="item.is_active == true"><md-input-container><input type="text" data-ng-model="item.value_right" data-ng-blur="$ctrl.checkRange(item, $index)" data-ng-keyup="$ctrl.syncActiveItem(item, $index)"></md-input-container></div><span data-ng-if="!item.is_active" data-ng-bind="item.value_right"></span></div><div flex="15"><md-input-container><input type="text" data-ng-model="item.group_name"></md-input-container></div><div flex="10" layout-align="center start" layout="row" style="height: 58px"><div><md-button class="md-icon-button md-raised {{$ctrl.inputIsFocused ? \'disabled-btn\' : \'\'}}" data-ng-click="$ctrl.addRange(item, $index)"><ng-md-icon icon="add"></ng-md-icon></md-button></div><div data-ng-if="$index !== 0"><md-button class="md-icon-button md-raised" data-ng-click="$ctrl.removeRange($index)"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></div></div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-account-type-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-account-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-complex-transaction-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-counterparty-group-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-counterparty-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-currency-history-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-currency-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-instrument-type-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-instrument-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-portfolio-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-price-history-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-pricing-policy-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-responsible-group-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-responsible-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-strategy-group-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-strategy-subgroup-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-strategy-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-tag-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-transaction-type-group-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-transaction-type-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/data/data-transaction-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/automated-uploads-history-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="automated-uploads-manager-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Automatic uploads manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div data-ng-if="vm.readyStatus.schedule" layout="column"><md-card><md-card-content><div><md-input-container><label for="">Upload periodicity</label><md-select data-ng-model="vm.cron.periodicity" data-ng-change="vm.resetCronExpr()"><md-option value="1">Daily</md-option><md-option value="2">Weekly</md-option><md-option value="3">Monthly</md-option></md-select></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div data-ng-show="vm.cron.periodicity == 2"><div style="padding-left: 14px"><p><b>Weekly</b></p><div><md-checkbox ng-model="vm.days[0].status" data-ng-click="vm.setDay(1)" aria-label="monday">Monday</md-checkbox><md-checkbox ng-model="vm.days[1].status" data-ng-click="vm.setDay(2)" aria-label="tuesday">Tuesday</md-checkbox><md-checkbox ng-model="vm.days[2].status" data-ng-click="vm.setDay(3)" aria-label="wednesday">Wednesday</md-checkbox><md-checkbox ng-model="vm.days[3].status" data-ng-click="vm.setDay(4)" aria-label="thursday">Thursday</md-checkbox><md-checkbox ng-model="vm.days[4].status" data-ng-click="vm.setDay(5)" aria-label="friday">Friday</md-checkbox><md-checkbox ng-model="vm.days[5].status" data-ng-click="vm.setDay(6)" aria-label="sat">Sat</md-checkbox><md-checkbox ng-model="vm.days[6].status" data-ng-click="vm.setDay(7)" aria-label="sun">Sun</md-checkbox></div></div></div><div data-ng-show="vm.cron.periodicity == 3"><div layout="row" style="padding-top: 14px"><md-input-container><label for="">Month</label><md-select data-ng-model="vm.cron.month" multiple="multiple"><md-option value="1">January</md-option><md-option value="2">February</md-option><md-option value="3">March</md-option><md-option value="4">April</md-option><md-option value="5">May</md-option><md-option value="6">June</md-option><md-option value="7">Jule</md-option><md-option value="8">August</md-option><md-option value="9">September</md-option><md-option value="10">November</md-option><md-option value="11">October</md-option><md-option value="12">December</md-option></md-select></md-input-container><md-input-container><label for="">Day</label><md-select data-ng-model="vm.cron.day" multiple="multiple"><md-option value="{{item + 1}}" data-ng-repeat="item in vm.getRange(31)">{{item + 1}}</md-option></md-select></md-input-container></div></div><div><md-input-container style="padding-left: 0; padding-top: 16px"><label for="">Time</label><mdp-time-picker class="custom-time-picker" data-ng-model="vm.cron.time"></mdp-time-picker></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777; margin-left: 8px"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div><md-input-container><label for="">Days to load</label><input type="text" data-ng-model="vm.schedule.load_days"></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div><md-input-container><label for="">Portfolio balance days</label><input type="text" data-ng-model="vm.schedule.balance_day" placeholder="days"></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div style="margin-bottom: 18px"><md-checkbox style="margin-left: 12px" ng-model="vm.schedule.override_existed" aria-label="override">Override old prices</md-checkbox><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div><md-input-container><label for="">Roll prices for N days forward</label><input type="text" data-ng-model="vm.schedule.fill_days" placeholder="days"></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></md-card-content></md-card></div><div data-ng-if="!vm.readyStatus.schedule"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree($event)" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/balance-report-custom-attr-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="attribute-manager-dialog-view draggable-dialog" style="width: 60%" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Attribute manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="row"><div data-ng-if="vm.readyStatus.attribute" style="width: 100%"><md-tabs md-dynamic-height md-border-bottom class="tabs-colored"><md-tab><md-tab-label>General</md-tab-label><md-tab-body><div class="a-m-tab-content"><md-input-container class="md-block" flex-gt-sm><label>Attribute name</label><input data-ng-model="vm.attribute.name" placeholder="{{vm.attribute.name}}"></md-input-container><div data-ng-if="vm.editRestriction" flex-gt-sm><md-input-container class="md-block"><label>Attribute expression</label><input data-ng-model="vm.attribute.expr" palceholder="{{vm.attribute.expr}}"></md-input-container></div><div data-ng-if="!vm.editRestriction" flex-gt-sm><md-input-container class="md-block"><label>Attribute expression</label><input data-ng-model="vm.attribute.expr"></md-input-container></div><md-button class="md-raised md-primary" data-ng-click="vm.setupConfig($event)">Define range</md-button><!-- <md-input-container class="md-block" flex-gt-sm style="margin-top: 10px">\n                                    <md-checkbox data-ng-model="vm.attribute.is_hidden"\n                                                 aria-label="checkbox">\n                                        <label style="width: 100%; position: relative">Is hidden</label>\n                                    </md-checkbox>\n                                </md-input-container> --></div></md-tab-body></md-tab><md-tab data-ng-if="vm.checkPermissions()"><md-tab-label><span class="colored-tab">Permissions</span></md-tab-label><md-tab-body><md-content class="md-padding p-t-26"><md-content class="md-padding"><div data-ng-if="vm.readyStatus.permissions"><md-tabs md-dynamic-height md-border-bottom><md-tab label="User permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">User name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="member in vm.members" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ member["display_name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab><md-tab label="Group permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">Group name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="group in vm.groups" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ group["name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.permissions"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-content></md-content></md-tab-body></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.attribute" style="width: 100%"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/bookmarks-layout-select-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="bookmarks-wizard-view" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>UI layouts</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div data-ng-if="vm.readyStatus.content" class="dialog-loader"><div style="padding: 24px"><div data-ng-repeat="item in vm.items" style="margin: 6px"><div data-ng-click="vm.selectLayout(item)"><b><span data-ng-bind="item.name"></span></b> (<span data-ng-bind="item.content_type"></span>)</div></div></div></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">Cancel</md-button><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/bookmarks-wizard-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="bookmarks-wizard-view" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Boomarks manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="row"><md-button data-ng-click="vm.createNode($event)">Insert</md-button><md-button data-ng-click="vm.renameNode()">Rename</md-button><md-button data-ng-click="vm.deleteNode()">Delete</md-button></div><div layout="row"><div id="jstree_demo" style="width: 100%; overflow: hidden"></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">Cancel</md-button><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/complex-transactions-transaction-edit-dialog-view.html",'<md-dialog aria-label="entity edit" ng-cloak class="add-portfolio-dialog draggable-dialog" drag-dialog><md-dialog-content data-custom-scroll class="custom-scrollbar"><!-- <div data-ng-include="\'views/entity-editor-view.html\'"></div> --><div class="entity-editor-special-rules-holder" data-ng-if="vm.entitySpecialRules"><div data-ng-include="vm.resolveSpecialRules()"></div></div><div data-ng-if="vm.specialRulesReady"><div data-ng-if="vm.checkReadyStatus()"><md-tabs md-dynamic-height md-border-bottom class="tabs-colored"><md-tab data-ng-repeat="tab in vm.tabs"><md-tab-label><span>{{tab.name}}</span></md-tab-label><md-tab-body><md-content class="md-padding p-t-26"><div layout="row" data-ng-repeat="row in vm.range(tab.layout.rows)"><div class="ev-data-field {{field.attribute[\'value_type\'] === \'decoration\' ? \'decoration-label-line\' : \'\'}}" data-ng-repeat="field in tab.layout.fields" flex="{{vm.bindFlex(tab, row, field)}}" data-ng-if="vm.checkFieldRender(tab, row, field)"><bind-field-control item="vm.bindField(tab, field)"></bind-field-control></div></div></md-content></md-tab-body></md-tab><md-tab data-ng-repeat="tab in vm.entityTabs" data-ng-if="vm.checkViewState(tab)"><md-tab-lable><span class="grey-tab">{{tab.label}}</span></md-tab-lable><md-tab-body><md-content class="md-padding p-t-26"><div data-ng-include="tab.templateUrl"></div></md-content></md-tab-body></md-tab><md-tab data-ng-if="vm.checkPermissions()"><md-tab-label><span class="colored-tab">Permissions</span></md-tab-label><md-tab-body><md-content class="md-padding p-t-26"><md-content class="md-padding"><div data-ng-if="vm.readyStatus.permissions"><md-tabs md-dynamic-height md-border-bottom><md-tab label="User permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">User name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="member in vm.members" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ member["display_name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="member.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab><md-tab label="Group permissions"><md-content><div><div layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-header"><div><div class="permissions-columns">Group name</div></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div class="permissions-columns" flex="50">Delegate<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div class="permissions-columns" flex="50">Read/Write<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_2" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div></div></div><md-divider></md-divider></div><div data-ng-repeat="group in vm.groups" layout="column"><div layout="row" layout-align="space-between center" class="permissions-table-row"><div><p>{{ group["name"] }}</p></div><div layout="row" class="permissions-checkbox-holder" flex="30" layout-align="space-between center"><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.manage"></md-checkbox></div><div flex="50" layout="center center"><md-checkbox class="md-secondary" ng-model="group.objectPermissions.change"></md-checkbox></div></div></div><md-divider></md-divider></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.permissions"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-content></md-content></md-tab-body></md-tab></md-tabs></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div><!--            ************************************8        --></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><div><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.save()" style="margin-right:20px">Save</md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/create-group-dialog-view.html",'<md-dialog class="create-member-group-dialog draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Add new group</h2></div></md-toolbar><md-dialog-content data-custom-scroll class="create-member-dialog-content custom-scrollbar"><div layout="column"><md-input-container><label>Group name</label><textarea data-ng-model="vm.groupName"></textarea></md-input-container></div></md-dialog-content><md-dialog-actions layout="row" layout-align="start center"><div flex="70"><md-button class="md-raised" data-ng-click="vm.cancel()">Cancel</md-button></div><div flex="30"><md-button class="md-raised md-primary" data-ng-click="vm.agree()">Create</md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/create-member-dialog-view.html",'<md-dialog class="create-member-group-dialog draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Add new member</h2></div></md-toolbar><md-dialog-content data-custom-scroll class="create-member-dialog-content custom-scrollbar"><div layout="column"><md-input-container><label>Username</label><textarea data-ng-model="vm.memberName"></textarea></md-input-container><!--<md-input-container>--><!--<label>Email</label>--><!--<textarea data-ng-model="vm.memberEmail"></textarea>--><!--</md-input-container>--></div></md-dialog-content><md-dialog-actions layout="row" layout-align="start center"><div flex="70"><md-button class="md-raised" data-ng-click="vm.cancel()">Cancel</md-button></div><div flex="30"><md-button class="md-raised md-primary" data-ng-click="vm.agree()">Create</md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/custom-fields-config-dialog-view.html",'<md-dialog aria-label="" drag-dialog ng-cloak class="custom-field-config-dialog-view draggable-dialog" style="width: 60%"><md-toolbar><div class="md-toolbar-tools"><h2>Range configuration manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div layout="row" layout-align="space-between center"><md-input-container style="width: 100%"><!--<label for="">Select field</label>--><!--<md-select data-ng-model="vm.reportField">--><!--<md-option data-ng-value="item" data-ng-repeat="item in vm.reportFields">--><!--{{item.name}}--><!--</md-option>--><!--</md-select>--><label for="">Field</label><input type="text" data-ng-model="vm.exprField"></md-input-container><md-input-container style="width: 100%; height: 58px"><label for="">Constructor type</label><md-select data-ng-model="vm.exprType" data-ng-change="vm.resetRanges()"><md-option value="20">Number</md-option><md-option value="40">Date</md-option></md-select></md-input-container></div><div data-ng-if="vm.exprType == 20"><div data-ng-include="\'views/float-custom-field-constructor-view.html\'"></div></div><div data-ng-if="vm.exprType == 40"><div data-ng-include="\'views/date-custom-field-constructor-view.html\'"></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/entity-type-mapping-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="entity-type-mapping-dialog-view draggable-dialog" style="width: 50%" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Entity type mapping</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div data-ng-if="vm.readyStatus.content"><md-card><md-card-content style="padding-top: 16px; padding-bottom: 0"><div data-ng-if="vm.mapEntityType == \'classifier\'"><div layout="row" style="margin-bottom: 20px"><div flex="50" data-ng-click="vm.setSort(\'mapping.value\')"><b>Your value </b><span class="sortorder" data-ng-show="vm.sort === \'mapping.value\'" data-ng-class="{reverse: vm.direction}"></span></div><div flex="40" data-ng-click="vm.setSort(\'name\')"><b>Map on {{vm.fancyEntity()}} </b><span class="sortorder" data-ng-show="vm.sort === \'name\'" data-ng-class="{reverse: vm.direction}"></span></div><div flex="10"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></div></div><div layout="row" style="margin-bottom: 20px" data-ng-if="vm.queryStatus" class="filter-row-holder"><div flex="50"><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.mapping.value"></md-input-container></div><div flex="50"><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.name"></md-input-container></div></div><div data-ng-repeat="item in vm.entityItems | filter:vm.query | orderBy:vm.sort:vm.direction"><div layout="row"><div flex="50"><md-input-container><label for="">Value</label><input type="text" data-ng-model="item.mapping.value"></md-input-container></div><div flex="50"><p data-ng-bind="item.name"></p></div></div></div></div><div data-ng-if="vm.mapEntityType != \'classifier\'"><div layout="row" style="margin-bottom: 20px"><div flex="50" data-ng-click="vm.setSort(\'mapping.value\')"><b>Your value </b><span class="sortorder" data-ng-show="vm.sort === \'mapping.value\'" data-ng-class="{reverse: vm.direction}"></span></div><div flex="40" data-ng-click="vm.setSort(\'name\')"><b>Map on {{vm.fancyEntity()}} </b><span class="sortorder" data-ng-show="vm.sort === \'name\'" data-ng-class="{reverse: vm.direction}"></span></div><div flex="10"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></div></div><div layout="row" style="margin-bottom: 20px" data-ng-if="vm.queryStatus" class="filter-row-holder"><div flex="50"><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.mapping.value"></md-input-container></div><div flex="50"><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.name"></md-input-container></div></div><div data-ng-repeat="item in vm.entityItems | filter:vm.query | orderBy:vm.sort:vm.direction"><div layout="row" data-ng-repeat="mappingItem in item.mapping" data-ng-show="!mappingItem.isDeleted"><div flex="50" layout="row"><md-input-container><label for="">Value</label><input type="text" data-ng-model="mappingItem.value"></md-input-container><div layout="row"><md-button data-ng-click="vm.addMapping(item)" class="md-raised md-icon-button">+</md-button><md-button data-ng-click="vm.removeMapping(item, mappingItem, $index)" data-ng-show="item.mapping.length > 1" class="md-raised md-icon-button">-</md-button></div></div><div flex="50"><p data-ng-bind="vm.bindEntityName(item)"></p></div></div></div></div></md-card-content></md-card></div><div data-ng-if="!vm.readyStatus.content"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/event-dialog-view.html",'<md-dialog aria-label="event"><md-toolbar><div class="md-toolbar-tools"><h2>Event</h2></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar md-padding"><div layout="row"><md-button aria-label="event button" data-ng-repeat="button in vm.actionsBtns" class="md-raised" data-ng-bind="button.display_text" data-ng-click="vm.eventAction($event, button.id)"></md-button></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><md-button aria-label="cancel" class="md-raised" data-ng-click="vm.ignore()">Ignore</md-button><md-button aria-label="cancel" class="md-raised" data-ng-click="vm.cancel()">Cancel</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/event-schedule-config-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="event-schedule-dialog-view draggable-dialog" drag-dialog style="width: 50%"><md-toolbar><div class="md-toolbar-tools"><h2>Event schedule config</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div data-ng-if="vm.checkReadyStatus()" layout="column"><md-card><md-card-content><md-input-container class="md-block"><label for="">Name</label><input type="text" data-ng-model="vm.config.name"></md-input-container><md-input-container class="md-block"><label for="">Description</label><input type="text" data-ng-model="vm.config.description"></md-input-container><md-input-container class="md-block" style="margin-bottom: 20px"><label for="">Notification class</label><md-select data-ng-model="vm.config.notification_class"><md-option data-ng-repeat="item in vm.notificationClasses" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container><md-input-container class="md-block"><label for="">Notify in N days</label><input type="text" data-ng-model="vm.config.notify_in_n_days"></md-input-container><md-input-container class="md-block"><label for="">Action text</label><input type="text" data-ng-model="vm.config.action_text"></md-input-container><md-input-container class="md-block"><md-checkbox ng-model="vm.config.action_is_sent_to_pending" aria-label="">Action is sent to pending</md-checkbox></md-input-container><md-input-container class="md-block"><md-checkbox ng-model="vm.config.action_is_book_automatic" aria-label="">Action is book automatic</md-checkbox></md-input-container></md-card-content></md-card></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" data-ng-click="vm.cancel()">Close</md-button><md-button class="md-raised" data-ng-click="vm.agree()">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/expression-editor-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="expression-editor-dialog draggable-dialog" drag-dialog style="width: 50%"><md-toolbar><div class="md-toolbar-tools"><h2>Expression editor</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><md-content><div><md-input-container class="md-block"><label for="">Expression</label><textarea name="" id="editorExpressionInput" cols="30" rows="10" data-ng-model="vm.item.expression"></textarea></md-input-container></div><!--<h2>Expression help</h2>--><!--<p>You could use this form to build an expression based on provided variables. You could use basic operators--><!--like +, -, *, /. Plus (+) could be used for strings concatenation. Based on scope of expression, you--><!--could use different set of expressions. For example inside "Instrument import schema" you could use data--><!--provider variables to build your own vlaues. For example, you build a custom Instrument name based on--><!--Bloomber downloaded parameters:--><!--</p>--><!--<p>ISSUER + \' \' +format_number(CPN)+\'% \' + format_date(parse_date(MATURITY, \'%m/%d/%Y\'),\'%d-%h-%Y\')--><!--</p>--><!--<p>Where ISSUER, CPN and MATURITY - are bloomberg parameters, and format_date, parse_date - two predifined--><!--functions. You could see predefined functions definition in a list below.--><!--</p>--><h2 style="text-align: center">Available functions</h2><div class="expression-editor-helper" layout="row"><div class="help-item-list" layout="column" flex="30"><md-input-container class="help-search-control"><input type="text" data-ng-model="vm.searchExpr" placeholder="Search"></md-input-container><div class="custom-scrollbar" data-custom-scroll style="height: 164px"><div class="{{item.isSelected ? \'selected\' : \'\'}} help-item-menu-item" data-ng-repeat="item in vm.expressions | filter: { name: vm.searchExpr }" data-ng-click="vm.selectHelpItem(item)">{{item.name}}</div></div></div><div class="help-item-description" layout="column" flex="70"><div data-custom-scroll class="help-item-description-content custom-scrollbar" data-ng-bind-html="vm.selectedHelpItem.description | trustAsHtml"></div><div layout="row" layout-align="end begin"><md-button class="md-raised" data-ng-click="vm.appendFunction(vm.selectedHelpItem)">Add</md-button></div></div></div></md-content></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between"><div><md-button ng-click="vm.openHelp($event)" class="md-raised md-primary">Help</md-button></div><div><md-button ng-click="vm.cancel()">Cancel</md-button><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/fill-price-history-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="fill-price-history-manager-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Price history manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div layout="column"><md-tabs md-dynamic-height md-border-bottom><md-tab label="Prices"><md-card><md-card-content><div><md-checkbox ng-model="vm.priceSettings.isRange" aria-label="override">Date range</md-checkbox></div><div data-ng-if="!vm.priceSettings.isRange"><md-input-container><label for="">Date</label><zh-date-picker data-ng-model="vm.price.date_both"></zh-date-picker></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div data-ng-if="vm.priceSettings.isRange"><md-input-container><label for="">Date from</label><zh-date-picker data-ng-model="vm.price.date_from"></zh-date-picker></md-input-container><md-input-container><label for="">Date to</label><zh-date-picker data-ng-model="vm.price.date_to"></zh-date-picker></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div data-ng-if="vm.priceSettings.isRange"><md-input-container><label for="">Portfolio balance date</label><zh-date-picker data-ng-model="vm.price.balance_date"></zh-date-picker></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div style="border: 1px solid #ccc; padding: 10px; padding-top: 26px"><div><md-input-container style="width: 60%"><label for="">Roll prices for N days forward</label><input type="text" data-ng-model="vm.price.fill_days" placeholder="days"></md-input-container><ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></div><div style="padding-left: 12px"><md-checkbox ng-model="vm.price.override_existed" aria-label="override">Override old prices<ng-md-icon class="tooltip-inline-block" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></md-checkbox></div></div><div layout="row"><md-button class="md-raised" data-ng-click="vm.uploadPrice()" style="margin-left: 0">Download</md-button><md-button class="md-raised" data-ng-click="vm.automatedUploads($event)">Automatic downloads</md-button><div style="padding-top: 10px"><md-progress-circular data-ng-if="vm.readyStatus.processing" md-mode="indeterminate" md-diameter="32"></md-progress-circular></div></div></md-card-content></md-card></md-tab><md-tab label="Accruals"><md-card><md-card-content style="padding-top: 20px"><div><md-input-container><label for="">Date from</label><zh-date-picker data-ng-model="vm.recalculate.date_from"></zh-date-picker></md-input-container><md-input-container><label for="">Date to</label><zh-date-picker data-ng-model="vm.recalculate.date_to"></zh-date-picker></md-input-container></div><div layout="row"><md-button class="md-raised" data-ng-click="vm.startRecalculation()">Recalculate</md-button><div data-ng-if="vm.readyStatus.recalculationProcessing"><md-progress-circular md-mode="indeterminate" md-diameter="48"></md-progress-circular></div><span data-ng-if="vm.readyStatus.recalculationDone" style="padding-top: 12px;fill: green"><ng-md-icon icon="check_circle"></ng-md-icon></span><span data-ng-if="vm.readyStatus.recalculationError" style="padding-top: 12px;fill: red"><ng-md-icon icon="block"></ng-md-icon></span></div></md-card-content></md-card></md-tab></md-tabs></div><!--<div data-ng-if="!vm.readyStatus.mapping">--><!--<div layout="row" layout-sm="column" layout-align="space-around" class="m-large">--><!--<md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular>--><!--</div>--><!--</div>--></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Close</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[]);
}t.run(["$templateCache",function(t){t.put("views/dialogs/fill-price-manually-instrument-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="warning-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Missed price history</h2><span flex></span></div></md-toolbar><md-dialog-content><div><md-tabs md-dynamic-height md-border-bottom><md-tab label="Instruments" data-ng-if="vm.instruments.length"><div data-ng-if="vm.checkReadyStatus()" style="padding: 20px"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'policy_name\')">Pricing policy<span class="sortorder" data-ng-show="vm.sort === \'policy_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'instrument_name\')">Instrument<span class="sortorder" data-ng-show="vm.sort === \'instrument_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'date\')">Date<span class="sortorder" data-ng-show="vm.sort === \'date\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'accrued_price\')">Accrued price<span class="sortorder" data-ng-show="vm.sort === \'accrued_price\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'principal_price\')">Principal price<span class="sortorder" data-ng-show="vm.sort === \'principal_price\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.policy_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.instrument_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.date"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.accrued_price"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.principal_price"></md-input-container></th></tr></thead><tbody><tr data-ng-repeat="item in vm.instrumentsPrices | filter:vm.query"><td data-ng-bind="vm.bindPricingPolicy(item)"></td><td data-ng-bind="vm.bindInstrument(item)"></td><td data-ng-bind="item.date"></td><td><md-input-container><input type="text" data-ng-model="item.accrued_price"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="item.principal_price"></md-input-container></td><td></td></tr></tbody></table></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-tab><md-tab label="Currencies" data-ng-if="vm.currencies.length"><div data-ng-if="vm.checkReadyStatus()" style="padding: 20px"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'policy_name\')">Pricing policy<span class="sortorder" data-ng-show="vm.sort === \'policy_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'currency_name\')">Currency<span class="sortorder" data-ng-show="vm.sort === \'currency_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'date\')">Date<span class="sortorder" data-ng-show="vm.sort === \'date\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'fx_rate\')">FX rate<span class="sortorder" data-ng-show="vm.sort === \'fx_rate\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.policy_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.instrument_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.date"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.accrued_price"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.principal_price"></md-input-container></th></tr></thead><tbody><tr data-ng-repeat="item in vm.currenciesPrices | filter:vm.query"><td data-ng-bind="vm.bindPricingPolicy(item)"></td><td data-ng-bind="vm.bindCurrency(item)"></td><td data-ng-bind="item.date"></td><td><md-input-container><input type="text" data-ng-model="item.fx_rate"></md-input-container></td><td></td></tr></tbody></table></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-tab></md-tabs></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.agree()" class="md-raised" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/g-report-settings-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="g-report-settings-dialog-view draggable-dialog" drag-dialog style="width: 75%"><md-toolbar><div class="md-toolbar-tools"><h2>Report settings</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><md-card style="margin-top: 10px"><md-card-content><div data-ng-if="vm.checkReadyStatus()"><h2>General Settings</h2><div layout="row" style="margin-bottom: 20px"><md-input-container><label for="">Date</label><zh-date-picker data-ng-model="vm.reportOptions.report_date" position="left"></zh-date-picker></md-input-container><md-input-container><label for="">Pricing Policy</label><md-select data-ng-model="vm.reportOptions.pricing_policy"><md-option data-ng-repeat="item in vm.pricingPolicies" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></div><div layout="row"><md-input-container><label for="">Currency</label><md-select data-ng-model="vm.reportOptions.report_currency"><md-option data-ng-repeat="item in vm.currencies" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container><md-input-container><label for="">Cost method</label><md-select data-ng-model="vm.reportOptions.cost_method"><md-option ng-value="1">AVCO</md-option><md-option ng-value="2">FIFO</md-option><!--<md-option ng-value="3">LIFO--><!--</md-option>--></md-select></md-input-container></div><h2>Consolidation</h2><div layout="row"><div layout="column" class="m-r-16"><md-input-container style="margin-bottom: 20px"><label for="">Portfolio mode</label><md-select data-ng-model="vm.reportOptions.portfolio_mode"><md-option value="0">Ignore</md-option><md-option value="1" selected="selected">Independent</md-option></md-select></md-input-container><md-input-container style="margin-bottom: 20px"><label for="">Account mode</label><md-select data-ng-model="vm.reportOptions.account_mode"><md-option value="0">Ignore</md-option><md-option value="1" selected="selected">Independent</md-option></md-select></md-input-container></div><div layout="column"><md-input-container style="margin-bottom: 20px"><label for="">Strategy 1 mode</label><md-select data-ng-model="vm.reportOptions.strategy1_mode"><md-option value="0">Ignore</md-option><md-option value="1" selected="selected">Independent</md-option><md-option value="2">Offsetting (Interdependent - 0/100, 100/0, 50/50)</md-option></md-select></md-input-container><md-input-container style="margin-bottom: 20px"><label for="">Strategy 2 mode</label><md-select data-ng-model="vm.reportOptions.strategy2_mode"><md-option value="0">Ignore</md-option><md-option value="1" selected="selected">Independent</md-option><md-option value="2">Offsetting (Interdependent - 0/100, 100/0, 50/50)</md-option></md-select></md-input-container><md-input-container style="margin-bottom: 20px"><label for="">Strategy 3 mode</label><md-select data-ng-model="vm.reportOptions.strategy3_mode"><md-option value="0">Ignore</md-option><md-option value="1" selected="selected">Independent</md-option><md-option value="2">Offsetting (Interdependent - 0/100, 100/0, 50/50)</md-option></md-select></md-input-container></div><div layout="row"><md-input-container><label for="">Offsetting size</label><md-select data-ng-model="vm.reportOptions.approach_multiplier"><md-option value="0">0/100</md-option><md-option value="0.5" selected="selected">50/50</md-option><md-option value="1">100/0</md-option></md-select></md-input-container></div></div><h2>Filters</h2><div layout="row"><md-input-container><label for="">Portfolios</label><md-select multiple="multiple" data-ng-model="vm.reportOptions.portfolios" md-on-close="searchTerm = \'\'"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." ng-keydown="vm.onSearchChange($event)" class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="item in vm.portfolios | orderBy:\'-\'+item.name | filter:{name: searchTerm}" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container><md-input-container><label for="">Accounts</label><md-select multiple="multiple" data-ng-model="vm.reportOptions.accounts" md-on-close="searchTerm = \'\'"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." ng-keydown="vm.onSearchChange($event)" class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="item in vm.accounts | orderBy:\'-\'+item.name | filter:{name: searchTerm}" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></div><div layout="row"><md-input-container><label for="">Strategies 1</label><md-select multiple="multiple" data-ng-model="vm.reportOptions.strategies1" md-on-close="searchTerm = \'\'"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." ng-keydown="vm.onSearchChange($event)" class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="item in vm.strategies1 | orderBy:\'-\'+item.name | filter:{name: searchTerm}" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container><md-input-container><label for="">Strategies 2</label><md-select multiple="multiple" data-ng-model="vm.reportOptions.strategies2" md-on-close="searchTerm = \'\'"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." ng-keydown="vm.onSearchChange($event)" class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="item in vm.strategies2 | orderBy:\'-\'+item.name | filter:{name: searchTerm}" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container><md-input-container><label for="">Strategies 3</label><md-select multiple="multiple" data-ng-model="vm.reportOptions.strategies3" md-on-close="searchTerm = \'\'"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." ng-keydown="vm.onSearchChange($event)" class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="item in vm.strategies3 | orderBy:\'-\'+item.name | filter:{name: searchTerm}" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></div><h2>Transaction details</h2><div layout="row"><md-input-container><md-checkbox data-ng-model="vm.reportOptions.show_transaction_details">Show transaction details</md-checkbox></md-input-container></div><h2>Market Value/Exposure % calculation grouping</h2><div layout="row"><md-radio-group ng-model="vm.reportOptions.calculationGroup" layout="row"><md-radio-button value="portfolio" class="md-primary">Portfolio</md-radio-button><md-radio-button value="account" class="md-primary">Account</md-radio-button><md-radio-button value="strategy1" class="md-primary">Strategy 1</md-radio-button><md-radio-button value="strategy2" class="md-primary">Strategy 2</md-radio-button><md-radio-button value="strategy3" class="md-primary">Strategy 3</md-radio-button></md-radio-group></div></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-card-content></md-card></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Close</md-button><md-button class="md-raised" ng-click="vm.saveSettings()">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/header-notifications-dialog-view.html",'<md-dialog class="create-member-group-dialog draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Notifications</h2></div></md-toolbar><md-dialog-content data-custom-scroll class="create-member-dialog-content custom-scrollbar"><div layout="column"><md-button class="md-raised">Unread notifications</md-button><md-button data-ui-sref="app.system.notifications" class="md-raised" data-ng-click="">All notifications</md-button></div></md-dialog-content><md-dialog-actions layout="row" layout-align="start center"><div flex="70"><md-button class="md-raised" data-ng-click="vm.cancel()">Cancel</md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/help-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="help-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>Help</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><iframe ng-src="{{vm.helpPage | trustAsUrl}}" frameborder="0" style="width: 100%; height: 100%"></iframe></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">Cancel</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/import-instrument-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="instrument-import-manager-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Instrument import manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div data-ng-if="vm.readyStatus.mapping" layout="column"><div layout="row"><md-card style="width: 100%"><md-card-content class="p-t-26"><div layout="row"><div layout="column"><md-input-container flex="40" style="margin-bottom: 0"><label for="">ISIN</label><input type="text" data-ng-model="vm.config.instrument_code"></md-input-container><div layout="row" layout-align="begin center"><md-button class="md-raised md-sm-btn" data-ng-click="vm.appendString(\'Equity\')">Equity</md-button><md-button class="md-raised md-sm-btn" data-ng-click="vm.appendString(\'Corp\')">Corp</md-button><md-button class="md-raised md-sm-btn" data-ng-click="vm.appendString(\'Index\')">Index</md-button></div><div layout="row" layout-align="begin center"><md-button class="md-raised md-sm-btn" data-ng-click="vm.appendString(\'Govt\')">Govt</md-button><md-button class="md-raised md-sm-btn" data-ng-click="vm.appendString(\'Curncy\')">Curncy</md-button><md-button class="md-raised md-sm-btn" data-ng-click="vm.appendString(\'Comdty\')">Comdty</md-button></div></div><div layout="row"><md-input-container><label for="">Import scheme</label><md-select style="width: 200px" data-ng-model="vm.config.instrument_download_scheme"><md-option data-ng-repeat="item in vm.instrumentSchemes" ng-value="item.id">{{item.scheme_name}}</md-option></md-select></md-input-container><md-button class="instrument-mapping-btn md-fab {{vm.loadIsAvailable() ? \'\' : \'disabled-btn\' }}" data-ng-click="vm.openEditMapping($event)"><ng-md-icon icon="functions" size="24" style="fill:rgb(63,81,181)"></ng-md-icon><md-tooltip class="tooltip_1" md-direction="top">Edit mapping</md-tooltip></md-button></div><div layout="row"><md-button class="md-raised colored-btn instrument-load-btn {{vm.loadIsAvailable() ? \'\' : \'disabled-btn\' }}" data-ng-click="vm.load($event)">Load</md-button><div data-ng-if="vm.readyStatus.processing"><md-progress-circular md-mode="indeterminate" md-diameter="48"></md-progress-circular></div></div></div></md-card-content></md-card></div><div layout="row" data-ng-if="vm.dataIsImported"><div flex="40"><h2 class="title-padding">Received data</h2><md-card class="{{vm.dataIsImported ? \'\' : \'card-opacity\'}}"><md-card-content><div data-ng-repeat="item in vm.mappedFields" layout="row"><div flex="50"><p data-ng-bind="item.key"></p></div><div flex="50"><md-input-container><label for="">Value</label><input type="text" data-ng-model="item.value"></md-input-container></div></div></md-card-content></md-card></div><div flex="60"><div layout="column"><h2 class="title-padding">Instrument data</h2><div layout="row"><md-button class="md-raised" data-ng-click="vm.recalculate()">Recalculate</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Add to database</md-button></div></div><md-card><md-card-content class="p-t-26"><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'name\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">Name</label><input type="text" data-ng-model="vm.config.instrument.name"><div data-ng-show="vm.findError(\'name\', \'entityAttr\', \'class\')">{{vm.findError(\'name\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'public_name\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">Public Name</label><input type="text" data-ng-model="vm.config.instrument.public_name"><div data-ng-show="vm.findError(\'name\', \'entityAttr\', \'class\')">{{vm.findError(\'public_name\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'user_code\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">User code</label><input type="text" data-ng-model="vm.config.instrument.user_code"><div class="md-input-error" data-ng-show="vm.findError(\'user_code\', \'entityAttr\', \'class\')">{{vm.findError(\'user_code\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'instrument_type\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" style="min-height: 64px"><label for="">Instrument type</label><md-select data-ng-model="vm.config.instrument.instrument_type"><md-option data-ng-repeat="item in vm.instrumentTypes" ng-value="item.id">{{item.name}}</md-option></md-select><div class="md-input-error" data-ng-show="vm.findError(\'instrument_type\', \'entityAttr\', \'class\')">{{vm.findError(\'instrument_type\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'short_name\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">Short name</label><input type="text" data-ng-model="vm.config.instrument.short_name"><div class="md-input-error" data-ng-show="vm.findError(\'short_name\', \'entityAttr\', \'class\')">{{vm.findError(\'short_name\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block"><label for="">Public name</label><input type="text" data-ng-model="vm.config.instrument.public_name"><div class="md-input-error" data-ng-show="vm.findError(\'public_name\', \'entityAttr\', \'class\')">{{vm.findError(\'public_name\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'maturity_date\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" data-ng-if="vm.config.instrument.maturity_date != \'\'"><!--<label for="">Maturity date</label>--><zh-date-picker ng-model="vm.config.instrument.maturity_date"></zh-date-picker><div class="md-input-error" data-ng-show="vm.findError(\'maturity_date\', \'entityAttr\', \'class\')">{{vm.findError(\'maturity_date\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'daily_pricing_model\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" style="min-height: 64px"><label for="">Pricing model</label><md-select data-ng-model="vm.config.instrument.daily_pricing_model"><md-option data-ng-repeat="item in vm.dailyModels" ng-value="item.id">{{item.name}}</md-option></md-select><div class="md-input-error" data-ng-show="vm.findError(\'daily_pricing_model\', \'entityAttr\', \'class\')">{{vm.findError(\'daily_pricing_model\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'price_download_scheme\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" style="min-height: 64px"><label for="">Price download scheme</label><md-select data-ng-model="vm.config.instrument.price_download_scheme"><md-option data-ng-repeat="item in vm.priceDownloadSchemes" ng-value="item.id">{{item.scheme_name}}</md-option></md-select><div class="md-input-error" data-ng-show="vm.findError(\'price_download_scheme\', \'entityAttr\', \'class\')">{{vm.findError(\'price_download_scheme\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'pricing_currency\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" style="min-height: 64px"><label for="">Pricing currency</label><md-select data-ng-model="vm.config.instrument.pricing_currency"><md-option data-ng-repeat="item in vm.currencies" ng-value="item.id">{{item.name}}</md-option></md-select><div class="md-input-error" data-ng-show="vm.findError(\'pricing_currency\', \'entityAttr\', \'class\')">{{vm.findError(\'pricing_currency\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'price_multiplier\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" data-ng-if="vm.config.instrument.price_multiplier != \'\'"><label for="">Price multiplier</label><input type="text" data-ng-model="vm.config.instrument.price_multiplier"><div class="md-input-error" data-ng-show="vm.findError(\'price_multiplier\', \'entityAttr\', \'class\')">{{vm.findError(\'price_multiplier\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'reference_for_pricing\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">Reference for pricing</label><input type="text" data-ng-model="vm.config.instrument.reference_for_pricing"><div class="md-input-error" data-ng-show="vm.findError(\'reference_for_pricing\', \'entityAttr\', \'class\')">{{vm.findError(\'reference_for_pricing\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'default_price\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">Default price</label><input type="text" data-ng-model="vm.config.instrument.default_price"><div class="md-input-error" data-ng-show="vm.findError(\'default_price\', \'entityAttr\', \'class\')">{{vm.findError(\'default_price\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'accrued_currency\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" style="min-height: 64px"><label for="">Accrued currency</label><md-select data-ng-model="vm.config.instrument.accrued_currency"><md-option data-ng-repeat="item in vm.currencies" ng-value="item.id">{{item.name}}</md-option></md-select><div class="md-input-error" data-ng-show="vm.findError(\'accrued_currency\', \'entityAttr\', \'class\')">{{vm.findError(\'accrued_currency\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'accrued_multiplier\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" data-ng-if="vm.config.instrument.accrued_multiplier != \'\'"><label for="">Accrued multiplier</label><input type="text" data-ng-model="vm.config.instrument.accrued_multiplier"><div class="md-input-error" data-ng-show="vm.findError(\'accrued_multiplier\', \'entityAttr\', \'class\')">{{vm.findError(\'accrued_multiplier\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'default_accrued\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">Default accrued</label><input type="text" data-ng-model="vm.config.instrument.default_accrued"><div class="md-input-error" data-ng-show="vm.findError(\'default_accrued\', \'entityAttr\', \'class\')">{{vm.findError(\'default_accrued\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field-bg"><md-input-container class="md-block {{vm.findError(\'payment_size_detail\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">Payment size default</label><md-select data-ng-model="vm.config.instrument.payment_size_detail"><md-option data-ng-repeat="item in vm.paymentSizeDefaults" ng-value="item.id">{{item.name}}</md-option></md-select><div class="md-input-error" data-ng-show="vm.findError(\'payment_size_detail\', \'entityAttr\', \'class\')">{{vm.findError(\'payment_size_detail\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'user_text_1\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" data-ng-if="vm.config.instrument.user_text_1 != \'\'"><label for="">User text 1</label><input type="text" data-ng-model="vm.config.instrument.user_text_1"><div class="md-input-error" data-ng-show="vm.findError(\'user_text_1\', \'entityAttr\', \'class\')">{{vm.findError(\'user_text_1\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'user_text_2\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" data-ng-if="vm.config.instrument.user_text_2 != \'\'"><label for="">User text 2</label><input type="text" data-ng-model="vm.config.instrument.user_text_2"><div class="md-input-error" data-ng-show="vm.findError(\'user_text_2\', \'entityAttr\', \'class\')">{{vm.findError(\'user_text_2\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'user_text_3\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" data-ng-if="vm.config.instrument.user_text_3 != \'\'"><label for="">User text 3</label><input type="text" data-ng-model="vm.config.instrument.user_text_3"><div class="md-input-error" data-ng-show="vm.findError(\'user_text_3\', \'entityAttr\', \'class\')">{{vm.findError(\'user_text_3\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div class="instrument-import-field"><md-input-container class="md-block {{vm.findError(\'notes\', \'entityAttr\', \'class\') ? \'error\' : \'\'}}" data-ng-if="vm.config.instrument.notes != \'\'"><label for="">Notes</label><input type="text" data-ng-model="vm.config.instrument.notes"><div class="md-input-error" data-ng-show="vm.findError(\'notes\', \'entityAttr\', \'class\')">{{vm.findError(\'notes\', \'entityAttr\', \'message\')}}</div></md-input-container></div><div data-ng-repeat="item in vm.config.instrument.attributes" style="padding: 10px"><div data-ng-if="item.attribute_type_object.value_type == 10"><md-input-container class="md-block {{vm.findError(item, \'dynAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">{{item.attribute_type_object.name}}</label><input type="text" data-ng-model="item.value_string"><div class="md-input-error" data-ng-show="vm.findError(item, \'dynAttr\', \'class\')">{{vm.findError(item, \'dynAttr\', \'message\')}}</div></md-input-container></div><div data-ng-if="item.attribute_type_object.value_type == 20"><md-input-container class="md-block {{vm.findError(item, \'dynAttr\', \'class\') ? \'error\' : \'\'}}"><label for="">{{item.attribute_type_object.name}}</label><input type="text" data-ng-model="item.value_float"><div class="md-input-error" data-ng-show="vm.findError(item, \'dynAttr\', \'class\')">{{vm.findError(item, \'dynAttr\', \'message\')}}</div></md-input-container></div><div data-ng-if="item.attribute_type_object.value_type == 30"><md-input-container class="md-block {{vm.findError(item, \'dynAttr\', \'class\') ? \'error\' : \'\'}}" style="margin-bottom: 20px"><label for="">{{item.attribute_type_object.name}}</label><md-select data-ng-model="item.classifier" data-classifier-modal-resolver data-classifier-attr="item.attribute_type_object" data-classifier-value="item.classifier" md-container-class="h-classifier-select" data-entity-type="\'instrument\'"><md-option ng-value="item.classifier" selected="selected">{{vm.resolveAttributeNode(item)}}</md-option></md-select><div class="md-input-error" data-ng-show="vm.findError(item, \'dynAttr\', \'class\')">{{vm.findError(item, \'dynAttr\', \'message\')}}</div></md-input-container></div><div data-ng-if="item.attribute_type_object.value_type == 40"><md-input-container class="md-block {{vm.findError(item, \'dynAttr\', \'class\') ? \'error\' : \'\'}}"><!--<label for="">{{item.attribute_type_object.name}}</label>--><zh-date-picker data-ng-model="item.value_date"></zh-date-picker><div class="md-input-error" data-ng-show="vm.findError(item, \'dynAttr\', \'class\')">{{vm.findError(item, \'dynAttr\', \'message\')}}</div></md-input-container></div></div></md-card-content></md-card></div></div></div><div data-ng-if="!vm.readyStatus.mapping"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/import-transaction-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="transaction-import-manager-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Transaction import manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div data-ng-if="vm.readyStatus.mapping" layout="column"><div layout="row"><md-card style="width: 100%"><md-card-content class="p-t-26"><div layout="row" style="margin-bottom: 20px"><div layout="column"><md-input-container flex="40" style="margin-bottom: 0"><label for="">File</label><input type="file" file-read="vm.config.file"></md-input-container></div><div layout="row"><md-input-container><label for="">Import scheme</label><md-select style="width: 200px" data-ng-model="vm.config.scheme"><md-option data-ng-repeat="item in vm.transactionSchemes" ng-value="item.id">{{item.scheme_name}}</md-option></md-select></md-input-container><md-button class="instrument-mapping-btn md-fab {{vm.loadIsAvailable() ? \'\' : \'disabled-btn\' }}" data-ng-click="vm.openEditMapping($event)"><ng-md-icon icon="functions" size="24" style="fill:rgb(63,81,181)"></ng-md-icon><md-tooltip class="tooltip_1" md-direction="top">Edit mapping</md-tooltip></md-button></div><div layout="row"><md-button class="md-raised colored-btn instrument-load-btn {{vm.loadIsAvailable() ? \'\' : \'disabled-btn\' }}" data-ng-click="vm.load($event)">Load</md-button><div data-ng-if="vm.readyStatus.processing"><md-progress-circular md-mode="indeterminate" md-diameter="48"></md-progress-circular></div></div></div><div layout="row"><md-input-container><label for="">Error handling</label><md-select data-ng-model="vm.config.error_handling"><md-option value="continue">Continue</md-option><md-option value="break">Break on first error</md-option></md-select></md-input-container></div><div layout="row" data-ng-if="vm.finishedSuccess" layout-align="center center"><h2>The data successfully imported.</h2></div></md-card-content></md-card></div></div><div data-ng-if="!vm.readyStatus.mapping"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button></md-dialog-actions></md-dialog>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/import-transaction-errors-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="transaction-scheme-manager-errors-dialog-view draggable-dialog" style="width: 75%" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Transaction transaction - Errors</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><md-content><md-card><md-card-content><h3>Please see below the list of records we failed to import</h3><div data-ng-if="vm.data.error_handling == \'break\'">Error occurred on <span data-ng-bind="vm.data.error_row_index"></span> row.</div><div data-ng-if="vm.data.error_handling == \'continue\'"><table><thead><tr><th data-ng-repeat="item in vm.data.scheme_object.inputs"><span data-ng-bind="item.name"></span></th><th></th></tr></thead><tbody><tr data-ng-repeat="row in vm.data.error_rows"><td data-ng-repeat="input in vm.data.scheme_object.inputs"><span data-ng-bind="row.inputs[input.name]"></span></td><td><span data-ng-bind="row.error_message"></span></td></tr></tbody></table></div></md-card-content></md-card></md-content></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Close</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/instrument-event-actions-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="instrument-event-actions-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Actions</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><md-content style="background: #fff; padding: 20px"><div data-ng-if="vm.checkReadyStatus()"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'transaction_type_name\')">Transaction type<span class="sortorder" data-ng-show="vm.sort === \'transaction_type\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'text\')">Text<span class="sortorder" data-ng-show="vm.sort === \'text\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'is_sent_to_pending\')">Action is sent to pending<span class="sortorder" data-ng-show="vm.sort === \'action_is_sent_to_pending\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'is_book_automatic\')">Action is book automatic<span class="sortorder" data-ng-show="vm.sort === \'action_is_book_automatic\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'button_position\')">Button position<span class="sortorder" data-ng-show="vm.sort === \'button_position\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.transaction_type_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.text"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.is_sent_to_pending"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.is_book_automatic"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.button_position"></md-input-container></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.eventActions | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-if="!item.editStatus" data-ng-bind="vm.bindTransactionType(item)"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.text"></td><td data-ng-if="!item.editStatus"><span class="bool-table-view" data-ng-if="item.is_sent_to_pending"><ng-md-icon icon="check_circle" size="16" style="fill:rgb(0,0,0)"></ng-md-icon></span></td><td data-ng-if="!item.editStatus"><span class="bool-table-view" data-ng-if="item.is_book_automatic"><ng-md-icon icon="check_circle" size="16" style="fill:rgb(0,0,0)"></ng-md-icon></span></td><td data-ng-if="!item.editStatus" data-ng-bind="item.button_position"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><label for="">Transaction Type</label><md-select data-ng-model="item.transaction_type"><md-option data-ng-repeat="model in vm.transactionTypes" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Text</label><input type="text" data-ng-model="item.text"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><md-checkbox data-ng-model="item.is_sent_to_pending" aria-label="checkbox"><!--<label>Action is sent to pending</label>--></md-checkbox></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><md-checkbox data-ng-model="item.is_book_automatic" aria-label="checkbox"><!--<label>Action is book automatic</label>--></md-checkbox></md-input-container></td><td data-ng-if="item.editStatus"><md-input-container><!--<label for="">Periodicity</label>--> <input type="text" data-ng-model="item.button_position"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td style="padding-top: 12px"><md-input-container><!--<label for="">Accrual calculation model</label>--><md-select data-ng-model="vm.newItem.transaction_type"><md-option data-ng-repeat="model in vm.transactionTypes" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td><md-input-container><!--<label for="">Periodicity</label>--> <input type="text" data-ng-model="vm.newItem.text"></md-input-container></td><td><md-input-container><md-checkbox data-ng-model="vm.newItem.is_sent_to_pending" aria-label="checkbox"><!--<label>Action is sent to pending</label>--></md-checkbox></md-input-container></td><td><md-input-container><md-checkbox data-ng-model="vm.newItem.is_book_automatic" aria-label="checkbox"><!--<label>Action is book automatic</label>--></md-checkbox></md-input-container></td><td><md-input-container><!--<label for="">Periodicity</label>--> <input type="text" data-ng-model="vm.newItem.button_position"></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-content></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/instrument-mapping-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="instrument-scheme-manager-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Instrument scheme manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div data-ng-if="vm.readyStatus.scheme"><div layout="row" layout-align="center center"><md-card flex="50" class="inm-card-special"><md-card-content><md-input-container class="md-block"><label for="">Scheme name</label><input type="text" data-ng-model="vm.schemeName"></md-input-container></md-card-content></md-card><md-card flex="50" class="inm-card-special"><md-card-content><md-input-container class="md-block" flex-gt-sm><label>Provider</label><md-select data-ng-model="vm.schemeProvider" data-ng-if="vm.readyStatus.dataProviders"><md-option data-ng-repeat="item in vm.dataProviders" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container><div data-ng-if="!vm.readyStatus.dataProviders"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-card-content></md-card></div><div layout="row"><div layout="column" flex="25"><div layout="row"><h4 style="padding-left: 10px">Fields to load</h4></div><div layout="column"><md-card><md-card-content><div data-ng-repeat="item in vm.providerFields track by $index" flex="100"><div class="fields-holder" layout="row"><div class="iscm-item"><md-input-container><label for="">Field</label><input type="text" data-ng-model="item.name"></md-input-container></div><div><md-button style="min-width: 40px" data-ng-click="vm.removeProviderField(item, $index)" class="md-raised">x</md-button></div></div></div></md-card-content></md-card></div><div layout="row"><md-button class="md-raised" data-ng-click="vm.addProviderField()">Add field</md-button></div></div><div layout="column" flex="75"><div layout="row"><h4 style="padding-left: 10px">Map on instrument fields:</h4></div><div layout="column"><md-card flex="100"><md-card-content class="instrument-scheme-fields-holder"><div data-ng-repeat="item in vm.mapFields" layout="row" flex="100" class="{{item.hasBackground ? \'instrument-import-field-bg\' : \'instrument-import-field\'}}"><div layout="row" flex="100"><div class="field-name" flex="40">{{vm.beatufier(item[vm.getModelKey(item)])}}<!--{{item[vm.getModelKey(item)]}}--><!--<md-input-container>--><!--<md-select data-ng-model="item[vm.getModelKey(item)]"--><!--data-ng-focus="vm.checkAttrs()">--><!--<md-option data-ng-repeat="item in vm.baseAttrs"--><!--ng-value="item.key"--><!--class="{{item.disabled ? \'disabled\' : \'\'}}">--><!--{{item.name}}--><!--</md-option>--><!--<md-option data-ng-repeat="item in vm.entityAttrs"--><!--ng-value="item.key"--><!--class="{{item.disabled ? \'disabled\' : \'\'}}">--><!--{{item.name}}--><!--</md-option>--><!--<md-option data-ng-repeat="item in vm.attrs" ng-value="item.id"--><!--class="{{item.disabled ? \'disabled\' : \'\'}}">--><!--{{item.name}}--><!--</md-option>--><!--</md-select>--><!--</md-input-container>--></div><div flex="50"><div data-ng-if="item.complexExpressionEntity == false" layout="row"><div flex="50"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="item.expression"></md-input-container></div><div flex="50"><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item)">...</md-button></div></div><div data-ng-if="item.complexExpressionEntity != false" layout="row"><div flex="50"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="item.expression"></md-input-container></div><div flex="50" layout="row"><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item)">...</md-button><md-button class="md-raised md-primary complex-expr-btn" data-ng-click="vm.openMapping($event, item)">Edit mapping</md-button></div></div></div><div flex="10"><md-button class="custom-small-icon-btn md-raised" data-ng-click="vm.removeMappingField(item, $index)" data-ng-if="!item.required" class="md-raised">x</md-button></div></div></div><div><div data-ng-repeat="item in vm.mappedFieldsDefaults" class="{{item.hasBackground ? \'instrument-import-field-bg\' : \'instrument-import-field\'}}" layout="row" flex="100"><div layout="row" flex="100"><div class="field-name" flex="40">{{vm.beatufier(item[vm.getModelKey(item)])}}<!--{{item[vm.getModelKey(item)]}}--><!--<md-input-container>--><!--<md-select data-ng-model="item[vm.getModelKey(item)]"--><!--data-ng-focus="vm.checkAttrs()">--><!--<md-option data-ng-repeat="item in vm.baseAttrs"--><!--ng-value="item.key"--><!--class="{{item.disabled ? \'disabled\' : \'\'}}">--><!--{{item.name}}--><!--</md-option>--><!--<md-option data-ng-repeat="item in vm.entityAttrs"--><!--ng-value="item.key"--><!--class="{{item.disabled ? \'disabled\' : \'\'}}">--><!--{{item.name}}--><!--</md-option>--><!--<md-option data-ng-repeat="item in vm.attrs" ng-value="item.id"--><!--class="{{item.disabled ? \'disabled\' : \'\'}}">--><!--{{item.name}}--><!--</md-option>--><!--</md-select>--><!--</md-input-container>--></div><div flex="50"><div layout="row"><div flex="50"><div data-ng-if="item.value_type == 10"><md-input-container><label for="">Default value</label><input type="text" data-ng-model="item.expression"></md-input-container></div><div data-ng-if="item.value_type == \'field\'"><div data-ism-field-resolver data-item="item" data-options="options"></div></div></div></div></div><div flex="10"></div></div></div></div><div data-ng-repeat="item in vm.mappedFieldsSecond" class="{{item.hasBackground ? \'instrument-import-field-bg\' : \'instrument-import-field\'}}" layout="row" flex="100"><div layout="row" flex="100"><div class="field-name" flex="40">{{vm.beatufier(item[vm.getModelKey(item)])}}</div><div flex="50"><div data-ng-if="item.complexExpressionEntity == false" layout="row"><div flex="50"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="item.expression"></md-input-container></div><div flex="50"><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item)">...</md-button></div></div><div data-ng-if="item.complexExpressionEntity != false" layout="row"><div flex="50"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="item.expression"></md-input-container></div><div flex="50" layout="row"><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item)">...</md-button><md-button class="md-raised md-primary complex-expr-btn" data-ng-click="vm.openMapping($event, item)">Edit mapping</md-button></div></div></div><div flex="10"><md-button class="custom-small-icon-btn md-raised" data-ng-click="vm.removeMappingField(item, $index)" data-ng-if="!item.required" class="md-raised">x</md-button></div></div></div><div data-ng-repeat="field in vm.mappedDynamic" class="{{item.hasBackground ? \'instrument-import-field-bg\' : \'instrument-import-field\'}}" layout="row" flex="100"><div layout="row" flex="100"><div class="field-name" flex="40"><md-input-container><md-select data-ng-model="field.value" data-ng-change="vm.resolveFieldType(field)" data-ng-focus="vm.checkAttrs()"><md-option data-ng-repeat="item in vm.baseAttrs" ng-value="item" class="{{item.disabled ? \'disabled\' : \'\'}}">{{item.name}}</md-option><md-option data-ng-repeat="item in vm.entityAttrs" ng-value="item" class="{{item.disabled ? \'disabled\' : \'\'}}">{{item.name}}</md-option><md-option data-ng-repeat="item in vm.attrs" ng-value="item" class="{{item.disabled ? \'disabled\' : \'\'}}">{{item.name}}</md-option></md-select></md-input-container></div><div flex="50"><div data-ng-if="field.complexExpressionEntity == false" layout="row"><div flex="50"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="field.expression"></md-input-container></div><div flex="50"><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, field)">...</md-button></div></div><div data-ng-if="field.complexExpressionEntity != false" layout="row"><div flex="50"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="field.expression"></md-input-container></div><div flex="50" layout="row"><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, field)">...</md-button><md-button class="md-raised md-primary complex-expr-btn" data-ng-click="vm.openMapping($event, field)">Edit mapping</md-button></div></div></div><div flex="10"><md-button class="custom-small-icon-btn md-raised" data-ng-click="vm.removeMappingField(item, $index)" data-ng-if="!item.required" class="md-raised">x</md-button></div></div></div></md-card-content></md-card></div><div layout="row"><md-button class="md-raised" data-ng-click="vm.addMapField()">Add field</md-button></div></div></div><md-divider style="margin: 20px"></md-divider><div><div data-ng-if="vm.checkSchedules()"><div layout="row"><div layout="row" flex="50"><md-card flex="100"><md-card-content><md-input-container style="width: 100%"><label for="">Factor upload method</label><md-select data-ng-model="vm.factorScheduleMethod"><md-option data-ng-repeat="item in vm.factorSchedule" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></md-card-content></md-card></div><div layout="row" flex="50"><md-card flex="100"><md-card-content><md-input-container style="width: 100%"><label for="">Accrual schedule upload</label><md-select data-ng-model="vm.accrualCalculation"><md-option data-ng-repeat="item in vm.accrualSchedule" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></md-card-content></md-card></div></div></div><div data-ng-if="!vm.checkSchedules()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div></div><div data-ng-if="!vm.readyStatus.scheme"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/manage-group-dialog-view.html",'<md-dialog aria-label="" class="draggable-dialog manage-member-group" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Edit group "{{vm.groups.name}}"</h2></div></md-toolbar><md-dialog-content data-custom-scroll class="manage-member-dialog-content custom-scrollbar"><div layout="column"><two-fields-options all-options="vm.membersList" selected-options="vm.assignedMembersList"></two-fields-options></div></md-dialog-content><md-dialog-actions layout="row"><div flex="75"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button></div><div flex><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/manage-member-dialog-view.html",'<md-dialog aria-label="" class="draggable-dialog manage-member-group" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Edit member "{{vm.members.display_name}}"</h2></div></md-toolbar><md-dialog-content data-custom-scroll class="manage-member-dialog-content custom-scrollbar"><div layout="column"><two-fields-options all-options="vm.groupsList" selected-options="vm.assignedGroupsList"></two-fields-options><md-checkbox data-ng-model="vm.memberIsAdmin" aria-label="member permission">This member is Admin</md-checkbox></div></md-dialog-content><md-dialog-actions layout="row"><div flex="75"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button></div><div flex><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/price-download-scheme-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="instrument-scheme-manager-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Price download scheme manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><div data-ng-if="vm.readyStatus.providers"><md-card><md-card-content><md-tabs md-dynamic-height md-border-bottom><md-tab label="Yesterday Price"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'scheme_name\')">Pricing Model<span class="sortorder" data-ng-show="vm.sort === \'scheme_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'provider_name\')">Provider<span class="sortorder" data-ng-show="vm.sort === \'provider_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'bid0\')">Bid<span class="sortorder" data-ng-show="vm.sort === \'bid0\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'bid1\')">Bid 2<span class="sortorder" data-ng-show="vm.sort === \'bid1\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'bid2\')">Bid 3<span class="sortorder" data-ng-show="vm.sort === \'bid2\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'bid_multiplier\')">Bid mul tiplier<span class="sortorder" data-ng-show="vm.sort === \'bid_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'ask0\')">Ask<span class="sortorder" data-ng-show="vm.sort === \'ask0\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'ask1\')">Ask 2<span class="sortorder" data-ng-show="vm.sort === \'ask1\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'ask2\')">Ask 3<span class="sortorder" data-ng-show="vm.sort === \'ask2\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'ask_multiplier\')">Ask multiplier<span class="sortorder" data-ng-show="vm.sort === \'ask_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'last\')">Last<span class="sortorder" data-ng-show="vm.sort === \'last\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'last_multiplier\')">Last multiplier<span class="sortorder" data-ng-show="vm.sort === \'last_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'mid\')">Mid<span class="sortorder" data-ng-show="vm.sort === \'columns\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'mid_multiplier\')">Mid multiplier<span class="sortorder" data-ng-show="vm.sort === \'mid_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.scheme_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.provider_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.bid0"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.bid1"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.bid2"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.bid_multiplier"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.ask0"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.ask1"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.ask2"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.ask_multiplier"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.last"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.last_multiplier"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.mid"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.mid_multiplier"></md-input-container></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.items | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-bind="item.scheme_name" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.provider_name" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.bid0" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.bid1" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.bid2" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.bid_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.ask0" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.ask1" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.ask2" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.ask_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.last" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.last_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.mid" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.mid_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.scheme_name"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container class="md-block" flex-gt-sm><md-select data-ng-model="item.provider"><md-option data-ng-repeat="item in vm.dataProviders" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.bid0"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.bid1"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.bid2"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.bid_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.ask0"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.ask1"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.ask2"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.ask_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.last"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.last_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.mid"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.mid_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><!--<label for="">Value</label>--> <input type="text" data-ng-model="vm.newItem.scheme_name"></md-input-container></td><td style="padding-top: 0"><md-input-container class="md-block" flex-gt-sm><md-select data-ng-model="vm.newItem.provider"><md-option data-ng-repeat="item in vm.dataProviders" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.bid0"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.bid1"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.bid2"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.bid_multiplier"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.ask0"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.ask1"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.ask2"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.ask_multiplier"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.last"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.last_multiplier"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.mid"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.mid_multiplier"></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></md-tab><md-tab label="Historical Price"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'scheme_name\')">Pricing Model<span class="sortorder" data-ng-show="vm.sort === \'scheme_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'provider_name\')">Provider<span class="sortorder" data-ng-show="vm.sort === \'provider_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'bid_history\')">Bid History<span class="sortorder" data-ng-show="vm.sort === \'bid_history\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'ask_history\')">Ask History<span class="sortorder" data-ng-show="vm.sort === \'ask_history\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'last_history\')">Last History<span class="sortorder" data-ng-show="vm.sort === \'last_history\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'mid_history\')">Mid history<span class="sortorder" data-ng-show="vm.sort === \'mid_history\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'bid_history_multiplier\')">Bid History multiplier<span class="sortorder" data-ng-show="vm.sort === \'bid_history_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'ask_history_multiplier\')">Ask History multiplier<span class="sortorder" data-ng-show="vm.sort === \'ask_history_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'last_history_multiplier\')">Last History multiplier<span class="sortorder" data-ng-show="vm.sort === \'last_history_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'mid_history_multiplier\')">Mid history multiplier<span class="sortorder" data-ng-show="vm.sort === \'mid_history_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.scheme_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.provider_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.bid_history"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.ask_history"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.last_history"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.mid_history"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.bid_history_multiplier"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.ask_history_multiplier"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.last_history_multiplier"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.mid_history_multiplier"></md-input-container></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.items | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-bind="item.scheme_name" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.provider_name" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.bid_history" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.ask_history" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.last_history" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.mid_history" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.bid_history_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.ask_history_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.last_history_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.mid_history_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.scheme_name"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container class="md-block" flex-gt-sm><md-select data-ng-model="vm.newItem.provider"><md-option data-ng-repeat="item in vm.dataProviders" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.bid_history"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.ask_history"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.last_history"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.mid_history"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.bid_history_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.ask_history_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.last_history_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.mid_history_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><!--<label for="">Value</label>--> <input type="text" data-ng-model="vm.newItem.scheme_name"></md-input-container></td><td style="padding-top: 0"><md-input-container><md-select data-ng-model="vm.newItem.provider"><md-option data-ng-repeat="item in vm.dataProviders" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.bid_history"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.ask_history"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.last_history"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.mid_history"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.bid_history_multiplier"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.ask_history_multiplier"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.last_history_multiplier"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.mid_history_multiplier"></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></md-tab><md-tab label="Currency"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'scheme_name\')">Pricing Model<span class="sortorder" data-ng-show="vm.sort === \'scheme_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'provider_name\')">Provider<span class="sortorder" data-ng-show="vm.sort === \'provider_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'currency_fxrate\')">Currency FX Rate<span class="sortorder" data-ng-show="vm.sort === \'currency_fxrate\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'currency_fxrate_multiplier\')">FX Rate Multiplier<span class="sortorder" data-ng-show="vm.sort === \'currency_fxrate_multiplier\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><input type="text" data-ng-model="vm.query.scheme_name"></md-input-container></th><th><md-input-container><input type="text" data-ng-model="vm.query.provider_name"></md-input-container></th><th><md-input-container><input type="text" data-ng-model="vm.query.currency_fxrate"></md-input-container></th><th><md-input-container><input type="text" data-ng-model="vm.query.currency_fxrate_multiplier"></md-input-container></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.items | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-bind="item.scheme_name" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.provider_name" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.currency_fxrate" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.currency_fxrate_multiplier" data-ng-if="!item.editStatus"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.scheme_name"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><md-select data-ng-model="vm.newItem.provider"><md-option data-ng-repeat="item in vm.dataProviders" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.currency_fxrate"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><input type="text" data-ng-model="item.currency_fxrate_multiplier"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><!--<label for="">Value</label>--> <input type="text" data-ng-model="vm.newItem.scheme_name"></md-input-container></td><td style="padding-top: 0"><md-input-container><md-select data-ng-model="vm.newItem.provider"><md-option data-ng-repeat="item in vm.dataProviders" data-ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.query.currency_fxrate"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.query.currency_fxrate_multiplier"></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></md-tab></md-tabs></md-card-content></md-card></div><div data-ng-if="!vm.readyStatus.providers"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Close</md-button></md-dialog-actions></md-dialog>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/success-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="success-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>{{vm.success.title}}</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div class="success-text"><p>{{vm.success.description}}</p></div></md-dialog-content><md-dialog-actions layout="row"><!--<md-button ng-click="vm.cancel()">--><!--Cancel--><!--</md-button>--><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/transaction-mapping-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="transaction-scheme-manager-dialog-view draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Transaction scheme manager</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar" style="background: #E5E5E5"><md-content><div data-ng-if="vm.checkReadyStatus()"><div layout="row" layout-align="center center"><md-card flex="100" class="inm-card-special"><md-card-content layout="column"><md-input-container class="md-block"><label for="">Scheme name</label><input type="text" data-ng-model="vm.scheme.scheme_name"></md-input-container><md-input-container flex="40" style="margin-bottom: 0"><label for="">Expression</label><input type="text" data-ng-model="vm.scheme.rule_expr"></md-input-container></md-card-content></md-card></div><div layout="row"><div layout="column" flex="25"><div layout="row"><h4 style="padding-left: 10px">Imported Columns</h4></div><div layout="column"><md-card><md-card-content><div data-ng-repeat="item in vm.providerFields track by $index" flex="100"><div class="fields-holder" layout="row"><div class="iscm-item" layout="row"><span style="position: relative; top: 8px">#</span><md-input-container flex="10"><!--<label for="">Number</label>--> <input type="text" data-ng-model="item.column"></md-input-container><md-input-container flex="70"><!--<label for="">Name</label>--> <input type="text" data-ng-model="item.name"></md-input-container></div><div><md-button style="min-width: 40px" data-ng-click="vm.removeProviderField(item, $index)" class="md-raised">x</md-button></div></div></div></md-card-content></md-card></div><div layout="row"><md-button class="md-raised" data-ng-click="vm.addProviderField()">Add field</md-button></div></div><div layout="column" flex="75"><div layout="row"><h4 style="padding-left: 10px">Transaction type matching</h4></div><div layout="column"><md-card flex="100"><md-card-content class="instrument-scheme-fields-holder"><div data-ng-repeat="item in vm.mapFields" layout="row" flex="100"><div layout="row" flex="100"><div flex="30"><div layout="row"><div flex="50"><md-input-container><label for="">Value</label><input type="text" data-ng-model="item.value"></md-input-container></div><!--<div flex="50">--><!--<md-button class="md-raised md-primary expr-btn"--><!--data-ng-click="vm.openExpressionDialog($event, item)">--><!--...--><!--</md-button>--><!--</div>--></div></div><div flex="40"><md-input-container style="width: 80%"><label for="">Transaction type</label><md-select data-ng-model="item.transaction_type"><md-option data-ng-repeat="transactionType in vm.transactionTypes" data-ng-value="transactionType.id">{{transactionType.name}}</md-option></md-select></md-input-container></div><div flex="20"><md-button class="md-raised md-primary {{item.transaction_type ? \'\' : \'disabled-btn\'}}" data-ng-click="vm.openInputs(item, $event)">Inputs</md-button></div><div flex="10"><md-button class="custom-small-icon-btn md-raised" data-ng-click="vm.removeMappingField(item, $index)" data-ng-if="!item.required" class="md-raised">x</md-button></div></div></div></md-card-content></md-card></div><div layout="row"><md-button class="md-raised" data-ng-click="vm.addMapField()">Add field</md-button></div></div></div></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-content></md-dialog-content><md-dialog-actions layout="row"><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">Save</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/transaction-mapping-input-mapping-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="transaction-mapping-input-mapping-dialog draggable-dialog" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Transaction import scheme - Inputs</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><md-content><div><div data-ng-if="vm.checkReadyStatus()"><h2>Expression / <span data-ng-bind="vm.transactionType.name"></span></h2><div data-ng-repeat="item in vm.transactionType.inputs"><div layout="row"><div flex="40"><span data-ng-bind="item.name"></span> (<span data-ng-bind="vm.bindType(item)"></span>)</div><div layout="row" flex="50"><div flex="80"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="item.mapping.expression"></md-input-container></div><div flex="20"><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item)">...</md-button></div></div><div flex="10" data-ng-if="item.value_type == 100"><md-button class="md-primary md-raised" data-ng-click="vm.openMapping(item, $event)">Mapping</md-button></div></div></div></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div></md-content></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><md-button class="md-raised" ng-click="vm.cancel()" style="margin-right:20px">Cancel</md-button><md-button class="md-raised" ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/validation-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="warning-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>Input form error</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div class="warning-text"><p data-ng-repeat="item in vm.errorKeys"><b data-ng-bind="item.caption" data-ng-if="item.caption != \'non field errors\'"></b> - <span data-ng-bind-html="vm.bindValue(item) | trustAsHtml"></span></p></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/bind-field-control-view.html",'<div><div data-ng-if="fieldType[\'display_name\'] === \'Number\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><input data-ng-change="changeWatcher()" data-ng-model="entity[getModelKey()]" type="number" data-ng-if="!item.options.onlyPositive" style="width: {{100 - item.buttons.length * 10}}%"> <input data-ng-change="changeWatcher()" data-ng-model="entity[getModelKey()]" type="number" min="0" data-ng-if="item.options.onlyPositive" style="width: {{100 - item.buttons.length * 10}}%"><div data-ng-if="item.buttons.length"><md-button data-ng-repeat="button in item.buttons" class="{{button.classes}} {{button.icon && button.caption == \'\' ? \'md-icon-button\' : \'\'}}" data-ng-click="button.action(item)">{{button.caption}}<ng-md-icon data-ng-if="button.icon" icon="{{button.icon}}"></ng-md-icon><md-tooltip data-ng-if="button.tooltip" class="tooltip_1" md-direction="bottom">{{button.tooltip}}</md-tooltip></md-button></div></md-input-container></div><div data-ng-if="fieldType[\'display_name\'] === \'String\'"><div data-ng-if="getModelKey() === \'notes\' "><md-input-container class="md-block textarea-bind-field"><label data-ng-bind="getName()"></label><textarea data-ng-change="changeWatcher()" class="{{item.options.frame == 1 ? \'bordered\' : \'\' }}" data-ng-model="entity[getModelKey()]" cols="30" rows="{{item.options.rowCount}}"></textarea></md-input-container></div><div data-ng-if="getModelKey() !== \'notes\' "><md-input-container class="md-block bind-field-input {{item.options.copyFrom ? \'with-button\' : \'\'}} {{checkValid() ? \'mdc-error\' : \'\'}} {{entity[getModelKey()] != \'\' ? \'md-input-has-value\' : \'\'}}"><label data-ng-bind="getName()"></label><input type="text" data-ng-change="changeWatcher()" data-ng-model="entity[getModelKey()]" style="width: {{100 - item.buttons.length * 10}}%"><md-button data-ng-if="item.options.copyFrom" class="bf-copy-btn" data-ng-click="copyFromField(item.options.copyFrom)"><ng-md-icon icon="content_copy"></ng-md-icon></md-button><div data-ng-if="item.buttons.length"><md-button data-ng-repeat="button in item.buttons" class="{{button.classes}} {{button.icon && button.caption == \'\' ? \'md-icon-button\' : \'\'}}" data-ng-click="button.action(item)">{{button.caption}}<ng-md-icon data-ng-if="button.icon" icon="{{button.icon}}"></ng-md-icon><md-tooltip data-ng-if="button.tooltip" class="tooltip_1" md-direction="bottom">{{button.tooltip}}</md-tooltip></md-button></div></md-input-container></div></div><div data-ng-if="fieldType[\'display_name\'] === \'Float\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><input data-ng-change="changeWatcher()" data-ng-model="entity[getModelKey()]" data-float-numbers data-ng-if="!item.options.onlyPositive"> <input data-ng-change="changeWatcher()" data-ng-model="entity[getModelKey()]" data-float-numbers data-only-positive="true" data-ng-if="item.options.onlyPositive"><div data-ng-if="item.buttons.length"><md-button data-ng-repeat="button in item.buttons" class="{{button.classes}} {{button.icon && button.caption == \'\' ? \'md-icon-button\' : \'\'}}" data-ng-click="button.action(item)">{{button.caption}}<ng-md-icon data-ng-if="button.icon" icon="{{button.icon}}"></ng-md-icon><md-tooltip data-ng-if="button.tooltip" class="tooltip_1" md-direction="bottom">{{button.tooltip}}</md-tooltip></md-button></div></md-input-container></div><div data-ng-if="fieldType[\'display_name\'] === \'Field\'"><div data-ev-field-resolver data-item="item" data-entity="entity" data-options="options"></div></div><div data-ng-if="fieldType[\'display_name\'] === \'Multiple choice field\'"><div data-ev-field-resolver data-item="item" data-entity="entity" data-options="options"></div></div><div data-ng-if="fieldType[\'display_name\'] === \'Date\'" class="field-date-pick"><!-- <label data-ng-bind="getName()"></label> --><md-input-container class="field-date-pick-holder"><!--<label data-ng-if="!entity[getModelKey()]" data-ng-bind="getName()"></label>--><label data-ng-bind="getName()"></label><zh-date-picker data-ng-change="changeWatcher()" ng-model="entity[getModelKey()]"></zh-date-picker><!--<mdp-date-picker mdp-placeholder="Enter date" ng-model="entity[getModelKey()]" mdp-format="YYYY/MM/DD" data-ng-change="dateFormatter()"></mdp-date-picker>--><!--<md-datepicker ng-model="entity[getModelKey()]" md-placeholder="Enter date" data-ng-change="dateFormatter()"></md-datepicker>--><div class="date-pick-buttons-block"><md-button data-ng-if="item.options.dateTodayMinus" data-ng-click="setDateMinus()">T - 1</md-button><md-button data-ng-if="item.options.dateToday" data-ng-click="setDateToday()">T</md-button><md-button data-ng-if="item.options.dateTodayPlus" data-ng-click="setDatePlus()">T + 1</md-button></div><div data-ng-if="item.buttons.length"><md-button data-ng-repeat="button in item.buttons" class="{{button.classes}} {{button.icon && button.caption == \'\' ? \'md-icon-button\' : \'\'}}" data-ng-click="button.action(item)">{{button.caption}}<ng-md-icon data-ng-if="button.icon" icon="{{button.icon}}"></ng-md-icon><md-tooltip data-ng-if="button.tooltip" class="tooltip_1" md-direction="bottom">{{button.tooltip}}</md-tooltip></md-button></div></md-input-container></div><div data-ng-if="fieldType[\'display_name\'] === \'Boolean\'"><md-checkbox class="checkbox-bind-field" data-ng-change="changeWatcher()" data-ng-model="entity[getModelKey()]" aria-label="checkbox"><label data-ng-bind="getName()"></label></md-checkbox></div><div data-ng-if="fieldType[\'display_name\'] === \'Classifier\'"><div data-ng-if="readyStatus.classifier"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><!--{{item}}--><md-select data-ng-model="entity[getModelKey()]" data-classifier-modal-resolver data-classifier-attr="item" data-classifier-value="entity[getModelKey()]" data-ng-change="changeClassifier()" md-container-class="h-classifier-select" data-entity-type="entityType"><md-option ng-value="node.id" selected="selected">{{node.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!readyStatus.classifier"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div><div data-ng-if="fieldType[\'display_name\'] === \'Decoration\'"><span class="ec-decoration line" data-ng-if="!item.options.labelText"></span> <span class="ec-decoration labeled" data-ng-if="item.options.labelText"><span class="w-rp" data-ng-bind="item.options.labelText"></span></span></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/bookmarks-view.html",'<div><md-button class="md-button header-cloud-layout-btn" data-ng-click="toggleBookmarkPanel()"><ng-md-icon icon="bookmark" size="36"></ng-md-icon></md-button><div class="bookmarks-list" layout="row" layout-align="space-between center" data-ng-if="showBookmarks"><div layout="row"><div data-ng-repeat="item in items"><div data-ng-if="item.children.length"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="" aria-label="Open sample menu">{{item.name}}</md-button><md-menu-content><md-menu-item data-ng-repeat="subItem in item.children"><md-button data-ui-sref="{{getState(subItem)}}">{{subItem.name}}</md-button></md-menu-item></md-menu-content></md-menu></div><div data-ng-if="!item.children.length"><md-button data-ui-sref="{{getState(item)}}">{{item.name}}</md-button></div></div></div><div layout="row"><md-button class="md-button header-cloud-layout-btn" data-ng-click="openSettings($event)"><ng-md-icon icon="settings" size="36"></ng-md-icon></md-button></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/instrument-scheme-manager-field-resolver-view.html",'<div><div data-ng-if="readyStatus.content"><div data-ng-if="type === \'key-value\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-model="item.expression" md-on-close="searchTerm = \'\'" data-ng-change="changeWatcher()"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+field.name | filter:{name: searchTerm}" ng-value="field.value">{{field.name}}</md-option></md-select></md-input-container></div><div data-ng-if="type === \'id\'"><div data-ng-if="item.key !== \'price_download_scheme\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="item.expression" md-selected-text="bindFormFields()"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+resolveSort(field) | filter:{name: searchTerm} track by field.id " ng-value="field.id">{{bindListFields(field)}}</md-option></md-select></md-input-container></div><div data-ng-if="item.key  == \'price_download_scheme\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="item.expression"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+field.scheme_name | filter:{scheme_name:searchTerm} track by field.id " ng-value="field.id">{{field[\'scheme_name\']}}</md-option></md-select></md-input-container></div></div></div><div data-ng-if="!readyStatus.content"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/layout-constructor-field-view.html",'<div><div data-ng-if="!item.editMode"><div data-ng-if="item.attribute"><md-card class="ec-attr-card"><div layout="row"><p class="name-holder" flex="60"><b><span data-ng-bind="bindAttrName(item)"></span></b> (<span data-ng-bind="bindTypeByValueType(item.attribute[\'value_type\'])"></span>)</p><div class="options-holder" flex="40"><md-button aria-label="delete attribute" data-ng-click="deleteField()"><ng-md-icon icon="delete"></ng-md-icon></md-button><md-button aria-label="edit attribute" data-ng-click="toggleEditMode()"><ng-md-icon icon="mode_edit"></ng-md-icon></md-button></div></div></md-card></div><div data-ng-if="!item.attribute"><md-card class="ec-attr-card"><md-button aria-label="add field" data-ng-click="toggleEditMode()"><ng-md-icon icon="add_circle"></ng-md-icon></md-button></md-card></div></div><div data-ng-if="item.editMode"><md-card class="ec-attr-card {{item.editMode ? \'active\' : \'\'}}"><md-input-container class="md-block" flex-gt-sm><label>Please select Element</label><!--{{item.attribute}}--><md-select ng-model="item.attribute" ng-change="changeModel(item.attribute)" ng-focus="findAttrsLeft()"><md-optgroup label="System" class="bold-field-select"><md-option ng-repeat="attr in baseAttrs" data-ng-if="baseAttrs.length" ng-value="attr" class="{{attr.disabled ? \'disabled\' : \'\'}}">{{attr.name}} ({{bindTypeByValueType(attr[\'value_type\'])}})</md-option><md-option ng-repeat="attr in entityAttrs" ng-value="attr" class="{{attr.disabled ? \'disabled\' : \'\'}}"><!--{{attr}}--> {{attr.name}} ({{bindTypeByValueType(attr[\'value_type\'])}})</md-option></md-optgroup><!--<md-optgroup label="Specific">--><!--<md-option ng-repeat="attr in entityAttrs" ng-value="attr" class="{{attr.disabled ? \'disabled\' : \'\'}}">--><!--&lt;!&ndash;{{attr}}&ndash;&gt;--><!--{{attr.name}}--><!--</md-option>                        --><!--</md-optgroup>--><md-optgroup label="User attributes" class="bold-field-select" data-ng-if="attrs.length"><md-option ng-repeat="attr in attrs" ng-value="attr" class="{{attr.disabled ? \'disabled\' : \'\'}}"><!--{{attr}}--> {{attr.name}} ({{bindTypeByValueType(attr[\'value_type\'])}})</md-option></md-optgroup><md-optgroup label="Inputs" class="bold-field-select" data-ng-if="userInputs.length"><md-option ng-repeat="userInput in userInputs" ng-value="userInput"><!--{{attr}}--> {{userInput.name}} ({{bindTypeByValueType(userInput[\'value_type\'])}})</md-option></md-optgroup><md-optgroup label="Layout" class="bold-field-select"><md-option ng-repeat="attr in layoutAttrs" ng-value="attr">{{attr.name}} ({{bindTypeByValueType(attr[\'value_type\'])}})</md-option></md-optgroup></md-select></md-input-container><md-input-container class="md-block" flex-gt-sm><!--<label>Colspan</label>--><label>Element width</label><md-select ng-model="item.colspan"><md-option ng-repeat="colspan in getCols()" value="{{colspan}}">{{colspan}} column(s)</md-option></md-select></md-input-container><md-input-container class="md-block" data-ng-if="item.attribute.value_type != \'decoration\'"><label>Custom label</label><input data-ng-model="item.options.fieldName"></md-input-container><div data-ng-if="checkForSpecialOptions()"><div data-ng-include="specialOptionTemplate"></div></div><md-divider></md-divider><div layout="row" layout-align="space-between center" class="constructor-card-actions"><md-button aria-label="cancel" data-ng-click="cancel()">Cancel</md-button><md-button class="ec-field-btn {{item.attribute ? \'\' : \'disabled\'}}" aria-label="save layout" data-ng-click="saveField()"><span>Ok</span></md-button></div></md-card></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/members-groups-table-view.html",'<!-- <div class="g-column-component g-thead">\n\t<md-card data-ng-repeat="name in columnsNames">\n\t\t<div class="g-column-content">\n\t\t\t<div class="column-left-content">\n\t\t\t\t<div class="sort" data-ng-if="isSortable(column)">\n\t\t\t\t\t<md-button class="column-sort column-btns" data-ng-show="column.options.sort === \'ASC\'" aria-label="open settings" data-ng-click="sortHandler(column, \'DESC\')">\n\t\t\t\t\t\t<ng-md-icon icon="keyboard_arrow_down"></ng-md-icon>\n\t\t\t\t\t</md-button>\n\t\t\t\t\t<md-button class="column-sort-up column-btns" data-ng-show="column.options.sort === \'DESC\'" aria-label="open settings" data-ng-click="sortHandler(column, \'ASC\')">\n\t\t\t\t\t\t<ng-md-icon icon="keyboard_arrow_up"></ng-md-icon>\n\t\t\t\t\t</md-button>\n\t\t\t\t\t<md-button class="column-sort column-both-sorted column-btns" data-ng-show="!column.options.sort" aria-label="open settings" data-ng-click="sortHandler(column, \'DESC\')">\n\t\t\t\t\t\t<ng-md-icon class="c-up" icon="keyboard_arrow_up"></ng-md-icon>\n\t\t\t\t\t\t<ng-md-icon class="c-down"  icon="keyboard_arrow_down"></ng-md-icon>\n\t\t\t\t\t</md-button>\n\t\t\t\t</div>\n\t\t\t\t<div class="caption">\n\t\t\t\t\t{{name}}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class="column-left-content">\n\t\t\t\t<div class="caption">\n\t\t\t\t\t{{name}}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</md-card>\n</div> --><div><table class="bordered"><thead><tr><th>Member name</th><th>User role</th><th>Date Joined</th><th>Assigned to groups</th></tr></thead></table></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/menu-link-view.html",'<md-button ui-sref-active="active" class="sidemenu-btn" ui-sref="{{section.state}}" ng-click="focusSection()"><span data-ng-if="section.icon" class="side-nav-icon"><ng-md-icon icon="{{section.icon}}" size="24"></ng-md-icon></span><span class="side-nav-title">{{section.title}}</span> <span class="md-visually-hidden" data-ng-if="isSelected()">current page</span></md-button>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/menu-toggle-view.html",'<md-button class="md-button-toggle sidemenu-btn" ng-click="toggle($event)" aria-controls="side-menu-{{section.title}}" flex layout="row" aria-expanded="{{isOpen()}}"><span data-ng-if="section.icon" class="side-nav-icon"><ng-md-icon icon="{{section.icon}}" size="24"></ng-md-icon></span><span class="side-nav-title">{{section.title}}</span><ng-md-icon icon="expand_more" class="dropdown-icon" data-ng-if="!isOpen()"></ng-md-icon><ng-md-icon icon="expand_less" class="dropdown-icon" data-ng-if="isOpen()"></ng-md-icon><!--<span aria-hidden="true" class="pull-right fa fa-chevron-down md-toggle-icon" data-ng-class="{\'toggled\' : isOpen()}"></span>--></md-button><ul data-ng-show="isOpen()" id="side-menu-{{section.title}}" class="menu-toggle-list"><li data-ng-repeat="section in section.pages"><menu-link section="section" ng-if="section.type === \'link\'"></menu-link><menu-toggle section="section" ng-if="section.type === \'toggle\'"></menu-toggle></li></ul>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/two-fields-options-view.html",'<div layout="row" class="two-fields-options-content" layout-align="center center"><div><p data-ng-if="allOptions[0].name">Available groups</p><p data-ng-if="allOptions[0].display_name">Available members</p><div class="all-options-field two-fields-options"><p data-ng-repeat="option in allOptions" data-ng-if="option.name" data-ng-bind="option.name" class="two-fields-available-option" data-member-group-id="{{option.id}}" data-ng-click="highlightOption($event)"></p><p data-ng-repeat="option in allOptions" data-ng-if="option.display_name" data-ng-bind="option.display_name" class="two-fields-available-option" data-member-group-id="{{option.id}}" data-ng-click="highlightOption($event)"></p></div></div><div class="two-fields-buttons" layout="column" layout-align="center center"><md-button class="two-fields-select-btn two-fields-btn md-raised" data-ng-disable="" data-ng-click="switchOptions(\'p.two-fields-available-option.active-option\', allOptions, selectedOptions)"><ng-md-icon icon="chevron_right" size="25"></ng-md-icon></md-button><md-button class="two-fields-select-btn two-fields-btn md-raised" data-ng-disable="" data-ng-click="switchOptions(\'p.two-fields-selected-option.active-option\', selectedOptions, allOptions)"><ng-md-icon icon="chevron_left" size="25"></ng-md-icon></md-button></div><div><p data-ng-if="allOptions[0].name">Assigned groups</p><p data-ng-if="allOptions[0].display_name">Assigned members</p><div class="selected-options-field two-fields-options"><p data-ng-repeat="sOption in selectedOptions" data-ng-if="sOption.name" data-ng-bind="sOption.name" class="two-fields-selected-option" data-member-group-id="{{sOption.id}}" data-ng-click="highlightOption($event)"></p><p data-ng-repeat="sOption in selectedOptions" data-ng-if="sOption.display_name" data-ng-bind="sOption.display_name" class="two-fields-selected-option" data-member-group-id="{{sOption.id}}" data-ng-click="highlightOption($event)"></p></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-viewer/complex-transactions-transaction-edit-dialog-view.html",'<md-dialog aria-label="entity edit" ng-cloak class="add-portfolio-dialog draggable-dialog" drag-dialog><md-dialog-content data-custom-scroll class="custom-scrollbar"><div data-ng-include="\'views/entity-editor-view.html\'"></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><div><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.save()" style="margin-right:20px"><span>Save</span></md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-viewer/entity-viewer-dialog-view.html",'<md-dialog aria-label="entity edit" ng-cloak class="add-portfolio-dialog draggable-dialog" drag-dialog style="height: 100%"><md-toolbar><div class="md-toolbar-tools" data-ng-if="vm.evAction === \'create\'"><h2>Add {{vm.entityTypeSlug()}}</h2><span flex></span></div><div class="md-toolbar-tools" data-ng-if="vm.evAction === \'update\'"><h2>Edit {{vm.entityTypeSlug()}}</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div data-ng-include="\'views/entity-editor-view.html\'"></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><div><md-button ng-click="vm.editLayout()" class="md-raised md-primary" data-ng-if="vm.checkVisibility(\'edit-form-btn\')">Edit Form</md-button><md-button ng-click="vm.manageAttrs()" class="md-raised md-primary" data-ng-if="vm.MABtnVisibility(vm.entityType)">Manage attributes</md-button></div><div><md-button class="md-raised" data-ng-if="vm.entityType == \'complex-transaction\'" data-ng-click="vm.rebookTransaction($event)">Rebook</md-button><md-button data-ng-if="vm.evAction === \'update\'" class="md-raised" ng-click="vm.copy()" style="margin-right: 25px">Make a copy</md-button><md-button class="md-raised" ng-click="vm.cancel()">Cancel</md-button><md-button class="md-raised" ng-click="vm.save()" style="margin-right:20px"><span data-ng-if="vm.evAction === \'create\'">Add </span><span data-ng-if="vm.evAction === \'update\'">Save</span></md-button></div></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-viewer/entity-viewer-entity-delete-dialog-view.html",'<md-dialog aria-label="" ng-cloak class="delete-portfolio-dialog"><md-toolbar><div class="md-toolbar-tools"><h2>Delete {{vm.displayCaption()}}</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div class="warning-text"><p>Are you sure to delete this <b>{{vm.displayCaption()}}?</b></p></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">Cancel</md-button><md-button ng-click="vm.delete()" style="margin-right:20px">Delete</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-viewer/entity-viewer-view.html",'<div data-ng-controller="EntityViewerController as vm" class="entity-viewer-holder"><div data-ng-if="vm.checkOnBeforeLoadAction()" class="min-height"><div data-ng-include="vm.onBeforeLoadAction" class="min-height"></div></div><div data-ng-if="!vm.checkOnBeforeLoadAction()"><div data-ng-if="!vm.isReport"><md-button aria-label="add entity" class="md-fab md-fab-bottom-right" data-ng-click="vm.addEntity($event)" data-ng-if="vm.checkAddEntityBtn()"><ng-md-icon icon="add"></ng-md-icon></md-button><div data-ng-if="vm.components.splitPanel" class="lock-size g-table-dial" layout="row" layout-align="center center"><md-fab-speed-dial md-direction="up" md-open="false" class="md-scale"><md-fab-trigger><md-button aria-label="menu" class="md-fab" data-ng-if="vm.checkAdditionStatus()"><ng-md-icon icon="keyboard_arrow_up"></ng-md-icon></md-button><md-button aria-label="menu" class="md-fab" data-ng-if="!vm.checkAdditionStatus()" data-ng-click="vm.hideAdditions()"><ng-md-icon icon="keyboard_arrow_down"></ng-md-icon></md-button></md-fab-trigger><md-fab-actions><md-button aria-label="" data-ng-if="vm.checkIfPermissionEditorAllowed()" class="md-fab md-raised md-mini" data-ng-click="vm.openPermissionEditor()"><ng-md-icon icon="perm_identity"></ng-md-icon><md-tooltip md-direction="right">Open permission editor</md-tooltip></md-button><md-button aria-label="" class="md-fab md-raised md-mini" data-ng-click="vm.openDataViewPanel()"><ng-md-icon icon="work"></ng-md-icon><md-tooltip md-direction="right">Open data view panel</md-tooltip></md-button><md-button aria-label="" class="md-fab md-raised md-mini" data-ng-click="vm.openEditorViewPanel()"><ng-md-icon icon="view_stream"></ng-md-icon><md-tooltip md-direction="right">Open editor split panel</md-tooltip></md-button><md-button aria-label="" data-ng-repeat="customButton in vm.customButtons" class="md-fab md-raised md-mini" data-ng-click="vm.openCustomAdditionsView($event, customButton)"><ng-md-icon icon="{{customButton.icon}}"></ng-md-icon><md-tooltip md-direction="right">{{customButton.caption}}</md-tooltip></md-button></md-fab-actions></md-fab-speed-dial></div></div><div data-ng-if="vm.checkReadyStatus()" class="g-group-table-holder"><!--<group-table items="vm.getProjection()" options="vm.options" report-options="vm.reportOptions"></group-table>--><group-table items="vm.getProjection()" options="vm.options" report-options="vm.reportOptions"></group-table></div><div data-ng-if="!vm.checkReadyStatus()"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div></div>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-viewer/field-resolver-view.html",'<div><div data-ng-if="readyStatus.content"><div data-ng-if="type === \'key-value\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-model="entity[getModelKey()]" md-on-close="searchTerm = \'\'" data-ng-change="changeWatcher()"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+field.name | filter:{name: searchTerm}" ng-value="field.value">{{field.name}}</md-option></md-select></md-input-container></div><div data-ng-if="type === \'id\'"><div data-ng-if="getModelKey() === \'instrument\' "><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-model="entity[getModelKey()]" data-ng-change="changeWatcher()" md-container-class="h-instrument-select" data-instrument-modal-resolver md-selected-text="bindFormFields()"><md-option data-ng-repeat="field in fields track by field.id" ng-value="field.id">{{bindListFields(field)}}</md-option></md-select></md-input-container></div><div data-ng-if="getModelKey() !== \'instrument\'"><div data-ng-if="checkComplexEntityType()"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><div data-ng-if="readyStatus.tags"><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="entity[getModelKey()]" md-selected-text="bindFormFields()"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-optgroup data-ng-if="group.fields.length" label="{{group.name}}" data-ng-repeat="group in groups | orderBy:\'-\'+group.name track by group.id"><md-option data-ng-repeat="field in group.fields | orderBy:\'-\'+resolveSort(field) | filter:{name: searchTerm} track by $index" ng-value="field.id">{{bindListFields(field)}}</md-option></md-optgroup></md-select></div><div data-ng-if="!readyStatus.tags"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-input-container></div><div data-ng-if="!checkComplexEntityType()"><div data-ng-if="getModelKey() !== \'price_download_scheme\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="entity[getModelKey()]" md-selected-text="bindFormFields()"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+resolveSort(field) | filter:{name: searchTerm} track by field.id " ng-value="field.id">{{bindListFields(field)}}</md-option></md-select></md-input-container></div><div data-ng-if="getModelKey() == \'price_download_scheme\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="entity[getModelKey()]"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+field.scheme_name | filter:{scheme_name:searchTerm} track by field.id " ng-value="field.id">{{field[\'scheme_name\']}}</md-option></md-select></md-input-container></div></div></div></div><div data-ng-if="type === \'multiple-ids\'"><div data-ng-if="checkComplexEntityType()"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="entity[getModelKey()]" multiple="true"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-optgroup label="{{group.name}}" data-ng-repeat="group in groups | orderBy:\'-\'+group.name track by group.id"><md-option data-ng-repeat="field in group.fields | orderBy:\'-\'+resolveSort(field) | filter:{name: searchTerm}" ng-value="field.id">{{bindListFields(field)}}</md-option></md-optgroup></md-select></md-input-container></div><div data-ng-if="!checkComplexEntityType()"><div data-ng-if="getModelKey() !== \'content_types\'"><div data-ng-if="resolveMultiple()"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="entity[getModelKey()]" md-selected-text="bindMCField()" multiple="true"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+resolveSort(field) | filter:{name: searchTerm} track by field.id" ng-value="field.id">{{bindListFields(field)}}</md-option></md-select></md-input-container></div><div data-ng-if="!resolveMultiple()"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="entity[getModelKey()]" md-selected-text="bindFormFields()"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+resolveSort(field) | filter:{name: searchTerm} track by field.id" ng-value="field.id">{{bindListFields(field)}}</md-option></md-select></md-input-container></div></div><div data-ng-if="getModelKey() === \'content_types\'"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-change="changeWatcher()" md-on-close="searchTerm = \'\'" data-ng-model="entity[getModelKey()]" md-selected-text="bindMCField()" multiple="true"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields | orderBy:\'-\'+field.name | filter:{name: searchTerm}" ng-value="field.key">{{field.name}}</md-option></md-select></md-input-container></div></div></div></div><div data-ng-if="!readyStatus.content"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-viewer/permission-editor-view.html",'<div data-ng-controller="EntityViewerPermissionEditorController as vm"><div layout="row" layout-align="center center"><h3>Permission manager</h3></div><md-tabs md-dynamic-height md-border-bottom><md-tab label="Users"><md-content class="md-padding"><div layout="row" layout-align="space-between center" style="margin-bottom: 8px; padding: 0 16px"><div layout="row" layout-align="begin center"><b>Username</b></div><div layout="row" layout-align="center center"><div layout="row" layout-align="center center" style="width: 210px"><b>Manage</b></div><div layout="row" layout-align="center center" style="width: 210px"><b>Change</b></div></div></div><div layout="column" class="ev-permission-editor-item"><div layout="row" layout-align="space-between" class="{{user.isSelected ? \'selected\' : \'\'}}" data-ng-repeat="user in vm.users" data-ng-click="vm.selectEntity(\'user\', user)"><div layout="row" layout-align="begin center"><span data-ng-bind="user.username"></span></div><div layout="row" layout-align="center center"><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleManage(false, user)"><span>Disable</span></md-button><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleManage(true, user)"><span>Enable</span></md-button><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleChange(false, user)"><span>Disable</span></md-button><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleChange(true, user)"><span>Enable</span></md-button></div></div></div></md-content></md-tab><md-tab label="Groups"><md-content class="md-padding"><div layout="row" layout-align="space-between center" style="margin-bottom: 8px; padding: 0 16px"><div layout="row" layout-align="begin center">Group</div><div layout="row" layout-align="center center"><div layout="row" layout-align="center center" style="width: 210px"><b>Manage</b></div><div layout="row" layout-align="center center" style="width: 210px"><b>Change</b></div></div></div><div layout="column" class="ev-permission-editor-item"><div layout="row" layout-align="space-between" class="{{group.isSelected ? \'selected\' : \'\'}}" data-ng-repeat="group in vm.groups" data-ng-click="vm.selectEntity(\'group\', group)"><div layout="row" layout-align="begin center"><span data-ng-bind="group.name"></span></div><div layout="row" layout-align="center center"><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleManage(false, group)"><span>Disable</span></md-button><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleManage(true, group)"><span>Enable</span></md-button><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleChange(false, group)"><span>Disable</span></md-button><md-button class="md-raised {{vm.processing ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.toggleChange(true, group)"><span>Enable</span></md-button></div></div></div></md-content></md-tab></md-tabs></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/entity-viewer/report-wizard-view.html",'<div data-ng-controller="ReportWizardController as vm" class="report-wizard"><div data-ng-if="vm.checkReadyStatus()" class="custom-scrollbar" data-custom-scroll><div data-ng-if="vm.currentStep == 1"><div layout="row" layout-align="center center"><h3>Choose report type</h3></div><div layout="column"><div data-ng-repeat="item in vm.reportTypes"><md-button class="md-raised" data-ng-click="vm.selectReport(item)">{{item.caption}}</md-button></div></div><!--<div layout="row" layout-align="end center">--><!--<md-button class="md-raised {{vm.checkDisabled() ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.nextStep()">--><!--Next--><!--</md-button>--><!--</div>--></div><div data-ng-if="vm.currentStep == 2"><div layout="row" layout-align="center center"><h3>Choose layout</h3></div><div layout="column"><div data-ng-repeat="item in vm.layouts"><md-button class="md-raised" data-ng-click="vm.selectLayout(item)">{{item.name}}</md-button></div></div><div layout="row" layout-align="begin center"><md-button class="md-raised" data-ng-click="vm.prevStep()">Back</md-button></div><!--<div layout="row" layout-align="space-between center">--><!--<md-button class="md-raised" data-ng-click="vm.prevStep()">Back</md-button>--><!--<md-button class="md-raised {{vm.checkDisabled() ? \'disabled-btn\' : \'\'}}" data-ng-click="vm.nextStep()">--><!--Finish--><!--</md-button>--><!--</div>--></div></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/reports/reports-balance-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="report-data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/reports/reports-cash-flow-projection-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="report-data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/reports/reports-custom-attr-view.html",'<div class="attributes-manager-view" style="height: 100%"><md-content style="height: 100%"><!--<md-button class="md-fab md-fab-bottom-right" data-ng-click="vm.addAttribute($event)">--><!--<ng-md-icon icon="add"></ng-md-icon>--><!--</md-button>--><div><h2 class="am-header"><span data-ng-bind="vm.entityType"></span> CUSTOM ATTRIBUTES<!-- <ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #777777">\n                    <md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip>\n                </ng-md-icon> --></h2></div><div layout="row"><div layout="row" flex="50" layout-align="start center"><md-button class="md-raised" data-ng-click="vm.addAttribute($event)">ADD NEW</md-button></div><div layout="row" flex="50" layout-align="end center"><!-- <md-button class="md-raised" data-ng-click="vm.toggleHidden($event)">\n                    <span data-ng-show="!vm.showHidden">\n                        SHOW HIDDEN ATTRIBUTES\n                    </span>\n                    <span data-ng-show="vm.showHidden">\n                        HIDE ATTRIBUTES\n                    </span>\n                </md-button> --><md-button class="md-raised md-primary" data-ui-sref="app.reports.balance-report">RETURN TO VIEW</md-button><!-- <md-button class="md-raised md-primary"\n                           data-ui-sref="app.data-constructor({entityType: vm.entityType})">\n                    RETURN TO FORM EDITOR\n                </md-button> --></div></div><div data-ng-if="vm.attrs.length"><md-card data-ng-repeat="item in vm.attrs" class="am-attr-card" data-ng-if="vm.checkIsHidden(item)"><div><b data-ng-bind="item.name"></b><div class="am-attr-misc"><md-button data-ng-if="item[\'value_type\'] === 30" class="am-attr-btn" data-ng-click="vm.editTreeAttr(item, $event)"><ng-md-icon icon="format_align_right"></ng-md-icon></md-button><md-button class="am-attr-btn" data-ng-click="vm.editAttr(item, $event)"><ng-md-icon icon="edit"></ng-md-icon></md-button><md-button class="am-attr-btn" data-ng-click="vm.deleteAttr(item, $event)"><ng-md-icon icon="delete"></ng-md-icon></md-button></div></div></md-card></div><div data-ng-if="!vm.attrs.length"><!-- <div layout="row" layout-sm="column" layout-align="space-around">\n                <md-progress-circular md-mode="indeterminate"></md-progress-circular>\n            </div> --><div layout="row" class="add-more-tip" layout-sm="column" layout-align="center center"><h1>You could add new custom attributes here</h1></div></div></md-content></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/reports/reports-performance-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="report-data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/reports/reports-profit-and-lost-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="report-data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/reports/reports-transaction-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="report-data-layer-wrapper"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/bloomber-import-settings-view.html",'<div data-ng-controller="SettingBloombergImportInstrumentController as vm">Mapping name User code Name Short name Public name Notes Instrument type Pricing currency Price multiplier Accrued currency Accrued multiplier Daily pricing model Payment size detail Default price Default accrued User text 1 User text 2 User text 3 Price download mode</div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/change-password-settings-view.html",'<div flex="50"><md-input-container class="md-block"><label>Old password</label><input data-ng-model="vm.data.password" type="password"></md-input-container><md-input-container class="md-block"><label>New password</label><input data-ng-model="vm.data.new_password" type="password"></md-input-container><md-input-container class="md-block"><label>New password (Confirm)</label><input data-ng-model="vm.data.new_password_check" type="password"></md-input-container><md-button class="md-raised" data-ng-click="vm.save($event)">Save</md-button></div><div data-ng-if="vm.readyStatus.finished"><h2>You have successfully changed your password</h2></div><div data-ng-if="vm.readyStatus.proccessing"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/data-providers-config-settings-view.html",'<div><div data-ng-if="vm.readyStatus.provider"><md-card><form action="" data-ng-submit="vm.saveConfig($event)" name="sertForm"><md-card-content><!-- <md-input-container class="md-block"> --><div class="sett-data-prov-choose-file"><h4>Certificate</h4><input type="file" id="providerConfigFile" file-read="vm.provider.p12cert" input-file-directive><label for="providerConfigFile" class="md-button md-raised md-primary">Choose a file</label><p>No chosen files</p></div><!-- </md-input-container> --><md-input-container class="md-block"><label>Password</label><input type="password" data-ng-model="vm.provider.password"></md-input-container></md-card-content><md-card-actions><div layout="row" layout-align="end center"><md-button class="md-raised" type="submit">Save</md-button></div></md-card-actions></form></md-card></div><div data-ng-if="!vm.readyStatus.provider"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/data-providers-settings-view.html",'<div><div data-ng-if="vm.readyStatus.dataProviders"><md-card data-ng-repeat="dataProvider in vm.dataProviders"><md-card-content><div layout="row" layout-align="space-between"><div layout="row" layout-align="begin center">{{dataProvider.name}}</div><div layout="row" layout-align="end center"><md-button class="md-raised data-provider-btn-sref" data-ui-sref="app.settings.general.data-providers-config({dataProviderId: dataProvider.id})"><ng-md-icon icon="keyboard_arrow_right"></ng-md-icon></md-button></div></div></md-card-content></md-card></div><div data-ng-if="!vm.readyStatus.dataProviders"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/form-design-view.html",'<div><md-list flex><md-list-item class="md-3-line" ng-click="vm.goToState(\'portfolio\')">Portfolios</md-list-item><md-divider></md-divider><md-list-item class="md-3-line" ng-click="vm.goToState(\'account\')">Accounts</md-list-item><md-divider></md-divider><md-list-item class="md-3-line" ng-click="vm.goToState(\'counterparty\')">Counterparties</md-list-item><md-divider></md-divider><md-list-item class="md-3-line" ng-click="vm.goToState(\'responsible\')">Responsibles</md-list-item><md-divider></md-divider><md-list-item class="md-3-line" ng-click="vm.goToState(\'instrument\')">Instruments</md-list-item><md-divider></md-divider><md-list-item class="md-3-line" ng-click="vm.goToState(\'transaction\')">Transactions</md-list-item><md-divider></md-divider><md-list-item class="md-3-line" ng-click="vm.goToState(\'price-history\')">Price history</md-list-item><md-divider></md-divider><md-list-item class="md-3-line" ng-click="vm.goToState(\'currency-history\')">Currency history</md-list-item><md-divider></md-divider></md-list></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/general-view.html",'<div><md-tabs md-dynamic-height md-border-bottom><md-tab label="Profile" data-ui-sref="app.settings.general.profile" md-active="$state.includes(\'app.settings.general.profile\')"><md-content class="md-padding"><div data-ui-view="profile"></div></md-content></md-tab><md-tab label="Change Password" data-ui-sref="app.settings.general.change-password" md-active="$state.includes(\'app.settings.general.change-password\')"><md-content class="md-padding"><div data-ui-view="change-password"></div></md-content></md-tab><md-tab label="Data providers" data-ui-sref="app.settings.general.data-providers" md-active="vm.checkProviders()"><md-content class="md-padding"><div data-ui-view="data-providers"></div></md-content></md-tab><md-tab label="Instrument import" data-ui-sref="app.settings.general.instrument-import" md-active="$state.includes(\'app.settings.general.instrument-import\')"><md-content class="md-padding"><div data-ui-view="instrument-import"></div></md-content></md-tab><md-tab label="Transaction import" data-ui-sref="app.settings.general.transaction-import" md-active="$state.includes(\'app.settings.general.transaction-import\')"><md-content class="md-padding"><div data-ui-view="transaction-import"></div></md-content></md-tab></md-tabs></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/instrument-import-settings-view.html",'<div><div data-ng-if="vm.readyStatus.instrumentSchemes"><div layout="row" layout-align="end center"><md-button class="md-raised md-primary" data-ng-click="vm.addScheme($event)">Create scheme</md-button></div><div layout="column" data-ng-if="vm.instrumentSchemes.length"><div layout="row"><h4 style="padding-left: 20px">Scheme name</h4></div><div layout="column"><md-card data-ng-repeat="item in vm.instrumentSchemes" flex="100"><md-card-content><div layout="row" layout-align="space-between center"><div><span data-ng-bind="item[\'scheme_name\']"></span></div><div><md-button style="min-width: 42px" data-ng-click="vm.editScheme($event, item)"><ng-md-icon icon="edit"></ng-md-icon></md-button><md-button style="min-width: 42px" data-ng-click="vm.deleteScheme($event, item)"><ng-md-icon icon="delete"></ng-md-icon></md-button></div></div></md-card-content></md-card></div></div><div layout="row" data-ng-if="!vm.instrumentSchemes.length" layout-align="center center"><h3>Import schemes do not exist</h3></div></div><div data-ng-if="!vm.readyStatus.instrumentSchemes"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/profile-settings-view.html",'<div flex="50" data-ng-if="vm.readyStatus.user"><md-input-container class="md-block"><label>First name</label><input data-ng-model="vm.user[\'first_name\']"></md-input-container><md-input-container class="md-block"><label>First name</label><input data-ng-model="vm.user[\'last_name\']"></md-input-container><md-input-container class="md-block"><label>Email</label><input data-ng-model="vm.user.email" type="email"></md-input-container><md-input-container class="md-block" style="height: 64px"><label>Language</label><md-select data-ng-model="vm.user.profile.language"><md-option value="ru">Russian</md-option><md-option value="en">English</md-option><md-option value="es">Spanish</md-option><md-option value="de">Deutsch</md-option></md-select></md-input-container><md-input-container class="md-block" style="height: 64px"><label>Timezone</label><md-select data-ng-model="vm.user.profile.timezone"><md-option data-ng-repeat="item in vm.timeZones" ng-value="item.name">{{item.name}}</md-option></md-select></md-input-container><md-button class="md-raised" data-ng-click="vm.save()">Save</md-button></div><div data-ng-if="!vm.readyStatus.user"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/transaction-import-settings-view.html",'<div><div data-ng-if="vm.readyStatus.instrumentSchemes"><div layout="row" layout-align="end center"><md-button class="md-raised md-primary" data-ng-click="vm.addScheme($event)">Create scheme</md-button></div><div layout="column" data-ng-if="vm.instrumentSchemes.length"><div layout="row"><h4 style="padding-left: 20px">Scheme name</h4></div><div layout="column"><md-card data-ng-repeat="item in vm.instrumentSchemes" flex="100"><md-card-content><div layout="row" layout-align="space-between center"><div><span data-ng-bind="item[\'scheme_name\']"></span></div><div><md-button style="min-width: 42px" data-ng-click="vm.editScheme($event, item)"><ng-md-icon icon="edit"></ng-md-icon></md-button><md-button style="min-width: 42px" data-ng-click="vm.deleteScheme($event, item)"><ng-md-icon icon="delete"></ng-md-icon></md-button></div></div></md-card-content></md-card></div></div><div layout="row" data-ng-if="!vm.instrumentSchemes.length" layout-align="center center"><h3>Import schemes do not exist</h3></div></div><div data-ng-if="!vm.readyStatus.instrumentSchemes"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/settings/users-and-groups-view.html",'<div class="members-groups-content"><md-tabs md-dynamic-height><md-tab label="Members"><div data-ng-if="vm.members && vm.members.length > 0"><table class="members-groups-table"><thead class="members-groups-thead"><tr><th>Member name</th><th>User role</th><th>Date Joined</th><th>Assigned to groups</th><th></th></tr></thead><tbody class="members-groups-tbody"><tr data-ng-repeat="member in vm.members"><td><md-button class="members-groups-name" data-ng-bind="member.display_name" data-ng-click="vm.manageMemberDialog($event, member.id)"></md-button></td><td><span data-ng-if="member.is_admin">Admin</span> <span data-ng-if="!member.is_admin">Member</span></td><td data-ng-bind="member.join_date | date: \'yyyy/MM/dd\'"></td><td><span data-ng-repeat="groupName in member.groupsName" data-ng-bind="(groupName + \',\')"></span></td><td class="members-groups-delete"><md-button class="members-groups-delete-btn" data-ng-click="vm.deleteMemberGroupByKey(\'members\', member.id)"><ng-md-icon icon="close" style="fill:#000000" size="20"></ng-md-icon></md-button></td></tr></tbody></table><div class="add-member-row" layout="row" layout-align="start center"><div flex="95"><md-button class="add-member-btn" data-ng-click="vm.createMemberDialog($event)">Add member</md-button></div></div></div><div data-ng-if="!vm.members || vm.members.length === 0"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-tab><md-tab label="Groups"><div data-ng-if="vm.groups && vm.groups.length > 0"><table class="members-groups-table"><thead class="members-groups-thead"><tr><th>Group name</th><th></th></tr></thead><tbody class="members-groups-tbody"><tr data-ng-repeat="group in vm.groups"><td><md-button class="members-groups-name" data-ng-bind="group.name" data-ng-click="vm.manageGroupDialog($event, group.id)"></md-button></td><td class="members-groups-delete"><md-button class="members-groups-delete-btn" data-ng-click="vm.deleteMemberGroupByKey(\'groups\', group.id)"><ng-md-icon icon="close" style="fill:#000000" size="20"></ng-md-icon></md-button></td></tr></tbody></table><div class="add-member-row" layout="row" layout-align="start center"><div flex="95"><md-button class="add-member-btn" data-ng-click="vm.createGroupDialog($event)">Add group</md-button></div></div></div><div data-ng-if="!vm.groups || vm.groups.length === 0"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></md-tab></md-tabs></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/special-rules/complex-transaction-special-rules-view.html",'<div class="special-rules-view complex-transaction-sr" data-ng-controller="ComplexTransactionSpecialRulesController as vm"><div layout="row"><div layout="row" flex="50"><md-input-container><label for="">Portfolio</label><md-select multiple="multiple" data-ng-model="vm.complexTransactionOptions.portfolio"><md-option data-ng-repeat="item in vm.portfolios" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></div><div layout="row" flex="50"><md-input-container><label for="">Instrument Type</label><md-select multiple="multiple" data-ng-model="vm.complexTransactionOptions.instrumentType"><md-option data-ng-repeat="item in vm.instrumentTypes" ng-value="item.id">{{item.user_code}}</md-option></md-select></md-input-container></div></div><div layout="row"><md-input-container><label for="">Transaction type</label><!--<md-select data-ng-model="vm.transactionType" md-on-open="vm.loadTransactionTypes()" ng-disabled="!vm.portfolioId && !vm.instrumentId">--><md-select data-ng-model="vm.complexTransactionOptions.transactionType" md-on-open="vm.loadTransactionTypes()" data-ng-change="vm.transactionTypeHandler()"><md-option data-ng-repeat="item in vm.transactionTypes" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></div></div>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/system/audit-instruments-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/system/audit-transactions-view.html",'<div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/system/audit-view.html",'<md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="Transaction" md-active="vm.checkActiveTab(\'transaction\')" data-ng-click="vm.setActiveTab(\'transaction\')"><md-content><div><div data-ng-if="vm.readyStatus.content"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'"></div></div><div data-ng-if="!vm.readyStatus.content"><div class="e-data-loader" layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-diameter="100" md-mode="indeterminate"></md-progress-circular></div></div></div></md-content></md-tab><md-tab label="Instrument" md-active="vm.checkActiveTab(\'instrument\')" data-ng-click="vm.setActiveTab(\'instrument\')"><md-content class="md-padding"><div data-ng-if="vm.readyStatus.instrument" class="audit-wrapper"><div layout="column"><div flex layout="row"><div flex="10" layout="row" class="audit-cell"><span class="no-select">Date</span></div><md-divider></md-divider><div flex="10" layout="row" class="audit-cell"><span class="no-select">Time</span></div><md-divider></md-divider><div flex="10" flex layout="row" class="audit-cell" layout-align="center center"><span class="no-select">Member</span></div><md-divider></md-divider><div flex="10" flex layout="row" class="audit-cell" layout-align="center center"><span class="no-select">User code</span></div><md-divider></md-divider><div flex="10" flex layout="row" class="audit-cell" layout-align="center center"><span class="no-select">Field</span></div><md-divider></md-divider><div flex="10" flex layout="row" class="audit-cell" layout-align="center center"><span class="no-select">Old value</span></div><md-divider></md-divider><div flex="10" flex layout="row" class="audit-cell" layout-align="center center"><span class="no-select">New value</span></div><md-divider></md-divider><div flex layout="row" class="audit-cell" layout-align="center center"><span class="no-select">Action</span></div></div><md-divider></md-divider></div><div layout="column" data-ng-repeat="item in vm.instruments"><div layout="row"><div flex layout="row"><div flex="10" layout="row" class="audit-cell"><span class="no-select" data-ng-bind="item.dateFormatted"></span></div><md-divider></md-divider><div flex="10" layout="row" class="audit-cell"><span class="no-select" data-ng-bind="item.timeFormatted"></span></div><md-divider></md-divider><div flex="10" layout="row" class="audit-cell" layout-align="center center"><span class="no-select" data-ng-bind="item.member.username"></span></div><md-divider></md-divider><div flex="10" layout="row" class="audit-cell" layout-align="center center"><span class="no-select" data-ng-bind="item.object_repr"></span></div><md-divider></md-divider><div flex="10" layout="row" class="audit-cell" layout-align="center center"><span class="no-select" data-ng-bind="item[\'field_name\']"></span></div><md-divider></md-divider><div flex="10" layout="row" class="audit-cell" layout-align="center center"><span class="no-select" data-ng-bind="item[\'old_value\']"></span></div><md-divider></md-divider><div flex="10" layout="row" class="audit-cell" layout-align="center center"><span class="no-select" data-ng-bind="item[\'value\']"></span></div><md-divider></md-divider><div flex layout="row" class="audit-cell" layout-align="center center"><span class="no-select" data-ng-bind="item.message"></span></div></div></div><md-divider></md-divider></div><div layout="row"><div paging page="vm.instrumentCurrent" page-size="vm.itemPerPage" total="vm.instrumentTotal" paging-action="vm.changePage(\'instrument\', page)" class="global-pagination-div"></div></div></div><div data-ng-if="!vm.readyStatus.instrument" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-content></md-tab></md-tabs>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/system/notifications-view.html",'<div class="notifications-view"><div data-ng-if="vm.notifications.length && vm.notificationsReady"><md-card class="nf-head-card"><div layout="row"><div flex="15">Date</div><div flex="10">From</div><div flex="75">Notification</div></div></md-card><md-card data-ng-repeat="item in vm.notifications"><div layout="row"><div flex="15">{{item[\'create_date\'] | date:\'dd/MM/yyyy HH:mm\'}}</div><div flex="10">System</div><div flex="75">{{item.message}}</div></div></md-card><div layout="row"><div paging page="vm.notificationsCurrent" page-size="vm.itemPerPage" total="vm.notificationsTotal" paging-action="vm.changePage(page)" class="global-pagination-div"></div></div></div><div layout="row"><md-button class="md-raised" data-ng-click="vm.markAllNotificationsAsReaded()">Mark all as readed</md-button><md-button data-ng-if="vm.notificationsListType == \'all\'" class="md-raised" data-ng-click="vm.hideShowReadedNotifications(\'unreaded\')">Hide readed</md-button><md-button data-ng-if="vm.notificationsListType == \'unreaded\'" class="md-raised" data-ng-click="vm.hideShowReadedNotifications(\'all\')">Show readed</md-button></div><div data-ng-if="!vm.notifications.length && !vm.notificationsReady"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/ui/ui-layout-list-view.html",'<md-dialog aria-label="" ng-cloak class="list-layouts-dialog" style="width: 50%" drag-dialog><md-toolbar><div class="md-toolbar-tools"><h2>Layouts</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div data-ng-if="vm.readyStatus.items"><div data-ng-repeat="item in vm.items" class="ll-layout-item {{item.is_default ? \'active\' : \'\'}}" style="padding: 10px" layout="row" layout-align="space-between center"><div layout="row" class="ll-name" data-ng-click="vm.selectLayout(item)">{{item.name}}</div><div><md-button class="md-button ll-delete-btn" ng-click="vm.deleteItem($event, item)"><ng-md-icon icon="delete" size="24"></ng-md-icon></md-button></div></div></div><div data-ng-if="!vm.readyStatus.items" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">Cancel</md-button><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/dialogs/ui/ui-layout-save-as-view.html",'<md-dialog aria-label="" ng-cloak class="save-as-layouts-dialog" style="width: 50%"><md-toolbar><div class="md-toolbar-tools"><h2>Layouts</h2><span flex></span></div></md-toolbar><md-dialog-content data-custom-scroll class="custom-scrollbar"><div style="padding: 20px"><md-input-container style="width: 100%"><label for="">Layout name</label><input type="text" data-ng-model="vm.layoutName"></md-input-container></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">Cancel</md-button><md-button ng-click="vm.agree()" style="margin-right:20px">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/bind-report-row-view.html",'<div data-ng-show="itemIsFolded(item)" class="{{item.isFirstOfFolded ? \'folded-root-item\' : \'\'}}"><div data-ng-if="item.type == \'preinit\'" class="g-row report-preinit-row"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div data-ng-repeat="group in item.value track by $index" class="g-group"><span data-ng-bind="bindGroupValue(group)"></span></div></div><div data-ng-if="item.type == \'init\'" class="g-row report-init-row"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div data-ng-repeat="group in item.value track by $index" class="g-group"><span data-ng-bind="bindGroupValue(group)"></span></div></div><div data-ng-if="item.type == \'breadcrumbs\'" class="g-row report-breacrumbs-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in item.cellsCaptions track by $index"><div class="g-cell {{resolveReportCellBackground(\'header\', item, column, $index)}} {{resolveReportCellBorder(\'header\', item, column, $index)}}"><!--{{item.cellsCaptions}}--> {{bindGroupValue(item.cellsCaptions[$index])}}</div></div><div class="g-cell g-cell-group"><div data-ng-repeat="group in item.value track by $index"><span data-ng-bind="bindGroupValue(group)"></span></div></div></div></div><div data-ng-if="item.type == \'header\'" class="g-row report-header-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'header\', item, column, $index)}} {{resolveReportCellBorder(\'header\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><!--{{item.cellsCaptions[$index][\'comparePattern\']}}--> {{bindGroupValue(item.cellsCaptions[$index])}}</div><div class="g-cell {{getAlign(column)}} {{resolveReportCellBorder(\'header\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><span title="{{bindCellTitle(item, column)}}" data-ng-bind-html="bindCell(item.value, column) | trustAsHtml"></span></div></div></div></div><div data-ng-if="item.type == \'normal\'" class="g-row report-normal-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'normal\', item, column, $index)}} {{resolveReportCellBorder(\'normal\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><md-card class="group-row-fold-holder _md" data-ng-if="bindGroupValue(item.cellsCaptions[$index]) != \'\'"><div><md-button class="" aria-label="hide/show grouping" data-ng-show="item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="add"></ng-md-icon></md-button><md-button class="" aria-label="hide/show grouping" data-ng-show="!item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></md-card>{{bindGroupValue(item.cellsCaptions[$index])}}</div><div class="g-cell {{getAlign(column)}} {{resolveReportCellBorder(\'normal\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><span title="{{bindCellTitle(item.value, column)}}" data-ng-bind-html="bindCell(item.value, column, {reportItem: item}) | trustAsHtml"></span></div></div></div></div><div data-ng-if="item.type == \'subtotal-line\'" class="g-row report-subtotal-line-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'subtotal-line\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><md-card class="group-row-fold-holder _md" data-ng-if="bindGroupValue(item.cellsCaptions[$index]) != \'\'"><div><md-button class="" aria-label="hide/show grouping" data-ng-show="item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="add"></ng-md-icon></md-button><md-button class="" aria-label="hide/show grouping" data-ng-show="!item.cellsCaptions[$index].isFolded" data-ng-click="toggleGroupFold(item, $index)"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></md-card><b data-ng-if="$index !== 0"><span data-ng-if="isSubtotalHided(column)" title="{{bindCellTitle(item.value, column)}}" data-ng-bind-html="bindCellSubTotal(item.value, column) | trustAsHtml"></span></b></div><div class="g-cell {{getAlign(column)}} {{resolveReportCellItemBackground(\'subtotal-line\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><b><span title="{{bindCellTitle(item.value, column)}}" data-ng-if="isSubtotalHided(column)" data-ng-bind-html="bindCellSubTotal(item.value, column) | trustAsHtml"></span></b></div></div></div></div><div data-ng-if="item.type == \'subtotal\'" class="g-row report-subtotal-row"><div><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns track by $index"><div class="g-cell {{resolveReportCellBackground(\'subtotal\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="checkReportColumnCaption(item.cellsCaptions, column, $index)"><span data-ng-if="isSubtotalHided(column)" data-ng-bind-html="item.cellsCaptions[$index].value"></span></div><div class="g-cell {{getAlign(column)}} {{resolveReportCellItemBackground(\'subtotal\', item, column, $index)}} {{resolveReportCellBorder(\'subtotal\', item, column, $index)}}" data-ng-if="!checkReportColumnCaption(item.cellsCaptions, column, $index)"><b><span title="{{bindCellTitle(item.value, column)}}" data-ng-if="isSubtotalHided(column)" data-ng-bind-html="bindCellSubTotal(item.value, column) | trustAsHtml"></span></b></div></div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/columns-view.html",'<div class="g-columns-component g-thead" group-column-init-width columns="columns"><div class="g-column-title-row" layout="row" data-ng-if="options.components.columnAreaHeader"><p class="g-column-title"><span class="g-meta-circle red">C</span>OLUMN AREA<ng-md-icon style="fill: #fff" class="tooltips-sign" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></p></div><div class="g-cell-select all {{isAllSelected ? \'active\' : \'\'}}" data-ng-click="selectAllRows()"><ng-md-icon icon="signal_cellular_0_bar"></ng-md-icon></div><div class="g-scroll-wrapper" group-column-width-set init-width=""><div class="g-scrollable-area"><div dragula="\'columns-bag\'" dragula-model="columns" class="g-columns-holder"><md-card class="g-cell g-column" data-ng-repeat="column in columns"><div class="g-column-content"><div class="column-left-content"><div class="sort" data-ng-if="isSortable(column)"><md-button class="column-sort column-btns" data-ng-show="column.options.sort === \'ASC\'" aria-label="open settings" data-ng-click="sortHandler(column, \'DESC\')"><ng-md-icon icon="keyboard_arrow_down"></ng-md-icon></md-button><md-button class="column-sort-up column-btns" data-ng-show="column.options.sort === \'DESC\'" aria-label="open settings" data-ng-click="sortHandler(column, \'ASC\')"><ng-md-icon icon="keyboard_arrow_up"></ng-md-icon></md-button><md-button class="column-sort column-both-sorted column-btns" data-ng-show="!column.options.sort" aria-label="open settings" data-ng-click="sortHandler(column, \'DESC\')"><ng-md-icon class="c-up" icon="keyboard_arrow_up"></ng-md-icon><ng-md-icon class="c-down" icon="keyboard_arrow_down"></ng-md-icon></md-button></div><div class="caption">{{column.name}}</div></div><div class="settings-btn"><md-menu data-ng-if="options.isReport && isColumnFloat(column)"><md-button aria-label="Open phone interactions menu" class="md-icon-button column-btns" ng-click="$mdOpenMenu($event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="4"><md-menu-item><md-menu><md-button ng-click="selectSubtotalType(column, 1)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 1)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 1)" class="z-menu-icon"></ng-md-icon><span>Subtotal SUM</span></md-button><md-menu-content style="display: none"></md-menu-content></md-menu></md-menu-item><md-menu-item><md-menu><md-button aria-label="Open phone interactions menu" class="" ng-click="$mdOpenMenu($event)"><ng-md-icon icon="done" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><span>Subtotal Weighted</span><ng-md-icon icon="arrow_drop_up" class="z-dropdown-icon"></ng-md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="selectSubtotalType(column, 2)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 2)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 2)" class="z-menu-icon"></ng-md-icon><span>Market Value</span></md-button></md-menu-item><md-menu-item><md-button ng-click="selectSubtotalType(column, 3)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 3)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 3)" class="z-menu-icon"></ng-md-icon><span>Market Value %</span></md-button></md-menu-item><md-menu-item><md-button ng-click="selectSubtotalType(column, 4)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 4)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 4)" class="z-menu-icon"></ng-md-icon><span>Exposure</span></md-button></md-menu-item><md-menu-item><md-button ng-click="selectSubtotalType(column, 5)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 5)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 5)" class="z-menu-icon"></ng-md-icon><span>Exposure %</span></md-button></md-menu-item></md-menu-content></md-menu></md-menu-item><md-menu-item><md-menu><md-button aria-label="Open phone interactions menu" class="" ng-click="$mdOpenMenu($event)"><ng-md-icon icon="done" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><span>Subtotal Avg. Weighted</span><ng-md-icon icon="arrow_drop_up" class="z-dropdown-icon"></ng-md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="selectSubtotalType(column, 6)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 6)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 6)" class="z-menu-icon"></ng-md-icon><span>Market Value</span></md-button></md-menu-item><md-menu-item><md-button ng-click="selectSubtotalType(column, 7)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 7)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 7)" class="z-menu-icon"></ng-md-icon><span>Market Value %</span></md-button></md-menu-item><md-menu-item><md-button ng-click="selectSubtotalType(column, 8)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 8)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 8)" class="z-menu-icon"></ng-md-icon><span>Exposure</span></md-button></md-menu-item><md-menu-item><md-button ng-click="selectSubtotalType(column, 9)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="!checkSubtotalFormula(column, 9)" class="z-menu-icon" style="visibility: hidden"></ng-md-icon><ng-md-icon icon="done" data-ng-show="checkSubtotalFormula(column, 9)" class="z-menu-icon"></ng-md-icon><span>Exposure %</span></md-button></md-menu-item></md-menu-content></md-menu></md-menu-item><md-menu-item><md-menu><md-button ng-click="reportHideSubtotal(column)" class="g-settings-option-btn"><ng-md-icon icon="done" style="visibility: hidden"></ng-md-icon><span data-ng-show="!column.report_settings.hide_subtotal">Hide subtotal</span><span data-ng-show="column.report_settings.hide_subtotal">Show subtotal</span></md-button><md-menu-content style="display: none"></md-menu-content></md-menu></md-menu-item><md-menu-item><md-menu><md-button ng-click="removeColumn(column)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button><md-menu-content style="display: none"></md-menu-content></md-menu></md-menu-item></md-menu-content></md-menu><md-menu data-ng-if="options.isReport && !isColumnFloat(column)"><md-button aria-label="Open phone interactions menu" class="md-icon-button column-btns" ng-click="$mdOpenMenu($event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-menu><md-button ng-click="removeColumn(column)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button><md-menu-content style="display: none"></md-menu-content></md-menu></md-menu-item></md-menu-content></md-menu><md-menu data-ng-if="!options.isReport"><md-button aria-label="Open phone interactions menu" class="md-icon-button column-btns" ng-click="$mdOpenMenu($event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="4"><md-menu-item><md-button ng-click="removeColumn(column)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button></md-menu-item></md-menu-content></md-menu></div><div class="column-name-tooltip-wrap"><div class="column-name-tooltip-content"><span data-ng-bind="column.name"></span></div></div></div><div class="resize-slider"></div></md-card></div><div class="drop-new-field" id="columnsbag" data-ng-if="!isItemAddition">Drop New Column</div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/group-table-shell-view.html",'<div class="g-wrapper" data-group-height-aligner data-options="options"><div class="g-workarea-wrap"><div class="g-workarea main-area" data-group-clipboard-handler data-items="items" data-columns="columns"><div class="g-grouping-section" data-ng-if="options.components.groupingArea"><group-grouping options="options"></group-grouping></div><div class="g-table-section"><div data-custom-scroll class="custom-scrollbar" data-scroll-y="false"><div class="g-table-wrap" data-group-column-resizer data-items="items" data-options="options"><group-columns options="options" items="items"></group-columns><group-table-body class="group-table-body" options="options" items="items"></group-table-body></div></div></div></div></div><div class="g-filter-sidebar main-sidebar" data-ng-if="options.components.sidebar"><div data-custom-scroll class="custom-scrollbar"><div class="g-filter" id="filtersbag"><group-sidebar-filter options="options" report-options="reportOptions"></group-sidebar-filter></div></div></div><div class="g-additions" data-ng-if="checkAdditions()"><div class="g-height-slider"></div><div class="g-additions-data-editor min-height" data-ng-show="options.additionsStatus.editor"><div data-ng-show="!options.editorEntityId"><div class="g-additions-editor-caption">Select row to start</div></div><div data-ng-show="options.editorEntityId" class="min-height"><group-editor-binder options="options"></group-editor-binder></div></div><div class="g-additions-workarea" data-ng-if="options.additionsStatus.permissionEditor"><div data-ng-include="\'views/entity-viewer/permission-editor-view.html\'" class="min-height"></div></div><div class="g-additions-workarea" data-ng-if="options.additionsStatus.reportWizard"><div data-ng-include="\'views/entity-viewer/entity-viewer-view.html\'" class="min-height"></div></div><div class="g-extra-features" data-ng-if="findSelectedFeature().isOpened"><div data-ng-include="{{findSelectedFeature().templateUrl}}"></div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/grouping-view.html",'<div class="g-grouping-component"><div><p class="g-drag-section-title"><span class="g-meta-circle green">G</span>ROUPING AREA<ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></p></div><div class="g-second-line"><div class="groups-holder"><div class="group-folding-holder" data-ng-if="!options.isReport"><md-card><div><!--<div class="fold-btn-wrap {{folding ? \'\' : \'disabled\'}}">--><div class="fold-btn-wrap"><md-button class="grouping-fold-btn" aria-label="hide/show grouping" data-ng-click="toggleGroupFold()"><ng-md-icon icon="add"></ng-md-icon></md-button><md-tooltip class="tooltip_1" md-direction="top">Expand</md-tooltip></div><!--<div class="fold-btn-wrap {{folding ? \'disabled\' : \'\'}}">--><div class="fold-btn-wrap"><md-button class="grouping-fold-btn" aria-label="hide/show grouping" data-ng-click="toggleGroupFold()"><ng-md-icon icon="remove"></ng-md-icon></md-button><md-tooltip class="tooltip_1" md-direction="top">Collapse</md-tooltip></div></div></md-card></div><div dragula="\'group-bag\'" dragula-model="grouping"><md-card data-ng-repeat="item in options.grouping track by $index" class="group-item card"><div class="sort"><md-button class="group-sort" data-ng-show="item.options.sort === \'ASC\'" aria-label="open settings" data-ng-click="sortHandler(item, \'DESC\')"><ng-md-icon icon="keyboard_arrow_down"></ng-md-icon></md-button><md-button class="group-sort-up" data-ng-show="item.options.sort === \'DESC\'" aria-label="open settings" data-ng-click="sortHandler(item, \'ASC\')"><ng-md-icon icon="keyboard_arrow_up"></ng-md-icon></md-button><md-button class="group-sort group-both-sorted" data-ng-show="!item.options.sort" aria-label="open settings" data-ng-click="sortHandler(item, \'DESC\')"><ng-md-icon class="c-up" icon="keyboard_arrow_up"></ng-md-icon><ng-md-icon class="c-down" icon="keyboard_arrow_down"></ng-md-icon></md-button></div><div class="caption">{{item.name}}</div><div class="settings-btn"><md-menu data-ng-if="options.isReport"><md-button aria-label="Open phone interactions menu" class="md-icon-button" ng-click="openGroupSettings($mdOpenMenu, $event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="4"><md-menu-item><md-button ng-click="removeGroup(item)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button></md-menu-item><md-menu-item data-ng-if="isReportGroupHaveExtSettings(item, $index, \'line\')"><md-button md-prevent-menu-close="md-prevent-menu-close" ng-click="reportSetSubtotalType(item, \'line\', $index)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="item.report_settings.subtotal_type == \'line\'"></ng-md-icon><ng-md-icon icon="done" style="visibility: hidden" data-ng-show="item.report_settings.subtotal_type != \'line\'"></ng-md-icon><span>Line subtotal</span></md-button></md-menu-item><md-menu-item data-ng-if="isReportGroupHaveExtSettings(item, $index, \'area\')"><md-button md-prevent-menu-close="md-prevent-menu-close" ng-click="reportSetSubtotalType(item, \'area\', $index)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="item.report_settings.subtotal_type == \'area\'"></ng-md-icon><ng-md-icon icon="done" style="visibility: hidden" data-ng-show="item.report_settings.subtotal_type != \'area\'"></ng-md-icon><span>Area subtotal</span></md-button></md-menu-item></md-menu-content></md-menu><md-menu data-ng-if="!options.isReport"><md-button aria-label="Open phone interactions menu" class="md-icon-button" ng-click="openGroupSettings($mdOpenMenu, $event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="4"><md-menu-item><md-button ng-click="removeGroup(item)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button></md-menu-item></md-menu-content></md-menu></div></md-card></div><div class="drop-new-group" id="groupsbag"><!-- Drop level {{grouping.length + 1}} Group --> Drop New Grouping Level</div></div><md-button data-ng-if="options.components.fieldManagerBtn == true" class="md-fab g-settings-btn" aria-label="drag modal" data-ng-click="openModalSettings($event)"><ng-md-icon icon="view_week"></ng-md-icon></md-button></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/modal-report-cash-flow-projection-view.html",'<md-dialog aria-label="Report fields modal" ng-cloak class="g-modal-dialog drag" g-dialog-draggable><md-toolbar><div class="md-toolbar-tools" layout="row" layout-align="start center"><h2 style="user-select: none; position: relative">View Constructor<ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #fff"><md-tooltip md-direction="top">tooltip text</md-tooltip></ng-md-icon></h2><!-- <span class="tooltips-sign white">\n                (i)\n                <md-tooltip md-direction="top">tooltip text</md-tooltip>\n            </span> --></div></md-toolbar><md-dialog-content><div data-ng-if="vm.readyStatus.content"><md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="Transaction"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.transactionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.linkedInstrumentAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Cash flow"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.cashFlowProjectionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Portfolio"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.portfolioAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Instrument"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.instrumentAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Responsible"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.responsibleAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Counterparty"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.counterpartyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Allocations"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.allocationBalanceAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.allocationPlAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Accounts"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountPositionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountCashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountInterimAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Currencies"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.transactionCurrencyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.settlementCurrencyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Strategies"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Custom Attributes"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.custom" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><md-button data-ng-if="vm.MABtnVisibility(vm.entityType)" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.attributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Manage attributes</md-button><!--<md-button data-ng-if="vm.entityType === \'balance-report\' || vm.entityType === \'pnl-report\'"--><md-button class="md-raised md-primary" style="margin: 0" data-ui-sref="app.reports.customAttributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Custom attributes</md-button><md-button class="md-raised" ng-click="vm.cancel()">OK</md-button></md-dialog-actions></md-dialog>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/modal-report-performance-view.html",'<md-dialog aria-label="Report fields modal" ng-cloak class="g-modal-dialog drag" g-dialog-draggable><md-toolbar><div class="md-toolbar-tools" layout="row" layout-align="start center"><h2 style="user-select: none; position: relative">View Constructor<ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #fff"><md-tooltip md-direction="top">tooltip text</md-tooltip></ng-md-icon></h2><!-- <span class="tooltips-sign white">\n                (i)\n                <md-tooltip md-direction="top">tooltip text</md-tooltip>\n            </span> --></div></md-toolbar><md-dialog-content><div data-ng-if="vm.readyStatus.content"><md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="Performance"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.performanceAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card" data-key-identifier="{{item.key}}">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Portfolio"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.portfolioAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Instrument"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.instrumentAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Responsible"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.responsibleAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Counterparty"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.counterpartyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Allocations"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.allocationBalanceAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.allocationPlAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Accounts"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountPositionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountCashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountInterimAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Currencies"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.transactionCurrencyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.settlementCurrencyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Strategies"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Custom Attributes"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.custom" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><md-button data-ng-if="vm.MABtnVisibility(vm.entityType)" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.attributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Manage attributes</md-button><md-button data-ng-if="vm.entityType === \'balance-report\' || vm.entityType === \'pnl-report\'" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.reports.customAttributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Custom attributes</md-button><md-button class="md-raised" ng-click="vm.cancel()">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/modal-report-transaction-view.html",'<md-dialog aria-label="Report fields modal" ng-cloak class="g-modal-dialog drag" g-dialog-draggable><md-toolbar><div class="md-toolbar-tools" layout="row" layout-align="start center"><h2 style="user-select: none; position: relative">View Constructor<ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #fff"><md-tooltip md-direction="top">tooltip text</md-tooltip></ng-md-icon></h2><!-- <span class="tooltips-sign white">\n                (i)\n                <md-tooltip md-direction="top">tooltip text</md-tooltip>\n            </span> --></div></md-toolbar><md-dialog-content><div data-ng-if="vm.readyStatus.content"><md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="Transaction"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.transactionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.linkedInstrumentAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Portfolio"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.portfolioAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Instrument"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.instrumentAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Responsible"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.responsibleAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Counterparty"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.counterpartyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><!--<md-tab label="Allocations">--><!--<md-content class="md-padding">--><!--<div class="g-th-checkbox-row">--><!--<span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span>--><!--<span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span>--><!--<span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span>--><!--</div>--><!--<div class="g-checkbox-row" data-ng-repeat="item in vm.allocationBalanceAttrs" layout="row">--><!--<div>--><!--<md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns"--><!--data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--<md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups"--><!--class="md-g-green"--><!--data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--<md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters"--><!--class="md-primary" data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--</div>--><!--<div dragula="\'columns-bag\'" class="g-modal-draggable-card">--><!--<md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card>--><!--</div>--><!--</div>--><!--<div class="g-checkbox-row" data-ng-repeat="item in vm.allocationPlAttrs" layout="row">--><!--<div>--><!--<md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns"--><!--data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--<md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups"--><!--class="md-g-green"--><!--data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--<md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters"--><!--class="md-primary" data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--</div>--><!--<div dragula="\'columns-bag\'" class="g-modal-draggable-card">--><!--<md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card>--><!--</div>--><!--</div>--><!--</md-content>--><!--</md-tab>--><md-tab label="Accounts"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountPositionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountCashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountInterimAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Currencies"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.transactionCurrencyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.settlementCurrencyAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Strategies"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3cashAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3positionAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Custom Attributes"><md-content class="md-padding"><div class="g-th-checkbox-row"><span data-ng-click="vm.toggleAll($event, \'columns\')" class="g-meta-circle red">C</span> <span data-ng-click="vm.toggleAll($event, \'groups\')" class="g-meta-circle green">G</span> <span data-ng-click="vm.toggleAll($event, \'filters\')" class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.custom" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><md-button data-ng-if="vm.MABtnVisibility(vm.entityType)" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.attributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Manage attributes</md-button><md-button data-ng-if="vm.entityType === \'balance-report\' || vm.entityType === \'pnl-report\'" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.reports.customAttributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Custom attributes</md-button><md-button class="md-raised" ng-click="vm.cancel()">OK</md-button></md-dialog-actions></md-dialog>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/modal-report-view.html",'<md-dialog aria-label="Report fields modal" ng-cloak class="g-modal-dialog drag" g-dialog-draggable><md-toolbar><div class="md-toolbar-tools" layout="row" layout-align="start center"><h2 style="user-select: none; position: relative">View Constructor<ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #fff"><md-tooltip md-direction="top">tooltip text</md-tooltip></ng-md-icon></h2><!-- <span class="tooltips-sign white">\n                (i)\n                <md-tooltip md-direction="top">tooltip text</md-tooltip>\n            </span> --></div></md-toolbar><md-dialog-content><div data-ng-if="vm.readyStatus.content"><md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="Balance"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.balanceAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card" data-key-identifier="{{item.key}}">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Performance"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.balancePerformanceAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Instrument"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.instrumentAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.instrumentTypeAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.instrumentDynamicAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Account"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountTypeAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.accountDynamicAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Portfolio"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.portfolioAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.portfolioDynamicAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Strategies"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1attrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1subgroupAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy1groupAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2attrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2subgroupAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy2groupAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3attrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3subgroupAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.strategy3groupAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Custom Attributes"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.custom" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Mismatch"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.balanceMismatchAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab><md-tab label="Allocation"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.allocationAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria-label="Columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria-label="Groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria-label="Filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{::vm.bindReportItemName(item)}}</md-card></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><md-button data-ng-if="vm.MABtnVisibility(vm.entityType)" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.attributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Manage attributes</md-button><md-button data-ng-if="vm.entityType === \'balance-report\' || vm.entityType === \'pnl-report\'" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.reports.customAttributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Custom attributes</md-button><md-button class="md-raised" ng-click="vm.cancel()">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/modal-view-old.html",'<md-dialog aria-label="Mango (Fruit)" ng-cloak class="g-modal-dialog drag" g-dialog-draggable><md-toolbar><div class="md-toolbar-tools"><h2 style="user-select: none">DRAG FIELDS FROM HERE</h2><span flex></span></div></md-toolbar><md-dialog-content><div data-ng-if="vm.readyStatus.content"><md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="{{tab.name}}" data-ng-repeat="tab in vm.tabs"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle green">G</span> <span class="g-meta-circle red">C</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in tab.attrs"><md-checkbox ng-model="item.groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox><span flex></span><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{item.name}}</md-card></div></div></md-content></md-tab></md-tabs></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row"><md-button ng-click="vm.cancel()">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/modal-view.html",'<md-dialog aria-label="Mango (Fruit)" ng-cloak class="g-modal-dialog drag" g-dialog-draggable><md-toolbar><div class="md-toolbar-tools" layout="row" layout-align="start center"><h2 style="user-select: none; position: relative">View Constructor<ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #fff"><md-tooltip md-direction="top">tooltip text</md-tooltip></ng-md-icon></h2><!-- <span class="tooltips-sign white">\n                (i)\n                <md-tooltip md-direction="top">tooltip text</md-tooltip>\n            </span> --></div></md-toolbar><md-dialog-content><div data-ng-if="vm.readyStatus.content"><md-tabs md-dynamic-height md-border-bottom id="dialogbag"><md-tab label="System"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.baseAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-style="vm.checkAreaAccessibility(item, \'group\') ? {\'visibility\': \'hidden\'} : {}" ng-model="item.groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-style="vm.checkAreaAccessibility(item, \'filter\') ? {\'visibility\': \'hidden\'} : {}" ng-model="item.filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{item.name}}</md-card></div></div><div class="g-checkbox-row" data-ng-repeat="item in vm.entityAttrs" layout="row"><div><md-checkbox ng-model="item.columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-style="vm.checkAreaAccessibility(item, \'group\') ? {\'visibility\': \'hidden\'} : {}" ng-model="item.groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-style="vm.checkAreaAccessibility(item, \'filter\') ? {\'visibility\': \'hidden\'} : {}" ng-model="item.filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{item.name}}</md-card></div></div></md-content></md-tab><md-tab label="User Attributes" data-ng-if="vm.MABtnVisibility(vm.entityType)"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.attrs" layout="row"><div><md-checkbox ng-model="item.columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox ng-model="item.groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox data-ng-if="vm.isReport == true" ng-model="item.filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox data-ng-if="vm.isReport == false" style="visibility: hidden" ng-model="item.filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{item.name}}</md-card></div></div></md-content></md-tab><md-tab label="Custom Attributes" data-ng-if="vm.entityType === \'balance-report\'"><md-content class="md-padding"><div class="g-th-checkbox-row"><span class="g-meta-circle red">C</span> <span class="g-meta-circle green">G</span> <span class="g-meta-circle blue">F</span></div><div class="g-checkbox-row" data-ng-repeat="item in vm.custom" layout="row"><div><md-checkbox ng-model="item.columns" aria="columns" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox style="visibility: hidden" ng-model="item.groups" aria="groups" class="md-g-green" data-ng-change="vm.updateAttrs()"></md-checkbox><md-checkbox style="visibility: hidden" ng-model="item.filters" aria="filters" class="md-primary" data-ng-change="vm.updateAttrs()"></md-checkbox></div><div dragula="\'columns-bag\'" class="g-modal-draggable-card"><md-card class="modal-dialog-card">{{item.name}}</md-card></div></div></md-content></md-tab><!--<md-tab label="Attributes">--><!--<md-content class="md-padding">--><!--<div class="g-th-checkbox-row">--><!--<span class="g-meta-circle green">G</span>--><!--<span class="g-meta-circle red">C</span>--><!--<span class="g-meta-circle blue">F</span>--><!--</div>--><!--<div class="g-checkbox-row" data-ng-repeat="item in vm.attrs">--><!--<md-checkbox ng-model="item.groups" aria="groups" class="md-g-green"--><!--data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--<md-checkbox ng-model="item.columns" aria="columns" data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--<md-checkbox style="visibility: hidden" ng-model="item.filters" aria="filters"--><!--class="md-primary" data-ng-change="vm.updateAttrs()">--><!--</md-checkbox>--><!--<span flex></span>--><!--<div dragula="\'columns-bag\'" class="g-modal-draggable-card">--><!--<md-card class="modal-dialog-card">{{item.name}}</md-card>--><!--</div>--><!--</div>--><!--</md-content>--><!--</md-tab>--></md-tabs></div><div data-ng-if="!vm.readyStatus.content" class="dialog-loader"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></md-dialog-content><md-dialog-actions layout="row" layout-align="space-between center"><md-button data-ng-if="vm.MABtnVisibility(vm.entityType)" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.attributesManager({entityType: vm.entityType})" data-ng-click="vm.cancel()">Manage attributes</md-button><md-button data-ng-if="vm.entityType === \'balance-report\'" class="md-raised md-primary" style="margin: 0" data-ui-sref="app.reports.balanceCustomAttributesManager" data-ng-click="vm.cancel()">Custom attributes</md-button><md-button class="md-raised" ng-click="vm.cancel()">OK</md-button></md-dialog-actions></md-dialog>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/sidebar-filter-view.html",'<div class="g-sidebar-filter-component" layout="column"><div data-ng-if="isReport" layout="column"><div data-ng-if="options.entityType == \'balance-report\' || options.entityType == \'pnl-report\'"><md-card class="g-sidebar-report-card"><md-card-content><p class="g-r-card-title">Report settings</p><div layout="column" style="padding-top: 16px"><md-input-container data-ng-if="options.entityType == \'pnl-report\'"><label for="">First Date</label><zh-date-picker data-ng-model="reportOptions.pl_first_date" position="left"></zh-date-picker></md-input-container><md-input-container><label for="">Date</label><zh-date-picker data-ng-model="reportOptions.report_date" position="left"></zh-date-picker></md-input-container><md-input-container style="margin-bottom: 20px"><label for="">Currency</label><md-select data-ng-model="reportOptions.report_currency" md-on-close="searchTerm = \'\'"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="item in currencies | orderBy:\'-\'+field.name | filter:{name: searchTerm}" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container><md-input-container><label for="">Pricing Policy</label><md-select data-ng-model="reportOptions.pricing_policy"><md-option data-ng-repeat="item in pricingPolicies" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></div><div layout="column" style="margin-top: 16px"><md-button data-ng-click="openReportSettings($event)" class="md-primary md-raised">Settings</md-button><md-button data-ng-click="calculateReport()" class="md-raised">Calculate</md-button></div></md-card-content></md-card></div><div data-ng-if="options.entityType == \'transaction-report\'"><md-card class="g-sidebar-report-card"><md-card-content><p class="g-r-card-title">Report settings</p><div layout="column" style="padding-top: 16px"><md-input-container><label for="">Begin date</label><zh-date-picker data-ng-model="reportOptions.begin_date" position="left"></zh-date-picker></md-input-container><md-input-container><label for="">End date</label><zh-date-picker data-ng-model="reportOptions.end_date" position="left"></zh-date-picker></md-input-container></div><div layout="column" style="margin-top: 16px"><md-button data-ng-click="calculateReport()" class="md-raised">Calculate</md-button></div></md-card-content></md-card></div><div data-ng-if="options.entityType == \'cash-flow-projection-report\'"><md-card class="g-sidebar-report-card"><md-card-content><p class="g-r-card-title">Report settings</p><div layout="column" style="padding-top: 16px"><md-input-container><label for="">Begin date</label><zh-date-picker data-ng-model="reportOptions.begin_date" position="left"></zh-date-picker></md-input-container><md-input-container><label for="">End date</label><zh-date-picker data-ng-model="reportOptions.end_date" position="left"></zh-date-picker></md-input-container><md-input-container><label for="">Balance date</label><zh-date-picker data-ng-model="reportOptions.balance_date" position="left"></zh-date-picker></md-input-container><md-input-container><label for="">Report date</label><zh-date-picker data-ng-model="reportOptions.report_date" position="left"></zh-date-picker></md-input-container></div><div layout="column" style="margin-top: 16px"><md-button data-ng-click="calculateReport()" class="md-raised">Calculate</md-button></div></md-card-content></md-card></div></div><div layout="row" layout-align="space-between center"><p class="area-title g-section-title"><span class="g-meta-circle blue">F</span><span class="after-text">ILTER AREA</span><ng-md-icon class="tooltips-sign" icon="info" size="20" style="fill: #777777"><md-tooltip class="tooltip_1" md-direction="top">tooltip text</md-tooltip></ng-md-icon></p><md-button aria-label="resize" class="to-small-btn filter-sidenav f-s-collapse fab md-raised" data-ng-click="resizeFilterSideNav(\'collapse\')"><md-tooltip class="" md-direction="top">Collapse area</md-tooltip><ng-md-icon icon="chevron_right"></ng-md-icon></md-button></div><div layout="row"><md-button aria-label="resize" class="to-small-btn filter-sidenav f-s-expand fab md-raised" data-ng-click="resizeFilterSideNav(\'expand\')"><md-tooltip class="" md-direction="top">Expand area</md-tooltip><ng-md-icon icon="chevron_left"></ng-md-icon></md-button></div><div layout="row" class="filters-control-btn s-f-expanded-btns"><md-button class="md-raised" data-ng-click="selectAll()">Select all</md-button><md-button class="md-raised" data-ng-click="deselectAll()">Deselect all</md-button></div><div class="s-f-collpased-btns" layout="column"><md-button class="md-raised to-small-btn" data-ng-click="selectAll()"><ng-md-icon icon="select_all"></ng-md-icon><md-tooltip class="" md-direction="top">Select all</md-tooltip></md-button><md-button class="md-raised to-small-btn" data-ng-click="deselectAll()"><ng-md-icon icon="highlight_off"></ng-md-icon><md-tooltip class="" md-direction="top">Deselect all</md-tooltip></md-button></div><div layout="row" class="filters-control-btn s-f-expanded-btns"><md-button class="md-raised clear-all full-width" data-ng-click="clearAll()">Clear all</md-button></div><div dragula="\'filters-bag\'" dragula-model="filters" class="filters-holder"><md-card data-ng-repeat="filter in filters" class="{{filter.options.enabled ? \'\' : \'f-disabled\' }} g-filter-item" layout="row"><md-tooltip data-ng-if="sideNavCollapsed" class="" md-direction="top">{{filter.name}}<span data-ng-if="!getFilterType(filter[\'value_type\'])">: {{filter.options.query}}</span></md-tooltip><md-checkbox ng-model="filter.options.enabled" aria-label="filters" class="md-primary" ng-change="toggleFilterState(filter)" flex="15"></md-checkbox><md-input-container flex="65"><label data-ng-bind="filter.name"></label><div data-ng-if="getFilterType(filter[\'value_type\'])"><!-- {{fields}} --><div data-ng-if="fields[filter.key]"><md-select data-ng-model="filter.options.query" md-on-close="searchTerm = \'\'" data-ng-change="filterChange(filter)" multiple="{{fields[\'value_type\'] == \'mc_field\' ? \'true\' : \'false\'}}"><md-select-header><input data-ng-model="searchTerm" type="search" placeholder="Search for a ..." class="md-text md-select-search-pattern"></md-select-header><md-option data-ng-repeat="field in fields[filter.key] | orderBy:\'-\'+field.name | filter:{ name:searchTerm}" ng-value="field.id">{{field.name}}</md-option></md-select></div><div data-ng-if="!fields[filter.key]"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div><!-- <div data-ng-if="filter[\'value_type\'] !== \'field\'"> --><div data-ng-if="!getFilterType(filter[\'value_type\'])"><input data-ng-model="filter.options.query" data-ng-change="filterChange(filter)" data-ng-model-options="{debounce: 1000}"></div></md-input-container><div class="settings-btn" flex="20"><md-menu data-ng-if="options.isRootEntityViewer"><md-button aria-label="Open phone interactions menu" class="md-icon-button" ng-click="openFilterSettings($mdOpenMenu, $event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="removeFilter(filter)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button></md-menu-item></md-menu-content></md-menu><md-menu data-ng-if="!options.isRootEntityViewer"><md-button aria-label="Open phone interactions menu" class="md-icon-button" ng-click="openFilterSettings($mdOpenMenu, $event)"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content width="3"><md-menu-item><md-button ng-click="removeFilter(filter)" class="g-settings-option-btn"><ng-md-icon icon="visibility_off"></ng-md-icon><span>Remove</span></md-button></md-menu-item><md-menu-item><md-button ng-click="useFromAbove(filter)" class="g-settings-option-btn"><ng-md-icon icon="done" data-ng-show="filter.options.useFromAbove"></ng-md-icon><ng-md-icon icon="done" style="visibility: hidden" data-ng-show="!filter.options.useFromAbove"></ng-md-icon><span>Use from above</span></md-button></md-menu-item></md-menu-content></md-menu></div></md-card></div><div class="drop-new-filter">Drop new Filter</div></div>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/directives/groupTable/table-body-view.html",'<!--<div class="g-table-body-component" data-group-vertical-scroll>--><div class="g-table-body-component custom-scrollbar" data-custom-scroll data-scroll-sticky="true"><div data-ng-if="!checkReady()"><div layout="row" layout-sm="column"><md-progress-linear md-mode="indeterminate"></md-progress-linear></div></div><!--<div data-ng-show="checkReady()" ng-cloak style="padding-bottom: 75px">--><div data-ng-show="checkReady()" ng-cloak><div><div data-ng-if="options.grouping.length" contextmenu-container="gtbody.contextmenu"><div data-ng-if="!options.isReport" data-ng-repeat="item in items" on-finish-render="{{entityType}}"><div class="g-group-holder {{ checkRowSelection(item) ? \'selected-row\' : \'\' }}"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><md-card class="group-row-fold-holder"><div><md-button class="" aria-label="hide/show grouping" data-ng-show="item.isFolded" data-ng-click="toggleGroupFold(item)"><ng-md-icon icon="add"></ng-md-icon></md-button><md-button class="" aria-label="hide/show grouping" data-ng-show="!item.isFolded" data-ng-click="toggleGroupFold(item)"><ng-md-icon icon="remove"></ng-md-icon></md-button></div></md-card><div data-ng-repeat="group in item.groups track by $index" class="g-group"><span data-ng-bind="bindGroupValue(group)"></span></div></div><div data-ng-repeat="groupedItem in item.items" contextmenu-item="groupedItem" data-ng-show="!item.isFolded" data-ng-right-click="$mdOpenMenu($event)" class="{{ checkRowSelection(groupedItem) ? \'selected-row\' : \'\'}} g-row" data-ng-click="rowCallback(groupedItem, $event)"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, groupedItem)"><ng-md-icon icon="done" data-ng-show="groupedItem.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns"><div class="g-cell {{getAlign(column)}}"><span title="{{bindCellTitle(groupedItem, column)}}" data-ng-bind-html="bindCell(groupedItem, column) | trustAsHtml"></span></div></div></div></div><div data-ng-if="options.isReport" class="report-holder"><!-- preInit.initGroup start --><group-bind-report-row on-finish-render="{{entityType}}" data-ng-repeat="item in reportItemsProjection() track by $index" item="item"></group-bind-report-row><!-- !preInit.initGroup end--></div></div><div data-ng-if="!options.grouping.length" contextmenu-container="gtbody.contextmenu"><div data-ng-repeat="item in items" on-finish-render="{{entityType}}" class="{{ checkRowSelection(item) ? \'selected-row\' : \'\'}} g-row" contextmenu-item="item" data-ng-click="rowCallback(item, $event)"><div class="g-row-selection" data-ng-click="toggleSelectRow($event, item)"><ng-md-icon icon="done" data-ng-show="item.selectedRow"></ng-md-icon></div><div class="g-cell-wrap" data-ng-repeat="column in columns"><div class="g-cell {{getAlign(column)}}"><span title="{{bindCellTitle(item, column)}}" data-ng-bind-html="bindCell(item, column) | trustAsHtml"></span></div></div></div></div></div><div class="table-end-row"></div>{{paginationItemsTotal}}<div data-ng-if="!options.isReport" paging class="g-table-body-pagination" page="options.paginationPageCurrent" page-size="options.paginationItemPerPage" total="options.paginationItemsTotal" paging-action="changePage(page)"></div><div data-ng-if="!items.length && options.isReport"><h1 style="margin-top: 64px;text-align: left;margin-bottom: 64px;margin-left: 38vh">Press calculate to build report</h1></div></div></div><div contextmenu="gtbody.contextmenu" class="dropdown contextmenu ng-hide"><md-menu-content width="4"><md-menu-item><md-button ng-click="editEntity($event, gtbody.contextmenu.get().item)" class="g-settings-option-btn"><ng-md-icon icon="mode_edit"></ng-md-icon><span>Edit</span></md-button></md-menu-item><md-menu-item><md-button ng-click="deleteEntity($event, gtbody.contextmenu.get().item)" class="g-settings-option-btn"><ng-md-icon icon="delete"></ng-md-icon><span>Delete</span></md-button></md-menu-item></md-menu-content></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/complex-transaction/book-transaction-actions-tab-view.html",'<div data-ng-controller="BookTransactionActionsTabController as vm"><div data-ng-if="vm.readyStatus.transactionType"><table class="transaction-actions-table"><tbody><tr data-ng-repeat="key in vm.transactionActionsKeys"><td>{{vm.beatufier(key)}}</td><td data-ng-repeat="item in vm.transactionActions[key] track by $index">{{item}}</td></tr></tbody></table></div><div data-ng-if="!vm.readyStatus.transactionType"><div layout="row" layout-sm="column" layout-align="space-around" class="m-large"><md-progress-circular md-mode="indeterminate" md-diameter="96"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/complex-transaction/book-transaction-transactions-tab-view.html",'<div data-ng-controller="BookTransactionTransactionsTabController as vm"><h2>Transactions list</h2><table class="bordered"><thead><tr style="height: 40px"><th>Transaction date</th><th>Class</th><th>Currency</th><th>Instrument</th><th>Portfolio</th><th>Responsible</th><th>Counterparty</th><th>Edit</th></tr></thead><tbody><tr data-ng-repeat="item in vm.transactions" style="height: 40px"><td data-ng-bind="item.transaction_date"></td><td data-ng-bind="item.transaction_class_object.name"></td><td data-ng-bind="item.transaction_currency_object.name"></td><td data-ng-bind="item.instrument_object.user_code"></td><td data-ng-bind="item.portfolio_object.user_code"></td><td data-ng-bind="item.responsible_object.user_code"></td><td data-ng-bind="item.counterparty_object.user_code"></td><td><md-button data-ng-click="vm.editBaseTransaction($event, item.id)" class="md-raised md-primary">Edit</md-button></td></tr></tbody></table></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/instrument/accrual-calculation-schedules-view.html",'<div data-ng-controller="AccrualCalculationSchedulesTabController as vm"><div class="" data-ng-if="vm.checkReadyStatus()"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'accrual_start_date\')">Accrual start date<span class="sortorder" data-ng-show="vm.sort === \'accrual_start_date\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'first_payment_date\')">First payment date<span class="sortorder" data-ng-show="vm.sort === \'first_payment_date\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'accrual_size\')">Accrual size<span class="sortorder" data-ng-show="vm.sort === \'accrual_size\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'accrual_calculation_model\')">Accrual calculation model<span class="sortorder" data-ng-show="vm.sort === \'accrual_calculation_model\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'periodicity\')">Periodicity<span class="sortorder" data-ng-show="vm.sort === \'periodicity\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'periodicity_n\')">Periodicity N<span class="sortorder" data-ng-show="vm.sort === \'periodicity_n\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'notes\')">Notes<span class="sortorder" data-ng-show="vm.sort === \'notes\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.accrual_start_date"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.first_payment_date"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.accrual_size"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.calculation_model_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.periodicity"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.periodicity_n"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.notes"></md-input-container></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.entity.accrual_calculation_schedules | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-if="!item.editStatus" data-ng-bind="item.accrual_start_date"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.first_payment_date"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.accrual_size"></td><td data-ng-if="!item.editStatus" data-ng-bind="vm.bindCalculationModel(item)"></td><td data-ng-if="!item.editStatus" data-ng-bind="vm.bindPeriodicity(item)"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.periodicity_n"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.notes"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Accrual start date</label><zh-date-picker data-ng-model="item.accrual_start_date"></zh-date-picker></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">First payment date</label><zh-date-picker data-ng-model="item.first_payment_date"></zh-date-picker></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Accrual size</label><input type="text" data-ng-model="item.accrual_size"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><!--<label for="">Accrual calculation model</label>--><md-select data-ng-model="item.accrual_calculation_model"><md-option data-ng-repeat="model in vm.accrualModels" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Periodicity</label><md-select data-ng-model="item.periodicity"><md-option data-ng-repeat="model in vm.periodicityItems" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Periodicity N</label><input type="text" data-ng-model="item.periodicity_n"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Notes</label><input type="text" data-ng-model="item.notes"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><!--<label for="">Accrual start date</label>--><zh-date-picker data-ng-model="vm.newItem.accrual_start_date"></zh-date-picker></md-input-container></td><td><md-input-container><!--<label for="">First payment date</label>--><zh-date-picker data-ng-model="vm.newItem.first_payment_date"></zh-date-picker></md-input-container></td><td><md-input-container><!--<label for="">Accrual size</label>--> <input type="text" data-ng-model="vm.newItem.accrual_size"></md-input-container></td><td><md-input-container><!--<label for="">Accrual calculation model</label>--><md-select data-ng-model="vm.newItem.accrual_calculation_model"><md-option data-ng-repeat="model in vm.accrualModels" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td><md-input-container><!--<label for="">Periodicity</label>--><md-select data-ng-model="vm.newItem.periodicity"><md-option data-ng-repeat="model in vm.periodicityItems" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td><md-input-container><!--<label for="">Periodicity N</label>--> <input type="text" data-ng-model="vm.newItem.periodicity_n"></md-input-container></td><td><md-input-container><!--<label for="">Notes</label>--> <input type="text" data-ng-model="vm.newItem.notes"></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/instrument/events-view.html",'<div data-ng-controller="EventSchedulesTabController as vm"><div class="" data-ng-if="vm.checkReadyStatus()"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'name\')">Name<span class="sortorder" data-ng-show="vm.sort === \'name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'description\')">Description<span class="sortorder" data-ng-show="vm.sort === \'description\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'effective_date\')">Effective date<span class="sortorder" data-ng-show="vm.sort === \'effective_date\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'final_date\')">Final date<span class="sortorder" data-ng-show="vm.sort === \'final_date\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'notification_class_name\')">Notification class<span class="sortorder" data-ng-show="vm.sort === \'notification_class_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'event_class_name\')">Event class<span class="sortorder" data-ng-show="vm.sort === \'event_class_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th>Actions</th><th data-ng-click="vm.setSort(\'notify_in_n_days\')">Notify in N days<span class="sortorder" data-ng-show="vm.sort === \'notify_in_n_days\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'periodicity\')">Periodicity<span class="sortorder" data-ng-show="vm.sort === \'periodicity\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'periodicity_n\')">Periodicity N<span class="sortorder" data-ng-show="vm.sort === \'periodicity_n\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.description"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.effective_date"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.final_date"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.notification_class_name"></md-input-container></th><th></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.event_class_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.notify_in_n_days"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.periodicity_n"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.notes"></md-input-container></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.entity.event_schedules | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-if="!item.editStatus" data-ng-bind="item.name"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.description"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.effective_date"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.final_date"></td><td data-ng-if="!item.editStatus" data-ng-bind="vm.bindNotificationClass(item)"></td><td data-ng-if="!item.editStatus" data-ng-bind="vm.bindEventClass(item)"></td><td data-ng-if="!item.editStatus" data-ng-bind="[item.actions.length]"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.notify_in_n_days"></td><td data-ng-if="!item.editStatus" data-ng-bind="vm.bindPeriodicity(item)"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.periodicity_n"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Name</label><input type="text" data-ng-model="item.name"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Description</label><input type="text" data-ng-model="item.description"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Effective date</label><zh-date-picker data-ng-model="item.effective_date"></zh-date-picker></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Final date</label><zh-date-picker data-ng-model="item.final_date"></zh-date-picker></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><label for="">Notification class</label><md-select data-ng-model="item.notification_class" style="max-width: 195px"><md-option data-ng-repeat="model in vm.notificationClasses" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><label for="">Event class</label><md-select data-ng-model="item.event_class"><md-option data-ng-repeat="model in vm.eventClasses" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" style="padding-top: 12px"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-model="item.actions" md-container-class="h-instrument-select" data-instrument-event-action-resolver md-selected-text="{{[item.actions.length]}}"><md-option data-ng-repeat="field in fields track by field.id" ng-value="field.id">{{field.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><!--<label for="">Notify in N days</label>--> <input type="text" data-ng-model="item.notify_in_n_days"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Periodicity</label><md-select data-ng-model="item.periodicity"><md-option data-ng-repeat="model in vm.periodicityItems" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Periodicity N</label><input type="text" data-ng-model="item.periodicity_n"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><!--<label for="">Periodicity</label>--> <input type="text" data-ng-model="vm.newItem.name"></md-input-container></td><td><md-input-container><!--<label for="">Periodicity</label>--> <input type="text" data-ng-model="vm.newItem.description"></md-input-container></td><td><md-input-container><!--<label for="">Effective date</label>--><zh-date-picker data-ng-model="vm.newItem.effective_date"></zh-date-picker></md-input-container></td><td><md-input-container><!--<label for="">Final date</label>--><zh-date-picker data-ng-model="vm.newItem.final_date"></zh-date-picker></md-input-container></td><td style="padding-top: 12px"><md-input-container><!--<label for="">Accrual calculation model</label>--><md-select data-ng-model="vm.newItem.notification_class" style="max-width: 195px"><md-option data-ng-repeat="model in vm.notificationClasses" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td style="padding-top: 12px"><md-input-container><!--<label for="">Accrual calculation model</label>--><md-select data-ng-model="vm.newItem.event_class"><md-option data-ng-repeat="model in vm.eventClasses" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td style="padding-top: 12px"><md-input-container class="md-block"><label data-ng-bind="getName()"></label><md-select data-ng-model="item.actions" md-container-class="h-instrument-select" data-instrument-event-action-resolver md-selected-text="{{[vm.newItem.actions.length]}}"><md-option data-ng-repeat="field in fields track by field.id" ng-value="field.id">{{field.name}}</md-option></md-select></md-input-container></td><td><md-input-container><!--<label for="">Periodicity</label>--> <input type="text" data-ng-model="vm.newItem.notify_in_n_days"></md-input-container></td><td><md-input-container><!--<label for="">Periodicity</label>--><md-select data-ng-model="vm.newItem.periodicity"><md-option data-ng-repeat="model in vm.periodicityItems" ng-value="model.id">{{model.name}}</md-option></md-select></md-input-container></td><td><md-input-container><!--<label for="">Periodicity N</label>--> <input type="text" data-ng-model="vm.newItem.periodicity_n"></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/instrument/factor-schedule-view.html",'<div data-ng-controller="FactorScheduleTabController as vm"><div class="factor-schedule-tab-view"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'factor_value\')">Value<span class="sortorder" data-ng-show="vm.sort === \'factor_value\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'effective_date\')">Date<span class="sortorder" data-ng-show="vm.sort === \'effective_date\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.factor_value"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.effective_date"></md-input-container></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.entity.factor_schedules | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-bind="item.factor_value" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.effective_date" data-ng-if="!item.editStatus"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Value</label><input type="text" data-ng-model="item.factor_value"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Date</label><zh-date-picker data-ng-model="item.effective_date"></zh-date-picker></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><!--<label for="">Value</label>--> <input type="text" data-ng-model="vm.newItem.value"></md-input-container></td><td><md-input-container><!--<label for="">Date</label>--><zh-date-picker data-ng-model="vm.newItem.date"></zh-date-picker></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/instrument/manual-pricing-formulas-view.html",'<div data-ng-controller="ManualPricingFormulasTabController as vm"><div><div data-ng-if="vm.readyStatus.content"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'policy_name\')">Pricing policy<span class="sortorder" data-ng-show="vm.sort === \'policy_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'expr\')">Expression<span class="sortorder" data-ng-show="vm.sort === \'expr\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'notes\')">Notes<span class="sortorder" data-ng-show="vm.sort === \'notes\'" data-ng-class="{reverse: vm.direction}"></span></th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.policy_name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.expr"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.notes"></md-input-container></th></tr></thead><tbody><tr data-ng-repeat="item in vm.entity.manual_pricing_formulas | filter:vm.query"><td data-ng-if="!item.editStatus" data-ng-bind="vm.bindPricingPolicy(item)"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.expr"></td><td data-ng-if="!item.editStatus" data-ng-bind="item.notes"></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><label for="">Pricing policy</label><md-select data-ng-model="item.pricing_policy"><md-option data-ng-repeat="policy in vm.policies" ng-value="policy.id">{{policy.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Expression</label><input type="text" data-ng-model="item.expr"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Notes</label><input type="text" data-ng-model="item.notes"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><!--<label for="">Pricing policy</label>--><md-select data-ng-model="vm.newItem.pricing_policy"><md-option data-ng-repeat="policy in vm.policies" ng-value="policy.id">{{policy.name}}</md-option></md-select></md-input-container></td><td><md-input-container><!--<label for="">Expression</label>--> <input type="text" data-ng-model="vm.newItem.expr"></md-input-container></td><td><md-input-container><!--<label for="">Notes</label>--> <input type="text" data-ng-model="vm.newItem.notes"></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></div><div data-ng-if="!vm.readyStatus.content"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/transaction-type/transaction-type-actions-tab-view(old-radio).html",'<div data-ng-controller="TransactionTypeActionsTabController as vm"><div class="transaction-type-actions-tab-view"><v-accordion class="vAccordion--default" multiple="multiple"><v-pane data-ng-repeat="item in vm.entity.actions" expanded="item.isPaneExpanded"><v-pane-header inactive class="transaction-type-action-pane"><div layout="row" layout-align="space-between center"><div layout="row"><span data-ng-if="item.isPaneExpanded"><md-input-container><input type="text" data-ng-model="item.action_notes" placeholder="Action notes"></md-input-container></span><span data-ng-if="!item.isPaneExpanded" data-ng-bind="item.action_notes"></span></div><div layout="row"><md-button class="md-raised" ng-disabled="$index == 0" data-ng-click="vm.moveUp(item, $index)">Move up</md-button><md-button class="md-raised" ng-disabled="$index == vm.entity.actions.length - 1" data-ng-click="vm.moveDown(item, $index )">Move Down</md-button><md-button class="md-raised" data-ng-click="vm.toggleItem($pane, item)"><span data-ng-if="item.isPaneExpanded">-</span> <span data-ng-if="!item.isPaneExpanded">+</span></md-button></div></div></v-pane-header><v-pane-content style="padding: 20px"><div data-ng-if="item.transaction != null"><div layout="row"><div flex="50"><div layout="row"><md-input-container><label for="">Transaction class</label><md-select data-ng-model="item.transaction.transaction_class" md-on-open="vm.loadRelation(\'transaction_class\')"><md-option data-ng-repeat="relationItem in vm.relationItems[\'transaction_class\']" ng-value="relationItem.value">{{relationItem.name}}</md-option></md-select></md-input-container></div><div layout="row"><div flex="33"><div layout="column"><md-switch ng-model="item.transaction.instrument_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'instrument\')"><span data-ng-if="!!item.transaction.instrument_toggle">Reference</span> <span data-ng-if="!!!item.transaction.instrument_toggle">Input</span></md-switch><div data-ng-if="item.transaction.instrument_toggle"><md-input-container><label for="">Instrument</label><md-select data-ng-model="item.transaction.instrument" md-on-open="vm.loadRelation(\'instrument\')"><md-option data-ng-if="!vm.relationItems[\'instrument\'].length" ng-value="item.transaction.instrument_object.id">{{item.transaction.instrument_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'instrument\'].length" data-ng-repeat="relationItem in vm.relationItems[\'instrument\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.instrument_toggle"><md-input-container><label for="">Instrument</label><md-select data-ng-model="item.transaction[vm.resolveInstrumentProp(item)]"><md-optgroup label="Inputs"><md-option data-ng-click="vm.setTransactionInstrumentInput(item, inputItem.name)" data-ng-repeat="inputItem in vm.findInputs(\'instrument\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-optgroup><md-optgroup label="Phantoms"><md-option data-ng-click="vm.setTransactionInstrumentPhantom(item, phantomItem.positionOrder)" data-ng-repeat="phantomItem in vm.findPhantoms()" ng-value="phantomItem.positionOrder">{{phantomItem.action_notes}}</md-option></md-optgroup></md-select></md-input-container></div></div></div><div flex="33"><md-input-container><label for="">Position size with sign</label><input type="text" data-ng-model="item.position_size_with_sign"></md-input-container></div><div flex="33"><md-switch ng-model="item.transaction.transaction_currency_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'transaction_currency\')"><span data-ng-if="!!item.transaction.transaction_currency_toggle">Reference</span> <span data-ng-if="!!!item.transaction.transaction_currency_toggle">Input</span></md-switch><div data-ng-if="item.transaction.transaction_currency_toggle"><md-input-container><label for="">Transaction currency</label><md-select data-ng-model="item.transaction.transaction_currency" md-on-open="vm.loadRelation(\'transaction_currency\')"><md-option data-ng-if="!vm.relationItems[\'transaction_currency\'].length" ng-value="item.transaction.transaction_currency_object.id">{{item.transaction.transaction_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'transaction_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'transaction_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.transaction_currency_toggle"><md-input-container><label for="">Transaction currency</label><md-select data-ng-model="item.transaction.transaction_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div layout="row"><div flex="33"><md-input-container><label for="">Principal with sign</label><input type="text" data-ng-model="item.transaction.principal_with_sign"></md-input-container></div><div flex="33"><md-input-container><label for="">Carry with sign</label><input type="text" data-ng-model="item.transaction.carry_with_sign"></md-input-container></div><div flex="33"><md-input-container><label for="">Overheads with sign</label><input type="text" data-ng-model="item.transaction.overheads_with_sign"></md-input-container></div></div><div layout="row"><div flex="33"><md-input-container><label for="">Accounting date</label><input type="text" data-ng-model="item.transaction.accounting_date"></md-input-container></div><div flex="33"><md-switch ng-model="item.transaction.account_position_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'account_position\')"><span data-ng-if="!!item.transaction.account_position_toggle">Reference</span> <span data-ng-if="!!!item.transaction.account_position_toggle">Input</span></md-switch><div data-ng-if="item.transaction.account_position_toggle"><md-input-container><label for="">Account position</label><md-select data-ng-model="item.transaction.account_position" md-on-open="vm.loadRelation(\'account_position\')"><md-option data-ng-if="!vm.relationItems[\'account_position\'].length" ng-value="item.transaction.account_position_object.id">{{item.transaction.account_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'account_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'account_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.account_position_toggle"><md-input-container><label for="">Account position</label><md-select data-ng-model="item.transaction.account_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'account\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div></div><div layout="row"><div flex="33"><md-switch ng-model="item.transaction.strategy1_position_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'strategy1_position\')"><span data-ng-if="!!item.transaction.strategy1_position_toggle">Reference</span> <span data-ng-if="!!!item.transaction.strategy1_position_toggle">Input</span></md-switch><div data-ng-if="item.transaction.strategy1_position_toggle"><md-input-container><label for="">Strategy1 position</label><md-select data-ng-model="item.transaction.strategy1_position" md-on-open="vm.loadRelation(\'strategy1_position\')"><md-option data-ng-if="!vm.relationItems[\'strategy1_position\'].length" ng-value="item.transaction.strategy1_position_object.id">{{item.transaction.strategy1_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy1_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy1_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy1_position_toggle"><md-input-container><label for="">Strategy1 position</label><md-select data-ng-model="item.transaction.strategy1_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-1\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.transaction.strategy2_position_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'strategy2_position\')"><span data-ng-if="!!item.transaction.strategy2_position_toggle">Reference</span> <span data-ng-if="!!!item.transaction.strategy2_position_toggle">Input</span></md-switch><div data-ng-if="item.transaction.strategy2_position_toggle"><md-input-container><label for="">Strategy2 position</label><md-select data-ng-model="item.transaction.strategy2_position" md-on-open="vm.loadRelation(\'strategy2_position\')"><md-option data-ng-if="!vm.relationItems[\'strategy2_position\'].length" ng-value="item.transaction.strategy2_position_object.id">{{item.transaction.strategy2_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy2_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy2_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy2_position_toggle"><md-input-container><label for="">Strategy2 position</label><md-select data-ng-model="item.transaction.strategy2_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-2\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.transaction.strategy3_position_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'strategy3_position\')"><span data-ng-if="!!item.transaction.strategy3_position_toggle">Reference</span> <span data-ng-if="!!!item.transaction.strategy3_position_toggle">Input</span></md-switch><div data-ng-if="item.transaction.strategy3_position_toggle"><md-input-container><label for="">Strategy3 position</label><md-select data-ng-model="item.transaction.strategy3_position" md-on-open="vm.loadRelation(\'strategy3_position\')"><md-option data-ng-if="!vm.relationItems[\'strategy3_position\'].length" ng-value="item.transaction.strategy3_position_object.id">{{item.transaction.strategy3_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy3_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy3_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy3_position_toggle"><md-input-container><label for="">Strategy3 position</label><md-select data-ng-model="item.transaction.strategy3_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-3\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div layout="row"><div flex="33"><md-input-container><label for="">Trade price</label><input type="text" data-ng-model="item.transaction.trade_price"></md-input-container></div><div flex="33"><md-input-container><label for="">Factor</label><input type="text" data-ng-model="item.transaction.factor"></md-input-container></div><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div></div></div><div flex="50"><div layout="row"><div flex="33"><md-switch ng-model="item.transaction.portfolio_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'portfolio\')"><span data-ng-if="!!item.transaction.portfolio_toggle">Reference</span> <span data-ng-if="!!!item.transaction.portfolio_toggle">Input</span></md-switch><div data-ng-if="item.transaction.portfolio_toggle"><md-input-container><label for="">Portfolio</label><md-select data-ng-model="item.transaction.portfolio" md-on-open="vm.loadRelation(\'portfolio\')"><md-option data-ng-if="!vm.relationItems[\'portfolio\'].length" ng-value="item.transaction.portfolio_object.id">{{item.transaction.portfolio_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'portfolio\'].length" data-ng-repeat="relationItem in vm.relationItems[\'portfolio\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.portfolio_toggle"><md-input-container><label for="">Portfolio</label><md-select data-ng-model="item.transaction.portfolio_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'portfolio\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.transaction.counterparty_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'counterparty\')"><span data-ng-if="!!item.transaction.counterparty_toggle">Reference</span> <span data-ng-if="!!!item.transaction.counterparty_toggle">Input</span></md-switch><div data-ng-if="item.transaction.counterparty_toggle"><md-input-container><label for="">Counterparty</label><md-select data-ng-model="item.transaction.counterparty" md-on-open="vm.loadRelation(\'counterparty\')"><md-option data-ng-if="!vm.relationItems[\'counterparty\'].length" ng-value="item.transaction.counterparty_object.id">{{item.transaction.counterparty_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'counterparty\'].length" data-ng-repeat="relationItem in vm.relationItems[\'counterparty\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.counterparty_toggle"><md-input-container><label for="">Counterparty</label><md-select data-ng-model="item.transaction.counterparty_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'counterparty\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.transaction.responsible_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'responsible\')"><span data-ng-if="!!item.transaction.responsible_toggle">Reference</span> <span data-ng-if="!!!item.transaction.responsible_toggle">Input</span></md-switch><div data-ng-if="item.transaction.responsible_toggle"><md-input-container><label for="">Responsible</label><md-select data-ng-model="item.transaction.responsible" md-on-open="vm.loadRelation(\'responsible\')"><md-option data-ng-if="!vm.relationItems[\'responsible\'].length" ng-value="item.transaction.responsible_object.id">{{item.transaction.responsible_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'responsible\'].length" data-ng-repeat="relationItem in vm.relationItems[\'responsible\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.responsible_toggle"><md-input-container><label for="">Responsible</label><md-select data-ng-model="item.transaction.responsible_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'responsible\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div layout="row"><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div></div><div layout="row"><div flex="33"><md-switch ng-model="item.transaction.settlement_currency_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'settlement_currency\')"><span data-ng-if="!!item.transaction.settlement_currency_toggle">Reference</span> <span data-ng-if="!!!item.transaction.settlement_currency_toggle">Input</span></md-switch><div data-ng-if="item.transaction.settlement_currency_toggle"><md-input-container><label for="">Settlement currency</label><md-select data-ng-model="item.transaction.settlement_currency" md-on-open="vm.loadRelation(\'settlement_currency\')"><md-option data-ng-if="!vm.relationItems[\'settlement_currency\'].length" ng-value="item.transaction.settlement_currency_object.id">{{item.transaction.settlement_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'settlement_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'settlement_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.settlement_currency_toggle"><md-input-container><label for="">Settlement currency</label><md-select data-ng-model="item.transaction.settlement_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-input-container><label for="">Cash consideration</label><input type="text" data-ng-model="item.transaction.cash_consideration"></md-input-container></div><div flex="33"><md-input-container><label for="">Reference fx-rate</label></md-input-container></div></div><div layout="row"><div flex="33"><md-input-container><label for="">Cash date</label><input type="text" data-ng-model="item.transaction.cash_date"></md-input-container></div><div flex="33"><md-switch ng-model="item.transaction.account_cash_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'account_cash\')"><span data-ng-if="!!item.transaction.account_cash_toggle">Reference</span> <span data-ng-if="!!!item.transaction.account_cash_toggle">Input</span></md-switch><div data-ng-if="item.transaction.account_cash_toggle"><md-input-container><label for="">Account cash</label><md-select data-ng-model="item.transaction.account_cash" md-on-open="vm.loadRelation(\'account_cash\')"><md-option data-ng-if="!vm.relationItems[\'account_cash\'].length" ng-value="item.transaction.account_cash_object.id">{{item.transaction.account_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'account_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'account_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.account_cash_toggle"><md-input-container><label for="">Account cash</label><md-select data-ng-model="item.transaction.account_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'account\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.transaction.account_interim_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'account_interim\')"><span data-ng-if="!!item.transaction.account_interim_toggle">Reference</span> <span data-ng-if="!!!item.transaction.account_interim_toggle">Input</span></md-switch><div data-ng-if="item.transaction.account_interim_toggle"><md-input-container><label for="">Account interim</label><md-select data-ng-model="item.transaction.account_interim" md-on-open="vm.loadRelation(\'account_interim\')"><md-option data-ng-if="!vm.relationItems[\'account_interim\'].length" ng-value="item.transaction.account_interim_object.id">{{item.transaction.account_interim_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'account_interim\'].length" data-ng-repeat="relationItem in vm.relationItems[\'account_interim\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.account_interim_toggle"><md-input-container><label for="">Account interim</label><md-select data-ng-model="item.transaction.account_interim_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'account\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div layout="row"><div flex="33"><md-switch ng-model="item.transaction.strategy1_cash_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'strategy1_cash\')"><span data-ng-if="!!item.transaction.strategy1_cash_toggle">Reference</span> <span data-ng-if="!!!item.transaction.strategy1_cash_toggle">Input</span></md-switch><div data-ng-if="item.transaction.strategy1_cash_toggle"><md-input-container><label for="">Strategy1 cash</label><md-select data-ng-model="item.transaction.strategy1_cash" md-on-open="vm.loadRelation(\'strategy1_cash\')"><md-option data-ng-if="!vm.relationItems[\'strategy1_cash\'].length" ng-value="item.transaction.strategy1_cash_object.id">{{item.transaction.strategy1_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy1_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy1_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy1_cash_toggle"><md-input-container><label for="">Strategy1 cash</label><md-select data-ng-model="item.transaction.strategy1_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-1\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.transaction.strategy2_cash_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'strategy2_cash\')"><span data-ng-if="!!item.transaction.strategy2_cash_toggle">Reference</span> <span data-ng-if="!!!item.transaction.strategy2_cash_toggle">Input</span></md-switch><div data-ng-if="item.transaction.strategy2_cash_toggle"><md-input-container><label for="">Strategy2 cash</label><md-select data-ng-model="item.transaction.strategy2_cash" md-on-open="vm.loadRelation(\'strategy2_cash\')"><md-option data-ng-if="!vm.relationItems[\'strategy2_cash\'].length" ng-value="item.transaction.strategy2_cash_object.id">{{item.transaction.strategy2_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy2_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy2_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy2_cash_toggle"><md-input-container><label for="">Strategy2 cash</label><md-select data-ng-model="item.transaction.strategy2_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-2\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.transaction.strategy3_cash_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'transaction\', \'strategy3_cash\')"><span data-ng-if="!!item.transaction.strategy3_cash_toggle">Reference</span> <span data-ng-if="!!!item.transaction.strategy3_cash_toggle">Input</span></md-switch><div data-ng-if="item.transaction.strategy3_cash_toggle"><md-input-container><label for="">Strategy3 cash</label><md-select data-ng-model="item.transaction.strategy3_cash" md-on-open="vm.loadRelation(\'strategy3_cash\')"><md-option data-ng-if="!vm.relationItems[\'strategy3_cash\'].length" ng-value="item.transaction.strategy3_cash_object.id">{{item.transaction.strategy3_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy3_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy3_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy3_cash_toggle"><md-input-container><label for="">Strategy3 cash</label><md-select data-ng-model="item.transaction.strategy3_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-3\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div layout="row"><div flex="33"><md-input-container><label for="">Principal amount</label><input type="text" data-ng-model="item.transaction.principal_amount"></md-input-container></div><div flex="33"><md-input-container><label for="">Carry amount</label><input type="text" data-ng-model="item.transaction.carry_amount"></md-input-container></div><div flex="33"><md-input-container><label for="">Overheads</label><input type="text" data-ng-model="item.transaction.overheads"></md-input-container></div></div></div></div></div><div data-ng-if="item.instrument != null"><div layout="row"><div flex="50"><div layout="row"><div flex="33"><md-switch ng-model="item.instrument.instrument_type_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'instrument\', \'instrument_type\')"><span data-ng-if="!!item.instrument.instrument_type_toggle">Reference</span> <span data-ng-if="!!!item.instrument.instrument_type_toggle">Input</span></md-switch><div data-ng-if="item.instrument.instrument_type_toggle"><md-input-container><label for="">Instrument type</label><md-select data-ng-model="item.instrument.instrument_type" md-on-open="vm.loadRelation(\'instrument_type\')"><md-option data-ng-if="!vm.relationItems[\'instrument_type\'].length" ng-value="item.instrument.instrument_type_object.id">{{item.instrument.instrument_type_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'instrument_type\'].length" data-ng-repeat="relationItem in vm.relationItems[\'instrument_type\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.instrument_type_toggle"><md-input-container><label for="">Instrument type</label><md-select data-ng-model="item.instrument.instrument_type_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'instrument-type\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-input-container><label for="">User code</label><input type="text" data-ng-model="item.instrument.user_code"></md-input-container></div></div><div layout="row"><div flex="33"><md-input-container><label for="">Name</label><input type="text" data-ng-model="item.instrument.name"></md-input-container></div><div flex="33"><md-input-container><label for="">Short name</label><input type="text" data-ng-model="item.instrument.short_name"></md-input-container></div><div flex="33"><md-input-container><label for="">Public name</label><input type="text" data-ng-model="item.instrument.public_name"></md-input-container></div></div><div layout="row"><div flex="33"><md-input-container><label for="">User text1</label><input type="text" data-ng-model="item.instrument.user_text_1"></md-input-container></div><div flex="33"><md-input-container><label for="">User text2</label><input type="text" data-ng-model="item.instrument.user_text_2"></md-input-container></div><div flex="33"><md-input-container><label for="">User text3</label><input type="text" data-ng-model="item.instrument.user_text_3"></md-input-container></div></div><div layout="row"><div flex="100"><md-input-container><label for="">Notes</label><input type="text" data-ng-model="item.instrument.notes"></md-input-container></div></div></div><div flex="50"><div layout="row"><div flex="33"><md-switch ng-model="item.instrument.daily_pricing_model_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'instrument\', \'daily_pricing_model\')"><span data-ng-if="!!item.instrument.daily_pricing_model_toggle">Reference</span> <span data-ng-if="!!!item.instrument.daily_pricing_model_toggle">Input</span></md-switch><div data-ng-if="item.instrument.daily_pricing_model_toggle"><md-input-container><label for="">Daily pricing model</label><md-select data-ng-model="item.instrument.daily_pricing_model" md-on-open="vm.loadRelation(\'daily_pricing_model\')"><md-option data-ng-if="!vm.relationItems[\'daily_pricing_model\'].length" ng-value="item.instrument.daily_pricing_model_object.id">{{item.instrument.daily_pricing_model_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'daily_pricing_model\'].length" data-ng-repeat="relationItem in vm.relationItems[\'daily_pricing_model\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.daily_pricing_model_toggle"><md-input-container><label for="">Daily pricing model</label><md-select data-ng-model="item.instrument.daily_pricing_model_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'daily-pricing-model\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-switch ng-model="item.instrument.price_download_scheme_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'instrument\', \'price_download_scheme\')"><span data-ng-if="!!item.instrument.price_download_scheme_toggle">Reference</span> <span data-ng-if="!!!item.instrument.price_download_scheme_toggle">Input</span></md-switch><div data-ng-if="item.instrument.price_download_scheme_toggle"><md-input-container><label for="">Price download scheme</label><md-select data-ng-model="item.instrument.price_download_scheme" md-on-open="vm.loadRelation(\'price_download_scheme\')"><md-option data-ng-if="!vm.relationItems[\'price_download_scheme\'].length" ng-value="item.instrument.price_download_scheme_object.id">{{item.instrument.price_download_scheme_object.scheme_name}}</md-option><md-option data-ng-if="vm.relationItems[\'price_download_scheme\'].length" data-ng-repeat="relationItem in vm.relationItems[\'price_download_scheme\']" ng-value="relationItem.id">{{relationItem.scheme_name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.price_download_scheme_toggle"><md-input-container><label for="">Price download scheme</label><md-select data-ng-model="item.instrument.price_download_scheme_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'price-download-scheme\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-input-container><label for="">Reference for pricing</label><input type="text" data-ng-model="item.instrument.reference_for_pricing"></md-input-container></div></div><div layout="row"><div flex="33" layout="row"><!--<md-switch ng-model="item.instrument.pricing_currency_toggle"--><!--aria-label=""--><!--data-ng-click="vm.resetProperty(item, \'instrument\', \'pricing_currency\')">--><!--<span data-ng-if="!!item.instrument.pricing_currency_toggle">Reference</span>--><!--<span data-ng-if="!!!item.instrument.pricing_currency_toggle">Input</span>--><!--</md-switch>--><style type="text/css">.ref {\n                                                background-color: rgb(255,64,129) !important;\n                                                color: #fff !important;\n                                            }</style><div flex="20"><md-button class="md-icon-button md-raised {{!!item.instrument.pricing_currency_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyTest(item, \'instrument\', \'pricing_currency\')"><span data-ng-if="!!item.instrument.pricing_currency_toggle">R</span> <span data-ng-if="!!!item.instrument.pricing_currency_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.instrument.pricing_currency_toggle"><md-input-container><label for="">Pricing currency</label><md-select data-ng-model="item.instrument.pricing_currency" md-on-open="vm.loadRelation(\'pricing_currency\')"><md-option data-ng-if="!vm.relationItems[\'pricing_currency\'].length" ng-value="item.instrument.pricing_currency_object.id">{{item.instrument.pricing_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'pricing_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'pricing_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.pricing_currency_toggle"><md-input-container><label for="">Pricing currency</label><md-select data-ng-model="item.instrument.pricing_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33"><md-input-container><label for="">Price multiplier</label><input type="text" data-ng-model="item.instrument.price_multiplier"></md-input-container></div><div flex="33"><md-input-container><label for="">Default price</label><input type="text" data-ng-model="item.instrument.default_price"></md-input-container></div></div><div layout="row"><div flex="33"><md-switch ng-model="item.instrument.accrued_currency_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'instrument\', \'accrued_currency\')"><span data-ng-if="!!item.instrument.accrued_currency_toggle">Reference</span> <span data-ng-if="!!!item.instrument.accrued_currency_toggle">Input</span></md-switch><div data-ng-if="item.instrument.accrued_currency_toggle"><md-input-container><label for="">Accrued currency</label><md-select data-ng-model="item.instrument.accrued_currency" md-on-open="vm.loadRelation(\'accrued_currency\')"><md-option data-ng-if="!vm.relationItems[\'accrued_currency\'].length" ng-value="item.instrument.accrued_currency_object.id">{{item.instrument.accrued_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'accrued_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'accrued_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.accrued_currency_toggle"><md-input-container><label for="">Accrued currency</label><md-select data-ng-model="item.instrument.accrued_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-input-container><label for="">Accrued multiplier</label><input type="text" data-ng-model="item.instrument.accrued_multiplier"></md-input-container></div><div flex="33"><md-input-container><label for="">Default accrued</label><input type="text" data-ng-model="item.instrument.default_accrued"></md-input-container></div></div><div flex="33"><md-switch ng-model="item.instrument.payment_size_detail_toggle" aria-label="" data-ng-click="vm.resetProperty(item, \'instrument\', \'payment_size_detail\')"><span data-ng-if="!!item.instrument.payment_size_detail_toggle">Reference</span> <span data-ng-if="!!!item.instrument.payment_size_detail_toggle">Input</span></md-switch><div data-ng-if="item.instrument.payment_size_detail_toggle"><md-input-container><label for="">Payment size details</label><md-select data-ng-model="item.instrument.payment_size_detail" md-on-open="vm.loadRelation(\'payment_size_detail\')"><md-option data-ng-if="!vm.relationItems[\'payment_size_detail\'].length" ng-value="item.instrument.payment_size_detail_object.id">{{item.instrument.payment_size_detail_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'payment_size_detail\'].length" data-ng-repeat="relationItem in vm.relationItems[\'payment_size_detail\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.payment_size_detail_toggle"><md-input-container><label for="">Payment size details</label><md-select data-ng-model="item.instrument.payment_size_detail_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'payment-size-detail\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div><div flex="33"><md-input-container><label for="">Maturity date</label><input type="text" data-ng-model="item.instrument.maturity_date"></md-input-container></div></div></div></div></v-pane-content></v-pane></v-accordion><div layout="row" layout-align="end center"><md-button class="md-raised" data-ng-click="vm.addAction(\'transaction\')">Add new transaction action</md-button><md-button class="md-raised" data-ng-click="vm.addAction(\'instrument\')">Add new instrument action</md-button></div></div></div>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/transaction-type/transaction-type-actions-tab-view.html",'<div data-ng-controller="TransactionTypeActionsTabController as vm"><div class="transaction-type-actions-tab-view"><v-accordion class="vAccordion--default" multiple="multiple" control="accordion"><v-pane data-ng-repeat="item in vm.entity.actions" expanded="item.isPaneExpanded"><v-pane-header inactive class="transaction-type-action-pane"><div layout="row" layout-align="space-between center"><div layout="row"><span data-ng-if="item.isPaneExpanded"><md-input-container><input type="text" data-ng-model="item.action_notes" placeholder="Action notes"></md-input-container></span><span data-ng-if="!item.isPaneExpanded" data-ng-bind="item.action_notes"></span></div><div layout="row"><md-button class="md-raised" style="background: #ffeee8" data-ng-click="vm.deletePane(item, $index, $event)">Delete</md-button><md-button class="md-raised" ng-disabled="$index == 0" data-ng-click="vm.moveUp(item, $index)">Move up</md-button><md-button class="md-raised" ng-disabled="$index == vm.entity.actions.length - 1" data-ng-click="vm.moveDown(item, $index )">Move Down</md-button><md-button class="md-raised" data-ng-click="vm.toggleItem($pane, item)"><span data-ng-if="item.isPaneExpanded">Collapse</span> <span data-ng-if="!item.isPaneExpanded">Expand</span></md-button></div></div></v-pane-header><v-pane-content style="padding: 20px"><div data-ng-if="item.transaction != null"><div layout="row"><div flex="50"><div layout="row"><md-input-container><label for="">Transaction class</label><md-select data-ng-model="item.transaction.transaction_class" md-on-open="vm.loadRelation(\'transaction_class\')"><md-option data-ng-if="!vm.relationItems[\'transaction_class\'].length" ng-value="item.transaction.transaction_class_object.id">{{item.transaction.transaction_class_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'transaction_class\'].length" data-ng-repeat="relationItem in vm.relationItems[\'transaction_class\']" ng-value="relationItem.value">{{relationItem.name}}</md-option></md-select></md-input-container></div><div layout="row"><div flex="33"><div layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.instrument_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'instrument\')"><span data-ng-if="!!item.transaction.instrument_toggle">R</span> <span data-ng-if="!!!item.transaction.instrument_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.instrument_toggle"><md-input-container><label for="">Instrument</label><md-select data-ng-model="item.transaction.instrument" md-on-open="vm.loadRelation(\'instrument\')"><md-option data-ng-if="!vm.relationItems[\'instrument\'].length" ng-value="item.transaction.instrument_object.id">{{item.transaction.instrument_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'instrument\'].length" data-ng-repeat="relationItem in vm.relationItems[\'instrument\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.instrument_toggle"><md-input-container><label for="">Instrument</label><md-select data-ng-model="item.transaction[vm.resolveInstrumentProp(item, \'instrument\')]"><md-optgroup label="Inputs"><md-option data-ng-click="vm.setTransactionInstrumentInput(item, inputItem.name, \'instrument\')" data-ng-repeat="inputItem in vm.findInputs(\'instrument\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-optgroup><md-optgroup label="Phantoms"><md-option data-ng-click="vm.setTransactionInstrumentPhantom(item, phantomItem.positionOrder, \'instrument\')" data-ng-repeat="phantomItem in vm.findPhantoms()" ng-value="phantomItem.positionOrder">{{phantomItem.action_notes}}</md-option></md-optgroup></md-select></md-input-container></div></div></div></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Position size with sign</label><input type="text" data-ng-model="item.transaction.position_size_with_sign"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.position_size_with_sign, {obj: item.transaction, prop: \'position_size_with_sign\'})">...</md-button></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.transaction_currency_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'transaction_currency\')"><span data-ng-if="!!item.transaction.transaction_currency_toggle">R</span> <span data-ng-if="!!!item.transaction.transaction_currency_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.transaction_currency_toggle"><md-input-container><label for="">Transaction currency</label><md-select data-ng-model="item.transaction.transaction_currency" md-on-open="vm.loadRelation(\'transaction_currency\')"><md-option data-ng-if="!vm.relationItems[\'transaction_currency\'].length" ng-value="item.transaction.transaction_currency_object.id">{{item.transaction.transaction_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'transaction_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'transaction_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.transaction_currency_toggle"><md-input-container><label for="">Transaction currency</label><md-select data-ng-model="item.transaction.transaction_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div></div><div layout="row"><div flex="33"><div layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.linked_instrument_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'linked_instrument\')"><span data-ng-if="!!item.transaction.linked_instrument_toggle">R</span> <span data-ng-if="!!!item.transaction.linked_instrument_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.linked_instrument_toggle"><md-input-container><label for="">Linked instrument</label><md-select data-ng-model="item.transaction.linked_instrument" md-on-open="vm.loadRelation(\'instrument\')"><md-option data-ng-if="!vm.relationItems[\'instrument\'].length" ng-value="item.transaction.linked_instrument_object.id">{{item.transaction.instrument_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'instrument\'].length" data-ng-repeat="relationItem in vm.relationItems[\'instrument\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.linked_instrument_toggle"><md-input-container><label for="">Linked instrument</label><md-select data-ng-model="item.transaction[vm.resolveInstrumentProp(item, \'linked_instrument\')]"><md-optgroup label="Inputs"><md-option data-ng-click="vm.setTransactionInstrumentInput(item, inputItem.name, \'linked_instrument\')" data-ng-repeat="inputItem in vm.findInputs(\'instrument\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-optgroup><md-optgroup label="Phantoms"><md-option data-ng-click="vm.setTransactionInstrumentPhantom(item, phantomItem.positionOrder, \'linked_instrument\')" data-ng-repeat="phantomItem in vm.findPhantoms()" ng-value="phantomItem.positionOrder">{{phantomItem.action_notes}}</md-option></md-optgroup></md-select></md-input-container></div></div></div></div><div flex="33"><div layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.allocation_pl_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'allocation_pl\')"><span data-ng-if="!!item.transaction.allocation_pl_toggle">R</span> <span data-ng-if="!!!item.transaction.allocation_pl_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.allocation_pl_toggle"><md-input-container><label for="">Allocation-P&L</label><md-select data-ng-model="item.transaction.allocation_pl" md-on-open="vm.loadRelation(\'instrument\')"><md-option data-ng-if="!vm.relationItems[\'instrument\'].length" ng-value="item.transaction.instrument_object.id">{{item.transaction.instrument_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'instrument\'].length" data-ng-repeat="relationItem in vm.relationItems[\'instrument\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.allocation_pl_toggle"><md-input-container><label for="">Allocation-P&L</label><md-select data-ng-model="item.transaction[vm.resolveInstrumentProp(item, \'allocation_pl\')]"><md-optgroup label="Inputs"><md-option data-ng-click="vm.setTransactionInstrumentInput(item, inputItem.name, \'allocation_pl\')" data-ng-repeat="inputItem in vm.findInputs(\'instrument\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-optgroup><md-optgroup label="Phantoms"><md-option data-ng-click="vm.setTransactionInstrumentPhantom(item, phantomItem.positionOrder, \'allocation_pl\')" data-ng-repeat="phantomItem in vm.findPhantoms()" ng-value="phantomItem.positionOrder">{{phantomItem.action_notes}}</md-option></md-optgroup></md-select></md-input-container></div></div></div></div><div flex="33"><div layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.allocation_balance_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'allocation_balance\')"><span data-ng-if="!!item.transaction.allocation_balance_toggle">R</span> <span data-ng-if="!!!item.transaction.allocation_balance_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.allocation_balance_toggle"><md-input-container><label for="">Allocation-Balance</label><md-select data-ng-model="item.transaction.allocation_balance" md-on-open="vm.loadRelation(\'instrument\')"><md-option data-ng-if="!vm.relationItems[\'instrument\'].length" ng-value="item.transaction.instrument_object.id">{{item.transaction.instrument_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'instrument\'].length" data-ng-repeat="relationItem in vm.relationItems[\'instrument\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.allocation_balance_toggle"><md-input-container><label for="">Allocation-Balance</label><md-select data-ng-model="item.transaction[vm.resolveInstrumentProp(item, \'allocation_balance\')]"><md-optgroup label="Inputs"><md-option data-ng-click="vm.setTransactionInstrumentInput(item, inputItem.name, \'allocation_balance\')" data-ng-repeat="inputItem in vm.findInputs(\'instrument\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-optgroup><md-optgroup label="Phantoms"><md-option data-ng-click="vm.setTransactionInstrumentPhantom(item, phantomItem.positionOrder, \'allocation_balance\')" data-ng-repeat="phantomItem in vm.findPhantoms()" ng-value="phantomItem.positionOrder">{{phantomItem.action_notes}}</md-option></md-optgroup></md-select></md-input-container></div></div></div></div></div><div layout="row"><div flex="33"><md-input-container class="expression-input-container"><label for="">Trade price</label><input type="text" data-ng-model="item.transaction.trade_price"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.trade_price, {obj: item.transaction, prop: \'trade_price\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Factor</label><input type="text" data-ng-model="item.transaction.factor"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.factor, {obj: item.transaction, prop: \'factor\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Position amount</label><input type="text" data-ng-model="item.transaction.position_amount"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.position_amount, {obj: item.transaction, prop: \'position_amount\'})">...</md-button></div></div><div layout="row"><div flex="33"><md-input-container class="expression-input-container"><label for="">Accounting date</label><input type="text" style="color: grey" data-ng-model="item.transaction.accounting_date"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.accounting_date, {obj: item.transaction, prop: \'accounting_date\'})">...</md-button></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.account_position_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'account_position\')"><span data-ng-if="!!item.transaction.account_position_toggle">R</span> <span data-ng-if="!!!item.transaction.account_position_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.account_position_toggle"><md-input-container><label for="">Account position</label><md-select data-ng-model="item.transaction.account_position" md-on-open="vm.loadRelation(\'account_position\')"><md-option data-ng-if="!vm.relationItems[\'account_position\'].length" ng-value="item.transaction.account_position_object.id">{{item.transaction.account_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'account_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'account_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.account_position_toggle"><md-input-container><label for="">Account position</label><md-select data-ng-model="item.transaction.account_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'account\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div></div><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.strategy1_position_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'strategy1_position\')"><span data-ng-if="!!item.transaction.strategy1_position_toggle">R</span> <span data-ng-if="!!!item.transaction.strategy1_position_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.strategy1_position_toggle"><md-input-container><label for="">Strategy1 position</label><md-select data-ng-model="item.transaction.strategy1_position" md-on-open="vm.loadRelation(\'strategy1_position\')"><md-option data-ng-if="!vm.relationItems[\'strategy1_position\'].length" ng-value="item.transaction.strategy1_position_object.id">{{item.transaction.strategy1_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy1_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy1_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy1_position_toggle"><md-input-container><label for="">Strategy1 position</label><md-select data-ng-model="item.transaction.strategy1_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-1\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.strategy2_position_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'strategy2_position\')"><span data-ng-if="!!item.transaction.strategy2_position_toggle">R</span> <span data-ng-if="!!!item.transaction.strategy2_position_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.strategy2_position_toggle"><md-input-container><label for="">Strategy2 position</label><md-select data-ng-model="item.transaction.strategy2_position" md-on-open="vm.loadRelation(\'strategy2_position\')"><md-option data-ng-if="!vm.relationItems[\'strategy2_position\'].length" ng-value="item.transaction.strategy2_position_object.id">{{item.transaction.strategy2_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy2_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy2_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy2_position_toggle"><md-input-container><label for="">Strategy2 position</label><md-select data-ng-model="item.transaction.strategy2_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-2\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.strategy3_position_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'strategy3_position\')"><span data-ng-if="!!item.transaction.strategy3_position_toggle">R</span> <span data-ng-if="!!!item.transaction.strategy3_position_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.strategy3_position_toggle"><md-input-container><label for="">Strategy3 position</label><md-select data-ng-model="item.transaction.strategy3_position" md-on-open="vm.loadRelation(\'strategy3_position\')"><md-option data-ng-if="!vm.relationItems[\'strategy3_position\'].length" ng-value="item.transaction.strategy3_position_object.id">{{item.transaction.strategy3_position_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy3_position\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy3_position\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy3_position_toggle"><md-input-container><label for="">Strategy3 position</label><md-select data-ng-model="item.transaction.strategy3_position_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-3\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div></div><div layout="row"><div flex="100"><md-input-container class="expression-input-container"><label for="">Notes</label><input type="text" data-ng-model="item.transaction.notes"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.notes, {obj: item.transaction, prop: \'notes\'})">...</md-button></div></div></div><div flex="50"><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.portfolio_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'portfolio\')"><span data-ng-if="!!item.transaction.portfolio_toggle">R</span> <span data-ng-if="!!!item.transaction.portfolio_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.portfolio_toggle"><md-input-container><label for="">Portfolio</label><md-select data-ng-model="item.transaction.portfolio" md-on-open="vm.loadRelation(\'portfolio\')"><md-option data-ng-if="!vm.relationItems[\'portfolio\'].length" ng-value="item.transaction.portfolio_object.id">{{item.transaction.portfolio_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'portfolio\'].length" data-ng-repeat="relationItem in vm.relationItems[\'portfolio\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.portfolio_toggle"><md-input-container><label for="">Portfolio</label><md-select data-ng-model="item.transaction.portfolio_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'portfolio\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.counterparty_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'counterparty\')"><span data-ng-if="!!item.transaction.counterparty_toggle">R</span> <span data-ng-if="!!!item.transaction.counterparty_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.counterparty_toggle"><md-input-container><label for="">Counterparty</label><md-select data-ng-model="item.transaction.counterparty" md-on-open="vm.loadRelation(\'counterparty\')"><md-option data-ng-if="!vm.relationItems[\'counterparty\'].length" ng-value="item.transaction.counterparty_object.id">{{item.transaction.counterparty_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'counterparty\'].length" data-ng-repeat="relationItem in vm.relationItems[\'counterparty\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.counterparty_toggle"><md-input-container><label for="">Counterparty</label><md-select data-ng-model="item.transaction.counterparty_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'counterparty\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.responsible_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'responsible\')"><span data-ng-if="!!item.transaction.responsible_toggle">R</span> <span data-ng-if="!!!item.transaction.responsible_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.responsible_toggle"><md-input-container><label for="">Responsible</label><md-select data-ng-model="item.transaction.responsible" md-on-open="vm.loadRelation(\'responsible\')"><md-option data-ng-if="!vm.relationItems[\'responsible\'].length" ng-value="item.transaction.responsible_object.id">{{item.transaction.responsible_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'responsible\'].length" data-ng-repeat="relationItem in vm.relationItems[\'responsible\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.responsible_toggle"><md-input-container><label for="">Responsible</label><md-select data-ng-model="item.transaction.responsible_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'responsible\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div></div><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.settlement_currency_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'settlement_currency\')"><span data-ng-if="!!item.transaction.settlement_currency_toggle">R</span> <span data-ng-if="!!!item.transaction.settlement_currency_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.settlement_currency_toggle"><md-input-container><label for="">Settlement currency</label><md-select data-ng-model="item.transaction.settlement_currency" md-on-open="vm.loadRelation(\'settlement_currency\')"><md-option data-ng-if="!vm.relationItems[\'settlement_currency\'].length" ng-value="item.transaction.settlement_currency_object.id">{{item.transaction.settlement_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'settlement_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'settlement_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.settlement_currency_toggle"><md-input-container><label for="">Settlement currency</label><md-select data-ng-model="item.transaction.settlement_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Cash consideration</label><input type="text" data-ng-model="item.transaction.cash_consideration"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.cash_consideration, {obj: item.transaction, prop: \'cash_consideration\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Reference fx-rate</label><input type="text" data-ng-model="item.transaction.reference_fx_rate"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.reference_fx_rate, {obj: item.transaction, prop: \'reference_fx_rate\'})">...</md-button></div></div><div layout="row"><div flex="33"><md-input-container class="expression-input-container"><label for="">Principal with sign</label><input type="text" data-ng-model="item.transaction.principal_with_sign"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.principal_with_sign, {obj: item.transaction, prop: \'principal_with_sign\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Carry with sign</label><input type="text" data-ng-model="item.transaction.carry_with_sign"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.carry_with_sign, {obj: item.transaction, prop: \'carry_with_sign\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Overheads with sign</label><input type="text" data-ng-model="item.transaction.overheads_with_sign"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.overheads_with_sign, {obj: item.transaction, prop: \'overheads_with_sign\'})">...</md-button></div></div><div layout="row"><div flex="33"><md-input-container class="expression-input-container"><label for="">Principal amount</label><input type="text" data-ng-model="item.transaction.principal_amount"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.principal_amount, {obj: item.transaction, prop: \'principal_amount\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Carry amount</label><input type="text" data-ng-model="item.transaction.carry_amount"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.carry_amount, {obj: item.transaction, prop: \'carry_amount\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Overheads</label><input type="text" data-ng-model="item.transaction.overheads"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.overheads, {obj: item.transaction, prop: \'overheads\'})">...</md-button></div></div><div layout="row"><div flex="33" layout="row"><md-input-container class="expression-input-container"><label for="">Cash date</label><input type="text" style="color: grey" data-ng-model="item.transaction.cash_date"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.transaction.cash_date, {obj: item.transaction, prop: \'cash_date\'})">...</md-button></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.account_cash_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'account_cash\')"><span data-ng-if="!!item.transaction.account_cash_toggle">R</span> <span data-ng-if="!!!item.transaction.account_cash_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.account_cash_toggle"><md-input-container><label for="">Account cash</label><md-select data-ng-model="item.transaction.account_cash" md-on-open="vm.loadRelation(\'account_cash\')"><md-option data-ng-if="!vm.relationItems[\'account_cash\'].length" ng-value="item.transaction.account_cash_object.id">{{item.transaction.account_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'account_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'account_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.account_cash_toggle"><md-input-container><label for="">Account cash</label><md-select data-ng-model="item.transaction.account_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'account\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.account_interim_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'account_interim\')"><span data-ng-if="!!item.transaction.account_interim_toggle">R</span> <span data-ng-if="!!!item.transaction.account_interim_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.account_interim_toggle"><md-input-container><label for="">Account interim</label><md-select data-ng-model="item.transaction.account_interim" md-on-open="vm.loadRelation(\'account_interim\')"><md-option data-ng-if="!vm.relationItems[\'account_interim\'].length" ng-value="item.transaction.account_interim_object.id">{{item.transaction.account_interim_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'account_interim\'].length" data-ng-repeat="relationItem in vm.relationItems[\'account_interim\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.account_interim_toggle"><md-input-container><label for="">Account interim</label><md-select data-ng-model="item.transaction.account_interim_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'account\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div></div><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.strategy1_cash_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'strategy1_cash\')"><span data-ng-if="!!item.transaction.strategy1_cash_toggle">R</span> <span data-ng-if="!!!item.transaction.strategy1_cash_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.strategy1_cash_toggle"><md-input-container><label for="">Strategy1 cash</label><md-select data-ng-model="item.transaction.strategy1_cash" md-on-open="vm.loadRelation(\'strategy1_cash\')"><md-option data-ng-if="!vm.relationItems[\'strategy1_cash\'].length" ng-value="item.transaction.strategy1_cash_object.id">{{item.transaction.strategy1_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy1_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy1_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy1_cash_toggle"><md-input-container><label for="">Strategy1 cash</label><md-select data-ng-model="item.transaction.strategy1_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-1\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.strategy2_cash_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'strategy2_cash\')"><span data-ng-if="!!item.transaction.strategy2_cash_toggle">R</span> <span data-ng-if="!!!item.transaction.strategy2_cash_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.strategy2_cash_toggle"><md-input-container><label for="">Strategy2 cash</label><md-select data-ng-model="item.transaction.strategy2_cash" md-on-open="vm.loadRelation(\'strategy2_cash\')"><md-option data-ng-if="!vm.relationItems[\'strategy2_cash\'].length" ng-value="item.transaction.strategy2_cash_object.id">{{item.transaction.strategy2_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy2_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy2_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy2_cash_toggle"><md-input-container><label for="">Strategy2 cash</label><md-select data-ng-model="item.transaction.strategy2_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-2\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.transaction.strategy3_cash_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'transaction\', \'strategy3_cash\')"><span data-ng-if="!!item.transaction.strategy3_cash_toggle">R</span> <span data-ng-if="!!!item.transaction.strategy3_cash_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.transaction.strategy3_cash_toggle"><md-input-container><label for="">Strategy3 cash</label><md-select data-ng-model="item.transaction.strategy3_cash" md-on-open="vm.loadRelation(\'strategy3_cash\')"><md-option data-ng-if="!vm.relationItems[\'strategy3_cash\'].length" ng-value="item.transaction.strategy3_cash_object.id">{{item.transaction.strategy3_cash_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'strategy3_cash\'].length" data-ng-repeat="relationItem in vm.relationItems[\'strategy3_cash\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.transaction.strategy3_cash_toggle"><md-input-container><label for="">Strategy3 cash</label><md-select data-ng-model="item.transaction.strategy3_cash_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'strategy-3\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div></div></div></div></div><div data-ng-if="item.instrument != null"><div layout="row"><div flex="50"><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.instrument.instrument_type_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'instrument\', \'instrument_type\')"><span data-ng-if="!!item.instrument.instrument_type_toggle">R</span> <span data-ng-if="!!!item.instrument.instrument_type_toggle">I</span></md-button></div><div flex="80"><div><div data-ng-if="item.instrument.instrument_type_toggle"><md-input-container><label for="">Instrument type</label><md-select data-ng-model="item.instrument.instrument_type" md-on-open="vm.loadRelation(\'instrument_type\')"><md-option data-ng-if="!vm.relationItems[\'instrument_type\'].length" ng-value="item.instrument.instrument_type_object.id">{{item.instrument.instrument_type_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'instrument_type\'].length" data-ng-repeat="relationItem in vm.relationItems[\'instrument_type\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.instrument_type_toggle"><md-input-container><label for="">Instrument type</label><md-select data-ng-model="item.instrument.instrument_type_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'instrument-type\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div></div><div flex="33"><md-input-container class="expression-input-container"><label for="">User code</label><input type="text" data-ng-model="item.instrument.user_code"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.user_code, {obj: item.instrument, prop: \'user_code\'})">...</md-button></div></div><div layout="row"><div flex="33"><md-input-container class="expression-input-container"><label for="">Name</label><input type="text" data-ng-model="item.instrument.name"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.name, {obj: item.instrument, prop: \'name\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Short name</label><input type="text" data-ng-model="item.instrument.short_name"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.short_name, {obj: item.instrument, prop: \'short_name\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Public name</label><input type="text" data-ng-model="item.instrument.public_name"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.public_name, {obj: item.instrument, prop: \'public_name\'})">...</md-button></div></div><div layout="row"><div flex="33"><md-input-container class="expression-input-container"><label for="">User text1</label><input type="text" data-ng-model="item.instrument.user_text_1"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.user_text_1, {obj: item.instrument, prop: \'user_text_1\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">User text2</label><input type="text" data-ng-model="item.instrument.user_text_2"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.user_text_2, {obj: item.instrument, prop: \'user_text_2\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">User text3</label><input type="text" data-ng-model="item.instrument.user_text_3"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.user_text_3, {obj: item.instrument, prop: \'user_text_3\'})">...</md-button></div></div><div layout="row"><div flex="100"><md-input-container class="expression-input-container"><label for="">Notes</label><input type="text" data-ng-model="item.instrument.notes"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.notes, {obj: item.instrument, prop: \'notes\'})">...</md-button></div></div></div><div flex="50"><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.instrument.daily_pricing_model_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'instrument\', \'daily_pricing_model\')"><span data-ng-if="!!item.instrument.daily_pricing_model_toggle">R</span> <span data-ng-if="!!!item.instrument.daily_pricing_model_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.instrument.daily_pricing_model_toggle"><md-input-container><label for="">Daily pricing model</label><md-select data-ng-model="item.instrument.daily_pricing_model" md-on-open="vm.loadRelation(\'daily_pricing_model\')"><md-option data-ng-if="!vm.relationItems[\'daily_pricing_model\'].length" ng-value="item.instrument.daily_pricing_model_object.id">{{item.instrument.daily_pricing_model_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'daily_pricing_model\'].length" data-ng-repeat="relationItem in vm.relationItems[\'daily_pricing_model\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.daily_pricing_model_toggle"><md-input-container><label for="">Daily pricing model</label><md-select data-ng-model="item.instrument.daily_pricing_model_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'daily-pricing-model\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.instrument.price_download_scheme_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'instrument\', \'price_download_scheme\')"><span data-ng-if="!!item.instrument.price_download_scheme_toggle">R</span> <span data-ng-if="!!!item.instrument.price_download_scheme_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.instrument.price_download_scheme_toggle"><md-input-container><label for="">Price download scheme</label><md-select data-ng-model="item.instrument.price_download_scheme" md-on-open="vm.loadRelation(\'price_download_scheme\')"><md-option data-ng-if="!vm.relationItems[\'price_download_scheme\'].length" ng-value="item.instrument.price_download_scheme_object.id">{{item.instrument.price_download_scheme_object.scheme_name}}</md-option><md-option data-ng-if="vm.relationItems[\'price_download_scheme\'].length" data-ng-repeat="relationItem in vm.relationItems[\'price_download_scheme\']" ng-value="relationItem.id">{{relationItem.scheme_name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.price_download_scheme_toggle"><md-input-container><label for="">Price download scheme</label><md-select data-ng-model="item.instrument.price_download_scheme_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'price-download-scheme\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Reference for pricing</label><input type="text" data-ng-model="item.instrument.reference_for_pricing"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.reference_for_pricing, {obj: item.instrument, prop: \'reference_for_pricing\'})">...</md-button></div></div><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.instrument.pricing_currency_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'instrument\', \'pricing_currency\')"><span data-ng-if="!!item.instrument.pricing_currency_toggle">R</span> <span data-ng-if="!!!item.instrument.pricing_currency_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.instrument.pricing_currency_toggle"><md-input-container><label for="">Pricing currency</label><md-select data-ng-model="item.instrument.pricing_currency" md-on-open="vm.loadRelation(\'pricing_currency\')"><md-option data-ng-if="!vm.relationItems[\'pricing_currency\'].length" ng-value="item.instrument.pricing_currency_object.id">{{item.instrument.pricing_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'pricing_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'pricing_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.pricing_currency_toggle"><md-input-container><label for="">Pricing currency</label><md-select data-ng-model="item.instrument.pricing_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Price multiplier</label><input type="text" data-ng-model="item.instrument.price_multiplier"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.price_multiplier, {obj: item.instrument, prop: \'price_multiplier\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Default price</label><input type="text" data-ng-model="item.instrument.default_price"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.default_price, {obj: item.instrument, prop: \'default_price\'})">...</md-button></div></div><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.instrument.accrued_currency_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'instrument\', \'accrued_currency\')"><span data-ng-if="!!item.instrument.accrued_currency_toggle">R</span> <span data-ng-if="!!!item.instrument.accrued_currency_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.instrument.accrued_currency_toggle"><md-input-container><label for="">Accrued currency</label><md-select data-ng-model="item.instrument.accrued_currency" md-on-open="vm.loadRelation(\'accrued_currency\')"><md-option data-ng-if="!vm.relationItems[\'accrued_currency\'].length" ng-value="item.instrument.accrued_currency_object.id">{{item.instrument.accrued_currency_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'accrued_currency\'].length" data-ng-repeat="relationItem in vm.relationItems[\'accrued_currency\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.accrued_currency_toggle"><md-input-container><label for="">Accrued currency</label><md-select data-ng-model="item.instrument.accrued_currency_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'currency\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Accrued multiplier</label><input type="text" data-ng-model="item.instrument.accrued_multiplier"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.accrued_multiplier, {obj: item.instrument, prop: \'accrued_multiplier\'})">...</md-button></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Default accrued</label><input type="text" data-ng-model="item.instrument.default_accrued"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.default_accrued, {obj: item.instrument, prop: \'default_accrued\'})">...</md-button></div></div><div layout="row"><div flex="33" layout="row"><div flex="20"><md-button class="md-icon-button md-raised {{!!item.instrument.payment_size_detail_toggle ? \'ref\' : \'\'}}" style="transform: scale(0.7,0.7)" data-ng-click="vm.resetPropertyBtn(item, \'instrument\', \'payment_size_detail\')"><span data-ng-if="!!item.instrument.payment_size_detail_toggle">R</span> <span data-ng-if="!!!item.instrument.payment_size_detail_toggle">I</span></md-button></div><div flex="80"><div data-ng-if="item.instrument.payment_size_detail_toggle"><md-input-container><label for="">Payment size details</label><md-select data-ng-model="item.instrument.payment_size_detail" md-on-open="vm.loadRelation(\'payment_size_detail\')"><md-option data-ng-if="!vm.relationItems[\'payment_size_detail\'].length" ng-value="item.instrument.payment_size_detail_object.id">{{item.instrument.payment_size_detail_object.name}}</md-option><md-option data-ng-if="vm.relationItems[\'payment_size_detail\'].length" data-ng-repeat="relationItem in vm.relationItems[\'payment_size_detail\']" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></div><div data-ng-if="!item.instrument.payment_size_detail_toggle"><md-input-container><label for="">Payment size details</label><md-select data-ng-model="item.instrument.payment_size_detail_input"><md-option data-ng-repeat="inputItem in vm.findInputs(\'payment-size-detail\')" ng-value="inputItem.name">{{inputItem.name}}</md-option></md-select></md-input-container></div></div></div><div flex="33"><md-input-container><label for="">&nbsp;</label></md-input-container></div><div flex="33"><md-input-container class="expression-input-container"><label for="">Maturity date</label><input type="text" style="color: grey" data-ng-model="item.instrument.maturity_date"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item.instrument.maturity_date, {obj: item.instrument, prop: \'maturity_date\'})">...</md-button></div></div></div></div></div></v-pane-content></v-pane></v-accordion><div layout="row" layout-align="end center"><md-button class="md-raised" data-ng-click="vm.addAction(\'transaction\')">Add new transaction action</md-button><md-button class="md-raised" data-ng-click="vm.addAction(\'instrument\')">Add new instrument action</md-button></div></div></div>');
}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/transaction-type/transaction-type-general-tab-view.html",'<div data-ng-controller="TransactionTypeGeneralTabController as vm"><div data-ng-if="vm.checkReadyStatus()"><div layout="row"><md-input-container><label for="">User code</label><input type="text" data-ng-model="vm.entity.user_code"></md-input-container><!--<md-input-container>--><!--<label for="">Group</label>--><!--<ui-select tagging="vm.tagTransform" ng-model="vm.entity.group" theme="bootstrap"--><!--sortable="true" close-on-select="false">--><!--<ui-select-match placeholder="Group">{{$item.name}}</ui-select-match>--><!--<ui-select-choices--><!--repeat="item in vm.transactionTypeGroups | propsFilter: {name: $select.search}">--><!--<div ng-bind-html="item.name | highlight: $select.search"></div>--><!--</ui-select-choices>--><!--</ui-select>--><!--</md-input-container>--><md-input-container><label for="">Group</label><md-select data-ng-model="vm.entity.group"><md-option ng-value="item.id" ng-repeat="item in vm.transactionTypeGroups">{{item.name}}</md-option></md-select></md-input-container></div><div layout="row"><md-input-container><label for="">Name</label><input type="text" data-ng-model="vm.entity.name"></md-input-container></div><div layout="row"><md-input-container><label for="">Notes</label><textarea data-ng-model="vm.entity.notes" cols="30" rows="10"></textarea></md-input-container></div><div layout="row"><md-input-container><md-checkbox data-ng-model="vm.entity.is_valid_for_all_instruments">Valid for all instruments</md-checkbox></md-input-container><md-input-container><md-checkbox data-ng-model="vm.entity.is_valid_for_all_portfolios">Valid for all portfolios</md-checkbox></md-input-container></div><div layout="row" style="margin-bottom: 15px"><md-input-container style="min-width: 200px"><label for="">Instrument types</label><md-select data-ng-model="vm.entity.instrument_types" multiple="multiple" md-selected-text="vm.bindSelectedText(vm.entity.instrument_types, \'Instrument Type\')"><md-option ng-value="item.id" ng-repeat="item in vm.instrumentTypes">{{item.name}}</md-option></md-select></md-input-container><md-input-container style="min-width: 200px"><label for="">Portfolios</label><md-select data-ng-model="vm.entity.portfolios" multiple="multiple" md-selected-text="vm.bindSelectedText(vm.entity.portfolios, \'Portfolio\')"><md-option ng-value="item.id" ng-repeat="item in vm.portfolios">{{item.name}}</md-option></md-select></md-input-container></div><div layout="row"><md-input-container><label for="">Complex transaction date</label><input type="text" data-ng-model="vm.entity.date_expr"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, vm.entity, {key: \'date_expr\'})">...</md-button></div><div layout="row"><md-input-container><label for="">Display expression</label><input type="text" data-ng-model="vm.entity.display_expr"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, vm.entity, {key: \'display_expr\'})">...</md-button></div><div layout="row"><md-input-container><label for="">Tags</label><ui-select multiple="multiple" tagging="vm.tagTransform" ng-model="vm.entity.tags" theme="bootstrap" sortable="true" close-on-select="false"><ui-select-match placeholder="Tags">{{$item.name}}</ui-select-match><ui-select-choices repeat="item in vm.tags | propsFilter: {name: $select.search}"><div ng-bind-html="item.name | highlight: $select.search"></div></ui-select-choices></ui-select></md-input-container><!--<md-input-container>--><!--<label for="">Tags</label>--><!--<md-select data-ng-model="vm.entity.tags" multiple>--><!--<md-option ng-value="item.id" ng-repeat="item in vm.tags">{{item.name}}</md-option>--><!--</md-select>--><!--</md-input-container>--></div></div><div data-ng-if="!vm.checkReadyStatus()"><div layout="row" layout-sm="column" layout-align="space-around"><md-progress-circular md-mode="indeterminate"></md-progress-circular></div></div></div>')}])}(),function(t){try{t=angular.module("portal")}catch(e){t=angular.module("portal",[])}t.run(["$templateCache",function(t){t.put("views/tabs/transaction-type/transaction-type-inputs-tab-view.html",'<div data-ng-controller="TransactionTypeInputsTabController as vm"><div class="tt-inputs-tab-view"><table class="bordered"><thead><tr><th data-ng-click="vm.setSort(\'name\')">Name<span class="sortorder" data-ng-show="vm.sort === \'name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'verbose_name\')">Verbose name<span class="sortorder" data-ng-show="vm.sort === \'verbose_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'value_type_name\')">Value type<span class="sortorder" data-ng-show="vm.sort === \'value_type_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th data-ng-click="vm.setSort(\'content_type_name\')">Content type<span class="sortorder" data-ng-show="vm.sort === \'content_type_name\'" data-ng-class="{reverse: vm.direction}"></span></th><th>Default value</th><th>Input expr</th><th>Fill from context</th><th><md-button class="md-icon-button"><ng-md-icon data-ng-click="vm.toggleQuery()" icon="search"></ng-md-icon></md-button></th></tr><tr style="border: 0" data-ng-if="vm.queryStatus" class="filter-row-holder"><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.name"></md-input-container></th><th><md-input-container><ng-md-icon icon="search"></ng-md-icon><input type="text" data-ng-model="vm.query.verbose_name"></md-input-container></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr data-ng-repeat="item in vm.entity.inputs | filter:vm.query | orderBy:vm.sort:vm.direction"><td data-ng-bind="item.name" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.verbose_name" data-ng-if="!item.editStatus"></td><td data-ng-bind="vm.bindValueType(item)" data-ng-if="!item.editStatus"></td><td data-ng-bind="vm.bindContentType(item)" data-ng-if="!item.editStatus"></td><td data-ng-bind="vm.resolveDefaultValue(item)" data-ng-if="!item.editStatus"></td><td data-ng-bind="item.value_expr" data-ng-if="!item.editStatus"></td><td data-ng-if="!item.editStatus"><span class="bool-table-view" data-ng-if="item.is_fill_from_context"><ng-md-icon icon="check_circle" size="16" style="fill:rgb(0,0,0)"></ng-md-icon></span></td><td data-ng-if="!item.editStatus" class="table-misc-cell"><md-menu><!-- Trigger element is a md-button with an icon --><md-button ng-click="$mdOpenMenu($event)" class="md-icon-button" aria-label="Open sample menu"><ng-md-icon icon="settings"></ng-md-icon></md-button><md-menu-content><md-menu-item><md-button ng-click="vm.editItem(item)"><ng-md-icon icon="mode_edit" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Edit</md-button></md-menu-item><md-menu-item><md-button ng-click="vm.deleteItem(item, $index)"><ng-md-icon icon="delete" style="top: 6px;\n    position: relative;\n    margin-right: 10px"></ng-md-icon>Delete</md-button></md-menu-item></md-menu-content></md-menu></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Name</label><input type="text" data-ng-model="item.name"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Verbose name</label><input type="text" data-ng-model="item.verbose_name"></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><label for="">Value type</label><md-select data-ng-model="item.value_type"><md-option data-ng-repeat="item in vm.valueTypes" ng-value="item.value">{{item.display_name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td" style="padding-top: 12px"><md-input-container><label for="">Content type</label><md-select data-ng-model="item.content_type"><md-option data-ng-repeat="item in vm.contentTypes" ng-value="item.key">{{item.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container data-ng-if="item.value_type != 100"><label for="">Default value</label><input type="text" data-ng-model="item.value"></md-input-container><md-button data-ng-if="item.value_type != 100" class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item, {key: \'value\'})">...</md-button><md-input-container data-ng-if="item.value_type == 100" style="margin-top: -25px"><label for="">Default value</label><md-select data-ng-model="item[vm.resolveRelation(item)]" md-on-open="vm.loadRelation(vm.resolveRelation(item))"><md-option data-ng-repeat="relationItem in vm.relationItems[vm.resolveRelation(item)]" ng-value="relationItem.id">{{relationItem.name}}</md-option></md-select></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><label for="">Input expr</label><input type="text" data-ng-model="item.value_expr"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, item, {key: \'value_expr\'})">...</md-button></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-input-container><md-checkbox data-ng-model="item.is_fill_from_context">Fill from context</md-checkbox></md-input-container></td><td data-ng-if="item.editStatus" class="edit-state-td"><md-button data-ng-click="vm.saveItem(item)">Ok</md-button></td></tr><tr class="tab-input-row"><td><md-input-container><input type="text" data-ng-model="vm.newItem.name"></md-input-container></td><td><md-input-container><input type="text" data-ng-model="vm.newItem.verbose_name"></md-input-container></td><td style="padding-top: 12px"><md-input-container><md-select data-ng-model="vm.newItem.value_type"><md-option data-ng-repeat="item in vm.valueTypes" ng-value="item.value">{{item.display_name}}</md-option></md-select></md-input-container></td><td style="padding-top: 12px"><md-input-container><md-select data-ng-model="vm.newItem.content_type"><md-option data-ng-repeat="item in vm.contentTypes" ng-value="item.key">{{item.name}}</md-option></md-select></md-input-container></td><td><md-input-container data-ng-if="vm.newItem.value_type != 100"><input type="text" data-ng-model="vm.newItem.value"></md-input-container><md-button data-ng-if="vm.newItem.value_type != 100" class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, vm.newItem, {key: \'value\'})">...</md-button><md-input-container data-ng-if="vm.newItem.value_type == 100" style="margin-top: -25px"><md-select data-ng-model="vm.newItem[vm.resolveRelation(vm.newItem)]" md-on-open="vm.loadRelation(vm.resolveRelation(vm.newItem))"><md-option data-ng-repeat="item in vm.relationItems[vm.resolveRelation(vm.newItem)]" ng-value="item.id">{{item.name}}</md-option></md-select></md-input-container></td><td><md-input-container><label for="">Input expr</label><input type="text" data-ng-model="vm.newItem.value_expr"></md-input-container><md-button class="md-raised md-primary expr-btn" data-ng-click="vm.openExpressionDialog($event, vm.newItem, {key: \'value_expr\'})">...</md-button></td><td><md-input-container><md-checkbox data-ng-model="vm.newItem.is_fill_from_context"></md-checkbox></md-input-container></td><td><md-button data-ng-click="vm.addRow()">Add</md-button></td></tr></tbody></table></div></div>')}])}();
},{}]},{},[400]);
